import WalletConnect from "@walletconnect/client";
import { PeraWalletArbitraryData, SignerTransaction } from "./util/model/peraWalletModels";
import { AlgorandChainIDs } from "./util/peraWalletTypes";
interface PeraWalletConnectOptions {
    bridge?: string;
    shouldShowSignTxnToast?: boolean;
    chainId?: AlgorandChainIDs;
    compactMode?: boolean;
}
declare class PeraWalletConnect {
    bridge: string;
    connector: WalletConnect | null;
    shouldShowSignTxnToast: boolean;
    chainId?: AlgorandChainIDs;
    compactMode?: boolean;
    constructor(options?: PeraWalletConnectOptions);
    get platform(): import("./util/peraWalletTypes").PeraWalletPlatformType;
    get isConnected(): boolean;
    connect(): Promise<string[]>;
    reconnectSession(): Promise<string[]>;
    disconnect(): Promise<void>;
    private signTransactionWithMobile;
    private signTransactionWithWeb;
    private signDataWithMobile;
    private signDataWithWeb;
    signTransaction(txGroups: SignerTransaction[][], signerAddress?: string): Promise<Uint8Array[]>;
    signData(data: PeraWalletArbitraryData[], signer: string): Promise<Uint8Array[]>;
}
export default PeraWalletConnect;
