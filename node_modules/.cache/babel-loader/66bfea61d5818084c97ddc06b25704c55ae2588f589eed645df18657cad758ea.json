{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/node_modules/algosdk/src/types/transactions/encoded.ts"],"sourcesContent":["import { Buffer } from 'buffer';\n\n/**\n * Interfaces for the encoded transaction object. Every property is labelled with its associated Transaction type property\n */\n\nexport interface EncodedAssetParams {\n  /**\n   * assetTotal\n   */\n  t: number | bigint;\n\n  /**\n   * assetDefaultFrozen\n   */\n  df: boolean;\n\n  /**\n   * assetDecimals\n   */\n  dc: number;\n\n  /**\n   * assetManager\n   */\n  m?: Buffer;\n\n  /**\n   * assetReserve\n   */\n  r?: Buffer;\n\n  /**\n   * assetFreeze\n   */\n  f?: Buffer;\n\n  /**\n   * assetClawback\n   */\n  c?: Buffer;\n\n  /**\n   * assetName\n   */\n  an?: string;\n\n  /**\n   * assetUnitName\n   */\n  un?: string;\n\n  /**\n   * assetURL\n   */\n  au?: string;\n\n  /**\n   * assetMetadataHash\n   */\n  am?: Buffer;\n}\n\nexport interface EncodedLocalStateSchema {\n  /**\n   * appLocalInts\n   */\n  nui: number;\n\n  /**\n   * appLocalByteSlices\n   */\n  nbs: number;\n}\n\nexport interface EncodedGlobalStateSchema {\n  /**\n   * appGlobalInts\n   */\n  nui: number;\n\n  /**\n   * appGlobalByteSlices\n   */\n  nbs: number;\n}\n\nexport interface EncodedBoxReference {\n  /**\n   * index of the app ID in the foreign apps array\n   */\n  i: number;\n\n  /**\n   * box name\n   */\n  n: Uint8Array;\n}\n\n/**\n * A rough structure for the encoded transaction object. Every property is labelled with its associated Transaction type property\n */\nexport interface EncodedTransaction {\n  /**\n   * fee\n   */\n  fee?: number;\n\n  /**\n   * firstRound\n   */\n  fv?: number;\n\n  /**\n   * lastRound\n   */\n  lv: number;\n\n  /**\n   * note\n   */\n  note?: Buffer;\n\n  /**\n   * from\n   */\n  snd: Buffer;\n\n  /**\n   * type\n   */\n  type: string;\n\n  /**\n   * genesisID\n   */\n  gen: string;\n\n  /**\n   * genesisHash\n   */\n  gh: Buffer;\n\n  /**\n   * lease\n   */\n  lx?: Buffer;\n\n  /**\n   * group\n   */\n  grp?: Buffer;\n\n  /**\n   * amount\n   */\n  amt?: number | bigint;\n\n  /**\n   * amount (but for asset transfers)\n   */\n  aamt?: number | bigint;\n\n  /**\n   * closeRemainderTo\n   */\n  close?: Buffer;\n\n  /**\n   * closeRemainderTo (but for asset transfers)\n   */\n  aclose?: Buffer;\n\n  /**\n   * reKeyTo\n   */\n  rekey?: Buffer;\n\n  /**\n   * to\n   */\n  rcv?: Buffer;\n\n  /**\n   * to (but for asset transfers)\n   */\n  arcv?: Buffer;\n\n  /**\n   * voteKey\n   */\n  votekey?: Buffer;\n\n  /**\n   * selectionKey\n   */\n  selkey?: Buffer;\n\n  /**\n   * stateProofKey\n   */\n  sprfkey?: Buffer;\n\n  /**\n   * voteFirst\n   */\n  votefst?: number;\n\n  /**\n   * voteLast\n   */\n  votelst?: number;\n\n  /**\n   * voteKeyDilution\n   */\n  votekd?: number;\n\n  /**\n   * nonParticipation\n   */\n  nonpart?: boolean;\n\n  /**\n   * assetIndex\n   */\n  caid?: number;\n\n  /**\n   * assetIndex (but for asset transfers)\n   */\n  xaid?: number;\n\n  /**\n   * assetIndex (but for asset freezing/unfreezing)\n   */\n  faid?: number;\n\n  /**\n   * freezeState\n   */\n  afrz?: boolean;\n\n  /**\n   * freezeAccount\n   */\n  fadd?: Buffer;\n\n  /**\n   * assetRevocationTarget\n   */\n  asnd?: Buffer;\n\n  /**\n   * See EncodedAssetParams type\n   */\n  apar?: EncodedAssetParams;\n\n  /**\n   * appIndex\n   */\n  apid?: number;\n\n  /**\n   * appOnComplete\n   */\n  apan?: number;\n\n  /**\n   * See EncodedLocalStateSchema type\n   */\n  apls?: EncodedLocalStateSchema;\n\n  /**\n   * See EncodedGlobalStateSchema type\n   */\n  apgs?: EncodedGlobalStateSchema;\n\n  /**\n   * appForeignApps\n   */\n  apfa?: number[];\n\n  /**\n   * appForeignAssets\n   */\n  apas?: number[];\n\n  /**\n   * appApprovalProgram\n   */\n  apap?: Buffer;\n\n  /**\n   * appClearProgram\n   */\n  apsu?: Buffer;\n\n  /**\n   * appArgs\n   */\n  apaa?: Buffer[];\n\n  /**\n   * appAccounts\n   */\n  apat?: Buffer[];\n\n  /**\n   * extraPages\n   */\n  apep?: number;\n\n  /**\n   * boxes\n   */\n  apbx?: EncodedBoxReference[];\n\n  /*\n   * stateProofType\n   */\n  sptype?: number | bigint;\n\n  /**\n   * stateProof\n   */\n  sp?: Buffer;\n\n  /**\n   * stateProofMessage\n   */\n  spmsg?: Buffer;\n}\n\nexport interface EncodedSubsig {\n  /**\n   *  The public key\n   */\n  pk: Uint8Array;\n\n  /**\n   * The signature provided by the public key, if any\n   */\n  s?: Uint8Array;\n}\n\n/**\n * A rough structure for the encoded multi signature transaction object.\n * Every property is labelled with its associated `MultisigMetadata` type property\n */\nexport interface EncodedMultisig {\n  /**\n   * version\n   */\n  v: number;\n\n  /**\n   * threshold\n   */\n  thr: number;\n\n  /**\n   * Subset of signatures. A threshold of `thr` signors is required.\n   */\n  subsig: EncodedSubsig[];\n}\n\nexport interface EncodedLogicSig {\n  l: Uint8Array;\n  arg?: Uint8Array[];\n  sig?: Uint8Array;\n  msig?: EncodedMultisig;\n}\n\nexport interface EncodedLogicSigAccount {\n  lsig: EncodedLogicSig;\n  sigkey?: Uint8Array;\n}\n\n/**\n * A structure for an encoded signed transaction object\n */\nexport interface EncodedSignedTransaction {\n  /**\n   * Transaction signature\n   */\n  sig?: Buffer;\n\n  /**\n   * The transaction that was signed\n   */\n  txn: EncodedTransaction;\n\n  /**\n   * Multisig structure\n   */\n  msig?: EncodedMultisig;\n\n  /**\n   * Logic signature\n   */\n  lsig?: EncodedLogicSig;\n\n  /**\n   * The signer, if signing with a different key than the Transaction type `from` property indicates\n   */\n  sgnr?: Buffer;\n}\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}