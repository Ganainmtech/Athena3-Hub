{"ast":null,"code":"/**\n * NOTICE: This file was generated. Editing this file manually is not recommended.\n */\n/* eslint-disable no-use-before-define */\nimport { Buffer } from 'buffer';\nimport BaseModel from '../../basemodel';\n/**\n * Account information at a given round.\n * Definition:\n * data/basics/userBalance.go : AccountData\n */\nexport class Account extends BaseModel {\n  /**\n   * Creates a new `Account` object.\n   * @param address - the account public key\n   * @param amount - (algo) total number of MicroAlgos in the account\n   * @param amountWithoutPendingRewards - specifies the amount of MicroAlgos in the account, without the pending rewards.\n   * @param pendingRewards - amount of MicroAlgos of pending rewards in this account.\n   * @param rewards - (ern) total rewards of MicroAlgos the account has received, including pending\n   * rewards.\n   * @param round - The round for which this information is relevant.\n   * @param status - (onl) delegation status of the account's MicroAlgos\n   * * Offline - indicates that the associated account is delegated.\n   * * Online - indicates that the associated account used as part of the delegation\n   * pool.\n   * * NotParticipating - indicates that the associated account is neither a\n   * delegator nor a delegate.\n   * @param totalAppsOptedIn - The count of all applications that have been opted in, equivalent to the count\n   * of application local data (AppLocalState objects) stored in this account.\n   * @param totalAssetsOptedIn - The count of all assets that have been opted in, equivalent to the count of\n   * AssetHolding objects held by this account.\n   * @param totalBoxBytes - For app-accounts only. The total number of bytes allocated for the keys and\n   * values of boxes which belong to the associated application.\n   * @param totalBoxes - For app-accounts only. The total number of boxes which belong to the associated\n   * application.\n   * @param totalCreatedApps - The count of all apps (AppParams objects) created by this account.\n   * @param totalCreatedAssets - The count of all assets (AssetParams objects) created by this account.\n   * @param appsLocalState - (appl) applications local data stored in this account.\n   * Note the raw object uses `map[int] -> AppLocalState` for this type.\n   * @param appsTotalExtraPages - (teap) the sum of all extra application program pages for this account.\n   * @param appsTotalSchema - (tsch) stores the sum of all of the local schemas and global schemas in this\n   * account.\n   * Note: the raw account uses `StateSchema` for this type.\n   * @param assets - (asset) assets held by this account.\n   * Note the raw object uses `map[int] -> AssetHolding` for this type.\n   * @param authAddr - (spend) the address against which signing should be checked. If empty, the\n   * address of the current account is used. This field can be updated in any\n   * transaction by setting the RekeyTo field.\n   * @param closedAtRound - Round during which this account was most recently closed.\n   * @param createdApps - (appp) parameters of applications created by this account including app global\n   * data.\n   * Note: the raw account uses `map[int] -> AppParams` for this type.\n   * @param createdAssets - (apar) parameters of assets created by this account.\n   * Note: the raw account uses `map[int] -> Asset` for this type.\n   * @param createdAtRound - Round during which this account first appeared in a transaction.\n   * @param deleted - Whether or not this account is currently closed.\n   * @param participation - AccountParticipation describes the parameters used by this account in consensus\n   * protocol.\n   * @param rewardBase - (ebase) used as part of the rewards computation. Only applicable to accounts\n   * which are participating.\n   * @param sigType - Indicates what type of signature is used by this account, must be one of:\n   * * sig\n   * * msig\n   * * lsig\n   * * or null if unknown\n   */\n  constructor({\n    address,\n    amount,\n    amountWithoutPendingRewards,\n    pendingRewards,\n    rewards,\n    round,\n    status,\n    totalAppsOptedIn,\n    totalAssetsOptedIn,\n    totalBoxBytes,\n    totalBoxes,\n    totalCreatedApps,\n    totalCreatedAssets,\n    appsLocalState,\n    appsTotalExtraPages,\n    appsTotalSchema,\n    assets,\n    authAddr,\n    closedAtRound,\n    createdApps,\n    createdAssets,\n    createdAtRound,\n    deleted,\n    participation,\n    rewardBase,\n    sigType\n  }) {\n    super();\n    this.address = address;\n    this.amount = amount;\n    this.amountWithoutPendingRewards = amountWithoutPendingRewards;\n    this.pendingRewards = pendingRewards;\n    this.rewards = rewards;\n    this.round = round;\n    this.status = status;\n    this.totalAppsOptedIn = totalAppsOptedIn;\n    this.totalAssetsOptedIn = totalAssetsOptedIn;\n    this.totalBoxBytes = totalBoxBytes;\n    this.totalBoxes = totalBoxes;\n    this.totalCreatedApps = totalCreatedApps;\n    this.totalCreatedAssets = totalCreatedAssets;\n    this.appsLocalState = appsLocalState;\n    this.appsTotalExtraPages = appsTotalExtraPages;\n    this.appsTotalSchema = appsTotalSchema;\n    this.assets = assets;\n    this.authAddr = authAddr;\n    this.closedAtRound = closedAtRound;\n    this.createdApps = createdApps;\n    this.createdAssets = createdAssets;\n    this.createdAtRound = createdAtRound;\n    this.deleted = deleted;\n    this.participation = participation;\n    this.rewardBase = rewardBase;\n    this.sigType = sigType;\n    this.attribute_map = {\n      address: 'address',\n      amount: 'amount',\n      amountWithoutPendingRewards: 'amount-without-pending-rewards',\n      pendingRewards: 'pending-rewards',\n      rewards: 'rewards',\n      round: 'round',\n      status: 'status',\n      totalAppsOptedIn: 'total-apps-opted-in',\n      totalAssetsOptedIn: 'total-assets-opted-in',\n      totalBoxBytes: 'total-box-bytes',\n      totalBoxes: 'total-boxes',\n      totalCreatedApps: 'total-created-apps',\n      totalCreatedAssets: 'total-created-assets',\n      appsLocalState: 'apps-local-state',\n      appsTotalExtraPages: 'apps-total-extra-pages',\n      appsTotalSchema: 'apps-total-schema',\n      assets: 'assets',\n      authAddr: 'auth-addr',\n      closedAtRound: 'closed-at-round',\n      createdApps: 'created-apps',\n      createdAssets: 'created-assets',\n      createdAtRound: 'created-at-round',\n      deleted: 'deleted',\n      participation: 'participation',\n      rewardBase: 'reward-base',\n      sigType: 'sig-type'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['address'] === 'undefined') throw new Error(`Response is missing required field 'address': ${data}`);\n    if (typeof data['amount'] === 'undefined') throw new Error(`Response is missing required field 'amount': ${data}`);\n    if (typeof data['amount-without-pending-rewards'] === 'undefined') throw new Error(`Response is missing required field 'amount-without-pending-rewards': ${data}`);\n    if (typeof data['pending-rewards'] === 'undefined') throw new Error(`Response is missing required field 'pending-rewards': ${data}`);\n    if (typeof data['rewards'] === 'undefined') throw new Error(`Response is missing required field 'rewards': ${data}`);\n    if (typeof data['round'] === 'undefined') throw new Error(`Response is missing required field 'round': ${data}`);\n    if (typeof data['status'] === 'undefined') throw new Error(`Response is missing required field 'status': ${data}`);\n    if (typeof data['total-apps-opted-in'] === 'undefined') throw new Error(`Response is missing required field 'total-apps-opted-in': ${data}`);\n    if (typeof data['total-assets-opted-in'] === 'undefined') throw new Error(`Response is missing required field 'total-assets-opted-in': ${data}`);\n    if (typeof data['total-box-bytes'] === 'undefined') throw new Error(`Response is missing required field 'total-box-bytes': ${data}`);\n    if (typeof data['total-boxes'] === 'undefined') throw new Error(`Response is missing required field 'total-boxes': ${data}`);\n    if (typeof data['total-created-apps'] === 'undefined') throw new Error(`Response is missing required field 'total-created-apps': ${data}`);\n    if (typeof data['total-created-assets'] === 'undefined') throw new Error(`Response is missing required field 'total-created-assets': ${data}`);\n    return new Account({\n      address: data['address'],\n      amount: data['amount'],\n      amountWithoutPendingRewards: data['amount-without-pending-rewards'],\n      pendingRewards: data['pending-rewards'],\n      rewards: data['rewards'],\n      round: data['round'],\n      status: data['status'],\n      totalAppsOptedIn: data['total-apps-opted-in'],\n      totalAssetsOptedIn: data['total-assets-opted-in'],\n      totalBoxBytes: data['total-box-bytes'],\n      totalBoxes: data['total-boxes'],\n      totalCreatedApps: data['total-created-apps'],\n      totalCreatedAssets: data['total-created-assets'],\n      appsLocalState: typeof data['apps-local-state'] !== 'undefined' ? data['apps-local-state'].map(ApplicationLocalState.from_obj_for_encoding) : undefined,\n      appsTotalExtraPages: data['apps-total-extra-pages'],\n      appsTotalSchema: typeof data['apps-total-schema'] !== 'undefined' ? ApplicationStateSchema.from_obj_for_encoding(data['apps-total-schema']) : undefined,\n      assets: typeof data['assets'] !== 'undefined' ? data['assets'].map(AssetHolding.from_obj_for_encoding) : undefined,\n      authAddr: data['auth-addr'],\n      closedAtRound: data['closed-at-round'],\n      createdApps: typeof data['created-apps'] !== 'undefined' ? data['created-apps'].map(Application.from_obj_for_encoding) : undefined,\n      createdAssets: typeof data['created-assets'] !== 'undefined' ? data['created-assets'].map(Asset.from_obj_for_encoding) : undefined,\n      createdAtRound: data['created-at-round'],\n      deleted: data['deleted'],\n      participation: typeof data['participation'] !== 'undefined' ? AccountParticipation.from_obj_for_encoding(data['participation']) : undefined,\n      rewardBase: data['reward-base'],\n      sigType: data['sig-type']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * AccountParticipation describes the parameters used by this account in consensus\n * protocol.\n */\nexport class AccountParticipation extends BaseModel {\n  /**\n   * Creates a new `AccountParticipation` object.\n   * @param selectionParticipationKey - (sel) Selection public key (if any) currently registered for this round.\n   * @param voteFirstValid - (voteFst) First round for which this participation is valid.\n   * @param voteKeyDilution - (voteKD) Number of subkeys in each batch of participation keys.\n   * @param voteLastValid - (voteLst) Last round for which this participation is valid.\n   * @param voteParticipationKey - (vote) root participation public key (if any) currently registered for this\n   * round.\n   * @param stateProofKey - (stprf) Root of the state proof key (if any)\n   */\n  constructor({\n    selectionParticipationKey,\n    voteFirstValid,\n    voteKeyDilution,\n    voteLastValid,\n    voteParticipationKey,\n    stateProofKey\n  }) {\n    super();\n    this.selectionParticipationKey = typeof selectionParticipationKey === 'string' ? new Uint8Array(Buffer.from(selectionParticipationKey, 'base64')) : selectionParticipationKey;\n    this.voteFirstValid = voteFirstValid;\n    this.voteKeyDilution = voteKeyDilution;\n    this.voteLastValid = voteLastValid;\n    this.voteParticipationKey = typeof voteParticipationKey === 'string' ? new Uint8Array(Buffer.from(voteParticipationKey, 'base64')) : voteParticipationKey;\n    this.stateProofKey = typeof stateProofKey === 'string' ? new Uint8Array(Buffer.from(stateProofKey, 'base64')) : stateProofKey;\n    this.attribute_map = {\n      selectionParticipationKey: 'selection-participation-key',\n      voteFirstValid: 'vote-first-valid',\n      voteKeyDilution: 'vote-key-dilution',\n      voteLastValid: 'vote-last-valid',\n      voteParticipationKey: 'vote-participation-key',\n      stateProofKey: 'state-proof-key'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['selection-participation-key'] === 'undefined') throw new Error(`Response is missing required field 'selection-participation-key': ${data}`);\n    if (typeof data['vote-first-valid'] === 'undefined') throw new Error(`Response is missing required field 'vote-first-valid': ${data}`);\n    if (typeof data['vote-key-dilution'] === 'undefined') throw new Error(`Response is missing required field 'vote-key-dilution': ${data}`);\n    if (typeof data['vote-last-valid'] === 'undefined') throw new Error(`Response is missing required field 'vote-last-valid': ${data}`);\n    if (typeof data['vote-participation-key'] === 'undefined') throw new Error(`Response is missing required field 'vote-participation-key': ${data}`);\n    return new AccountParticipation({\n      selectionParticipationKey: data['selection-participation-key'],\n      voteFirstValid: data['vote-first-valid'],\n      voteKeyDilution: data['vote-key-dilution'],\n      voteLastValid: data['vote-last-valid'],\n      voteParticipationKey: data['vote-participation-key'],\n      stateProofKey: data['state-proof-key']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n *\n */\nexport class AccountResponse extends BaseModel {\n  /**\n   * Creates a new `AccountResponse` object.\n   * @param account - Account information at a given round.\n   * Definition:\n   * data/basics/userBalance.go : AccountData\n   * @param currentRound - Round at which the results were computed.\n   */\n  constructor({\n    account,\n    currentRound\n  }) {\n    super();\n    this.account = account;\n    this.currentRound = currentRound;\n    this.attribute_map = {\n      account: 'account',\n      currentRound: 'current-round'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['account'] === 'undefined') throw new Error(`Response is missing required field 'account': ${data}`);\n    if (typeof data['current-round'] === 'undefined') throw new Error(`Response is missing required field 'current-round': ${data}`);\n    return new AccountResponse({\n      account: Account.from_obj_for_encoding(data['account']),\n      currentRound: data['current-round']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Application state delta.\n */\nexport class AccountStateDelta extends BaseModel {\n  /**\n   * Creates a new `AccountStateDelta` object.\n   * @param address -\n   * @param delta - Application state delta.\n   */\n  constructor({\n    address,\n    delta\n  }) {\n    super();\n    this.address = address;\n    this.delta = delta;\n    this.attribute_map = {\n      address: 'address',\n      delta: 'delta'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['address'] === 'undefined') throw new Error(`Response is missing required field 'address': ${data}`);\n    if (!Array.isArray(data['delta'])) throw new Error(`Response is missing required array field 'delta': ${data}`);\n    return new AccountStateDelta({\n      address: data['address'],\n      delta: data['delta'].map(EvalDeltaKeyValue.from_obj_for_encoding)\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n *\n */\nexport class AccountsResponse extends BaseModel {\n  /**\n   * Creates a new `AccountsResponse` object.\n   * @param accounts -\n   * @param currentRound - Round at which the results were computed.\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  constructor({\n    accounts,\n    currentRound,\n    nextToken\n  }) {\n    super();\n    this.accounts = accounts;\n    this.currentRound = currentRound;\n    this.nextToken = nextToken;\n    this.attribute_map = {\n      accounts: 'accounts',\n      currentRound: 'current-round',\n      nextToken: 'next-token'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['accounts'])) throw new Error(`Response is missing required array field 'accounts': ${data}`);\n    if (typeof data['current-round'] === 'undefined') throw new Error(`Response is missing required field 'current-round': ${data}`);\n    return new AccountsResponse({\n      accounts: data['accounts'].map(Account.from_obj_for_encoding),\n      currentRound: data['current-round'],\n      nextToken: data['next-token']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Application index and its parameters\n */\nexport class Application extends BaseModel {\n  /**\n   * Creates a new `Application` object.\n   * @param id - (appidx) application index.\n   * @param params - (appparams) application parameters.\n   * @param createdAtRound - Round when this application was created.\n   * @param deleted - Whether or not this application is currently deleted.\n   * @param deletedAtRound - Round when this application was deleted.\n   */\n  constructor({\n    id,\n    params,\n    createdAtRound,\n    deleted,\n    deletedAtRound\n  }) {\n    super();\n    this.id = id;\n    this.params = params;\n    this.createdAtRound = createdAtRound;\n    this.deleted = deleted;\n    this.deletedAtRound = deletedAtRound;\n    this.attribute_map = {\n      id: 'id',\n      params: 'params',\n      createdAtRound: 'created-at-round',\n      deleted: 'deleted',\n      deletedAtRound: 'deleted-at-round'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['id'] === 'undefined') throw new Error(`Response is missing required field 'id': ${data}`);\n    if (typeof data['params'] === 'undefined') throw new Error(`Response is missing required field 'params': ${data}`);\n    return new Application({\n      id: data['id'],\n      params: ApplicationParams.from_obj_for_encoding(data['params']),\n      createdAtRound: data['created-at-round'],\n      deleted: data['deleted'],\n      deletedAtRound: data['deleted-at-round']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Stores local state associated with an application.\n */\nexport class ApplicationLocalState extends BaseModel {\n  /**\n   * Creates a new `ApplicationLocalState` object.\n   * @param id - The application which this local state is for.\n   * @param schema - (hsch) schema.\n   * @param closedOutAtRound - Round when account closed out of the application.\n   * @param deleted - Whether or not the application local state is currently deleted from its\n   * account.\n   * @param keyValue - (tkv) storage.\n   * @param optedInAtRound - Round when the account opted into the application.\n   */\n  constructor({\n    id,\n    schema,\n    closedOutAtRound,\n    deleted,\n    keyValue,\n    optedInAtRound\n  }) {\n    super();\n    this.id = id;\n    this.schema = schema;\n    this.closedOutAtRound = closedOutAtRound;\n    this.deleted = deleted;\n    this.keyValue = keyValue;\n    this.optedInAtRound = optedInAtRound;\n    this.attribute_map = {\n      id: 'id',\n      schema: 'schema',\n      closedOutAtRound: 'closed-out-at-round',\n      deleted: 'deleted',\n      keyValue: 'key-value',\n      optedInAtRound: 'opted-in-at-round'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['id'] === 'undefined') throw new Error(`Response is missing required field 'id': ${data}`);\n    if (typeof data['schema'] === 'undefined') throw new Error(`Response is missing required field 'schema': ${data}`);\n    return new ApplicationLocalState({\n      id: data['id'],\n      schema: ApplicationStateSchema.from_obj_for_encoding(data['schema']),\n      closedOutAtRound: data['closed-out-at-round'],\n      deleted: data['deleted'],\n      keyValue: typeof data['key-value'] !== 'undefined' ? data['key-value'].map(TealKeyValue.from_obj_for_encoding) : undefined,\n      optedInAtRound: data['opted-in-at-round']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n *\n */\nexport class ApplicationLocalStatesResponse extends BaseModel {\n  /**\n   * Creates a new `ApplicationLocalStatesResponse` object.\n   * @param appsLocalStates -\n   * @param currentRound - Round at which the results were computed.\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  constructor({\n    appsLocalStates,\n    currentRound,\n    nextToken\n  }) {\n    super();\n    this.appsLocalStates = appsLocalStates;\n    this.currentRound = currentRound;\n    this.nextToken = nextToken;\n    this.attribute_map = {\n      appsLocalStates: 'apps-local-states',\n      currentRound: 'current-round',\n      nextToken: 'next-token'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['apps-local-states'])) throw new Error(`Response is missing required array field 'apps-local-states': ${data}`);\n    if (typeof data['current-round'] === 'undefined') throw new Error(`Response is missing required field 'current-round': ${data}`);\n    return new ApplicationLocalStatesResponse({\n      appsLocalStates: data['apps-local-states'].map(ApplicationLocalState.from_obj_for_encoding),\n      currentRound: data['current-round'],\n      nextToken: data['next-token']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Stores the global information associated with an application.\n */\nexport class ApplicationLogData extends BaseModel {\n  /**\n   * Creates a new `ApplicationLogData` object.\n   * @param logs - (lg) Logs for the application being executed by the transaction.\n   * @param txid - Transaction ID\n   */\n  constructor({\n    logs,\n    txid\n  }) {\n    super();\n    this.logs = logs;\n    this.txid = txid;\n    this.attribute_map = {\n      logs: 'logs',\n      txid: 'txid'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['logs'])) throw new Error(`Response is missing required array field 'logs': ${data}`);\n    if (typeof data['txid'] === 'undefined') throw new Error(`Response is missing required field 'txid': ${data}`);\n    return new ApplicationLogData({\n      logs: data['logs'],\n      txid: data['txid']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n *\n */\nexport class ApplicationLogsResponse extends BaseModel {\n  /**\n   * Creates a new `ApplicationLogsResponse` object.\n   * @param applicationId - (appidx) application index.\n   * @param currentRound - Round at which the results were computed.\n   * @param logData -\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  constructor({\n    applicationId,\n    currentRound,\n    logData,\n    nextToken\n  }) {\n    super();\n    this.applicationId = applicationId;\n    this.currentRound = currentRound;\n    this.logData = logData;\n    this.nextToken = nextToken;\n    this.attribute_map = {\n      applicationId: 'application-id',\n      currentRound: 'current-round',\n      logData: 'log-data',\n      nextToken: 'next-token'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['application-id'] === 'undefined') throw new Error(`Response is missing required field 'application-id': ${data}`);\n    if (typeof data['current-round'] === 'undefined') throw new Error(`Response is missing required field 'current-round': ${data}`);\n    return new ApplicationLogsResponse({\n      applicationId: data['application-id'],\n      currentRound: data['current-round'],\n      logData: typeof data['log-data'] !== 'undefined' ? data['log-data'].map(ApplicationLogData.from_obj_for_encoding) : undefined,\n      nextToken: data['next-token']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Stores the global information associated with an application.\n */\nexport class ApplicationParams extends BaseModel {\n  /**\n   * Creates a new `ApplicationParams` object.\n   * @param approvalProgram - (approv) approval program.\n   * @param clearStateProgram - (clearp) approval program.\n   * @param creator - The address that created this application. This is the address where the\n   * parameters and global state for this application can be found.\n   * @param extraProgramPages - (epp) the amount of extra program pages available to this app.\n   * @param globalState - [\\gs) global schema\n   * @param globalStateSchema - [\\gsch) global schema\n   * @param localStateSchema - [\\lsch) local schema\n   */\n  constructor({\n    approvalProgram,\n    clearStateProgram,\n    creator,\n    extraProgramPages,\n    globalState,\n    globalStateSchema,\n    localStateSchema\n  }) {\n    super();\n    this.approvalProgram = typeof approvalProgram === 'string' ? new Uint8Array(Buffer.from(approvalProgram, 'base64')) : approvalProgram;\n    this.clearStateProgram = typeof clearStateProgram === 'string' ? new Uint8Array(Buffer.from(clearStateProgram, 'base64')) : clearStateProgram;\n    this.creator = creator;\n    this.extraProgramPages = extraProgramPages;\n    this.globalState = globalState;\n    this.globalStateSchema = globalStateSchema;\n    this.localStateSchema = localStateSchema;\n    this.attribute_map = {\n      approvalProgram: 'approval-program',\n      clearStateProgram: 'clear-state-program',\n      creator: 'creator',\n      extraProgramPages: 'extra-program-pages',\n      globalState: 'global-state',\n      globalStateSchema: 'global-state-schema',\n      localStateSchema: 'local-state-schema'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['approval-program'] === 'undefined') throw new Error(`Response is missing required field 'approval-program': ${data}`);\n    if (typeof data['clear-state-program'] === 'undefined') throw new Error(`Response is missing required field 'clear-state-program': ${data}`);\n    return new ApplicationParams({\n      approvalProgram: data['approval-program'],\n      clearStateProgram: data['clear-state-program'],\n      creator: data['creator'],\n      extraProgramPages: data['extra-program-pages'],\n      globalState: typeof data['global-state'] !== 'undefined' ? data['global-state'].map(TealKeyValue.from_obj_for_encoding) : undefined,\n      globalStateSchema: typeof data['global-state-schema'] !== 'undefined' ? ApplicationStateSchema.from_obj_for_encoding(data['global-state-schema']) : undefined,\n      localStateSchema: typeof data['local-state-schema'] !== 'undefined' ? ApplicationStateSchema.from_obj_for_encoding(data['local-state-schema']) : undefined\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n *\n */\nexport class ApplicationResponse extends BaseModel {\n  /**\n   * Creates a new `ApplicationResponse` object.\n   * @param currentRound - Round at which the results were computed.\n   * @param application - Application index and its parameters\n   */\n  constructor({\n    currentRound,\n    application\n  }) {\n    super();\n    this.currentRound = currentRound;\n    this.application = application;\n    this.attribute_map = {\n      currentRound: 'current-round',\n      application: 'application'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['current-round'] === 'undefined') throw new Error(`Response is missing required field 'current-round': ${data}`);\n    return new ApplicationResponse({\n      currentRound: data['current-round'],\n      application: typeof data['application'] !== 'undefined' ? Application.from_obj_for_encoding(data['application']) : undefined\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Specifies maximums on the number of each type that may be stored.\n */\nexport class ApplicationStateSchema extends BaseModel {\n  /**\n   * Creates a new `ApplicationStateSchema` object.\n   * @param numByteSlice - (nbs) num of byte slices.\n   * @param numUint - (nui) num of uints.\n   */\n  constructor({\n    numByteSlice,\n    numUint\n  }) {\n    super();\n    this.numByteSlice = numByteSlice;\n    this.numUint = numUint;\n    this.attribute_map = {\n      numByteSlice: 'num-byte-slice',\n      numUint: 'num-uint'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['num-byte-slice'] === 'undefined') throw new Error(`Response is missing required field 'num-byte-slice': ${data}`);\n    if (typeof data['num-uint'] === 'undefined') throw new Error(`Response is missing required field 'num-uint': ${data}`);\n    return new ApplicationStateSchema({\n      numByteSlice: data['num-byte-slice'],\n      numUint: data['num-uint']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n *\n */\nexport class ApplicationsResponse extends BaseModel {\n  /**\n   * Creates a new `ApplicationsResponse` object.\n   * @param applications -\n   * @param currentRound - Round at which the results were computed.\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  constructor({\n    applications,\n    currentRound,\n    nextToken\n  }) {\n    super();\n    this.applications = applications;\n    this.currentRound = currentRound;\n    this.nextToken = nextToken;\n    this.attribute_map = {\n      applications: 'applications',\n      currentRound: 'current-round',\n      nextToken: 'next-token'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['applications'])) throw new Error(`Response is missing required array field 'applications': ${data}`);\n    if (typeof data['current-round'] === 'undefined') throw new Error(`Response is missing required field 'current-round': ${data}`);\n    return new ApplicationsResponse({\n      applications: data['applications'].map(Application.from_obj_for_encoding),\n      currentRound: data['current-round'],\n      nextToken: data['next-token']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Specifies both the unique identifier and the parameters for an asset\n */\nexport class Asset extends BaseModel {\n  /**\n   * Creates a new `Asset` object.\n   * @param index - unique asset identifier\n   * @param params - AssetParams specifies the parameters for an asset.\n   * (apar) when part of an AssetConfig transaction.\n   * Definition:\n   * data/transactions/asset.go : AssetParams\n   * @param createdAtRound - Round during which this asset was created.\n   * @param deleted - Whether or not this asset is currently deleted.\n   * @param destroyedAtRound - Round during which this asset was destroyed.\n   */\n  constructor({\n    index,\n    params,\n    createdAtRound,\n    deleted,\n    destroyedAtRound\n  }) {\n    super();\n    this.index = index;\n    this.params = params;\n    this.createdAtRound = createdAtRound;\n    this.deleted = deleted;\n    this.destroyedAtRound = destroyedAtRound;\n    this.attribute_map = {\n      index: 'index',\n      params: 'params',\n      createdAtRound: 'created-at-round',\n      deleted: 'deleted',\n      destroyedAtRound: 'destroyed-at-round'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['index'] === 'undefined') throw new Error(`Response is missing required field 'index': ${data}`);\n    if (typeof data['params'] === 'undefined') throw new Error(`Response is missing required field 'params': ${data}`);\n    return new Asset({\n      index: data['index'],\n      params: AssetParams.from_obj_for_encoding(data['params']),\n      createdAtRound: data['created-at-round'],\n      deleted: data['deleted'],\n      destroyedAtRound: data['destroyed-at-round']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n *\n */\nexport class AssetBalancesResponse extends BaseModel {\n  /**\n   * Creates a new `AssetBalancesResponse` object.\n   * @param balances -\n   * @param currentRound - Round at which the results were computed.\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  constructor({\n    balances,\n    currentRound,\n    nextToken\n  }) {\n    super();\n    this.balances = balances;\n    this.currentRound = currentRound;\n    this.nextToken = nextToken;\n    this.attribute_map = {\n      balances: 'balances',\n      currentRound: 'current-round',\n      nextToken: 'next-token'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['balances'])) throw new Error(`Response is missing required array field 'balances': ${data}`);\n    if (typeof data['current-round'] === 'undefined') throw new Error(`Response is missing required field 'current-round': ${data}`);\n    return new AssetBalancesResponse({\n      balances: data['balances'].map(MiniAssetHolding.from_obj_for_encoding),\n      currentRound: data['current-round'],\n      nextToken: data['next-token']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Describes an asset held by an account.\n * Definition:\n * data/basics/userBalance.go : AssetHolding\n */\nexport class AssetHolding extends BaseModel {\n  /**\n   * Creates a new `AssetHolding` object.\n   * @param amount - (a) number of units held.\n   * @param assetId - Asset ID of the holding.\n   * @param isFrozen - (f) whether or not the holding is frozen.\n   * @param deleted - Whether or not the asset holding is currently deleted from its account.\n   * @param optedInAtRound - Round during which the account opted into this asset holding.\n   * @param optedOutAtRound - Round during which the account opted out of this asset holding.\n   */\n  constructor({\n    amount,\n    assetId,\n    isFrozen,\n    deleted,\n    optedInAtRound,\n    optedOutAtRound\n  }) {\n    super();\n    this.amount = amount;\n    this.assetId = assetId;\n    this.isFrozen = isFrozen;\n    this.deleted = deleted;\n    this.optedInAtRound = optedInAtRound;\n    this.optedOutAtRound = optedOutAtRound;\n    this.attribute_map = {\n      amount: 'amount',\n      assetId: 'asset-id',\n      isFrozen: 'is-frozen',\n      deleted: 'deleted',\n      optedInAtRound: 'opted-in-at-round',\n      optedOutAtRound: 'opted-out-at-round'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['amount'] === 'undefined') throw new Error(`Response is missing required field 'amount': ${data}`);\n    if (typeof data['asset-id'] === 'undefined') throw new Error(`Response is missing required field 'asset-id': ${data}`);\n    if (typeof data['is-frozen'] === 'undefined') throw new Error(`Response is missing required field 'is-frozen': ${data}`);\n    return new AssetHolding({\n      amount: data['amount'],\n      assetId: data['asset-id'],\n      isFrozen: data['is-frozen'],\n      deleted: data['deleted'],\n      optedInAtRound: data['opted-in-at-round'],\n      optedOutAtRound: data['opted-out-at-round']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n *\n */\nexport class AssetHoldingsResponse extends BaseModel {\n  /**\n   * Creates a new `AssetHoldingsResponse` object.\n   * @param assets -\n   * @param currentRound - Round at which the results were computed.\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  constructor({\n    assets,\n    currentRound,\n    nextToken\n  }) {\n    super();\n    this.assets = assets;\n    this.currentRound = currentRound;\n    this.nextToken = nextToken;\n    this.attribute_map = {\n      assets: 'assets',\n      currentRound: 'current-round',\n      nextToken: 'next-token'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['assets'])) throw new Error(`Response is missing required array field 'assets': ${data}`);\n    if (typeof data['current-round'] === 'undefined') throw new Error(`Response is missing required field 'current-round': ${data}`);\n    return new AssetHoldingsResponse({\n      assets: data['assets'].map(AssetHolding.from_obj_for_encoding),\n      currentRound: data['current-round'],\n      nextToken: data['next-token']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * AssetParams specifies the parameters for an asset.\n * (apar) when part of an AssetConfig transaction.\n * Definition:\n * data/transactions/asset.go : AssetParams\n */\nexport class AssetParams extends BaseModel {\n  /**\n   * Creates a new `AssetParams` object.\n   * @param creator - The address that created this asset. This is the address where the parameters\n   * for this asset can be found, and also the address where unwanted asset units can\n   * be sent in the worst case.\n   * @param decimals - (dc) The number of digits to use after the decimal point when displaying this\n   * asset. If 0, the asset is not divisible. If 1, the base unit of the asset is in\n   * tenths. If 2, the base unit of the asset is in hundredths, and so on. This value\n   * must be between 0 and 19 (inclusive).\n   * @param total - (t) The total number of units of this asset.\n   * @param clawback - (c) Address of account used to clawback holdings of this asset. If empty,\n   * clawback is not permitted.\n   * @param defaultFrozen - (df) Whether holdings of this asset are frozen by default.\n   * @param freeze - (f) Address of account used to freeze holdings of this asset. If empty, freezing\n   * is not permitted.\n   * @param manager - (m) Address of account used to manage the keys of this asset and to destroy it.\n   * @param metadataHash - (am) A commitment to some unspecified asset metadata. The format of this\n   * metadata is up to the application.\n   * @param name - (an) Name of this asset, as supplied by the creator. Included only when the\n   * asset name is composed of printable utf-8 characters.\n   * @param nameB64 - Base64 encoded name of this asset, as supplied by the creator.\n   * @param reserve - (r) Address of account holding reserve (non-minted) units of this asset.\n   * @param unitName - (un) Name of a unit of this asset, as supplied by the creator. Included only\n   * when the name of a unit of this asset is composed of printable utf-8 characters.\n   * @param unitNameB64 - Base64 encoded name of a unit of this asset, as supplied by the creator.\n   * @param url - (au) URL where more information about the asset can be retrieved. Included only\n   * when the URL is composed of printable utf-8 characters.\n   * @param urlB64 - Base64 encoded URL where more information about the asset can be retrieved.\n   */\n  constructor({\n    creator,\n    decimals,\n    total,\n    clawback,\n    defaultFrozen,\n    freeze,\n    manager,\n    metadataHash,\n    name,\n    nameB64,\n    reserve,\n    unitName,\n    unitNameB64,\n    url,\n    urlB64\n  }) {\n    super();\n    this.creator = creator;\n    this.decimals = decimals;\n    this.total = total;\n    this.clawback = clawback;\n    this.defaultFrozen = defaultFrozen;\n    this.freeze = freeze;\n    this.manager = manager;\n    this.metadataHash = typeof metadataHash === 'string' ? new Uint8Array(Buffer.from(metadataHash, 'base64')) : metadataHash;\n    this.name = name;\n    this.nameB64 = typeof nameB64 === 'string' ? new Uint8Array(Buffer.from(nameB64, 'base64')) : nameB64;\n    this.reserve = reserve;\n    this.unitName = unitName;\n    this.unitNameB64 = typeof unitNameB64 === 'string' ? new Uint8Array(Buffer.from(unitNameB64, 'base64')) : unitNameB64;\n    this.url = url;\n    this.urlB64 = typeof urlB64 === 'string' ? new Uint8Array(Buffer.from(urlB64, 'base64')) : urlB64;\n    this.attribute_map = {\n      creator: 'creator',\n      decimals: 'decimals',\n      total: 'total',\n      clawback: 'clawback',\n      defaultFrozen: 'default-frozen',\n      freeze: 'freeze',\n      manager: 'manager',\n      metadataHash: 'metadata-hash',\n      name: 'name',\n      nameB64: 'name-b64',\n      reserve: 'reserve',\n      unitName: 'unit-name',\n      unitNameB64: 'unit-name-b64',\n      url: 'url',\n      urlB64: 'url-b64'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['creator'] === 'undefined') throw new Error(`Response is missing required field 'creator': ${data}`);\n    if (typeof data['decimals'] === 'undefined') throw new Error(`Response is missing required field 'decimals': ${data}`);\n    if (typeof data['total'] === 'undefined') throw new Error(`Response is missing required field 'total': ${data}`);\n    return new AssetParams({\n      creator: data['creator'],\n      decimals: data['decimals'],\n      total: data['total'],\n      clawback: data['clawback'],\n      defaultFrozen: data['default-frozen'],\n      freeze: data['freeze'],\n      manager: data['manager'],\n      metadataHash: data['metadata-hash'],\n      name: data['name'],\n      nameB64: data['name-b64'],\n      reserve: data['reserve'],\n      unitName: data['unit-name'],\n      unitNameB64: data['unit-name-b64'],\n      url: data['url'],\n      urlB64: data['url-b64']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n *\n */\nexport class AssetResponse extends BaseModel {\n  /**\n   * Creates a new `AssetResponse` object.\n   * @param asset - Specifies both the unique identifier and the parameters for an asset\n   * @param currentRound - Round at which the results were computed.\n   */\n  constructor({\n    asset,\n    currentRound\n  }) {\n    super();\n    this.asset = asset;\n    this.currentRound = currentRound;\n    this.attribute_map = {\n      asset: 'asset',\n      currentRound: 'current-round'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['asset'] === 'undefined') throw new Error(`Response is missing required field 'asset': ${data}`);\n    if (typeof data['current-round'] === 'undefined') throw new Error(`Response is missing required field 'current-round': ${data}`);\n    return new AssetResponse({\n      asset: Asset.from_obj_for_encoding(data['asset']),\n      currentRound: data['current-round']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n *\n */\nexport class AssetsResponse extends BaseModel {\n  /**\n   * Creates a new `AssetsResponse` object.\n   * @param assets -\n   * @param currentRound - Round at which the results were computed.\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  constructor({\n    assets,\n    currentRound,\n    nextToken\n  }) {\n    super();\n    this.assets = assets;\n    this.currentRound = currentRound;\n    this.nextToken = nextToken;\n    this.attribute_map = {\n      assets: 'assets',\n      currentRound: 'current-round',\n      nextToken: 'next-token'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['assets'])) throw new Error(`Response is missing required array field 'assets': ${data}`);\n    if (typeof data['current-round'] === 'undefined') throw new Error(`Response is missing required field 'current-round': ${data}`);\n    return new AssetsResponse({\n      assets: data['assets'].map(Asset.from_obj_for_encoding),\n      currentRound: data['current-round'],\n      nextToken: data['next-token']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Block information.\n * Definition:\n * data/bookkeeping/block.go : Block\n */\nexport class Block extends BaseModel {\n  /**\n   * Creates a new `Block` object.\n   * @param genesisHash - (gh) hash to which this block belongs.\n   * @param genesisId - (gen) ID to which this block belongs.\n   * @param previousBlockHash - (prev) Previous block hash.\n   * @param round - (rnd) Current round on which this block was appended to the chain.\n   * @param seed - (seed) Sortition seed.\n   * @param timestamp - (ts) Block creation timestamp in seconds since eposh\n   * @param transactionsRoot - (txn) TransactionsRoot authenticates the set of transactions appearing in the\n   * block. More specifically, it's the root of a merkle tree whose leaves are the\n   * block's Txids, in lexicographic order. For the empty block, it's 0. Note that\n   * the TxnRoot does not authenticate the signatures on the transactions, only the\n   * transactions themselves. Two blocks with the same transactions but in a\n   * different order and with different signatures will have the same TxnRoot.\n   * @param transactionsRootSha256 - (txn256) TransactionsRootSHA256 is an auxiliary TransactionRoot, built using a\n   * vector commitment instead of a merkle tree, and SHA256 hash function instead of\n   * the default SHA512_256. This commitment can be used on environments where only\n   * the SHA256 function exists.\n   * @param participationUpdates - Participation account data that needs to be checked/acted on by the network.\n   * @param rewards - Fields relating to rewards,\n   * @param stateProofTracking - Tracks the status of state proofs.\n   * @param transactions - (txns) list of transactions corresponding to a given round.\n   * @param txnCounter - (tc) TxnCounter counts the number of transactions committed in the ledger, from\n   * the time at which support for this feature was introduced.\n   * Specifically, TxnCounter is the number of the next transaction that will be\n   * committed after this block. It is 0 when no transactions have ever been\n   * committed (since TxnCounter started being supported).\n   * @param upgradeState - Fields relating to a protocol upgrade.\n   * @param upgradeVote - Fields relating to voting for a protocol upgrade.\n   */\n  constructor({\n    genesisHash,\n    genesisId,\n    previousBlockHash,\n    round,\n    seed,\n    timestamp,\n    transactionsRoot,\n    transactionsRootSha256,\n    participationUpdates,\n    rewards,\n    stateProofTracking,\n    transactions,\n    txnCounter,\n    upgradeState,\n    upgradeVote\n  }) {\n    super();\n    this.genesisHash = typeof genesisHash === 'string' ? new Uint8Array(Buffer.from(genesisHash, 'base64')) : genesisHash;\n    this.genesisId = genesisId;\n    this.previousBlockHash = typeof previousBlockHash === 'string' ? new Uint8Array(Buffer.from(previousBlockHash, 'base64')) : previousBlockHash;\n    this.round = round;\n    this.seed = typeof seed === 'string' ? new Uint8Array(Buffer.from(seed, 'base64')) : seed;\n    this.timestamp = timestamp;\n    this.transactionsRoot = typeof transactionsRoot === 'string' ? new Uint8Array(Buffer.from(transactionsRoot, 'base64')) : transactionsRoot;\n    this.transactionsRootSha256 = typeof transactionsRootSha256 === 'string' ? new Uint8Array(Buffer.from(transactionsRootSha256, 'base64')) : transactionsRootSha256;\n    this.participationUpdates = participationUpdates;\n    this.rewards = rewards;\n    this.stateProofTracking = stateProofTracking;\n    this.transactions = transactions;\n    this.txnCounter = txnCounter;\n    this.upgradeState = upgradeState;\n    this.upgradeVote = upgradeVote;\n    this.attribute_map = {\n      genesisHash: 'genesis-hash',\n      genesisId: 'genesis-id',\n      previousBlockHash: 'previous-block-hash',\n      round: 'round',\n      seed: 'seed',\n      timestamp: 'timestamp',\n      transactionsRoot: 'transactions-root',\n      transactionsRootSha256: 'transactions-root-sha256',\n      participationUpdates: 'participation-updates',\n      rewards: 'rewards',\n      stateProofTracking: 'state-proof-tracking',\n      transactions: 'transactions',\n      txnCounter: 'txn-counter',\n      upgradeState: 'upgrade-state',\n      upgradeVote: 'upgrade-vote'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['genesis-hash'] === 'undefined') throw new Error(`Response is missing required field 'genesis-hash': ${data}`);\n    if (typeof data['genesis-id'] === 'undefined') throw new Error(`Response is missing required field 'genesis-id': ${data}`);\n    if (typeof data['previous-block-hash'] === 'undefined') throw new Error(`Response is missing required field 'previous-block-hash': ${data}`);\n    if (typeof data['round'] === 'undefined') throw new Error(`Response is missing required field 'round': ${data}`);\n    if (typeof data['seed'] === 'undefined') throw new Error(`Response is missing required field 'seed': ${data}`);\n    if (typeof data['timestamp'] === 'undefined') throw new Error(`Response is missing required field 'timestamp': ${data}`);\n    if (typeof data['transactions-root'] === 'undefined') throw new Error(`Response is missing required field 'transactions-root': ${data}`);\n    if (typeof data['transactions-root-sha256'] === 'undefined') throw new Error(`Response is missing required field 'transactions-root-sha256': ${data}`);\n    return new Block({\n      genesisHash: data['genesis-hash'],\n      genesisId: data['genesis-id'],\n      previousBlockHash: data['previous-block-hash'],\n      round: data['round'],\n      seed: data['seed'],\n      timestamp: data['timestamp'],\n      transactionsRoot: data['transactions-root'],\n      transactionsRootSha256: data['transactions-root-sha256'],\n      participationUpdates: typeof data['participation-updates'] !== 'undefined' ? ParticipationUpdates.from_obj_for_encoding(data['participation-updates']) : undefined,\n      rewards: typeof data['rewards'] !== 'undefined' ? BlockRewards.from_obj_for_encoding(data['rewards']) : undefined,\n      stateProofTracking: typeof data['state-proof-tracking'] !== 'undefined' ? data['state-proof-tracking'].map(StateProofTracking.from_obj_for_encoding) : undefined,\n      transactions: typeof data['transactions'] !== 'undefined' ? data['transactions'].map(Transaction.from_obj_for_encoding) : undefined,\n      txnCounter: data['txn-counter'],\n      upgradeState: typeof data['upgrade-state'] !== 'undefined' ? BlockUpgradeState.from_obj_for_encoding(data['upgrade-state']) : undefined,\n      upgradeVote: typeof data['upgrade-vote'] !== 'undefined' ? BlockUpgradeVote.from_obj_for_encoding(data['upgrade-vote']) : undefined\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Fields relating to rewards,\n */\nexport class BlockRewards extends BaseModel {\n  /**\n   * Creates a new `BlockRewards` object.\n   * @param feeSink - (fees) accepts transaction fees, it can only spend to the incentive pool.\n   * @param rewardsCalculationRound - (rwcalr) number of leftover MicroAlgos after the distribution of rewards-rate\n   * MicroAlgos for every reward unit in the next round.\n   * @param rewardsLevel - (earn) How many rewards, in MicroAlgos, have been distributed to each RewardUnit\n   * of MicroAlgos since genesis.\n   * @param rewardsPool - (rwd) accepts periodic injections from the fee-sink and continually\n   * redistributes them as rewards.\n   * @param rewardsRate - (rate) Number of new MicroAlgos added to the participation stake from rewards at\n   * the next round.\n   * @param rewardsResidue - (frac) Number of leftover MicroAlgos after the distribution of\n   * RewardsRate/rewardUnits MicroAlgos for every reward unit in the next round.\n   */\n  constructor({\n    feeSink,\n    rewardsCalculationRound,\n    rewardsLevel,\n    rewardsPool,\n    rewardsRate,\n    rewardsResidue\n  }) {\n    super();\n    this.feeSink = feeSink;\n    this.rewardsCalculationRound = rewardsCalculationRound;\n    this.rewardsLevel = rewardsLevel;\n    this.rewardsPool = rewardsPool;\n    this.rewardsRate = rewardsRate;\n    this.rewardsResidue = rewardsResidue;\n    this.attribute_map = {\n      feeSink: 'fee-sink',\n      rewardsCalculationRound: 'rewards-calculation-round',\n      rewardsLevel: 'rewards-level',\n      rewardsPool: 'rewards-pool',\n      rewardsRate: 'rewards-rate',\n      rewardsResidue: 'rewards-residue'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['fee-sink'] === 'undefined') throw new Error(`Response is missing required field 'fee-sink': ${data}`);\n    if (typeof data['rewards-calculation-round'] === 'undefined') throw new Error(`Response is missing required field 'rewards-calculation-round': ${data}`);\n    if (typeof data['rewards-level'] === 'undefined') throw new Error(`Response is missing required field 'rewards-level': ${data}`);\n    if (typeof data['rewards-pool'] === 'undefined') throw new Error(`Response is missing required field 'rewards-pool': ${data}`);\n    if (typeof data['rewards-rate'] === 'undefined') throw new Error(`Response is missing required field 'rewards-rate': ${data}`);\n    if (typeof data['rewards-residue'] === 'undefined') throw new Error(`Response is missing required field 'rewards-residue': ${data}`);\n    return new BlockRewards({\n      feeSink: data['fee-sink'],\n      rewardsCalculationRound: data['rewards-calculation-round'],\n      rewardsLevel: data['rewards-level'],\n      rewardsPool: data['rewards-pool'],\n      rewardsRate: data['rewards-rate'],\n      rewardsResidue: data['rewards-residue']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Fields relating to a protocol upgrade.\n */\nexport class BlockUpgradeState extends BaseModel {\n  /**\n   * Creates a new `BlockUpgradeState` object.\n   * @param currentProtocol - (proto) The current protocol version.\n   * @param nextProtocol - (nextproto) The next proposed protocol version.\n   * @param nextProtocolApprovals - (nextyes) Number of blocks which approved the protocol upgrade.\n   * @param nextProtocolSwitchOn - (nextswitch) Round on which the protocol upgrade will take effect.\n   * @param nextProtocolVoteBefore - (nextbefore) Deadline round for this protocol upgrade (No votes will be consider\n   * after this round).\n   */\n  constructor({\n    currentProtocol,\n    nextProtocol,\n    nextProtocolApprovals,\n    nextProtocolSwitchOn,\n    nextProtocolVoteBefore\n  }) {\n    super();\n    this.currentProtocol = currentProtocol;\n    this.nextProtocol = nextProtocol;\n    this.nextProtocolApprovals = nextProtocolApprovals;\n    this.nextProtocolSwitchOn = nextProtocolSwitchOn;\n    this.nextProtocolVoteBefore = nextProtocolVoteBefore;\n    this.attribute_map = {\n      currentProtocol: 'current-protocol',\n      nextProtocol: 'next-protocol',\n      nextProtocolApprovals: 'next-protocol-approvals',\n      nextProtocolSwitchOn: 'next-protocol-switch-on',\n      nextProtocolVoteBefore: 'next-protocol-vote-before'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['current-protocol'] === 'undefined') throw new Error(`Response is missing required field 'current-protocol': ${data}`);\n    return new BlockUpgradeState({\n      currentProtocol: data['current-protocol'],\n      nextProtocol: data['next-protocol'],\n      nextProtocolApprovals: data['next-protocol-approvals'],\n      nextProtocolSwitchOn: data['next-protocol-switch-on'],\n      nextProtocolVoteBefore: data['next-protocol-vote-before']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Fields relating to voting for a protocol upgrade.\n */\nexport class BlockUpgradeVote extends BaseModel {\n  /**\n   * Creates a new `BlockUpgradeVote` object.\n   * @param upgradeApprove - (upgradeyes) Indicates a yes vote for the current proposal.\n   * @param upgradeDelay - (upgradedelay) Indicates the time between acceptance and execution.\n   * @param upgradePropose - (upgradeprop) Indicates a proposed upgrade.\n   */\n  constructor({\n    upgradeApprove,\n    upgradeDelay,\n    upgradePropose\n  }) {\n    super();\n    this.upgradeApprove = upgradeApprove;\n    this.upgradeDelay = upgradeDelay;\n    this.upgradePropose = upgradePropose;\n    this.attribute_map = {\n      upgradeApprove: 'upgrade-approve',\n      upgradeDelay: 'upgrade-delay',\n      upgradePropose: 'upgrade-propose'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    return new BlockUpgradeVote({\n      upgradeApprove: data['upgrade-approve'],\n      upgradeDelay: data['upgrade-delay'],\n      upgradePropose: data['upgrade-propose']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Box name and its content.\n */\nexport class Box extends BaseModel {\n  /**\n   * Creates a new `Box` object.\n   * @param name - (name) box name, base64 encoded\n   * @param value - (value) box value, base64 encoded.\n   */\n  constructor({\n    name,\n    value\n  }) {\n    super();\n    this.name = typeof name === 'string' ? new Uint8Array(Buffer.from(name, 'base64')) : name;\n    this.value = typeof value === 'string' ? new Uint8Array(Buffer.from(value, 'base64')) : value;\n    this.attribute_map = {\n      name: 'name',\n      value: 'value'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['name'] === 'undefined') throw new Error(`Response is missing required field 'name': ${data}`);\n    if (typeof data['value'] === 'undefined') throw new Error(`Response is missing required field 'value': ${data}`);\n    return new Box({\n      name: data['name'],\n      value: data['value']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Box descriptor describes an app box without a value.\n */\nexport class BoxDescriptor extends BaseModel {\n  /**\n   * Creates a new `BoxDescriptor` object.\n   * @param name - Base64 encoded box name\n   */\n  constructor({\n    name\n  }) {\n    super();\n    this.name = typeof name === 'string' ? new Uint8Array(Buffer.from(name, 'base64')) : name;\n    this.attribute_map = {\n      name: 'name'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['name'] === 'undefined') throw new Error(`Response is missing required field 'name': ${data}`);\n    return new BoxDescriptor({\n      name: data['name']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Box names of an application\n */\nexport class BoxesResponse extends BaseModel {\n  /**\n   * Creates a new `BoxesResponse` object.\n   * @param applicationId - (appidx) application index.\n   * @param boxes -\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  constructor({\n    applicationId,\n    boxes,\n    nextToken\n  }) {\n    super();\n    this.applicationId = applicationId;\n    this.boxes = boxes;\n    this.nextToken = nextToken;\n    this.attribute_map = {\n      applicationId: 'application-id',\n      boxes: 'boxes',\n      nextToken: 'next-token'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['application-id'] === 'undefined') throw new Error(`Response is missing required field 'application-id': ${data}`);\n    if (!Array.isArray(data['boxes'])) throw new Error(`Response is missing required array field 'boxes': ${data}`);\n    return new BoxesResponse({\n      applicationId: data['application-id'],\n      boxes: data['boxes'].map(BoxDescriptor.from_obj_for_encoding),\n      nextToken: data['next-token']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Response for errors\n */\nexport class ErrorResponse extends BaseModel {\n  /**\n   * Creates a new `ErrorResponse` object.\n   * @param message -\n   * @param data -\n   */\n  constructor({\n    message,\n    data\n  }) {\n    super();\n    this.message = message;\n    this.data = data;\n    this.attribute_map = {\n      message: 'message',\n      data: 'data'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['message'] === 'undefined') throw new Error(`Response is missing required field 'message': ${data}`);\n    return new ErrorResponse({\n      message: data['message'],\n      data: data['data']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Represents a TEAL value delta.\n */\nexport class EvalDelta extends BaseModel {\n  /**\n   * Creates a new `EvalDelta` object.\n   * @param action - (at) delta action.\n   * @param bytes - (bs) bytes value.\n   * @param uint - (ui) uint value.\n   */\n  constructor({\n    action,\n    bytes,\n    uint\n  }) {\n    super();\n    this.action = action;\n    this.bytes = bytes;\n    this.uint = uint;\n    this.attribute_map = {\n      action: 'action',\n      bytes: 'bytes',\n      uint: 'uint'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['action'] === 'undefined') throw new Error(`Response is missing required field 'action': ${data}`);\n    return new EvalDelta({\n      action: data['action'],\n      bytes: data['bytes'],\n      uint: data['uint']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Key-value pairs for StateDelta.\n */\nexport class EvalDeltaKeyValue extends BaseModel {\n  /**\n   * Creates a new `EvalDeltaKeyValue` object.\n   * @param key -\n   * @param value - Represents a TEAL value delta.\n   */\n  constructor({\n    key,\n    value\n  }) {\n    super();\n    this.key = key;\n    this.value = value;\n    this.attribute_map = {\n      key: 'key',\n      value: 'value'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['key'] === 'undefined') throw new Error(`Response is missing required field 'key': ${data}`);\n    if (typeof data['value'] === 'undefined') throw new Error(`Response is missing required field 'value': ${data}`);\n    return new EvalDeltaKeyValue({\n      key: data['key'],\n      value: EvalDelta.from_obj_for_encoding(data['value'])\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\nexport class HashFactory extends BaseModel {\n  /**\n   * Creates a new `HashFactory` object.\n   * @param hashType - (t)\n   */\n  constructor({\n    hashType\n  }) {\n    super();\n    this.hashType = hashType;\n    this.attribute_map = {\n      hashType: 'hash-type'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    return new HashFactory({\n      hashType: data['hash-type']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * A health check response.\n */\nexport class HealthCheck extends BaseModel {\n  /**\n   * Creates a new `HealthCheck` object.\n   * @param dbAvailable -\n   * @param isMigrating -\n   * @param message -\n   * @param round -\n   * @param version - Current version.\n   * @param data -\n   * @param errors -\n   */\n  constructor({\n    dbAvailable,\n    isMigrating,\n    message,\n    round,\n    version,\n    data,\n    errors\n  }) {\n    super();\n    this.dbAvailable = dbAvailable;\n    this.isMigrating = isMigrating;\n    this.message = message;\n    this.round = round;\n    this.version = version;\n    this.data = data;\n    this.errors = errors;\n    this.attribute_map = {\n      dbAvailable: 'db-available',\n      isMigrating: 'is-migrating',\n      message: 'message',\n      round: 'round',\n      version: 'version',\n      data: 'data',\n      errors: 'errors'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['db-available'] === 'undefined') throw new Error(`Response is missing required field 'db-available': ${data}`);\n    if (typeof data['is-migrating'] === 'undefined') throw new Error(`Response is missing required field 'is-migrating': ${data}`);\n    if (typeof data['message'] === 'undefined') throw new Error(`Response is missing required field 'message': ${data}`);\n    if (typeof data['round'] === 'undefined') throw new Error(`Response is missing required field 'round': ${data}`);\n    if (typeof data['version'] === 'undefined') throw new Error(`Response is missing required field 'version': ${data}`);\n    return new HealthCheck({\n      dbAvailable: data['db-available'],\n      isMigrating: data['is-migrating'],\n      message: data['message'],\n      round: data['round'],\n      version: data['version'],\n      data: data['data'],\n      errors: data['errors']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\nexport class IndexerStateProofMessage extends BaseModel {\n  /**\n   * Creates a new `IndexerStateProofMessage` object.\n   * @param blockHeadersCommitment - (b)\n   * @param firstAttestedRound - (f)\n   * @param latestAttestedRound - (l)\n   * @param lnProvenWeight - (P)\n   * @param votersCommitment - (v)\n   */\n  constructor({\n    blockHeadersCommitment,\n    firstAttestedRound,\n    latestAttestedRound,\n    lnProvenWeight,\n    votersCommitment\n  }) {\n    super();\n    this.blockHeadersCommitment = typeof blockHeadersCommitment === 'string' ? new Uint8Array(Buffer.from(blockHeadersCommitment, 'base64')) : blockHeadersCommitment;\n    this.firstAttestedRound = firstAttestedRound;\n    this.latestAttestedRound = latestAttestedRound;\n    this.lnProvenWeight = lnProvenWeight;\n    this.votersCommitment = typeof votersCommitment === 'string' ? new Uint8Array(Buffer.from(votersCommitment, 'base64')) : votersCommitment;\n    this.attribute_map = {\n      blockHeadersCommitment: 'block-headers-commitment',\n      firstAttestedRound: 'first-attested-round',\n      latestAttestedRound: 'latest-attested-round',\n      lnProvenWeight: 'ln-proven-weight',\n      votersCommitment: 'voters-commitment'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    return new IndexerStateProofMessage({\n      blockHeadersCommitment: data['block-headers-commitment'],\n      firstAttestedRound: data['first-attested-round'],\n      latestAttestedRound: data['latest-attested-round'],\n      lnProvenWeight: data['ln-proven-weight'],\n      votersCommitment: data['voters-commitment']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\nexport class MerkleArrayProof extends BaseModel {\n  /**\n   * Creates a new `MerkleArrayProof` object.\n   * @param hashFactory -\n   * @param path - (pth)\n   * @param treeDepth - (td)\n   */\n  constructor({\n    hashFactory,\n    path,\n    treeDepth\n  }) {\n    super();\n    this.hashFactory = hashFactory;\n    this.path = path;\n    this.treeDepth = treeDepth;\n    this.attribute_map = {\n      hashFactory: 'hash-factory',\n      path: 'path',\n      treeDepth: 'tree-depth'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    return new MerkleArrayProof({\n      hashFactory: typeof data['hash-factory'] !== 'undefined' ? HashFactory.from_obj_for_encoding(data['hash-factory']) : undefined,\n      path: data['path'],\n      treeDepth: data['tree-depth']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * A simplified version of AssetHolding\n */\nexport class MiniAssetHolding extends BaseModel {\n  /**\n   * Creates a new `MiniAssetHolding` object.\n   * @param address -\n   * @param amount -\n   * @param isFrozen -\n   * @param deleted - Whether or not this asset holding is currently deleted from its account.\n   * @param optedInAtRound - Round during which the account opted into the asset.\n   * @param optedOutAtRound - Round during which the account opted out of the asset.\n   */\n  constructor({\n    address,\n    amount,\n    isFrozen,\n    deleted,\n    optedInAtRound,\n    optedOutAtRound\n  }) {\n    super();\n    this.address = address;\n    this.amount = amount;\n    this.isFrozen = isFrozen;\n    this.deleted = deleted;\n    this.optedInAtRound = optedInAtRound;\n    this.optedOutAtRound = optedOutAtRound;\n    this.attribute_map = {\n      address: 'address',\n      amount: 'amount',\n      isFrozen: 'is-frozen',\n      deleted: 'deleted',\n      optedInAtRound: 'opted-in-at-round',\n      optedOutAtRound: 'opted-out-at-round'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['address'] === 'undefined') throw new Error(`Response is missing required field 'address': ${data}`);\n    if (typeof data['amount'] === 'undefined') throw new Error(`Response is missing required field 'amount': ${data}`);\n    if (typeof data['is-frozen'] === 'undefined') throw new Error(`Response is missing required field 'is-frozen': ${data}`);\n    return new MiniAssetHolding({\n      address: data['address'],\n      amount: data['amount'],\n      isFrozen: data['is-frozen'],\n      deleted: data['deleted'],\n      optedInAtRound: data['opted-in-at-round'],\n      optedOutAtRound: data['opted-out-at-round']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Participation account data that needs to be checked/acted on by the network.\n */\nexport class ParticipationUpdates extends BaseModel {\n  /**\n   * Creates a new `ParticipationUpdates` object.\n   * @param expiredParticipationAccounts - (partupdrmv) a list of online accounts that needs to be converted to offline\n   * since their participation key expired.\n   */\n  constructor({\n    expiredParticipationAccounts\n  }) {\n    super();\n    this.expiredParticipationAccounts = expiredParticipationAccounts;\n    this.attribute_map = {\n      expiredParticipationAccounts: 'expired-participation-accounts'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    return new ParticipationUpdates({\n      expiredParticipationAccounts: data['expired-participation-accounts']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * (sp) represents a state proof.\n * Definition:\n * crypto/stateproof/structs.go : StateProof\n */\nexport class StateProofFields extends BaseModel {\n  /**\n   * Creates a new `StateProofFields` object.\n   * @param partProofs - (P)\n   * @param positionsToReveal - (pr) Sequence of reveal positions.\n   * @param reveals - (r) Note that this is actually stored as a map[uint64] - Reveal in the actual\n   * msgp\n   * @param saltVersion - (v) Salt version of the merkle signature.\n   * @param sigCommit - (c)\n   * @param sigProofs - (S)\n   * @param signedWeight - (w)\n   */\n  constructor({\n    partProofs,\n    positionsToReveal,\n    reveals,\n    saltVersion,\n    sigCommit,\n    sigProofs,\n    signedWeight\n  }) {\n    super();\n    this.partProofs = partProofs;\n    this.positionsToReveal = positionsToReveal;\n    this.reveals = reveals;\n    this.saltVersion = saltVersion;\n    this.sigCommit = typeof sigCommit === 'string' ? new Uint8Array(Buffer.from(sigCommit, 'base64')) : sigCommit;\n    this.sigProofs = sigProofs;\n    this.signedWeight = signedWeight;\n    this.attribute_map = {\n      partProofs: 'part-proofs',\n      positionsToReveal: 'positions-to-reveal',\n      reveals: 'reveals',\n      saltVersion: 'salt-version',\n      sigCommit: 'sig-commit',\n      sigProofs: 'sig-proofs',\n      signedWeight: 'signed-weight'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    return new StateProofFields({\n      partProofs: typeof data['part-proofs'] !== 'undefined' ? MerkleArrayProof.from_obj_for_encoding(data['part-proofs']) : undefined,\n      positionsToReveal: data['positions-to-reveal'],\n      reveals: typeof data['reveals'] !== 'undefined' ? data['reveals'].map(StateProofReveal.from_obj_for_encoding) : undefined,\n      saltVersion: data['salt-version'],\n      sigCommit: data['sig-commit'],\n      sigProofs: typeof data['sig-proofs'] !== 'undefined' ? MerkleArrayProof.from_obj_for_encoding(data['sig-proofs']) : undefined,\n      signedWeight: data['signed-weight']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\nexport class StateProofParticipant extends BaseModel {\n  /**\n   * Creates a new `StateProofParticipant` object.\n   * @param verifier - (p)\n   * @param weight - (w)\n   */\n  constructor({\n    verifier,\n    weight\n  }) {\n    super();\n    this.verifier = verifier;\n    this.weight = weight;\n    this.attribute_map = {\n      verifier: 'verifier',\n      weight: 'weight'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    return new StateProofParticipant({\n      verifier: typeof data['verifier'] !== 'undefined' ? StateProofVerifier.from_obj_for_encoding(data['verifier']) : undefined,\n      weight: data['weight']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\nexport class StateProofReveal extends BaseModel {\n  /**\n   * Creates a new `StateProofReveal` object.\n   * @param participant - (p)\n   * @param position - The position in the signature and participants arrays corresponding to this\n   * entry.\n   * @param sigSlot - (s)\n   */\n  constructor({\n    participant,\n    position,\n    sigSlot\n  }) {\n    super();\n    this.participant = participant;\n    this.position = position;\n    this.sigSlot = sigSlot;\n    this.attribute_map = {\n      participant: 'participant',\n      position: 'position',\n      sigSlot: 'sig-slot'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    return new StateProofReveal({\n      participant: typeof data['participant'] !== 'undefined' ? StateProofParticipant.from_obj_for_encoding(data['participant']) : undefined,\n      position: data['position'],\n      sigSlot: typeof data['sig-slot'] !== 'undefined' ? StateProofSigSlot.from_obj_for_encoding(data['sig-slot']) : undefined\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\nexport class StateProofSigSlot extends BaseModel {\n  /**\n   * Creates a new `StateProofSigSlot` object.\n   * @param lowerSigWeight - (l) The total weight of signatures in the lower-numbered slots.\n   * @param signature -\n   */\n  constructor({\n    lowerSigWeight,\n    signature\n  }) {\n    super();\n    this.lowerSigWeight = lowerSigWeight;\n    this.signature = signature;\n    this.attribute_map = {\n      lowerSigWeight: 'lower-sig-weight',\n      signature: 'signature'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    return new StateProofSigSlot({\n      lowerSigWeight: data['lower-sig-weight'],\n      signature: typeof data['signature'] !== 'undefined' ? StateProofSignature.from_obj_for_encoding(data['signature']) : undefined\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\nexport class StateProofSignature extends BaseModel {\n  /**\n   * Creates a new `StateProofSignature` object.\n   * @param falconSignature -\n   * @param merkleArrayIndex -\n   * @param proof -\n   * @param verifyingKey - (vkey)\n   */\n  constructor({\n    falconSignature,\n    merkleArrayIndex,\n    proof,\n    verifyingKey\n  }) {\n    super();\n    this.falconSignature = typeof falconSignature === 'string' ? new Uint8Array(Buffer.from(falconSignature, 'base64')) : falconSignature;\n    this.merkleArrayIndex = merkleArrayIndex;\n    this.proof = proof;\n    this.verifyingKey = typeof verifyingKey === 'string' ? new Uint8Array(Buffer.from(verifyingKey, 'base64')) : verifyingKey;\n    this.attribute_map = {\n      falconSignature: 'falcon-signature',\n      merkleArrayIndex: 'merkle-array-index',\n      proof: 'proof',\n      verifyingKey: 'verifying-key'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    return new StateProofSignature({\n      falconSignature: data['falcon-signature'],\n      merkleArrayIndex: data['merkle-array-index'],\n      proof: typeof data['proof'] !== 'undefined' ? MerkleArrayProof.from_obj_for_encoding(data['proof']) : undefined,\n      verifyingKey: data['verifying-key']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\nexport class StateProofTracking extends BaseModel {\n  /**\n   * Creates a new `StateProofTracking` object.\n   * @param nextRound - (n) Next round for which we will accept a state proof transaction.\n   * @param onlineTotalWeight - (t) The total number of microalgos held by the online accounts during the\n   * StateProof round.\n   * @param type - State Proof Type. Note the raw object uses map with this as key.\n   * @param votersCommitment - (v) Root of a vector commitment containing online accounts that will help sign\n   * the proof.\n   */\n  constructor({\n    nextRound,\n    onlineTotalWeight,\n    type,\n    votersCommitment\n  }) {\n    super();\n    this.nextRound = nextRound;\n    this.onlineTotalWeight = onlineTotalWeight;\n    this.type = type;\n    this.votersCommitment = typeof votersCommitment === 'string' ? new Uint8Array(Buffer.from(votersCommitment, 'base64')) : votersCommitment;\n    this.attribute_map = {\n      nextRound: 'next-round',\n      onlineTotalWeight: 'online-total-weight',\n      type: 'type',\n      votersCommitment: 'voters-commitment'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    return new StateProofTracking({\n      nextRound: data['next-round'],\n      onlineTotalWeight: data['online-total-weight'],\n      type: data['type'],\n      votersCommitment: data['voters-commitment']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\nexport class StateProofVerifier extends BaseModel {\n  /**\n   * Creates a new `StateProofVerifier` object.\n   * @param commitment - (cmt) Represents the root of the vector commitment tree.\n   * @param keyLifetime - (lf) Key lifetime.\n   */\n  constructor({\n    commitment,\n    keyLifetime\n  }) {\n    super();\n    this.commitment = typeof commitment === 'string' ? new Uint8Array(Buffer.from(commitment, 'base64')) : commitment;\n    this.keyLifetime = keyLifetime;\n    this.attribute_map = {\n      commitment: 'commitment',\n      keyLifetime: 'key-lifetime'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    return new StateProofVerifier({\n      commitment: data['commitment'],\n      keyLifetime: data['key-lifetime']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Represents a (apls) local-state or (apgs) global-state schema. These schemas\n * determine how much storage may be used in a local-state or global-state for an\n * application. The more space used, the larger minimum balance must be maintained\n * in the account holding the data.\n */\nexport class StateSchema extends BaseModel {\n  /**\n   * Creates a new `StateSchema` object.\n   * @param numByteSlice - Maximum number of TEAL byte slices that may be stored in the key/value store.\n   * @param numUint - Maximum number of TEAL uints that may be stored in the key/value store.\n   */\n  constructor({\n    numByteSlice,\n    numUint\n  }) {\n    super();\n    this.numByteSlice = numByteSlice;\n    this.numUint = numUint;\n    this.attribute_map = {\n      numByteSlice: 'num-byte-slice',\n      numUint: 'num-uint'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['num-byte-slice'] === 'undefined') throw new Error(`Response is missing required field 'num-byte-slice': ${data}`);\n    if (typeof data['num-uint'] === 'undefined') throw new Error(`Response is missing required field 'num-uint': ${data}`);\n    return new StateSchema({\n      numByteSlice: data['num-byte-slice'],\n      numUint: data['num-uint']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Represents a key-value pair in an application store.\n */\nexport class TealKeyValue extends BaseModel {\n  /**\n   * Creates a new `TealKeyValue` object.\n   * @param key -\n   * @param value - Represents a TEAL value.\n   */\n  constructor({\n    key,\n    value\n  }) {\n    super();\n    this.key = key;\n    this.value = value;\n    this.attribute_map = {\n      key: 'key',\n      value: 'value'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['key'] === 'undefined') throw new Error(`Response is missing required field 'key': ${data}`);\n    if (typeof data['value'] === 'undefined') throw new Error(`Response is missing required field 'value': ${data}`);\n    return new TealKeyValue({\n      key: data['key'],\n      value: TealValue.from_obj_for_encoding(data['value'])\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Represents a TEAL value.\n */\nexport class TealValue extends BaseModel {\n  /**\n   * Creates a new `TealValue` object.\n   * @param bytes - (tb) bytes value.\n   * @param type - (tt) value type. Value `1` refers to **bytes**, value `2` refers to **uint**\n   * @param uint - (ui) uint value.\n   */\n  constructor({\n    bytes,\n    type,\n    uint\n  }) {\n    super();\n    this.bytes = bytes;\n    this.type = type;\n    this.uint = uint;\n    this.attribute_map = {\n      bytes: 'bytes',\n      type: 'type',\n      uint: 'uint'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['bytes'] === 'undefined') throw new Error(`Response is missing required field 'bytes': ${data}`);\n    if (typeof data['type'] === 'undefined') throw new Error(`Response is missing required field 'type': ${data}`);\n    if (typeof data['uint'] === 'undefined') throw new Error(`Response is missing required field 'uint': ${data}`);\n    return new TealValue({\n      bytes: data['bytes'],\n      type: data['type'],\n      uint: data['uint']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Contains all fields common to all transactions and serves as an envelope to all\n * transactions type. Represents both regular and inner transactions.\n * Definition:\n * data/transactions/signedtxn.go : SignedTxn\n * data/transactions/transaction.go : Transaction\n */\nexport class Transaction extends BaseModel {\n  /**\n   * Creates a new `Transaction` object.\n   * @param fee - (fee) Transaction fee.\n   * @param firstValid - (fv) First valid round for this transaction.\n   * @param lastValid - (lv) Last valid round for this transaction.\n   * @param sender - (snd) Sender's address.\n   * @param applicationTransaction - Fields for application transactions.\n   * Definition:\n   * data/transactions/application.go : ApplicationCallTxnFields\n   * @param assetConfigTransaction - Fields for asset allocation, re-configuration, and destruction.\n   * A zero value for asset-id indicates asset creation.\n   * A zero value for the params indicates asset destruction.\n   * Definition:\n   * data/transactions/asset.go : AssetConfigTxnFields\n   * @param assetFreezeTransaction - Fields for an asset freeze transaction.\n   * Definition:\n   * data/transactions/asset.go : AssetFreezeTxnFields\n   * @param assetTransferTransaction - Fields for an asset transfer transaction.\n   * Definition:\n   * data/transactions/asset.go : AssetTransferTxnFields\n   * @param authAddr - (sgnr) this is included with signed transactions when the signing address does\n   * not equal the sender. The backend can use this to ensure that auth addr is equal\n   * to the accounts auth addr.\n   * @param closeRewards - (rc) rewards applied to close-remainder-to account.\n   * @param closingAmount - (ca) closing amount for transaction.\n   * @param confirmedRound - Round when the transaction was confirmed.\n   * @param createdApplicationIndex - Specifies an application index (ID) if an application was created with this\n   * transaction.\n   * @param createdAssetIndex - Specifies an asset index (ID) if an asset was created with this transaction.\n   * @param genesisHash - (gh) Hash of genesis block.\n   * @param genesisId - (gen) genesis block ID.\n   * @param globalStateDelta - (gd) Global state key/value changes for the application being executed by this\n   * transaction.\n   * @param group - (grp) Base64 encoded byte array of a sha512/256 digest. When present indicates\n   * that this transaction is part of a transaction group and the value is the\n   * sha512/256 hash of the transactions in that group.\n   * @param id - Transaction ID\n   * @param innerTxns - Inner transactions produced by application execution.\n   * @param intraRoundOffset - Offset into the round where this transaction was confirmed.\n   * @param keyregTransaction - Fields for a keyreg transaction.\n   * Definition:\n   * data/transactions/keyreg.go : KeyregTxnFields\n   * @param lease - (lx) Base64 encoded 32-byte array. Lease enforces mutual exclusion of\n   * transactions. If this field is nonzero, then once the transaction is confirmed,\n   * it acquires the lease identified by the (Sender, Lease) pair of the transaction\n   * until the LastValid round passes. While this transaction possesses the lease, no\n   * other transaction specifying this lease can be confirmed.\n   * @param localStateDelta - (ld) Local state key/value changes for the application being executed by this\n   * transaction.\n   * @param logs - (lg) Logs for the application being executed by this transaction.\n   * @param note - (note) Free form data.\n   * @param paymentTransaction - Fields for a payment transaction.\n   * Definition:\n   * data/transactions/payment.go : PaymentTxnFields\n   * @param receiverRewards - (rr) rewards applied to receiver account.\n   * @param rekeyTo - (rekey) when included in a valid transaction, the accounts auth addr will be\n   * updated with this value and future signatures must be signed with the key\n   * represented by this address.\n   * @param roundTime - Time when the block this transaction is in was confirmed.\n   * @param senderRewards - (rs) rewards applied to sender account.\n   * @param signature - Validation signature associated with some data. Only one of the signatures\n   * should be provided.\n   * @param stateProofTransaction - Fields for a state proof transaction.\n   * Definition:\n   * data/transactions/stateproof.go : StateProofTxnFields\n   * @param txType - (type) Indicates what type of transaction this is. Different types have\n   * different fields.\n   * Valid types, and where their fields are stored:\n   * * (pay) payment-transaction\n   * * (keyreg) keyreg-transaction\n   * * (acfg) asset-config-transaction\n   * * (axfer) asset-transfer-transaction\n   * * (afrz) asset-freeze-transaction\n   * * (appl) application-transaction\n   * * (stpf) state-proof-transaction\n   */\n  constructor({\n    fee,\n    firstValid,\n    lastValid,\n    sender,\n    applicationTransaction,\n    assetConfigTransaction,\n    assetFreezeTransaction,\n    assetTransferTransaction,\n    authAddr,\n    closeRewards,\n    closingAmount,\n    confirmedRound,\n    createdApplicationIndex,\n    createdAssetIndex,\n    genesisHash,\n    genesisId,\n    globalStateDelta,\n    group,\n    id,\n    innerTxns,\n    intraRoundOffset,\n    keyregTransaction,\n    lease,\n    localStateDelta,\n    logs,\n    note,\n    paymentTransaction,\n    receiverRewards,\n    rekeyTo,\n    roundTime,\n    senderRewards,\n    signature,\n    stateProofTransaction,\n    txType\n  }) {\n    super();\n    this.fee = fee;\n    this.firstValid = firstValid;\n    this.lastValid = lastValid;\n    this.sender = sender;\n    this.applicationTransaction = applicationTransaction;\n    this.assetConfigTransaction = assetConfigTransaction;\n    this.assetFreezeTransaction = assetFreezeTransaction;\n    this.assetTransferTransaction = assetTransferTransaction;\n    this.authAddr = authAddr;\n    this.closeRewards = closeRewards;\n    this.closingAmount = closingAmount;\n    this.confirmedRound = confirmedRound;\n    this.createdApplicationIndex = createdApplicationIndex;\n    this.createdAssetIndex = createdAssetIndex;\n    this.genesisHash = typeof genesisHash === 'string' ? new Uint8Array(Buffer.from(genesisHash, 'base64')) : genesisHash;\n    this.genesisId = genesisId;\n    this.globalStateDelta = globalStateDelta;\n    this.group = typeof group === 'string' ? new Uint8Array(Buffer.from(group, 'base64')) : group;\n    this.id = id;\n    this.innerTxns = innerTxns;\n    this.intraRoundOffset = intraRoundOffset;\n    this.keyregTransaction = keyregTransaction;\n    this.lease = typeof lease === 'string' ? new Uint8Array(Buffer.from(lease, 'base64')) : lease;\n    this.localStateDelta = localStateDelta;\n    this.logs = logs;\n    this.note = typeof note === 'string' ? new Uint8Array(Buffer.from(note, 'base64')) : note;\n    this.paymentTransaction = paymentTransaction;\n    this.receiverRewards = receiverRewards;\n    this.rekeyTo = rekeyTo;\n    this.roundTime = roundTime;\n    this.senderRewards = senderRewards;\n    this.signature = signature;\n    this.stateProofTransaction = stateProofTransaction;\n    this.txType = txType;\n    this.attribute_map = {\n      fee: 'fee',\n      firstValid: 'first-valid',\n      lastValid: 'last-valid',\n      sender: 'sender',\n      applicationTransaction: 'application-transaction',\n      assetConfigTransaction: 'asset-config-transaction',\n      assetFreezeTransaction: 'asset-freeze-transaction',\n      assetTransferTransaction: 'asset-transfer-transaction',\n      authAddr: 'auth-addr',\n      closeRewards: 'close-rewards',\n      closingAmount: 'closing-amount',\n      confirmedRound: 'confirmed-round',\n      createdApplicationIndex: 'created-application-index',\n      createdAssetIndex: 'created-asset-index',\n      genesisHash: 'genesis-hash',\n      genesisId: 'genesis-id',\n      globalStateDelta: 'global-state-delta',\n      group: 'group',\n      id: 'id',\n      innerTxns: 'inner-txns',\n      intraRoundOffset: 'intra-round-offset',\n      keyregTransaction: 'keyreg-transaction',\n      lease: 'lease',\n      localStateDelta: 'local-state-delta',\n      logs: 'logs',\n      note: 'note',\n      paymentTransaction: 'payment-transaction',\n      receiverRewards: 'receiver-rewards',\n      rekeyTo: 'rekey-to',\n      roundTime: 'round-time',\n      senderRewards: 'sender-rewards',\n      signature: 'signature',\n      stateProofTransaction: 'state-proof-transaction',\n      txType: 'tx-type'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['fee'] === 'undefined') throw new Error(`Response is missing required field 'fee': ${data}`);\n    if (typeof data['first-valid'] === 'undefined') throw new Error(`Response is missing required field 'first-valid': ${data}`);\n    if (typeof data['last-valid'] === 'undefined') throw new Error(`Response is missing required field 'last-valid': ${data}`);\n    if (typeof data['sender'] === 'undefined') throw new Error(`Response is missing required field 'sender': ${data}`);\n    return new Transaction({\n      fee: data['fee'],\n      firstValid: data['first-valid'],\n      lastValid: data['last-valid'],\n      sender: data['sender'],\n      applicationTransaction: typeof data['application-transaction'] !== 'undefined' ? TransactionApplication.from_obj_for_encoding(data['application-transaction']) : undefined,\n      assetConfigTransaction: typeof data['asset-config-transaction'] !== 'undefined' ? TransactionAssetConfig.from_obj_for_encoding(data['asset-config-transaction']) : undefined,\n      assetFreezeTransaction: typeof data['asset-freeze-transaction'] !== 'undefined' ? TransactionAssetFreeze.from_obj_for_encoding(data['asset-freeze-transaction']) : undefined,\n      assetTransferTransaction: typeof data['asset-transfer-transaction'] !== 'undefined' ? TransactionAssetTransfer.from_obj_for_encoding(data['asset-transfer-transaction']) : undefined,\n      authAddr: data['auth-addr'],\n      closeRewards: data['close-rewards'],\n      closingAmount: data['closing-amount'],\n      confirmedRound: data['confirmed-round'],\n      createdApplicationIndex: data['created-application-index'],\n      createdAssetIndex: data['created-asset-index'],\n      genesisHash: data['genesis-hash'],\n      genesisId: data['genesis-id'],\n      globalStateDelta: typeof data['global-state-delta'] !== 'undefined' ? data['global-state-delta'].map(EvalDeltaKeyValue.from_obj_for_encoding) : undefined,\n      group: data['group'],\n      id: data['id'],\n      innerTxns: typeof data['inner-txns'] !== 'undefined' ? data['inner-txns'].map(Transaction.from_obj_for_encoding) : undefined,\n      intraRoundOffset: data['intra-round-offset'],\n      keyregTransaction: typeof data['keyreg-transaction'] !== 'undefined' ? TransactionKeyreg.from_obj_for_encoding(data['keyreg-transaction']) : undefined,\n      lease: data['lease'],\n      localStateDelta: typeof data['local-state-delta'] !== 'undefined' ? data['local-state-delta'].map(AccountStateDelta.from_obj_for_encoding) : undefined,\n      logs: data['logs'],\n      note: data['note'],\n      paymentTransaction: typeof data['payment-transaction'] !== 'undefined' ? TransactionPayment.from_obj_for_encoding(data['payment-transaction']) : undefined,\n      receiverRewards: data['receiver-rewards'],\n      rekeyTo: data['rekey-to'],\n      roundTime: data['round-time'],\n      senderRewards: data['sender-rewards'],\n      signature: typeof data['signature'] !== 'undefined' ? TransactionSignature.from_obj_for_encoding(data['signature']) : undefined,\n      stateProofTransaction: typeof data['state-proof-transaction'] !== 'undefined' ? TransactionStateProof.from_obj_for_encoding(data['state-proof-transaction']) : undefined,\n      txType: data['tx-type']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Fields for application transactions.\n * Definition:\n * data/transactions/application.go : ApplicationCallTxnFields\n */\nexport class TransactionApplication extends BaseModel {\n  /**\n   * Creates a new `TransactionApplication` object.\n   * @param applicationId - (apid) ID of the application being configured or empty if creating.\n   * @param accounts - (apat) List of accounts in addition to the sender that may be accessed from the\n   * application's approval-program and clear-state-program.\n   * @param applicationArgs - (apaa) transaction specific arguments accessed from the application's\n   * approval-program and clear-state-program.\n   * @param approvalProgram - (apap) Logic executed for every application transaction, except when\n   * on-completion is set to \"clear\". It can read and write global state for the\n   * application, as well as account-specific local state. Approval programs may\n   * reject the transaction.\n   * @param clearStateProgram - (apsu) Logic executed for application transactions with on-completion set to\n   * \"clear\". It can read and write global state for the application, as well as\n   * account-specific local state. Clear state programs cannot reject the\n   * transaction.\n   * @param extraProgramPages - (epp) specifies the additional app program len requested in pages.\n   * @param foreignApps - (apfa) Lists the applications in addition to the application-id whose global\n   * states may be accessed by this application's approval-program and\n   * clear-state-program. The access is read-only.\n   * @param foreignAssets - (apas) lists the assets whose parameters may be accessed by this application's\n   * ApprovalProgram and ClearStateProgram. The access is read-only.\n   * @param globalStateSchema - Represents a (apls) local-state or (apgs) global-state schema. These schemas\n   * determine how much storage may be used in a local-state or global-state for an\n   * application. The more space used, the larger minimum balance must be maintained\n   * in the account holding the data.\n   * @param localStateSchema - Represents a (apls) local-state or (apgs) global-state schema. These schemas\n   * determine how much storage may be used in a local-state or global-state for an\n   * application. The more space used, the larger minimum balance must be maintained\n   * in the account holding the data.\n   * @param onCompletion - (apan) defines the what additional actions occur with the transaction.\n   * Valid types:\n   * * noop\n   * * optin\n   * * closeout\n   * * clear\n   * * update\n   * * update\n   * * delete\n   */\n  constructor({\n    applicationId,\n    accounts,\n    applicationArgs,\n    approvalProgram,\n    clearStateProgram,\n    extraProgramPages,\n    foreignApps,\n    foreignAssets,\n    globalStateSchema,\n    localStateSchema,\n    onCompletion\n  }) {\n    super();\n    this.applicationId = applicationId;\n    this.accounts = accounts;\n    this.applicationArgs = applicationArgs;\n    this.approvalProgram = typeof approvalProgram === 'string' ? new Uint8Array(Buffer.from(approvalProgram, 'base64')) : approvalProgram;\n    this.clearStateProgram = typeof clearStateProgram === 'string' ? new Uint8Array(Buffer.from(clearStateProgram, 'base64')) : clearStateProgram;\n    this.extraProgramPages = extraProgramPages;\n    this.foreignApps = foreignApps;\n    this.foreignAssets = foreignAssets;\n    this.globalStateSchema = globalStateSchema;\n    this.localStateSchema = localStateSchema;\n    this.onCompletion = onCompletion;\n    this.attribute_map = {\n      applicationId: 'application-id',\n      accounts: 'accounts',\n      applicationArgs: 'application-args',\n      approvalProgram: 'approval-program',\n      clearStateProgram: 'clear-state-program',\n      extraProgramPages: 'extra-program-pages',\n      foreignApps: 'foreign-apps',\n      foreignAssets: 'foreign-assets',\n      globalStateSchema: 'global-state-schema',\n      localStateSchema: 'local-state-schema',\n      onCompletion: 'on-completion'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['application-id'] === 'undefined') throw new Error(`Response is missing required field 'application-id': ${data}`);\n    return new TransactionApplication({\n      applicationId: data['application-id'],\n      accounts: data['accounts'],\n      applicationArgs: data['application-args'],\n      approvalProgram: data['approval-program'],\n      clearStateProgram: data['clear-state-program'],\n      extraProgramPages: data['extra-program-pages'],\n      foreignApps: data['foreign-apps'],\n      foreignAssets: data['foreign-assets'],\n      globalStateSchema: typeof data['global-state-schema'] !== 'undefined' ? StateSchema.from_obj_for_encoding(data['global-state-schema']) : undefined,\n      localStateSchema: typeof data['local-state-schema'] !== 'undefined' ? StateSchema.from_obj_for_encoding(data['local-state-schema']) : undefined,\n      onCompletion: data['on-completion']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Fields for asset allocation, re-configuration, and destruction.\n * A zero value for asset-id indicates asset creation.\n * A zero value for the params indicates asset destruction.\n * Definition:\n * data/transactions/asset.go : AssetConfigTxnFields\n */\nexport class TransactionAssetConfig extends BaseModel {\n  /**\n   * Creates a new `TransactionAssetConfig` object.\n   * @param assetId - (xaid) ID of the asset being configured or empty if creating.\n   * @param params - AssetParams specifies the parameters for an asset.\n   * (apar) when part of an AssetConfig transaction.\n   * Definition:\n   * data/transactions/asset.go : AssetParams\n   */\n  constructor({\n    assetId,\n    params\n  }) {\n    super();\n    this.assetId = assetId;\n    this.params = params;\n    this.attribute_map = {\n      assetId: 'asset-id',\n      params: 'params'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    return new TransactionAssetConfig({\n      assetId: data['asset-id'],\n      params: typeof data['params'] !== 'undefined' ? AssetParams.from_obj_for_encoding(data['params']) : undefined\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Fields for an asset freeze transaction.\n * Definition:\n * data/transactions/asset.go : AssetFreezeTxnFields\n */\nexport class TransactionAssetFreeze extends BaseModel {\n  /**\n   * Creates a new `TransactionAssetFreeze` object.\n   * @param address - (fadd) Address of the account whose asset is being frozen or thawed.\n   * @param assetId - (faid) ID of the asset being frozen or thawed.\n   * @param newFreezeStatus - (afrz) The new freeze status.\n   */\n  constructor({\n    address,\n    assetId,\n    newFreezeStatus\n  }) {\n    super();\n    this.address = address;\n    this.assetId = assetId;\n    this.newFreezeStatus = newFreezeStatus;\n    this.attribute_map = {\n      address: 'address',\n      assetId: 'asset-id',\n      newFreezeStatus: 'new-freeze-status'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['address'] === 'undefined') throw new Error(`Response is missing required field 'address': ${data}`);\n    if (typeof data['asset-id'] === 'undefined') throw new Error(`Response is missing required field 'asset-id': ${data}`);\n    if (typeof data['new-freeze-status'] === 'undefined') throw new Error(`Response is missing required field 'new-freeze-status': ${data}`);\n    return new TransactionAssetFreeze({\n      address: data['address'],\n      assetId: data['asset-id'],\n      newFreezeStatus: data['new-freeze-status']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Fields for an asset transfer transaction.\n * Definition:\n * data/transactions/asset.go : AssetTransferTxnFields\n */\nexport class TransactionAssetTransfer extends BaseModel {\n  /**\n   * Creates a new `TransactionAssetTransfer` object.\n   * @param amount - (aamt) Amount of asset to transfer. A zero amount transferred to self allocates\n   * that asset in the account's Assets map.\n   * @param assetId - (xaid) ID of the asset being transferred.\n   * @param receiver - (arcv) Recipient address of the transfer.\n   * @param closeAmount - Number of assets transfered to the close-to account as part of the transaction.\n   * @param closeTo - (aclose) Indicates that the asset should be removed from the account's Assets\n   * map, and specifies where the remaining asset holdings should be transferred.\n   * It's always valid to transfer remaining asset holdings to the creator account.\n   * @param sender - (asnd) The effective sender during a clawback transactions. If this is not a\n   * zero value, the real transaction sender must be the Clawback address from the\n   * AssetParams.\n   */\n  constructor({\n    amount,\n    assetId,\n    receiver,\n    closeAmount,\n    closeTo,\n    sender\n  }) {\n    super();\n    this.amount = amount;\n    this.assetId = assetId;\n    this.receiver = receiver;\n    this.closeAmount = closeAmount;\n    this.closeTo = closeTo;\n    this.sender = sender;\n    this.attribute_map = {\n      amount: 'amount',\n      assetId: 'asset-id',\n      receiver: 'receiver',\n      closeAmount: 'close-amount',\n      closeTo: 'close-to',\n      sender: 'sender'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['amount'] === 'undefined') throw new Error(`Response is missing required field 'amount': ${data}`);\n    if (typeof data['asset-id'] === 'undefined') throw new Error(`Response is missing required field 'asset-id': ${data}`);\n    if (typeof data['receiver'] === 'undefined') throw new Error(`Response is missing required field 'receiver': ${data}`);\n    return new TransactionAssetTransfer({\n      amount: data['amount'],\n      assetId: data['asset-id'],\n      receiver: data['receiver'],\n      closeAmount: data['close-amount'],\n      closeTo: data['close-to'],\n      sender: data['sender']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Fields for a keyreg transaction.\n * Definition:\n * data/transactions/keyreg.go : KeyregTxnFields\n */\nexport class TransactionKeyreg extends BaseModel {\n  /**\n   * Creates a new `TransactionKeyreg` object.\n   * @param nonParticipation - (nonpart) Mark the account as participating or non-participating.\n   * @param selectionParticipationKey - (selkey) Public key used with the Verified Random Function (VRF) result during\n   * committee selection.\n   * @param stateProofKey - (sprfkey) State proof key used in key registration transactions.\n   * @param voteFirstValid - (votefst) First round this participation key is valid.\n   * @param voteKeyDilution - (votekd) Number of subkeys in each batch of participation keys.\n   * @param voteLastValid - (votelst) Last round this participation key is valid.\n   * @param voteParticipationKey - (votekey) Participation public key used in key registration transactions.\n   */\n  constructor({\n    nonParticipation,\n    selectionParticipationKey,\n    stateProofKey,\n    voteFirstValid,\n    voteKeyDilution,\n    voteLastValid,\n    voteParticipationKey\n  }) {\n    super();\n    this.nonParticipation = nonParticipation;\n    this.selectionParticipationKey = typeof selectionParticipationKey === 'string' ? new Uint8Array(Buffer.from(selectionParticipationKey, 'base64')) : selectionParticipationKey;\n    this.stateProofKey = typeof stateProofKey === 'string' ? new Uint8Array(Buffer.from(stateProofKey, 'base64')) : stateProofKey;\n    this.voteFirstValid = voteFirstValid;\n    this.voteKeyDilution = voteKeyDilution;\n    this.voteLastValid = voteLastValid;\n    this.voteParticipationKey = typeof voteParticipationKey === 'string' ? new Uint8Array(Buffer.from(voteParticipationKey, 'base64')) : voteParticipationKey;\n    this.attribute_map = {\n      nonParticipation: 'non-participation',\n      selectionParticipationKey: 'selection-participation-key',\n      stateProofKey: 'state-proof-key',\n      voteFirstValid: 'vote-first-valid',\n      voteKeyDilution: 'vote-key-dilution',\n      voteLastValid: 'vote-last-valid',\n      voteParticipationKey: 'vote-participation-key'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    return new TransactionKeyreg({\n      nonParticipation: data['non-participation'],\n      selectionParticipationKey: data['selection-participation-key'],\n      stateProofKey: data['state-proof-key'],\n      voteFirstValid: data['vote-first-valid'],\n      voteKeyDilution: data['vote-key-dilution'],\n      voteLastValid: data['vote-last-valid'],\n      voteParticipationKey: data['vote-participation-key']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Fields for a payment transaction.\n * Definition:\n * data/transactions/payment.go : PaymentTxnFields\n */\nexport class TransactionPayment extends BaseModel {\n  /**\n   * Creates a new `TransactionPayment` object.\n   * @param amount - (amt) number of MicroAlgos intended to be transferred.\n   * @param receiver - (rcv) receiver's address.\n   * @param closeAmount - Number of MicroAlgos that were sent to the close-remainder-to address when\n   * closing the sender account.\n   * @param closeRemainderTo - (close) when set, indicates that the sending account should be closed and all\n   * remaining funds be transferred to this address.\n   */\n  constructor({\n    amount,\n    receiver,\n    closeAmount,\n    closeRemainderTo\n  }) {\n    super();\n    this.amount = amount;\n    this.receiver = receiver;\n    this.closeAmount = closeAmount;\n    this.closeRemainderTo = closeRemainderTo;\n    this.attribute_map = {\n      amount: 'amount',\n      receiver: 'receiver',\n      closeAmount: 'close-amount',\n      closeRemainderTo: 'close-remainder-to'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['amount'] === 'undefined') throw new Error(`Response is missing required field 'amount': ${data}`);\n    if (typeof data['receiver'] === 'undefined') throw new Error(`Response is missing required field 'receiver': ${data}`);\n    return new TransactionPayment({\n      amount: data['amount'],\n      receiver: data['receiver'],\n      closeAmount: data['close-amount'],\n      closeRemainderTo: data['close-remainder-to']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n *\n */\nexport class TransactionResponse extends BaseModel {\n  /**\n   * Creates a new `TransactionResponse` object.\n   * @param currentRound - Round at which the results were computed.\n   * @param transaction - Contains all fields common to all transactions and serves as an envelope to all\n   * transactions type. Represents both regular and inner transactions.\n   * Definition:\n   * data/transactions/signedtxn.go : SignedTxn\n   * data/transactions/transaction.go : Transaction\n   */\n  constructor({\n    currentRound,\n    transaction\n  }) {\n    super();\n    this.currentRound = currentRound;\n    this.transaction = transaction;\n    this.attribute_map = {\n      currentRound: 'current-round',\n      transaction: 'transaction'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['current-round'] === 'undefined') throw new Error(`Response is missing required field 'current-round': ${data}`);\n    if (typeof data['transaction'] === 'undefined') throw new Error(`Response is missing required field 'transaction': ${data}`);\n    return new TransactionResponse({\n      currentRound: data['current-round'],\n      transaction: Transaction.from_obj_for_encoding(data['transaction'])\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Validation signature associated with some data. Only one of the signatures\n * should be provided.\n */\nexport class TransactionSignature extends BaseModel {\n  /**\n   * Creates a new `TransactionSignature` object.\n   * @param logicsig - (lsig) Programatic transaction signature.\n   * Definition:\n   * data/transactions/logicsig.go\n   * @param multisig - (msig) structure holding multiple subsignatures.\n   * Definition:\n   * crypto/multisig.go : MultisigSig\n   * @param sig - (sig) Standard ed25519 signature.\n   */\n  constructor({\n    logicsig,\n    multisig,\n    sig\n  }) {\n    super();\n    this.logicsig = logicsig;\n    this.multisig = multisig;\n    this.sig = typeof sig === 'string' ? new Uint8Array(Buffer.from(sig, 'base64')) : sig;\n    this.attribute_map = {\n      logicsig: 'logicsig',\n      multisig: 'multisig',\n      sig: 'sig'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    return new TransactionSignature({\n      logicsig: typeof data['logicsig'] !== 'undefined' ? TransactionSignatureLogicsig.from_obj_for_encoding(data['logicsig']) : undefined,\n      multisig: typeof data['multisig'] !== 'undefined' ? TransactionSignatureMultisig.from_obj_for_encoding(data['multisig']) : undefined,\n      sig: data['sig']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * (lsig) Programatic transaction signature.\n * Definition:\n * data/transactions/logicsig.go\n */\nexport class TransactionSignatureLogicsig extends BaseModel {\n  /**\n   * Creates a new `TransactionSignatureLogicsig` object.\n   * @param logic - (l) Program signed by a signature or multi signature, or hashed to be the\n   * address of ana ccount. Base64 encoded TEAL program.\n   * @param args - (arg) Logic arguments, base64 encoded.\n   * @param multisigSignature - (msig) structure holding multiple subsignatures.\n   * Definition:\n   * crypto/multisig.go : MultisigSig\n   * @param signature - (sig) ed25519 signature.\n   */\n  constructor({\n    logic,\n    args,\n    multisigSignature,\n    signature\n  }) {\n    super();\n    this.logic = typeof logic === 'string' ? new Uint8Array(Buffer.from(logic, 'base64')) : logic;\n    this.args = args;\n    this.multisigSignature = multisigSignature;\n    this.signature = typeof signature === 'string' ? new Uint8Array(Buffer.from(signature, 'base64')) : signature;\n    this.attribute_map = {\n      logic: 'logic',\n      args: 'args',\n      multisigSignature: 'multisig-signature',\n      signature: 'signature'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['logic'] === 'undefined') throw new Error(`Response is missing required field 'logic': ${data}`);\n    return new TransactionSignatureLogicsig({\n      logic: data['logic'],\n      args: data['args'],\n      multisigSignature: typeof data['multisig-signature'] !== 'undefined' ? TransactionSignatureMultisig.from_obj_for_encoding(data['multisig-signature']) : undefined,\n      signature: data['signature']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * (msig) structure holding multiple subsignatures.\n * Definition:\n * crypto/multisig.go : MultisigSig\n */\nexport class TransactionSignatureMultisig extends BaseModel {\n  /**\n   * Creates a new `TransactionSignatureMultisig` object.\n   * @param subsignature - (subsig) holds pairs of public key and signatures.\n   * @param threshold - (thr)\n   * @param version - (v)\n   */\n  constructor({\n    subsignature,\n    threshold,\n    version\n  }) {\n    super();\n    this.subsignature = subsignature;\n    this.threshold = threshold;\n    this.version = version;\n    this.attribute_map = {\n      subsignature: 'subsignature',\n      threshold: 'threshold',\n      version: 'version'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    return new TransactionSignatureMultisig({\n      subsignature: typeof data['subsignature'] !== 'undefined' ? data['subsignature'].map(TransactionSignatureMultisigSubsignature.from_obj_for_encoding) : undefined,\n      threshold: data['threshold'],\n      version: data['version']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\nexport class TransactionSignatureMultisigSubsignature extends BaseModel {\n  /**\n   * Creates a new `TransactionSignatureMultisigSubsignature` object.\n   * @param publicKey - (pk)\n   * @param signature - (s)\n   */\n  constructor({\n    publicKey,\n    signature\n  }) {\n    super();\n    this.publicKey = typeof publicKey === 'string' ? new Uint8Array(Buffer.from(publicKey, 'base64')) : publicKey;\n    this.signature = typeof signature === 'string' ? new Uint8Array(Buffer.from(signature, 'base64')) : signature;\n    this.attribute_map = {\n      publicKey: 'public-key',\n      signature: 'signature'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    return new TransactionSignatureMultisigSubsignature({\n      publicKey: data['public-key'],\n      signature: data['signature']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Fields for a state proof transaction.\n * Definition:\n * data/transactions/stateproof.go : StateProofTxnFields\n */\nexport class TransactionStateProof extends BaseModel {\n  /**\n   * Creates a new `TransactionStateProof` object.\n   * @param message - (spmsg)\n   * @param stateProof - (sp) represents a state proof.\n   * Definition:\n   * crypto/stateproof/structs.go : StateProof\n   * @param stateProofType - (sptype) Type of the state proof. Integer representing an entry defined in\n   * protocol/stateproof.go\n   */\n  constructor({\n    message,\n    stateProof,\n    stateProofType\n  }) {\n    super();\n    this.message = message;\n    this.stateProof = stateProof;\n    this.stateProofType = stateProofType;\n    this.attribute_map = {\n      message: 'message',\n      stateProof: 'state-proof',\n      stateProofType: 'state-proof-type'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    return new TransactionStateProof({\n      message: typeof data['message'] !== 'undefined' ? IndexerStateProofMessage.from_obj_for_encoding(data['message']) : undefined,\n      stateProof: typeof data['state-proof'] !== 'undefined' ? StateProofFields.from_obj_for_encoding(data['state-proof']) : undefined,\n      stateProofType: data['state-proof-type']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n *\n */\nexport class TransactionsResponse extends BaseModel {\n  /**\n   * Creates a new `TransactionsResponse` object.\n   * @param currentRound - Round at which the results were computed.\n   * @param transactions -\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  constructor({\n    currentRound,\n    transactions,\n    nextToken\n  }) {\n    super();\n    this.currentRound = currentRound;\n    this.transactions = transactions;\n    this.nextToken = nextToken;\n    this.attribute_map = {\n      currentRound: 'current-round',\n      transactions: 'transactions',\n      nextToken: 'next-token'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['current-round'] === 'undefined') throw new Error(`Response is missing required field 'current-round': ${data}`);\n    if (!Array.isArray(data['transactions'])) throw new Error(`Response is missing required array field 'transactions': ${data}`);\n    return new TransactionsResponse({\n      currentRound: data['current-round'],\n      transactions: data['transactions'].map(Transaction.from_obj_for_encoding),\n      nextToken: data['next-token']\n    });\n    /* eslint-enable dot-notation */\n  }\n}","map":{"version":3,"names":["Buffer","BaseModel","Account","constructor","address","amount","amountWithoutPendingRewards","pendingRewards","rewards","round","status","totalAppsOptedIn","totalAssetsOptedIn","totalBoxBytes","totalBoxes","totalCreatedApps","totalCreatedAssets","appsLocalState","appsTotalExtraPages","appsTotalSchema","assets","authAddr","closedAtRound","createdApps","createdAssets","createdAtRound","deleted","participation","rewardBase","sigType","attribute_map","from_obj_for_encoding","data","Error","map","ApplicationLocalState","undefined","ApplicationStateSchema","AssetHolding","Application","Asset","AccountParticipation","selectionParticipationKey","voteFirstValid","voteKeyDilution","voteLastValid","voteParticipationKey","stateProofKey","Uint8Array","from","AccountResponse","account","currentRound","AccountStateDelta","delta","Array","isArray","EvalDeltaKeyValue","AccountsResponse","accounts","nextToken","id","params","deletedAtRound","ApplicationParams","schema","closedOutAtRound","keyValue","optedInAtRound","TealKeyValue","ApplicationLocalStatesResponse","appsLocalStates","ApplicationLogData","logs","txid","ApplicationLogsResponse","applicationId","logData","approvalProgram","clearStateProgram","creator","extraProgramPages","globalState","globalStateSchema","localStateSchema","ApplicationResponse","application","numByteSlice","numUint","ApplicationsResponse","applications","index","destroyedAtRound","AssetParams","AssetBalancesResponse","balances","MiniAssetHolding","assetId","isFrozen","optedOutAtRound","AssetHoldingsResponse","decimals","total","clawback","defaultFrozen","freeze","manager","metadataHash","name","nameB64","reserve","unitName","unitNameB64","url","urlB64","AssetResponse","asset","AssetsResponse","Block","genesisHash","genesisId","previousBlockHash","seed","timestamp","transactionsRoot","transactionsRootSha256","participationUpdates","stateProofTracking","transactions","txnCounter","upgradeState","upgradeVote","ParticipationUpdates","BlockRewards","StateProofTracking","Transaction","BlockUpgradeState","BlockUpgradeVote","feeSink","rewardsCalculationRound","rewardsLevel","rewardsPool","rewardsRate","rewardsResidue","currentProtocol","nextProtocol","nextProtocolApprovals","nextProtocolSwitchOn","nextProtocolVoteBefore","upgradeApprove","upgradeDelay","upgradePropose","Box","value","BoxDescriptor","BoxesResponse","boxes","ErrorResponse","message","EvalDelta","action","bytes","uint","key","HashFactory","hashType","HealthCheck","dbAvailable","isMigrating","version","errors","IndexerStateProofMessage","blockHeadersCommitment","firstAttestedRound","latestAttestedRound","lnProvenWeight","votersCommitment","MerkleArrayProof","hashFactory","path","treeDepth","expiredParticipationAccounts","StateProofFields","partProofs","positionsToReveal","reveals","saltVersion","sigCommit","sigProofs","signedWeight","StateProofReveal","StateProofParticipant","verifier","weight","StateProofVerifier","participant","position","sigSlot","StateProofSigSlot","lowerSigWeight","signature","StateProofSignature","falconSignature","merkleArrayIndex","proof","verifyingKey","nextRound","onlineTotalWeight","type","commitment","keyLifetime","StateSchema","TealValue","fee","firstValid","lastValid","sender","applicationTransaction","assetConfigTransaction","assetFreezeTransaction","assetTransferTransaction","closeRewards","closingAmount","confirmedRound","createdApplicationIndex","createdAssetIndex","globalStateDelta","group","innerTxns","intraRoundOffset","keyregTransaction","lease","localStateDelta","note","paymentTransaction","receiverRewards","rekeyTo","roundTime","senderRewards","stateProofTransaction","txType","TransactionApplication","TransactionAssetConfig","TransactionAssetFreeze","TransactionAssetTransfer","TransactionKeyreg","TransactionPayment","TransactionSignature","TransactionStateProof","applicationArgs","foreignApps","foreignAssets","onCompletion","newFreezeStatus","receiver","closeAmount","closeTo","nonParticipation","closeRemainderTo","TransactionResponse","transaction","logicsig","multisig","sig","TransactionSignatureLogicsig","TransactionSignatureMultisig","logic","args","multisigSignature","subsignature","threshold","TransactionSignatureMultisigSubsignature","publicKey","stateProof","stateProofType","TransactionsResponse"],"sources":["/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/algosdk/src/client/v2/indexer/models/types.ts"],"sourcesContent":["/**\n * NOTICE: This file was generated. Editing this file manually is not recommended.\n */\n\n/* eslint-disable no-use-before-define */\nimport { Buffer } from 'buffer';\nimport BaseModel from '../../basemodel';\n\n/**\n * Account information at a given round.\n * Definition:\n * data/basics/userBalance.go : AccountData\n */\nexport class Account extends BaseModel {\n  /**\n   * the account public key\n   */\n  public address: string;\n\n  /**\n   * (algo) total number of MicroAlgos in the account\n   */\n  public amount: number | bigint;\n\n  /**\n   * specifies the amount of MicroAlgos in the account, without the pending rewards.\n   */\n  public amountWithoutPendingRewards: number | bigint;\n\n  /**\n   * amount of MicroAlgos of pending rewards in this account.\n   */\n  public pendingRewards: number | bigint;\n\n  /**\n   * (ern) total rewards of MicroAlgos the account has received, including pending\n   * rewards.\n   */\n  public rewards: number | bigint;\n\n  /**\n   * The round for which this information is relevant.\n   */\n  public round: number | bigint;\n\n  /**\n   * (onl) delegation status of the account's MicroAlgos\n   * * Offline - indicates that the associated account is delegated.\n   * * Online - indicates that the associated account used as part of the delegation\n   * pool.\n   * * NotParticipating - indicates that the associated account is neither a\n   * delegator nor a delegate.\n   */\n  public status: string;\n\n  /**\n   * The count of all applications that have been opted in, equivalent to the count\n   * of application local data (AppLocalState objects) stored in this account.\n   */\n  public totalAppsOptedIn: number | bigint;\n\n  /**\n   * The count of all assets that have been opted in, equivalent to the count of\n   * AssetHolding objects held by this account.\n   */\n  public totalAssetsOptedIn: number | bigint;\n\n  /**\n   * For app-accounts only. The total number of bytes allocated for the keys and\n   * values of boxes which belong to the associated application.\n   */\n  public totalBoxBytes: number | bigint;\n\n  /**\n   * For app-accounts only. The total number of boxes which belong to the associated\n   * application.\n   */\n  public totalBoxes: number | bigint;\n\n  /**\n   * The count of all apps (AppParams objects) created by this account.\n   */\n  public totalCreatedApps: number | bigint;\n\n  /**\n   * The count of all assets (AssetParams objects) created by this account.\n   */\n  public totalCreatedAssets: number | bigint;\n\n  /**\n   * (appl) applications local data stored in this account.\n   * Note the raw object uses `map[int] -> AppLocalState` for this type.\n   */\n  public appsLocalState?: ApplicationLocalState[];\n\n  /**\n   * (teap) the sum of all extra application program pages for this account.\n   */\n  public appsTotalExtraPages?: number | bigint;\n\n  /**\n   * (tsch) stores the sum of all of the local schemas and global schemas in this\n   * account.\n   * Note: the raw account uses `StateSchema` for this type.\n   */\n  public appsTotalSchema?: ApplicationStateSchema;\n\n  /**\n   * (asset) assets held by this account.\n   * Note the raw object uses `map[int] -> AssetHolding` for this type.\n   */\n  public assets?: AssetHolding[];\n\n  /**\n   * (spend) the address against which signing should be checked. If empty, the\n   * address of the current account is used. This field can be updated in any\n   * transaction by setting the RekeyTo field.\n   */\n  public authAddr?: string;\n\n  /**\n   * Round during which this account was most recently closed.\n   */\n  public closedAtRound?: number | bigint;\n\n  /**\n   * (appp) parameters of applications created by this account including app global\n   * data.\n   * Note: the raw account uses `map[int] -> AppParams` for this type.\n   */\n  public createdApps?: Application[];\n\n  /**\n   * (apar) parameters of assets created by this account.\n   * Note: the raw account uses `map[int] -> Asset` for this type.\n   */\n  public createdAssets?: Asset[];\n\n  /**\n   * Round during which this account first appeared in a transaction.\n   */\n  public createdAtRound?: number | bigint;\n\n  /**\n   * Whether or not this account is currently closed.\n   */\n  public deleted?: boolean;\n\n  /**\n   * AccountParticipation describes the parameters used by this account in consensus\n   * protocol.\n   */\n  public participation?: AccountParticipation;\n\n  /**\n   * (ebase) used as part of the rewards computation. Only applicable to accounts\n   * which are participating.\n   */\n  public rewardBase?: number | bigint;\n\n  /**\n   * Indicates what type of signature is used by this account, must be one of:\n   * * sig\n   * * msig\n   * * lsig\n   * * or null if unknown\n   */\n  public sigType?: string;\n\n  /**\n   * Creates a new `Account` object.\n   * @param address - the account public key\n   * @param amount - (algo) total number of MicroAlgos in the account\n   * @param amountWithoutPendingRewards - specifies the amount of MicroAlgos in the account, without the pending rewards.\n   * @param pendingRewards - amount of MicroAlgos of pending rewards in this account.\n   * @param rewards - (ern) total rewards of MicroAlgos the account has received, including pending\n   * rewards.\n   * @param round - The round for which this information is relevant.\n   * @param status - (onl) delegation status of the account's MicroAlgos\n   * * Offline - indicates that the associated account is delegated.\n   * * Online - indicates that the associated account used as part of the delegation\n   * pool.\n   * * NotParticipating - indicates that the associated account is neither a\n   * delegator nor a delegate.\n   * @param totalAppsOptedIn - The count of all applications that have been opted in, equivalent to the count\n   * of application local data (AppLocalState objects) stored in this account.\n   * @param totalAssetsOptedIn - The count of all assets that have been opted in, equivalent to the count of\n   * AssetHolding objects held by this account.\n   * @param totalBoxBytes - For app-accounts only. The total number of bytes allocated for the keys and\n   * values of boxes which belong to the associated application.\n   * @param totalBoxes - For app-accounts only. The total number of boxes which belong to the associated\n   * application.\n   * @param totalCreatedApps - The count of all apps (AppParams objects) created by this account.\n   * @param totalCreatedAssets - The count of all assets (AssetParams objects) created by this account.\n   * @param appsLocalState - (appl) applications local data stored in this account.\n   * Note the raw object uses `map[int] -> AppLocalState` for this type.\n   * @param appsTotalExtraPages - (teap) the sum of all extra application program pages for this account.\n   * @param appsTotalSchema - (tsch) stores the sum of all of the local schemas and global schemas in this\n   * account.\n   * Note: the raw account uses `StateSchema` for this type.\n   * @param assets - (asset) assets held by this account.\n   * Note the raw object uses `map[int] -> AssetHolding` for this type.\n   * @param authAddr - (spend) the address against which signing should be checked. If empty, the\n   * address of the current account is used. This field can be updated in any\n   * transaction by setting the RekeyTo field.\n   * @param closedAtRound - Round during which this account was most recently closed.\n   * @param createdApps - (appp) parameters of applications created by this account including app global\n   * data.\n   * Note: the raw account uses `map[int] -> AppParams` for this type.\n   * @param createdAssets - (apar) parameters of assets created by this account.\n   * Note: the raw account uses `map[int] -> Asset` for this type.\n   * @param createdAtRound - Round during which this account first appeared in a transaction.\n   * @param deleted - Whether or not this account is currently closed.\n   * @param participation - AccountParticipation describes the parameters used by this account in consensus\n   * protocol.\n   * @param rewardBase - (ebase) used as part of the rewards computation. Only applicable to accounts\n   * which are participating.\n   * @param sigType - Indicates what type of signature is used by this account, must be one of:\n   * * sig\n   * * msig\n   * * lsig\n   * * or null if unknown\n   */\n  constructor({\n    address,\n    amount,\n    amountWithoutPendingRewards,\n    pendingRewards,\n    rewards,\n    round,\n    status,\n    totalAppsOptedIn,\n    totalAssetsOptedIn,\n    totalBoxBytes,\n    totalBoxes,\n    totalCreatedApps,\n    totalCreatedAssets,\n    appsLocalState,\n    appsTotalExtraPages,\n    appsTotalSchema,\n    assets,\n    authAddr,\n    closedAtRound,\n    createdApps,\n    createdAssets,\n    createdAtRound,\n    deleted,\n    participation,\n    rewardBase,\n    sigType,\n  }: {\n    address: string;\n    amount: number | bigint;\n    amountWithoutPendingRewards: number | bigint;\n    pendingRewards: number | bigint;\n    rewards: number | bigint;\n    round: number | bigint;\n    status: string;\n    totalAppsOptedIn: number | bigint;\n    totalAssetsOptedIn: number | bigint;\n    totalBoxBytes: number | bigint;\n    totalBoxes: number | bigint;\n    totalCreatedApps: number | bigint;\n    totalCreatedAssets: number | bigint;\n    appsLocalState?: ApplicationLocalState[];\n    appsTotalExtraPages?: number | bigint;\n    appsTotalSchema?: ApplicationStateSchema;\n    assets?: AssetHolding[];\n    authAddr?: string;\n    closedAtRound?: number | bigint;\n    createdApps?: Application[];\n    createdAssets?: Asset[];\n    createdAtRound?: number | bigint;\n    deleted?: boolean;\n    participation?: AccountParticipation;\n    rewardBase?: number | bigint;\n    sigType?: string;\n  }) {\n    super();\n    this.address = address;\n    this.amount = amount;\n    this.amountWithoutPendingRewards = amountWithoutPendingRewards;\n    this.pendingRewards = pendingRewards;\n    this.rewards = rewards;\n    this.round = round;\n    this.status = status;\n    this.totalAppsOptedIn = totalAppsOptedIn;\n    this.totalAssetsOptedIn = totalAssetsOptedIn;\n    this.totalBoxBytes = totalBoxBytes;\n    this.totalBoxes = totalBoxes;\n    this.totalCreatedApps = totalCreatedApps;\n    this.totalCreatedAssets = totalCreatedAssets;\n    this.appsLocalState = appsLocalState;\n    this.appsTotalExtraPages = appsTotalExtraPages;\n    this.appsTotalSchema = appsTotalSchema;\n    this.assets = assets;\n    this.authAddr = authAddr;\n    this.closedAtRound = closedAtRound;\n    this.createdApps = createdApps;\n    this.createdAssets = createdAssets;\n    this.createdAtRound = createdAtRound;\n    this.deleted = deleted;\n    this.participation = participation;\n    this.rewardBase = rewardBase;\n    this.sigType = sigType;\n\n    this.attribute_map = {\n      address: 'address',\n      amount: 'amount',\n      amountWithoutPendingRewards: 'amount-without-pending-rewards',\n      pendingRewards: 'pending-rewards',\n      rewards: 'rewards',\n      round: 'round',\n      status: 'status',\n      totalAppsOptedIn: 'total-apps-opted-in',\n      totalAssetsOptedIn: 'total-assets-opted-in',\n      totalBoxBytes: 'total-box-bytes',\n      totalBoxes: 'total-boxes',\n      totalCreatedApps: 'total-created-apps',\n      totalCreatedAssets: 'total-created-assets',\n      appsLocalState: 'apps-local-state',\n      appsTotalExtraPages: 'apps-total-extra-pages',\n      appsTotalSchema: 'apps-total-schema',\n      assets: 'assets',\n      authAddr: 'auth-addr',\n      closedAtRound: 'closed-at-round',\n      createdApps: 'created-apps',\n      createdAssets: 'created-assets',\n      createdAtRound: 'created-at-round',\n      deleted: 'deleted',\n      participation: 'participation',\n      rewardBase: 'reward-base',\n      sigType: 'sig-type',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): Account {\n    /* eslint-disable dot-notation */\n    if (typeof data['address'] === 'undefined')\n      throw new Error(`Response is missing required field 'address': ${data}`);\n    if (typeof data['amount'] === 'undefined')\n      throw new Error(`Response is missing required field 'amount': ${data}`);\n    if (typeof data['amount-without-pending-rewards'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'amount-without-pending-rewards': ${data}`\n      );\n    if (typeof data['pending-rewards'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'pending-rewards': ${data}`\n      );\n    if (typeof data['rewards'] === 'undefined')\n      throw new Error(`Response is missing required field 'rewards': ${data}`);\n    if (typeof data['round'] === 'undefined')\n      throw new Error(`Response is missing required field 'round': ${data}`);\n    if (typeof data['status'] === 'undefined')\n      throw new Error(`Response is missing required field 'status': ${data}`);\n    if (typeof data['total-apps-opted-in'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'total-apps-opted-in': ${data}`\n      );\n    if (typeof data['total-assets-opted-in'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'total-assets-opted-in': ${data}`\n      );\n    if (typeof data['total-box-bytes'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'total-box-bytes': ${data}`\n      );\n    if (typeof data['total-boxes'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'total-boxes': ${data}`\n      );\n    if (typeof data['total-created-apps'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'total-created-apps': ${data}`\n      );\n    if (typeof data['total-created-assets'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'total-created-assets': ${data}`\n      );\n    return new Account({\n      address: data['address'],\n      amount: data['amount'],\n      amountWithoutPendingRewards: data['amount-without-pending-rewards'],\n      pendingRewards: data['pending-rewards'],\n      rewards: data['rewards'],\n      round: data['round'],\n      status: data['status'],\n      totalAppsOptedIn: data['total-apps-opted-in'],\n      totalAssetsOptedIn: data['total-assets-opted-in'],\n      totalBoxBytes: data['total-box-bytes'],\n      totalBoxes: data['total-boxes'],\n      totalCreatedApps: data['total-created-apps'],\n      totalCreatedAssets: data['total-created-assets'],\n      appsLocalState:\n        typeof data['apps-local-state'] !== 'undefined'\n          ? data['apps-local-state'].map(\n              ApplicationLocalState.from_obj_for_encoding\n            )\n          : undefined,\n      appsTotalExtraPages: data['apps-total-extra-pages'],\n      appsTotalSchema:\n        typeof data['apps-total-schema'] !== 'undefined'\n          ? ApplicationStateSchema.from_obj_for_encoding(\n              data['apps-total-schema']\n            )\n          : undefined,\n      assets:\n        typeof data['assets'] !== 'undefined'\n          ? data['assets'].map(AssetHolding.from_obj_for_encoding)\n          : undefined,\n      authAddr: data['auth-addr'],\n      closedAtRound: data['closed-at-round'],\n      createdApps:\n        typeof data['created-apps'] !== 'undefined'\n          ? data['created-apps'].map(Application.from_obj_for_encoding)\n          : undefined,\n      createdAssets:\n        typeof data['created-assets'] !== 'undefined'\n          ? data['created-assets'].map(Asset.from_obj_for_encoding)\n          : undefined,\n      createdAtRound: data['created-at-round'],\n      deleted: data['deleted'],\n      participation:\n        typeof data['participation'] !== 'undefined'\n          ? AccountParticipation.from_obj_for_encoding(data['participation'])\n          : undefined,\n      rewardBase: data['reward-base'],\n      sigType: data['sig-type'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * AccountParticipation describes the parameters used by this account in consensus\n * protocol.\n */\nexport class AccountParticipation extends BaseModel {\n  /**\n   * (sel) Selection public key (if any) currently registered for this round.\n   */\n  public selectionParticipationKey: Uint8Array;\n\n  /**\n   * (voteFst) First round for which this participation is valid.\n   */\n  public voteFirstValid: number | bigint;\n\n  /**\n   * (voteKD) Number of subkeys in each batch of participation keys.\n   */\n  public voteKeyDilution: number | bigint;\n\n  /**\n   * (voteLst) Last round for which this participation is valid.\n   */\n  public voteLastValid: number | bigint;\n\n  /**\n   * (vote) root participation public key (if any) currently registered for this\n   * round.\n   */\n  public voteParticipationKey: Uint8Array;\n\n  /**\n   * (stprf) Root of the state proof key (if any)\n   */\n  public stateProofKey?: Uint8Array;\n\n  /**\n   * Creates a new `AccountParticipation` object.\n   * @param selectionParticipationKey - (sel) Selection public key (if any) currently registered for this round.\n   * @param voteFirstValid - (voteFst) First round for which this participation is valid.\n   * @param voteKeyDilution - (voteKD) Number of subkeys in each batch of participation keys.\n   * @param voteLastValid - (voteLst) Last round for which this participation is valid.\n   * @param voteParticipationKey - (vote) root participation public key (if any) currently registered for this\n   * round.\n   * @param stateProofKey - (stprf) Root of the state proof key (if any)\n   */\n  constructor({\n    selectionParticipationKey,\n    voteFirstValid,\n    voteKeyDilution,\n    voteLastValid,\n    voteParticipationKey,\n    stateProofKey,\n  }: {\n    selectionParticipationKey: string | Uint8Array;\n    voteFirstValid: number | bigint;\n    voteKeyDilution: number | bigint;\n    voteLastValid: number | bigint;\n    voteParticipationKey: string | Uint8Array;\n    stateProofKey?: string | Uint8Array;\n  }) {\n    super();\n    this.selectionParticipationKey =\n      typeof selectionParticipationKey === 'string'\n        ? new Uint8Array(Buffer.from(selectionParticipationKey, 'base64'))\n        : selectionParticipationKey;\n    this.voteFirstValid = voteFirstValid;\n    this.voteKeyDilution = voteKeyDilution;\n    this.voteLastValid = voteLastValid;\n    this.voteParticipationKey =\n      typeof voteParticipationKey === 'string'\n        ? new Uint8Array(Buffer.from(voteParticipationKey, 'base64'))\n        : voteParticipationKey;\n    this.stateProofKey =\n      typeof stateProofKey === 'string'\n        ? new Uint8Array(Buffer.from(stateProofKey, 'base64'))\n        : stateProofKey;\n\n    this.attribute_map = {\n      selectionParticipationKey: 'selection-participation-key',\n      voteFirstValid: 'vote-first-valid',\n      voteKeyDilution: 'vote-key-dilution',\n      voteLastValid: 'vote-last-valid',\n      voteParticipationKey: 'vote-participation-key',\n      stateProofKey: 'state-proof-key',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): AccountParticipation {\n    /* eslint-disable dot-notation */\n    if (typeof data['selection-participation-key'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'selection-participation-key': ${data}`\n      );\n    if (typeof data['vote-first-valid'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'vote-first-valid': ${data}`\n      );\n    if (typeof data['vote-key-dilution'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'vote-key-dilution': ${data}`\n      );\n    if (typeof data['vote-last-valid'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'vote-last-valid': ${data}`\n      );\n    if (typeof data['vote-participation-key'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'vote-participation-key': ${data}`\n      );\n    return new AccountParticipation({\n      selectionParticipationKey: data['selection-participation-key'],\n      voteFirstValid: data['vote-first-valid'],\n      voteKeyDilution: data['vote-key-dilution'],\n      voteLastValid: data['vote-last-valid'],\n      voteParticipationKey: data['vote-participation-key'],\n      stateProofKey: data['state-proof-key'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n *\n */\nexport class AccountResponse extends BaseModel {\n  /**\n   * Account information at a given round.\n   * Definition:\n   * data/basics/userBalance.go : AccountData\n   */\n  public account: Account;\n\n  /**\n   * Round at which the results were computed.\n   */\n  public currentRound: number | bigint;\n\n  /**\n   * Creates a new `AccountResponse` object.\n   * @param account - Account information at a given round.\n   * Definition:\n   * data/basics/userBalance.go : AccountData\n   * @param currentRound - Round at which the results were computed.\n   */\n  constructor({\n    account,\n    currentRound,\n  }: {\n    account: Account;\n    currentRound: number | bigint;\n  }) {\n    super();\n    this.account = account;\n    this.currentRound = currentRound;\n\n    this.attribute_map = {\n      account: 'account',\n      currentRound: 'current-round',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): AccountResponse {\n    /* eslint-disable dot-notation */\n    if (typeof data['account'] === 'undefined')\n      throw new Error(`Response is missing required field 'account': ${data}`);\n    if (typeof data['current-round'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'current-round': ${data}`\n      );\n    return new AccountResponse({\n      account: Account.from_obj_for_encoding(data['account']),\n      currentRound: data['current-round'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Application state delta.\n */\nexport class AccountStateDelta extends BaseModel {\n  public address: string;\n\n  /**\n   * Application state delta.\n   */\n  public delta: EvalDeltaKeyValue[];\n\n  /**\n   * Creates a new `AccountStateDelta` object.\n   * @param address -\n   * @param delta - Application state delta.\n   */\n  constructor({\n    address,\n    delta,\n  }: {\n    address: string;\n    delta: EvalDeltaKeyValue[];\n  }) {\n    super();\n    this.address = address;\n    this.delta = delta;\n\n    this.attribute_map = {\n      address: 'address',\n      delta: 'delta',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): AccountStateDelta {\n    /* eslint-disable dot-notation */\n    if (typeof data['address'] === 'undefined')\n      throw new Error(`Response is missing required field 'address': ${data}`);\n    if (!Array.isArray(data['delta']))\n      throw new Error(\n        `Response is missing required array field 'delta': ${data}`\n      );\n    return new AccountStateDelta({\n      address: data['address'],\n      delta: data['delta'].map(EvalDeltaKeyValue.from_obj_for_encoding),\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n *\n */\nexport class AccountsResponse extends BaseModel {\n  public accounts: Account[];\n\n  /**\n   * Round at which the results were computed.\n   */\n  public currentRound: number | bigint;\n\n  /**\n   * Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  public nextToken?: string;\n\n  /**\n   * Creates a new `AccountsResponse` object.\n   * @param accounts -\n   * @param currentRound - Round at which the results were computed.\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  constructor({\n    accounts,\n    currentRound,\n    nextToken,\n  }: {\n    accounts: Account[];\n    currentRound: number | bigint;\n    nextToken?: string;\n  }) {\n    super();\n    this.accounts = accounts;\n    this.currentRound = currentRound;\n    this.nextToken = nextToken;\n\n    this.attribute_map = {\n      accounts: 'accounts',\n      currentRound: 'current-round',\n      nextToken: 'next-token',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): AccountsResponse {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['accounts']))\n      throw new Error(\n        `Response is missing required array field 'accounts': ${data}`\n      );\n    if (typeof data['current-round'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'current-round': ${data}`\n      );\n    return new AccountsResponse({\n      accounts: data['accounts'].map(Account.from_obj_for_encoding),\n      currentRound: data['current-round'],\n      nextToken: data['next-token'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Application index and its parameters\n */\nexport class Application extends BaseModel {\n  /**\n   * (appidx) application index.\n   */\n  public id: number | bigint;\n\n  /**\n   * (appparams) application parameters.\n   */\n  public params: ApplicationParams;\n\n  /**\n   * Round when this application was created.\n   */\n  public createdAtRound?: number | bigint;\n\n  /**\n   * Whether or not this application is currently deleted.\n   */\n  public deleted?: boolean;\n\n  /**\n   * Round when this application was deleted.\n   */\n  public deletedAtRound?: number | bigint;\n\n  /**\n   * Creates a new `Application` object.\n   * @param id - (appidx) application index.\n   * @param params - (appparams) application parameters.\n   * @param createdAtRound - Round when this application was created.\n   * @param deleted - Whether or not this application is currently deleted.\n   * @param deletedAtRound - Round when this application was deleted.\n   */\n  constructor({\n    id,\n    params,\n    createdAtRound,\n    deleted,\n    deletedAtRound,\n  }: {\n    id: number | bigint;\n    params: ApplicationParams;\n    createdAtRound?: number | bigint;\n    deleted?: boolean;\n    deletedAtRound?: number | bigint;\n  }) {\n    super();\n    this.id = id;\n    this.params = params;\n    this.createdAtRound = createdAtRound;\n    this.deleted = deleted;\n    this.deletedAtRound = deletedAtRound;\n\n    this.attribute_map = {\n      id: 'id',\n      params: 'params',\n      createdAtRound: 'created-at-round',\n      deleted: 'deleted',\n      deletedAtRound: 'deleted-at-round',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): Application {\n    /* eslint-disable dot-notation */\n    if (typeof data['id'] === 'undefined')\n      throw new Error(`Response is missing required field 'id': ${data}`);\n    if (typeof data['params'] === 'undefined')\n      throw new Error(`Response is missing required field 'params': ${data}`);\n    return new Application({\n      id: data['id'],\n      params: ApplicationParams.from_obj_for_encoding(data['params']),\n      createdAtRound: data['created-at-round'],\n      deleted: data['deleted'],\n      deletedAtRound: data['deleted-at-round'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Stores local state associated with an application.\n */\nexport class ApplicationLocalState extends BaseModel {\n  /**\n   * The application which this local state is for.\n   */\n  public id: number | bigint;\n\n  /**\n   * (hsch) schema.\n   */\n  public schema: ApplicationStateSchema;\n\n  /**\n   * Round when account closed out of the application.\n   */\n  public closedOutAtRound?: number | bigint;\n\n  /**\n   * Whether or not the application local state is currently deleted from its\n   * account.\n   */\n  public deleted?: boolean;\n\n  /**\n   * (tkv) storage.\n   */\n  public keyValue?: TealKeyValue[];\n\n  /**\n   * Round when the account opted into the application.\n   */\n  public optedInAtRound?: number | bigint;\n\n  /**\n   * Creates a new `ApplicationLocalState` object.\n   * @param id - The application which this local state is for.\n   * @param schema - (hsch) schema.\n   * @param closedOutAtRound - Round when account closed out of the application.\n   * @param deleted - Whether or not the application local state is currently deleted from its\n   * account.\n   * @param keyValue - (tkv) storage.\n   * @param optedInAtRound - Round when the account opted into the application.\n   */\n  constructor({\n    id,\n    schema,\n    closedOutAtRound,\n    deleted,\n    keyValue,\n    optedInAtRound,\n  }: {\n    id: number | bigint;\n    schema: ApplicationStateSchema;\n    closedOutAtRound?: number | bigint;\n    deleted?: boolean;\n    keyValue?: TealKeyValue[];\n    optedInAtRound?: number | bigint;\n  }) {\n    super();\n    this.id = id;\n    this.schema = schema;\n    this.closedOutAtRound = closedOutAtRound;\n    this.deleted = deleted;\n    this.keyValue = keyValue;\n    this.optedInAtRound = optedInAtRound;\n\n    this.attribute_map = {\n      id: 'id',\n      schema: 'schema',\n      closedOutAtRound: 'closed-out-at-round',\n      deleted: 'deleted',\n      keyValue: 'key-value',\n      optedInAtRound: 'opted-in-at-round',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): ApplicationLocalState {\n    /* eslint-disable dot-notation */\n    if (typeof data['id'] === 'undefined')\n      throw new Error(`Response is missing required field 'id': ${data}`);\n    if (typeof data['schema'] === 'undefined')\n      throw new Error(`Response is missing required field 'schema': ${data}`);\n    return new ApplicationLocalState({\n      id: data['id'],\n      schema: ApplicationStateSchema.from_obj_for_encoding(data['schema']),\n      closedOutAtRound: data['closed-out-at-round'],\n      deleted: data['deleted'],\n      keyValue:\n        typeof data['key-value'] !== 'undefined'\n          ? data['key-value'].map(TealKeyValue.from_obj_for_encoding)\n          : undefined,\n      optedInAtRound: data['opted-in-at-round'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n *\n */\nexport class ApplicationLocalStatesResponse extends BaseModel {\n  public appsLocalStates: ApplicationLocalState[];\n\n  /**\n   * Round at which the results were computed.\n   */\n  public currentRound: number | bigint;\n\n  /**\n   * Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  public nextToken?: string;\n\n  /**\n   * Creates a new `ApplicationLocalStatesResponse` object.\n   * @param appsLocalStates -\n   * @param currentRound - Round at which the results were computed.\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  constructor({\n    appsLocalStates,\n    currentRound,\n    nextToken,\n  }: {\n    appsLocalStates: ApplicationLocalState[];\n    currentRound: number | bigint;\n    nextToken?: string;\n  }) {\n    super();\n    this.appsLocalStates = appsLocalStates;\n    this.currentRound = currentRound;\n    this.nextToken = nextToken;\n\n    this.attribute_map = {\n      appsLocalStates: 'apps-local-states',\n      currentRound: 'current-round',\n      nextToken: 'next-token',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): ApplicationLocalStatesResponse {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['apps-local-states']))\n      throw new Error(\n        `Response is missing required array field 'apps-local-states': ${data}`\n      );\n    if (typeof data['current-round'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'current-round': ${data}`\n      );\n    return new ApplicationLocalStatesResponse({\n      appsLocalStates: data['apps-local-states'].map(\n        ApplicationLocalState.from_obj_for_encoding\n      ),\n      currentRound: data['current-round'],\n      nextToken: data['next-token'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Stores the global information associated with an application.\n */\nexport class ApplicationLogData extends BaseModel {\n  /**\n   * (lg) Logs for the application being executed by the transaction.\n   */\n  public logs: Uint8Array[];\n\n  /**\n   * Transaction ID\n   */\n  public txid: string;\n\n  /**\n   * Creates a new `ApplicationLogData` object.\n   * @param logs - (lg) Logs for the application being executed by the transaction.\n   * @param txid - Transaction ID\n   */\n  constructor({ logs, txid }: { logs: Uint8Array[]; txid: string }) {\n    super();\n    this.logs = logs;\n    this.txid = txid;\n\n    this.attribute_map = {\n      logs: 'logs',\n      txid: 'txid',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): ApplicationLogData {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['logs']))\n      throw new Error(\n        `Response is missing required array field 'logs': ${data}`\n      );\n    if (typeof data['txid'] === 'undefined')\n      throw new Error(`Response is missing required field 'txid': ${data}`);\n    return new ApplicationLogData({\n      logs: data['logs'],\n      txid: data['txid'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n *\n */\nexport class ApplicationLogsResponse extends BaseModel {\n  /**\n   * (appidx) application index.\n   */\n  public applicationId: number | bigint;\n\n  /**\n   * Round at which the results were computed.\n   */\n  public currentRound: number | bigint;\n\n  public logData?: ApplicationLogData[];\n\n  /**\n   * Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  public nextToken?: string;\n\n  /**\n   * Creates a new `ApplicationLogsResponse` object.\n   * @param applicationId - (appidx) application index.\n   * @param currentRound - Round at which the results were computed.\n   * @param logData -\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  constructor({\n    applicationId,\n    currentRound,\n    logData,\n    nextToken,\n  }: {\n    applicationId: number | bigint;\n    currentRound: number | bigint;\n    logData?: ApplicationLogData[];\n    nextToken?: string;\n  }) {\n    super();\n    this.applicationId = applicationId;\n    this.currentRound = currentRound;\n    this.logData = logData;\n    this.nextToken = nextToken;\n\n    this.attribute_map = {\n      applicationId: 'application-id',\n      currentRound: 'current-round',\n      logData: 'log-data',\n      nextToken: 'next-token',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): ApplicationLogsResponse {\n    /* eslint-disable dot-notation */\n    if (typeof data['application-id'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'application-id': ${data}`\n      );\n    if (typeof data['current-round'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'current-round': ${data}`\n      );\n    return new ApplicationLogsResponse({\n      applicationId: data['application-id'],\n      currentRound: data['current-round'],\n      logData:\n        typeof data['log-data'] !== 'undefined'\n          ? data['log-data'].map(ApplicationLogData.from_obj_for_encoding)\n          : undefined,\n      nextToken: data['next-token'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Stores the global information associated with an application.\n */\nexport class ApplicationParams extends BaseModel {\n  /**\n   * (approv) approval program.\n   */\n  public approvalProgram: Uint8Array;\n\n  /**\n   * (clearp) approval program.\n   */\n  public clearStateProgram: Uint8Array;\n\n  /**\n   * The address that created this application. This is the address where the\n   * parameters and global state for this application can be found.\n   */\n  public creator?: string;\n\n  /**\n   * (epp) the amount of extra program pages available to this app.\n   */\n  public extraProgramPages?: number | bigint;\n\n  /**\n   * [\\gs) global schema\n   */\n  public globalState?: TealKeyValue[];\n\n  /**\n   * [\\gsch) global schema\n   */\n  public globalStateSchema?: ApplicationStateSchema;\n\n  /**\n   * [\\lsch) local schema\n   */\n  public localStateSchema?: ApplicationStateSchema;\n\n  /**\n   * Creates a new `ApplicationParams` object.\n   * @param approvalProgram - (approv) approval program.\n   * @param clearStateProgram - (clearp) approval program.\n   * @param creator - The address that created this application. This is the address where the\n   * parameters and global state for this application can be found.\n   * @param extraProgramPages - (epp) the amount of extra program pages available to this app.\n   * @param globalState - [\\gs) global schema\n   * @param globalStateSchema - [\\gsch) global schema\n   * @param localStateSchema - [\\lsch) local schema\n   */\n  constructor({\n    approvalProgram,\n    clearStateProgram,\n    creator,\n    extraProgramPages,\n    globalState,\n    globalStateSchema,\n    localStateSchema,\n  }: {\n    approvalProgram: string | Uint8Array;\n    clearStateProgram: string | Uint8Array;\n    creator?: string;\n    extraProgramPages?: number | bigint;\n    globalState?: TealKeyValue[];\n    globalStateSchema?: ApplicationStateSchema;\n    localStateSchema?: ApplicationStateSchema;\n  }) {\n    super();\n    this.approvalProgram =\n      typeof approvalProgram === 'string'\n        ? new Uint8Array(Buffer.from(approvalProgram, 'base64'))\n        : approvalProgram;\n    this.clearStateProgram =\n      typeof clearStateProgram === 'string'\n        ? new Uint8Array(Buffer.from(clearStateProgram, 'base64'))\n        : clearStateProgram;\n    this.creator = creator;\n    this.extraProgramPages = extraProgramPages;\n    this.globalState = globalState;\n    this.globalStateSchema = globalStateSchema;\n    this.localStateSchema = localStateSchema;\n\n    this.attribute_map = {\n      approvalProgram: 'approval-program',\n      clearStateProgram: 'clear-state-program',\n      creator: 'creator',\n      extraProgramPages: 'extra-program-pages',\n      globalState: 'global-state',\n      globalStateSchema: 'global-state-schema',\n      localStateSchema: 'local-state-schema',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): ApplicationParams {\n    /* eslint-disable dot-notation */\n    if (typeof data['approval-program'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'approval-program': ${data}`\n      );\n    if (typeof data['clear-state-program'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'clear-state-program': ${data}`\n      );\n    return new ApplicationParams({\n      approvalProgram: data['approval-program'],\n      clearStateProgram: data['clear-state-program'],\n      creator: data['creator'],\n      extraProgramPages: data['extra-program-pages'],\n      globalState:\n        typeof data['global-state'] !== 'undefined'\n          ? data['global-state'].map(TealKeyValue.from_obj_for_encoding)\n          : undefined,\n      globalStateSchema:\n        typeof data['global-state-schema'] !== 'undefined'\n          ? ApplicationStateSchema.from_obj_for_encoding(\n              data['global-state-schema']\n            )\n          : undefined,\n      localStateSchema:\n        typeof data['local-state-schema'] !== 'undefined'\n          ? ApplicationStateSchema.from_obj_for_encoding(\n              data['local-state-schema']\n            )\n          : undefined,\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n *\n */\nexport class ApplicationResponse extends BaseModel {\n  /**\n   * Round at which the results were computed.\n   */\n  public currentRound: number | bigint;\n\n  /**\n   * Application index and its parameters\n   */\n  public application?: Application;\n\n  /**\n   * Creates a new `ApplicationResponse` object.\n   * @param currentRound - Round at which the results were computed.\n   * @param application - Application index and its parameters\n   */\n  constructor({\n    currentRound,\n    application,\n  }: {\n    currentRound: number | bigint;\n    application?: Application;\n  }) {\n    super();\n    this.currentRound = currentRound;\n    this.application = application;\n\n    this.attribute_map = {\n      currentRound: 'current-round',\n      application: 'application',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): ApplicationResponse {\n    /* eslint-disable dot-notation */\n    if (typeof data['current-round'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'current-round': ${data}`\n      );\n    return new ApplicationResponse({\n      currentRound: data['current-round'],\n      application:\n        typeof data['application'] !== 'undefined'\n          ? Application.from_obj_for_encoding(data['application'])\n          : undefined,\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Specifies maximums on the number of each type that may be stored.\n */\nexport class ApplicationStateSchema extends BaseModel {\n  /**\n   * (nbs) num of byte slices.\n   */\n  public numByteSlice: number | bigint;\n\n  /**\n   * (nui) num of uints.\n   */\n  public numUint: number | bigint;\n\n  /**\n   * Creates a new `ApplicationStateSchema` object.\n   * @param numByteSlice - (nbs) num of byte slices.\n   * @param numUint - (nui) num of uints.\n   */\n  constructor({\n    numByteSlice,\n    numUint,\n  }: {\n    numByteSlice: number | bigint;\n    numUint: number | bigint;\n  }) {\n    super();\n    this.numByteSlice = numByteSlice;\n    this.numUint = numUint;\n\n    this.attribute_map = {\n      numByteSlice: 'num-byte-slice',\n      numUint: 'num-uint',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): ApplicationStateSchema {\n    /* eslint-disable dot-notation */\n    if (typeof data['num-byte-slice'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'num-byte-slice': ${data}`\n      );\n    if (typeof data['num-uint'] === 'undefined')\n      throw new Error(`Response is missing required field 'num-uint': ${data}`);\n    return new ApplicationStateSchema({\n      numByteSlice: data['num-byte-slice'],\n      numUint: data['num-uint'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n *\n */\nexport class ApplicationsResponse extends BaseModel {\n  public applications: Application[];\n\n  /**\n   * Round at which the results were computed.\n   */\n  public currentRound: number | bigint;\n\n  /**\n   * Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  public nextToken?: string;\n\n  /**\n   * Creates a new `ApplicationsResponse` object.\n   * @param applications -\n   * @param currentRound - Round at which the results were computed.\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  constructor({\n    applications,\n    currentRound,\n    nextToken,\n  }: {\n    applications: Application[];\n    currentRound: number | bigint;\n    nextToken?: string;\n  }) {\n    super();\n    this.applications = applications;\n    this.currentRound = currentRound;\n    this.nextToken = nextToken;\n\n    this.attribute_map = {\n      applications: 'applications',\n      currentRound: 'current-round',\n      nextToken: 'next-token',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): ApplicationsResponse {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['applications']))\n      throw new Error(\n        `Response is missing required array field 'applications': ${data}`\n      );\n    if (typeof data['current-round'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'current-round': ${data}`\n      );\n    return new ApplicationsResponse({\n      applications: data['applications'].map(Application.from_obj_for_encoding),\n      currentRound: data['current-round'],\n      nextToken: data['next-token'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Specifies both the unique identifier and the parameters for an asset\n */\nexport class Asset extends BaseModel {\n  /**\n   * unique asset identifier\n   */\n  public index: number | bigint;\n\n  /**\n   * AssetParams specifies the parameters for an asset.\n   * (apar) when part of an AssetConfig transaction.\n   * Definition:\n   * data/transactions/asset.go : AssetParams\n   */\n  public params: AssetParams;\n\n  /**\n   * Round during which this asset was created.\n   */\n  public createdAtRound?: number | bigint;\n\n  /**\n   * Whether or not this asset is currently deleted.\n   */\n  public deleted?: boolean;\n\n  /**\n   * Round during which this asset was destroyed.\n   */\n  public destroyedAtRound?: number | bigint;\n\n  /**\n   * Creates a new `Asset` object.\n   * @param index - unique asset identifier\n   * @param params - AssetParams specifies the parameters for an asset.\n   * (apar) when part of an AssetConfig transaction.\n   * Definition:\n   * data/transactions/asset.go : AssetParams\n   * @param createdAtRound - Round during which this asset was created.\n   * @param deleted - Whether or not this asset is currently deleted.\n   * @param destroyedAtRound - Round during which this asset was destroyed.\n   */\n  constructor({\n    index,\n    params,\n    createdAtRound,\n    deleted,\n    destroyedAtRound,\n  }: {\n    index: number | bigint;\n    params: AssetParams;\n    createdAtRound?: number | bigint;\n    deleted?: boolean;\n    destroyedAtRound?: number | bigint;\n  }) {\n    super();\n    this.index = index;\n    this.params = params;\n    this.createdAtRound = createdAtRound;\n    this.deleted = deleted;\n    this.destroyedAtRound = destroyedAtRound;\n\n    this.attribute_map = {\n      index: 'index',\n      params: 'params',\n      createdAtRound: 'created-at-round',\n      deleted: 'deleted',\n      destroyedAtRound: 'destroyed-at-round',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): Asset {\n    /* eslint-disable dot-notation */\n    if (typeof data['index'] === 'undefined')\n      throw new Error(`Response is missing required field 'index': ${data}`);\n    if (typeof data['params'] === 'undefined')\n      throw new Error(`Response is missing required field 'params': ${data}`);\n    return new Asset({\n      index: data['index'],\n      params: AssetParams.from_obj_for_encoding(data['params']),\n      createdAtRound: data['created-at-round'],\n      deleted: data['deleted'],\n      destroyedAtRound: data['destroyed-at-round'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n *\n */\nexport class AssetBalancesResponse extends BaseModel {\n  public balances: MiniAssetHolding[];\n\n  /**\n   * Round at which the results were computed.\n   */\n  public currentRound: number | bigint;\n\n  /**\n   * Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  public nextToken?: string;\n\n  /**\n   * Creates a new `AssetBalancesResponse` object.\n   * @param balances -\n   * @param currentRound - Round at which the results were computed.\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  constructor({\n    balances,\n    currentRound,\n    nextToken,\n  }: {\n    balances: MiniAssetHolding[];\n    currentRound: number | bigint;\n    nextToken?: string;\n  }) {\n    super();\n    this.balances = balances;\n    this.currentRound = currentRound;\n    this.nextToken = nextToken;\n\n    this.attribute_map = {\n      balances: 'balances',\n      currentRound: 'current-round',\n      nextToken: 'next-token',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): AssetBalancesResponse {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['balances']))\n      throw new Error(\n        `Response is missing required array field 'balances': ${data}`\n      );\n    if (typeof data['current-round'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'current-round': ${data}`\n      );\n    return new AssetBalancesResponse({\n      balances: data['balances'].map(MiniAssetHolding.from_obj_for_encoding),\n      currentRound: data['current-round'],\n      nextToken: data['next-token'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Describes an asset held by an account.\n * Definition:\n * data/basics/userBalance.go : AssetHolding\n */\nexport class AssetHolding extends BaseModel {\n  /**\n   * (a) number of units held.\n   */\n  public amount: number | bigint;\n\n  /**\n   * Asset ID of the holding.\n   */\n  public assetId: number | bigint;\n\n  /**\n   * (f) whether or not the holding is frozen.\n   */\n  public isFrozen: boolean;\n\n  /**\n   * Whether or not the asset holding is currently deleted from its account.\n   */\n  public deleted?: boolean;\n\n  /**\n   * Round during which the account opted into this asset holding.\n   */\n  public optedInAtRound?: number | bigint;\n\n  /**\n   * Round during which the account opted out of this asset holding.\n   */\n  public optedOutAtRound?: number | bigint;\n\n  /**\n   * Creates a new `AssetHolding` object.\n   * @param amount - (a) number of units held.\n   * @param assetId - Asset ID of the holding.\n   * @param isFrozen - (f) whether or not the holding is frozen.\n   * @param deleted - Whether or not the asset holding is currently deleted from its account.\n   * @param optedInAtRound - Round during which the account opted into this asset holding.\n   * @param optedOutAtRound - Round during which the account opted out of this asset holding.\n   */\n  constructor({\n    amount,\n    assetId,\n    isFrozen,\n    deleted,\n    optedInAtRound,\n    optedOutAtRound,\n  }: {\n    amount: number | bigint;\n    assetId: number | bigint;\n    isFrozen: boolean;\n    deleted?: boolean;\n    optedInAtRound?: number | bigint;\n    optedOutAtRound?: number | bigint;\n  }) {\n    super();\n    this.amount = amount;\n    this.assetId = assetId;\n    this.isFrozen = isFrozen;\n    this.deleted = deleted;\n    this.optedInAtRound = optedInAtRound;\n    this.optedOutAtRound = optedOutAtRound;\n\n    this.attribute_map = {\n      amount: 'amount',\n      assetId: 'asset-id',\n      isFrozen: 'is-frozen',\n      deleted: 'deleted',\n      optedInAtRound: 'opted-in-at-round',\n      optedOutAtRound: 'opted-out-at-round',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): AssetHolding {\n    /* eslint-disable dot-notation */\n    if (typeof data['amount'] === 'undefined')\n      throw new Error(`Response is missing required field 'amount': ${data}`);\n    if (typeof data['asset-id'] === 'undefined')\n      throw new Error(`Response is missing required field 'asset-id': ${data}`);\n    if (typeof data['is-frozen'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'is-frozen': ${data}`\n      );\n    return new AssetHolding({\n      amount: data['amount'],\n      assetId: data['asset-id'],\n      isFrozen: data['is-frozen'],\n      deleted: data['deleted'],\n      optedInAtRound: data['opted-in-at-round'],\n      optedOutAtRound: data['opted-out-at-round'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n *\n */\nexport class AssetHoldingsResponse extends BaseModel {\n  public assets: AssetHolding[];\n\n  /**\n   * Round at which the results were computed.\n   */\n  public currentRound: number | bigint;\n\n  /**\n   * Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  public nextToken?: string;\n\n  /**\n   * Creates a new `AssetHoldingsResponse` object.\n   * @param assets -\n   * @param currentRound - Round at which the results were computed.\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  constructor({\n    assets,\n    currentRound,\n    nextToken,\n  }: {\n    assets: AssetHolding[];\n    currentRound: number | bigint;\n    nextToken?: string;\n  }) {\n    super();\n    this.assets = assets;\n    this.currentRound = currentRound;\n    this.nextToken = nextToken;\n\n    this.attribute_map = {\n      assets: 'assets',\n      currentRound: 'current-round',\n      nextToken: 'next-token',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): AssetHoldingsResponse {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['assets']))\n      throw new Error(\n        `Response is missing required array field 'assets': ${data}`\n      );\n    if (typeof data['current-round'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'current-round': ${data}`\n      );\n    return new AssetHoldingsResponse({\n      assets: data['assets'].map(AssetHolding.from_obj_for_encoding),\n      currentRound: data['current-round'],\n      nextToken: data['next-token'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * AssetParams specifies the parameters for an asset.\n * (apar) when part of an AssetConfig transaction.\n * Definition:\n * data/transactions/asset.go : AssetParams\n */\nexport class AssetParams extends BaseModel {\n  /**\n   * The address that created this asset. This is the address where the parameters\n   * for this asset can be found, and also the address where unwanted asset units can\n   * be sent in the worst case.\n   */\n  public creator: string;\n\n  /**\n   * (dc) The number of digits to use after the decimal point when displaying this\n   * asset. If 0, the asset is not divisible. If 1, the base unit of the asset is in\n   * tenths. If 2, the base unit of the asset is in hundredths, and so on. This value\n   * must be between 0 and 19 (inclusive).\n   */\n  public decimals: number | bigint;\n\n  /**\n   * (t) The total number of units of this asset.\n   */\n  public total: number | bigint;\n\n  /**\n   * (c) Address of account used to clawback holdings of this asset. If empty,\n   * clawback is not permitted.\n   */\n  public clawback?: string;\n\n  /**\n   * (df) Whether holdings of this asset are frozen by default.\n   */\n  public defaultFrozen?: boolean;\n\n  /**\n   * (f) Address of account used to freeze holdings of this asset. If empty, freezing\n   * is not permitted.\n   */\n  public freeze?: string;\n\n  /**\n   * (m) Address of account used to manage the keys of this asset and to destroy it.\n   */\n  public manager?: string;\n\n  /**\n   * (am) A commitment to some unspecified asset metadata. The format of this\n   * metadata is up to the application.\n   */\n  public metadataHash?: Uint8Array;\n\n  /**\n   * (an) Name of this asset, as supplied by the creator. Included only when the\n   * asset name is composed of printable utf-8 characters.\n   */\n  public name?: string;\n\n  /**\n   * Base64 encoded name of this asset, as supplied by the creator.\n   */\n  public nameB64?: Uint8Array;\n\n  /**\n   * (r) Address of account holding reserve (non-minted) units of this asset.\n   */\n  public reserve?: string;\n\n  /**\n   * (un) Name of a unit of this asset, as supplied by the creator. Included only\n   * when the name of a unit of this asset is composed of printable utf-8 characters.\n   */\n  public unitName?: string;\n\n  /**\n   * Base64 encoded name of a unit of this asset, as supplied by the creator.\n   */\n  public unitNameB64?: Uint8Array;\n\n  /**\n   * (au) URL where more information about the asset can be retrieved. Included only\n   * when the URL is composed of printable utf-8 characters.\n   */\n  public url?: string;\n\n  /**\n   * Base64 encoded URL where more information about the asset can be retrieved.\n   */\n  public urlB64?: Uint8Array;\n\n  /**\n   * Creates a new `AssetParams` object.\n   * @param creator - The address that created this asset. This is the address where the parameters\n   * for this asset can be found, and also the address where unwanted asset units can\n   * be sent in the worst case.\n   * @param decimals - (dc) The number of digits to use after the decimal point when displaying this\n   * asset. If 0, the asset is not divisible. If 1, the base unit of the asset is in\n   * tenths. If 2, the base unit of the asset is in hundredths, and so on. This value\n   * must be between 0 and 19 (inclusive).\n   * @param total - (t) The total number of units of this asset.\n   * @param clawback - (c) Address of account used to clawback holdings of this asset. If empty,\n   * clawback is not permitted.\n   * @param defaultFrozen - (df) Whether holdings of this asset are frozen by default.\n   * @param freeze - (f) Address of account used to freeze holdings of this asset. If empty, freezing\n   * is not permitted.\n   * @param manager - (m) Address of account used to manage the keys of this asset and to destroy it.\n   * @param metadataHash - (am) A commitment to some unspecified asset metadata. The format of this\n   * metadata is up to the application.\n   * @param name - (an) Name of this asset, as supplied by the creator. Included only when the\n   * asset name is composed of printable utf-8 characters.\n   * @param nameB64 - Base64 encoded name of this asset, as supplied by the creator.\n   * @param reserve - (r) Address of account holding reserve (non-minted) units of this asset.\n   * @param unitName - (un) Name of a unit of this asset, as supplied by the creator. Included only\n   * when the name of a unit of this asset is composed of printable utf-8 characters.\n   * @param unitNameB64 - Base64 encoded name of a unit of this asset, as supplied by the creator.\n   * @param url - (au) URL where more information about the asset can be retrieved. Included only\n   * when the URL is composed of printable utf-8 characters.\n   * @param urlB64 - Base64 encoded URL where more information about the asset can be retrieved.\n   */\n  constructor({\n    creator,\n    decimals,\n    total,\n    clawback,\n    defaultFrozen,\n    freeze,\n    manager,\n    metadataHash,\n    name,\n    nameB64,\n    reserve,\n    unitName,\n    unitNameB64,\n    url,\n    urlB64,\n  }: {\n    creator: string;\n    decimals: number | bigint;\n    total: number | bigint;\n    clawback?: string;\n    defaultFrozen?: boolean;\n    freeze?: string;\n    manager?: string;\n    metadataHash?: string | Uint8Array;\n    name?: string;\n    nameB64?: string | Uint8Array;\n    reserve?: string;\n    unitName?: string;\n    unitNameB64?: string | Uint8Array;\n    url?: string;\n    urlB64?: string | Uint8Array;\n  }) {\n    super();\n    this.creator = creator;\n    this.decimals = decimals;\n    this.total = total;\n    this.clawback = clawback;\n    this.defaultFrozen = defaultFrozen;\n    this.freeze = freeze;\n    this.manager = manager;\n    this.metadataHash =\n      typeof metadataHash === 'string'\n        ? new Uint8Array(Buffer.from(metadataHash, 'base64'))\n        : metadataHash;\n    this.name = name;\n    this.nameB64 =\n      typeof nameB64 === 'string'\n        ? new Uint8Array(Buffer.from(nameB64, 'base64'))\n        : nameB64;\n    this.reserve = reserve;\n    this.unitName = unitName;\n    this.unitNameB64 =\n      typeof unitNameB64 === 'string'\n        ? new Uint8Array(Buffer.from(unitNameB64, 'base64'))\n        : unitNameB64;\n    this.url = url;\n    this.urlB64 =\n      typeof urlB64 === 'string'\n        ? new Uint8Array(Buffer.from(urlB64, 'base64'))\n        : urlB64;\n\n    this.attribute_map = {\n      creator: 'creator',\n      decimals: 'decimals',\n      total: 'total',\n      clawback: 'clawback',\n      defaultFrozen: 'default-frozen',\n      freeze: 'freeze',\n      manager: 'manager',\n      metadataHash: 'metadata-hash',\n      name: 'name',\n      nameB64: 'name-b64',\n      reserve: 'reserve',\n      unitName: 'unit-name',\n      unitNameB64: 'unit-name-b64',\n      url: 'url',\n      urlB64: 'url-b64',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): AssetParams {\n    /* eslint-disable dot-notation */\n    if (typeof data['creator'] === 'undefined')\n      throw new Error(`Response is missing required field 'creator': ${data}`);\n    if (typeof data['decimals'] === 'undefined')\n      throw new Error(`Response is missing required field 'decimals': ${data}`);\n    if (typeof data['total'] === 'undefined')\n      throw new Error(`Response is missing required field 'total': ${data}`);\n    return new AssetParams({\n      creator: data['creator'],\n      decimals: data['decimals'],\n      total: data['total'],\n      clawback: data['clawback'],\n      defaultFrozen: data['default-frozen'],\n      freeze: data['freeze'],\n      manager: data['manager'],\n      metadataHash: data['metadata-hash'],\n      name: data['name'],\n      nameB64: data['name-b64'],\n      reserve: data['reserve'],\n      unitName: data['unit-name'],\n      unitNameB64: data['unit-name-b64'],\n      url: data['url'],\n      urlB64: data['url-b64'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n *\n */\nexport class AssetResponse extends BaseModel {\n  /**\n   * Specifies both the unique identifier and the parameters for an asset\n   */\n  public asset: Asset;\n\n  /**\n   * Round at which the results were computed.\n   */\n  public currentRound: number | bigint;\n\n  /**\n   * Creates a new `AssetResponse` object.\n   * @param asset - Specifies both the unique identifier and the parameters for an asset\n   * @param currentRound - Round at which the results were computed.\n   */\n  constructor({\n    asset,\n    currentRound,\n  }: {\n    asset: Asset;\n    currentRound: number | bigint;\n  }) {\n    super();\n    this.asset = asset;\n    this.currentRound = currentRound;\n\n    this.attribute_map = {\n      asset: 'asset',\n      currentRound: 'current-round',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): AssetResponse {\n    /* eslint-disable dot-notation */\n    if (typeof data['asset'] === 'undefined')\n      throw new Error(`Response is missing required field 'asset': ${data}`);\n    if (typeof data['current-round'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'current-round': ${data}`\n      );\n    return new AssetResponse({\n      asset: Asset.from_obj_for_encoding(data['asset']),\n      currentRound: data['current-round'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n *\n */\nexport class AssetsResponse extends BaseModel {\n  public assets: Asset[];\n\n  /**\n   * Round at which the results were computed.\n   */\n  public currentRound: number | bigint;\n\n  /**\n   * Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  public nextToken?: string;\n\n  /**\n   * Creates a new `AssetsResponse` object.\n   * @param assets -\n   * @param currentRound - Round at which the results were computed.\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  constructor({\n    assets,\n    currentRound,\n    nextToken,\n  }: {\n    assets: Asset[];\n    currentRound: number | bigint;\n    nextToken?: string;\n  }) {\n    super();\n    this.assets = assets;\n    this.currentRound = currentRound;\n    this.nextToken = nextToken;\n\n    this.attribute_map = {\n      assets: 'assets',\n      currentRound: 'current-round',\n      nextToken: 'next-token',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): AssetsResponse {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['assets']))\n      throw new Error(\n        `Response is missing required array field 'assets': ${data}`\n      );\n    if (typeof data['current-round'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'current-round': ${data}`\n      );\n    return new AssetsResponse({\n      assets: data['assets'].map(Asset.from_obj_for_encoding),\n      currentRound: data['current-round'],\n      nextToken: data['next-token'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Block information.\n * Definition:\n * data/bookkeeping/block.go : Block\n */\nexport class Block extends BaseModel {\n  /**\n   * (gh) hash to which this block belongs.\n   */\n  public genesisHash: Uint8Array;\n\n  /**\n   * (gen) ID to which this block belongs.\n   */\n  public genesisId: string;\n\n  /**\n   * (prev) Previous block hash.\n   */\n  public previousBlockHash: Uint8Array;\n\n  /**\n   * (rnd) Current round on which this block was appended to the chain.\n   */\n  public round: number | bigint;\n\n  /**\n   * (seed) Sortition seed.\n   */\n  public seed: Uint8Array;\n\n  /**\n   * (ts) Block creation timestamp in seconds since eposh\n   */\n  public timestamp: number | bigint;\n\n  /**\n   * (txn) TransactionsRoot authenticates the set of transactions appearing in the\n   * block. More specifically, it's the root of a merkle tree whose leaves are the\n   * block's Txids, in lexicographic order. For the empty block, it's 0. Note that\n   * the TxnRoot does not authenticate the signatures on the transactions, only the\n   * transactions themselves. Two blocks with the same transactions but in a\n   * different order and with different signatures will have the same TxnRoot.\n   */\n  public transactionsRoot: Uint8Array;\n\n  /**\n   * (txn256) TransactionsRootSHA256 is an auxiliary TransactionRoot, built using a\n   * vector commitment instead of a merkle tree, and SHA256 hash function instead of\n   * the default SHA512_256. This commitment can be used on environments where only\n   * the SHA256 function exists.\n   */\n  public transactionsRootSha256: Uint8Array;\n\n  /**\n   * Participation account data that needs to be checked/acted on by the network.\n   */\n  public participationUpdates?: ParticipationUpdates;\n\n  /**\n   * Fields relating to rewards,\n   */\n  public rewards?: BlockRewards;\n\n  /**\n   * Tracks the status of state proofs.\n   */\n  public stateProofTracking?: StateProofTracking[];\n\n  /**\n   * (txns) list of transactions corresponding to a given round.\n   */\n  public transactions?: Transaction[];\n\n  /**\n   * (tc) TxnCounter counts the number of transactions committed in the ledger, from\n   * the time at which support for this feature was introduced.\n   * Specifically, TxnCounter is the number of the next transaction that will be\n   * committed after this block. It is 0 when no transactions have ever been\n   * committed (since TxnCounter started being supported).\n   */\n  public txnCounter?: number | bigint;\n\n  /**\n   * Fields relating to a protocol upgrade.\n   */\n  public upgradeState?: BlockUpgradeState;\n\n  /**\n   * Fields relating to voting for a protocol upgrade.\n   */\n  public upgradeVote?: BlockUpgradeVote;\n\n  /**\n   * Creates a new `Block` object.\n   * @param genesisHash - (gh) hash to which this block belongs.\n   * @param genesisId - (gen) ID to which this block belongs.\n   * @param previousBlockHash - (prev) Previous block hash.\n   * @param round - (rnd) Current round on which this block was appended to the chain.\n   * @param seed - (seed) Sortition seed.\n   * @param timestamp - (ts) Block creation timestamp in seconds since eposh\n   * @param transactionsRoot - (txn) TransactionsRoot authenticates the set of transactions appearing in the\n   * block. More specifically, it's the root of a merkle tree whose leaves are the\n   * block's Txids, in lexicographic order. For the empty block, it's 0. Note that\n   * the TxnRoot does not authenticate the signatures on the transactions, only the\n   * transactions themselves. Two blocks with the same transactions but in a\n   * different order and with different signatures will have the same TxnRoot.\n   * @param transactionsRootSha256 - (txn256) TransactionsRootSHA256 is an auxiliary TransactionRoot, built using a\n   * vector commitment instead of a merkle tree, and SHA256 hash function instead of\n   * the default SHA512_256. This commitment can be used on environments where only\n   * the SHA256 function exists.\n   * @param participationUpdates - Participation account data that needs to be checked/acted on by the network.\n   * @param rewards - Fields relating to rewards,\n   * @param stateProofTracking - Tracks the status of state proofs.\n   * @param transactions - (txns) list of transactions corresponding to a given round.\n   * @param txnCounter - (tc) TxnCounter counts the number of transactions committed in the ledger, from\n   * the time at which support for this feature was introduced.\n   * Specifically, TxnCounter is the number of the next transaction that will be\n   * committed after this block. It is 0 when no transactions have ever been\n   * committed (since TxnCounter started being supported).\n   * @param upgradeState - Fields relating to a protocol upgrade.\n   * @param upgradeVote - Fields relating to voting for a protocol upgrade.\n   */\n  constructor({\n    genesisHash,\n    genesisId,\n    previousBlockHash,\n    round,\n    seed,\n    timestamp,\n    transactionsRoot,\n    transactionsRootSha256,\n    participationUpdates,\n    rewards,\n    stateProofTracking,\n    transactions,\n    txnCounter,\n    upgradeState,\n    upgradeVote,\n  }: {\n    genesisHash: string | Uint8Array;\n    genesisId: string;\n    previousBlockHash: string | Uint8Array;\n    round: number | bigint;\n    seed: string | Uint8Array;\n    timestamp: number | bigint;\n    transactionsRoot: string | Uint8Array;\n    transactionsRootSha256: string | Uint8Array;\n    participationUpdates?: ParticipationUpdates;\n    rewards?: BlockRewards;\n    stateProofTracking?: StateProofTracking[];\n    transactions?: Transaction[];\n    txnCounter?: number | bigint;\n    upgradeState?: BlockUpgradeState;\n    upgradeVote?: BlockUpgradeVote;\n  }) {\n    super();\n    this.genesisHash =\n      typeof genesisHash === 'string'\n        ? new Uint8Array(Buffer.from(genesisHash, 'base64'))\n        : genesisHash;\n    this.genesisId = genesisId;\n    this.previousBlockHash =\n      typeof previousBlockHash === 'string'\n        ? new Uint8Array(Buffer.from(previousBlockHash, 'base64'))\n        : previousBlockHash;\n    this.round = round;\n    this.seed =\n      typeof seed === 'string'\n        ? new Uint8Array(Buffer.from(seed, 'base64'))\n        : seed;\n    this.timestamp = timestamp;\n    this.transactionsRoot =\n      typeof transactionsRoot === 'string'\n        ? new Uint8Array(Buffer.from(transactionsRoot, 'base64'))\n        : transactionsRoot;\n    this.transactionsRootSha256 =\n      typeof transactionsRootSha256 === 'string'\n        ? new Uint8Array(Buffer.from(transactionsRootSha256, 'base64'))\n        : transactionsRootSha256;\n    this.participationUpdates = participationUpdates;\n    this.rewards = rewards;\n    this.stateProofTracking = stateProofTracking;\n    this.transactions = transactions;\n    this.txnCounter = txnCounter;\n    this.upgradeState = upgradeState;\n    this.upgradeVote = upgradeVote;\n\n    this.attribute_map = {\n      genesisHash: 'genesis-hash',\n      genesisId: 'genesis-id',\n      previousBlockHash: 'previous-block-hash',\n      round: 'round',\n      seed: 'seed',\n      timestamp: 'timestamp',\n      transactionsRoot: 'transactions-root',\n      transactionsRootSha256: 'transactions-root-sha256',\n      participationUpdates: 'participation-updates',\n      rewards: 'rewards',\n      stateProofTracking: 'state-proof-tracking',\n      transactions: 'transactions',\n      txnCounter: 'txn-counter',\n      upgradeState: 'upgrade-state',\n      upgradeVote: 'upgrade-vote',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): Block {\n    /* eslint-disable dot-notation */\n    if (typeof data['genesis-hash'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'genesis-hash': ${data}`\n      );\n    if (typeof data['genesis-id'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'genesis-id': ${data}`\n      );\n    if (typeof data['previous-block-hash'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'previous-block-hash': ${data}`\n      );\n    if (typeof data['round'] === 'undefined')\n      throw new Error(`Response is missing required field 'round': ${data}`);\n    if (typeof data['seed'] === 'undefined')\n      throw new Error(`Response is missing required field 'seed': ${data}`);\n    if (typeof data['timestamp'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'timestamp': ${data}`\n      );\n    if (typeof data['transactions-root'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'transactions-root': ${data}`\n      );\n    if (typeof data['transactions-root-sha256'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'transactions-root-sha256': ${data}`\n      );\n    return new Block({\n      genesisHash: data['genesis-hash'],\n      genesisId: data['genesis-id'],\n      previousBlockHash: data['previous-block-hash'],\n      round: data['round'],\n      seed: data['seed'],\n      timestamp: data['timestamp'],\n      transactionsRoot: data['transactions-root'],\n      transactionsRootSha256: data['transactions-root-sha256'],\n      participationUpdates:\n        typeof data['participation-updates'] !== 'undefined'\n          ? ParticipationUpdates.from_obj_for_encoding(\n              data['participation-updates']\n            )\n          : undefined,\n      rewards:\n        typeof data['rewards'] !== 'undefined'\n          ? BlockRewards.from_obj_for_encoding(data['rewards'])\n          : undefined,\n      stateProofTracking:\n        typeof data['state-proof-tracking'] !== 'undefined'\n          ? data['state-proof-tracking'].map(\n              StateProofTracking.from_obj_for_encoding\n            )\n          : undefined,\n      transactions:\n        typeof data['transactions'] !== 'undefined'\n          ? data['transactions'].map(Transaction.from_obj_for_encoding)\n          : undefined,\n      txnCounter: data['txn-counter'],\n      upgradeState:\n        typeof data['upgrade-state'] !== 'undefined'\n          ? BlockUpgradeState.from_obj_for_encoding(data['upgrade-state'])\n          : undefined,\n      upgradeVote:\n        typeof data['upgrade-vote'] !== 'undefined'\n          ? BlockUpgradeVote.from_obj_for_encoding(data['upgrade-vote'])\n          : undefined,\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Fields relating to rewards,\n */\nexport class BlockRewards extends BaseModel {\n  /**\n   * (fees) accepts transaction fees, it can only spend to the incentive pool.\n   */\n  public feeSink: string;\n\n  /**\n   * (rwcalr) number of leftover MicroAlgos after the distribution of rewards-rate\n   * MicroAlgos for every reward unit in the next round.\n   */\n  public rewardsCalculationRound: number | bigint;\n\n  /**\n   * (earn) How many rewards, in MicroAlgos, have been distributed to each RewardUnit\n   * of MicroAlgos since genesis.\n   */\n  public rewardsLevel: number | bigint;\n\n  /**\n   * (rwd) accepts periodic injections from the fee-sink and continually\n   * redistributes them as rewards.\n   */\n  public rewardsPool: string;\n\n  /**\n   * (rate) Number of new MicroAlgos added to the participation stake from rewards at\n   * the next round.\n   */\n  public rewardsRate: number | bigint;\n\n  /**\n   * (frac) Number of leftover MicroAlgos after the distribution of\n   * RewardsRate/rewardUnits MicroAlgos for every reward unit in the next round.\n   */\n  public rewardsResidue: number | bigint;\n\n  /**\n   * Creates a new `BlockRewards` object.\n   * @param feeSink - (fees) accepts transaction fees, it can only spend to the incentive pool.\n   * @param rewardsCalculationRound - (rwcalr) number of leftover MicroAlgos after the distribution of rewards-rate\n   * MicroAlgos for every reward unit in the next round.\n   * @param rewardsLevel - (earn) How many rewards, in MicroAlgos, have been distributed to each RewardUnit\n   * of MicroAlgos since genesis.\n   * @param rewardsPool - (rwd) accepts periodic injections from the fee-sink and continually\n   * redistributes them as rewards.\n   * @param rewardsRate - (rate) Number of new MicroAlgos added to the participation stake from rewards at\n   * the next round.\n   * @param rewardsResidue - (frac) Number of leftover MicroAlgos after the distribution of\n   * RewardsRate/rewardUnits MicroAlgos for every reward unit in the next round.\n   */\n  constructor({\n    feeSink,\n    rewardsCalculationRound,\n    rewardsLevel,\n    rewardsPool,\n    rewardsRate,\n    rewardsResidue,\n  }: {\n    feeSink: string;\n    rewardsCalculationRound: number | bigint;\n    rewardsLevel: number | bigint;\n    rewardsPool: string;\n    rewardsRate: number | bigint;\n    rewardsResidue: number | bigint;\n  }) {\n    super();\n    this.feeSink = feeSink;\n    this.rewardsCalculationRound = rewardsCalculationRound;\n    this.rewardsLevel = rewardsLevel;\n    this.rewardsPool = rewardsPool;\n    this.rewardsRate = rewardsRate;\n    this.rewardsResidue = rewardsResidue;\n\n    this.attribute_map = {\n      feeSink: 'fee-sink',\n      rewardsCalculationRound: 'rewards-calculation-round',\n      rewardsLevel: 'rewards-level',\n      rewardsPool: 'rewards-pool',\n      rewardsRate: 'rewards-rate',\n      rewardsResidue: 'rewards-residue',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): BlockRewards {\n    /* eslint-disable dot-notation */\n    if (typeof data['fee-sink'] === 'undefined')\n      throw new Error(`Response is missing required field 'fee-sink': ${data}`);\n    if (typeof data['rewards-calculation-round'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'rewards-calculation-round': ${data}`\n      );\n    if (typeof data['rewards-level'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'rewards-level': ${data}`\n      );\n    if (typeof data['rewards-pool'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'rewards-pool': ${data}`\n      );\n    if (typeof data['rewards-rate'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'rewards-rate': ${data}`\n      );\n    if (typeof data['rewards-residue'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'rewards-residue': ${data}`\n      );\n    return new BlockRewards({\n      feeSink: data['fee-sink'],\n      rewardsCalculationRound: data['rewards-calculation-round'],\n      rewardsLevel: data['rewards-level'],\n      rewardsPool: data['rewards-pool'],\n      rewardsRate: data['rewards-rate'],\n      rewardsResidue: data['rewards-residue'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Fields relating to a protocol upgrade.\n */\nexport class BlockUpgradeState extends BaseModel {\n  /**\n   * (proto) The current protocol version.\n   */\n  public currentProtocol: string;\n\n  /**\n   * (nextproto) The next proposed protocol version.\n   */\n  public nextProtocol?: string;\n\n  /**\n   * (nextyes) Number of blocks which approved the protocol upgrade.\n   */\n  public nextProtocolApprovals?: number | bigint;\n\n  /**\n   * (nextswitch) Round on which the protocol upgrade will take effect.\n   */\n  public nextProtocolSwitchOn?: number | bigint;\n\n  /**\n   * (nextbefore) Deadline round for this protocol upgrade (No votes will be consider\n   * after this round).\n   */\n  public nextProtocolVoteBefore?: number | bigint;\n\n  /**\n   * Creates a new `BlockUpgradeState` object.\n   * @param currentProtocol - (proto) The current protocol version.\n   * @param nextProtocol - (nextproto) The next proposed protocol version.\n   * @param nextProtocolApprovals - (nextyes) Number of blocks which approved the protocol upgrade.\n   * @param nextProtocolSwitchOn - (nextswitch) Round on which the protocol upgrade will take effect.\n   * @param nextProtocolVoteBefore - (nextbefore) Deadline round for this protocol upgrade (No votes will be consider\n   * after this round).\n   */\n  constructor({\n    currentProtocol,\n    nextProtocol,\n    nextProtocolApprovals,\n    nextProtocolSwitchOn,\n    nextProtocolVoteBefore,\n  }: {\n    currentProtocol: string;\n    nextProtocol?: string;\n    nextProtocolApprovals?: number | bigint;\n    nextProtocolSwitchOn?: number | bigint;\n    nextProtocolVoteBefore?: number | bigint;\n  }) {\n    super();\n    this.currentProtocol = currentProtocol;\n    this.nextProtocol = nextProtocol;\n    this.nextProtocolApprovals = nextProtocolApprovals;\n    this.nextProtocolSwitchOn = nextProtocolSwitchOn;\n    this.nextProtocolVoteBefore = nextProtocolVoteBefore;\n\n    this.attribute_map = {\n      currentProtocol: 'current-protocol',\n      nextProtocol: 'next-protocol',\n      nextProtocolApprovals: 'next-protocol-approvals',\n      nextProtocolSwitchOn: 'next-protocol-switch-on',\n      nextProtocolVoteBefore: 'next-protocol-vote-before',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): BlockUpgradeState {\n    /* eslint-disable dot-notation */\n    if (typeof data['current-protocol'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'current-protocol': ${data}`\n      );\n    return new BlockUpgradeState({\n      currentProtocol: data['current-protocol'],\n      nextProtocol: data['next-protocol'],\n      nextProtocolApprovals: data['next-protocol-approvals'],\n      nextProtocolSwitchOn: data['next-protocol-switch-on'],\n      nextProtocolVoteBefore: data['next-protocol-vote-before'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Fields relating to voting for a protocol upgrade.\n */\nexport class BlockUpgradeVote extends BaseModel {\n  /**\n   * (upgradeyes) Indicates a yes vote for the current proposal.\n   */\n  public upgradeApprove?: boolean;\n\n  /**\n   * (upgradedelay) Indicates the time between acceptance and execution.\n   */\n  public upgradeDelay?: number | bigint;\n\n  /**\n   * (upgradeprop) Indicates a proposed upgrade.\n   */\n  public upgradePropose?: string;\n\n  /**\n   * Creates a new `BlockUpgradeVote` object.\n   * @param upgradeApprove - (upgradeyes) Indicates a yes vote for the current proposal.\n   * @param upgradeDelay - (upgradedelay) Indicates the time between acceptance and execution.\n   * @param upgradePropose - (upgradeprop) Indicates a proposed upgrade.\n   */\n  constructor({\n    upgradeApprove,\n    upgradeDelay,\n    upgradePropose,\n  }: {\n    upgradeApprove?: boolean;\n    upgradeDelay?: number | bigint;\n    upgradePropose?: string;\n  }) {\n    super();\n    this.upgradeApprove = upgradeApprove;\n    this.upgradeDelay = upgradeDelay;\n    this.upgradePropose = upgradePropose;\n\n    this.attribute_map = {\n      upgradeApprove: 'upgrade-approve',\n      upgradeDelay: 'upgrade-delay',\n      upgradePropose: 'upgrade-propose',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): BlockUpgradeVote {\n    /* eslint-disable dot-notation */\n    return new BlockUpgradeVote({\n      upgradeApprove: data['upgrade-approve'],\n      upgradeDelay: data['upgrade-delay'],\n      upgradePropose: data['upgrade-propose'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Box name and its content.\n */\nexport class Box extends BaseModel {\n  /**\n   * (name) box name, base64 encoded\n   */\n  public name: Uint8Array;\n\n  /**\n   * (value) box value, base64 encoded.\n   */\n  public value: Uint8Array;\n\n  /**\n   * Creates a new `Box` object.\n   * @param name - (name) box name, base64 encoded\n   * @param value - (value) box value, base64 encoded.\n   */\n  constructor({\n    name,\n    value,\n  }: {\n    name: string | Uint8Array;\n    value: string | Uint8Array;\n  }) {\n    super();\n    this.name =\n      typeof name === 'string'\n        ? new Uint8Array(Buffer.from(name, 'base64'))\n        : name;\n    this.value =\n      typeof value === 'string'\n        ? new Uint8Array(Buffer.from(value, 'base64'))\n        : value;\n\n    this.attribute_map = {\n      name: 'name',\n      value: 'value',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): Box {\n    /* eslint-disable dot-notation */\n    if (typeof data['name'] === 'undefined')\n      throw new Error(`Response is missing required field 'name': ${data}`);\n    if (typeof data['value'] === 'undefined')\n      throw new Error(`Response is missing required field 'value': ${data}`);\n    return new Box({\n      name: data['name'],\n      value: data['value'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Box descriptor describes an app box without a value.\n */\nexport class BoxDescriptor extends BaseModel {\n  /**\n   * Base64 encoded box name\n   */\n  public name: Uint8Array;\n\n  /**\n   * Creates a new `BoxDescriptor` object.\n   * @param name - Base64 encoded box name\n   */\n  constructor({ name }: { name: string | Uint8Array }) {\n    super();\n    this.name =\n      typeof name === 'string'\n        ? new Uint8Array(Buffer.from(name, 'base64'))\n        : name;\n\n    this.attribute_map = {\n      name: 'name',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): BoxDescriptor {\n    /* eslint-disable dot-notation */\n    if (typeof data['name'] === 'undefined')\n      throw new Error(`Response is missing required field 'name': ${data}`);\n    return new BoxDescriptor({\n      name: data['name'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Box names of an application\n */\nexport class BoxesResponse extends BaseModel {\n  /**\n   * (appidx) application index.\n   */\n  public applicationId: number | bigint;\n\n  public boxes: BoxDescriptor[];\n\n  /**\n   * Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  public nextToken?: string;\n\n  /**\n   * Creates a new `BoxesResponse` object.\n   * @param applicationId - (appidx) application index.\n   * @param boxes -\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  constructor({\n    applicationId,\n    boxes,\n    nextToken,\n  }: {\n    applicationId: number | bigint;\n    boxes: BoxDescriptor[];\n    nextToken?: string;\n  }) {\n    super();\n    this.applicationId = applicationId;\n    this.boxes = boxes;\n    this.nextToken = nextToken;\n\n    this.attribute_map = {\n      applicationId: 'application-id',\n      boxes: 'boxes',\n      nextToken: 'next-token',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): BoxesResponse {\n    /* eslint-disable dot-notation */\n    if (typeof data['application-id'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'application-id': ${data}`\n      );\n    if (!Array.isArray(data['boxes']))\n      throw new Error(\n        `Response is missing required array field 'boxes': ${data}`\n      );\n    return new BoxesResponse({\n      applicationId: data['application-id'],\n      boxes: data['boxes'].map(BoxDescriptor.from_obj_for_encoding),\n      nextToken: data['next-token'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Response for errors\n */\nexport class ErrorResponse extends BaseModel {\n  public message: string;\n\n  public data?: Record<string, any>;\n\n  /**\n   * Creates a new `ErrorResponse` object.\n   * @param message -\n   * @param data -\n   */\n  constructor({\n    message,\n    data,\n  }: {\n    message: string;\n    data?: Record<string, any>;\n  }) {\n    super();\n    this.message = message;\n    this.data = data;\n\n    this.attribute_map = {\n      message: 'message',\n      data: 'data',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): ErrorResponse {\n    /* eslint-disable dot-notation */\n    if (typeof data['message'] === 'undefined')\n      throw new Error(`Response is missing required field 'message': ${data}`);\n    return new ErrorResponse({\n      message: data['message'],\n      data: data['data'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Represents a TEAL value delta.\n */\nexport class EvalDelta extends BaseModel {\n  /**\n   * (at) delta action.\n   */\n  public action: number | bigint;\n\n  /**\n   * (bs) bytes value.\n   */\n  public bytes?: string;\n\n  /**\n   * (ui) uint value.\n   */\n  public uint?: number | bigint;\n\n  /**\n   * Creates a new `EvalDelta` object.\n   * @param action - (at) delta action.\n   * @param bytes - (bs) bytes value.\n   * @param uint - (ui) uint value.\n   */\n  constructor({\n    action,\n    bytes,\n    uint,\n  }: {\n    action: number | bigint;\n    bytes?: string;\n    uint?: number | bigint;\n  }) {\n    super();\n    this.action = action;\n    this.bytes = bytes;\n    this.uint = uint;\n\n    this.attribute_map = {\n      action: 'action',\n      bytes: 'bytes',\n      uint: 'uint',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): EvalDelta {\n    /* eslint-disable dot-notation */\n    if (typeof data['action'] === 'undefined')\n      throw new Error(`Response is missing required field 'action': ${data}`);\n    return new EvalDelta({\n      action: data['action'],\n      bytes: data['bytes'],\n      uint: data['uint'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Key-value pairs for StateDelta.\n */\nexport class EvalDeltaKeyValue extends BaseModel {\n  public key: string;\n\n  /**\n   * Represents a TEAL value delta.\n   */\n  public value: EvalDelta;\n\n  /**\n   * Creates a new `EvalDeltaKeyValue` object.\n   * @param key -\n   * @param value - Represents a TEAL value delta.\n   */\n  constructor({ key, value }: { key: string; value: EvalDelta }) {\n    super();\n    this.key = key;\n    this.value = value;\n\n    this.attribute_map = {\n      key: 'key',\n      value: 'value',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): EvalDeltaKeyValue {\n    /* eslint-disable dot-notation */\n    if (typeof data['key'] === 'undefined')\n      throw new Error(`Response is missing required field 'key': ${data}`);\n    if (typeof data['value'] === 'undefined')\n      throw new Error(`Response is missing required field 'value': ${data}`);\n    return new EvalDeltaKeyValue({\n      key: data['key'],\n      value: EvalDelta.from_obj_for_encoding(data['value']),\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\nexport class HashFactory extends BaseModel {\n  /**\n   * (t)\n   */\n  public hashType?: number | bigint;\n\n  /**\n   * Creates a new `HashFactory` object.\n   * @param hashType - (t)\n   */\n  constructor({ hashType }: { hashType?: number | bigint }) {\n    super();\n    this.hashType = hashType;\n\n    this.attribute_map = {\n      hashType: 'hash-type',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): HashFactory {\n    /* eslint-disable dot-notation */\n    return new HashFactory({\n      hashType: data['hash-type'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * A health check response.\n */\nexport class HealthCheck extends BaseModel {\n  public dbAvailable: boolean;\n\n  public isMigrating: boolean;\n\n  public message: string;\n\n  public round: number | bigint;\n\n  /**\n   * Current version.\n   */\n  public version: string;\n\n  public data?: Record<string, any>;\n\n  public errors?: string[];\n\n  /**\n   * Creates a new `HealthCheck` object.\n   * @param dbAvailable -\n   * @param isMigrating -\n   * @param message -\n   * @param round -\n   * @param version - Current version.\n   * @param data -\n   * @param errors -\n   */\n  constructor({\n    dbAvailable,\n    isMigrating,\n    message,\n    round,\n    version,\n    data,\n    errors,\n  }: {\n    dbAvailable: boolean;\n    isMigrating: boolean;\n    message: string;\n    round: number | bigint;\n    version: string;\n    data?: Record<string, any>;\n    errors?: string[];\n  }) {\n    super();\n    this.dbAvailable = dbAvailable;\n    this.isMigrating = isMigrating;\n    this.message = message;\n    this.round = round;\n    this.version = version;\n    this.data = data;\n    this.errors = errors;\n\n    this.attribute_map = {\n      dbAvailable: 'db-available',\n      isMigrating: 'is-migrating',\n      message: 'message',\n      round: 'round',\n      version: 'version',\n      data: 'data',\n      errors: 'errors',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): HealthCheck {\n    /* eslint-disable dot-notation */\n    if (typeof data['db-available'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'db-available': ${data}`\n      );\n    if (typeof data['is-migrating'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'is-migrating': ${data}`\n      );\n    if (typeof data['message'] === 'undefined')\n      throw new Error(`Response is missing required field 'message': ${data}`);\n    if (typeof data['round'] === 'undefined')\n      throw new Error(`Response is missing required field 'round': ${data}`);\n    if (typeof data['version'] === 'undefined')\n      throw new Error(`Response is missing required field 'version': ${data}`);\n    return new HealthCheck({\n      dbAvailable: data['db-available'],\n      isMigrating: data['is-migrating'],\n      message: data['message'],\n      round: data['round'],\n      version: data['version'],\n      data: data['data'],\n      errors: data['errors'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\nexport class IndexerStateProofMessage extends BaseModel {\n  /**\n   * (b)\n   */\n  public blockHeadersCommitment?: Uint8Array;\n\n  /**\n   * (f)\n   */\n  public firstAttestedRound?: number | bigint;\n\n  /**\n   * (l)\n   */\n  public latestAttestedRound?: number | bigint;\n\n  /**\n   * (P)\n   */\n  public lnProvenWeight?: number | bigint;\n\n  /**\n   * (v)\n   */\n  public votersCommitment?: Uint8Array;\n\n  /**\n   * Creates a new `IndexerStateProofMessage` object.\n   * @param blockHeadersCommitment - (b)\n   * @param firstAttestedRound - (f)\n   * @param latestAttestedRound - (l)\n   * @param lnProvenWeight - (P)\n   * @param votersCommitment - (v)\n   */\n  constructor({\n    blockHeadersCommitment,\n    firstAttestedRound,\n    latestAttestedRound,\n    lnProvenWeight,\n    votersCommitment,\n  }: {\n    blockHeadersCommitment?: string | Uint8Array;\n    firstAttestedRound?: number | bigint;\n    latestAttestedRound?: number | bigint;\n    lnProvenWeight?: number | bigint;\n    votersCommitment?: string | Uint8Array;\n  }) {\n    super();\n    this.blockHeadersCommitment =\n      typeof blockHeadersCommitment === 'string'\n        ? new Uint8Array(Buffer.from(blockHeadersCommitment, 'base64'))\n        : blockHeadersCommitment;\n    this.firstAttestedRound = firstAttestedRound;\n    this.latestAttestedRound = latestAttestedRound;\n    this.lnProvenWeight = lnProvenWeight;\n    this.votersCommitment =\n      typeof votersCommitment === 'string'\n        ? new Uint8Array(Buffer.from(votersCommitment, 'base64'))\n        : votersCommitment;\n\n    this.attribute_map = {\n      blockHeadersCommitment: 'block-headers-commitment',\n      firstAttestedRound: 'first-attested-round',\n      latestAttestedRound: 'latest-attested-round',\n      lnProvenWeight: 'ln-proven-weight',\n      votersCommitment: 'voters-commitment',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): IndexerStateProofMessage {\n    /* eslint-disable dot-notation */\n    return new IndexerStateProofMessage({\n      blockHeadersCommitment: data['block-headers-commitment'],\n      firstAttestedRound: data['first-attested-round'],\n      latestAttestedRound: data['latest-attested-round'],\n      lnProvenWeight: data['ln-proven-weight'],\n      votersCommitment: data['voters-commitment'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\nexport class MerkleArrayProof extends BaseModel {\n  public hashFactory?: HashFactory;\n\n  /**\n   * (pth)\n   */\n  public path?: Uint8Array[];\n\n  /**\n   * (td)\n   */\n  public treeDepth?: number | bigint;\n\n  /**\n   * Creates a new `MerkleArrayProof` object.\n   * @param hashFactory -\n   * @param path - (pth)\n   * @param treeDepth - (td)\n   */\n  constructor({\n    hashFactory,\n    path,\n    treeDepth,\n  }: {\n    hashFactory?: HashFactory;\n    path?: Uint8Array[];\n    treeDepth?: number | bigint;\n  }) {\n    super();\n    this.hashFactory = hashFactory;\n    this.path = path;\n    this.treeDepth = treeDepth;\n\n    this.attribute_map = {\n      hashFactory: 'hash-factory',\n      path: 'path',\n      treeDepth: 'tree-depth',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): MerkleArrayProof {\n    /* eslint-disable dot-notation */\n    return new MerkleArrayProof({\n      hashFactory:\n        typeof data['hash-factory'] !== 'undefined'\n          ? HashFactory.from_obj_for_encoding(data['hash-factory'])\n          : undefined,\n      path: data['path'],\n      treeDepth: data['tree-depth'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * A simplified version of AssetHolding\n */\nexport class MiniAssetHolding extends BaseModel {\n  public address: string;\n\n  public amount: number | bigint;\n\n  public isFrozen: boolean;\n\n  /**\n   * Whether or not this asset holding is currently deleted from its account.\n   */\n  public deleted?: boolean;\n\n  /**\n   * Round during which the account opted into the asset.\n   */\n  public optedInAtRound?: number | bigint;\n\n  /**\n   * Round during which the account opted out of the asset.\n   */\n  public optedOutAtRound?: number | bigint;\n\n  /**\n   * Creates a new `MiniAssetHolding` object.\n   * @param address -\n   * @param amount -\n   * @param isFrozen -\n   * @param deleted - Whether or not this asset holding is currently deleted from its account.\n   * @param optedInAtRound - Round during which the account opted into the asset.\n   * @param optedOutAtRound - Round during which the account opted out of the asset.\n   */\n  constructor({\n    address,\n    amount,\n    isFrozen,\n    deleted,\n    optedInAtRound,\n    optedOutAtRound,\n  }: {\n    address: string;\n    amount: number | bigint;\n    isFrozen: boolean;\n    deleted?: boolean;\n    optedInAtRound?: number | bigint;\n    optedOutAtRound?: number | bigint;\n  }) {\n    super();\n    this.address = address;\n    this.amount = amount;\n    this.isFrozen = isFrozen;\n    this.deleted = deleted;\n    this.optedInAtRound = optedInAtRound;\n    this.optedOutAtRound = optedOutAtRound;\n\n    this.attribute_map = {\n      address: 'address',\n      amount: 'amount',\n      isFrozen: 'is-frozen',\n      deleted: 'deleted',\n      optedInAtRound: 'opted-in-at-round',\n      optedOutAtRound: 'opted-out-at-round',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): MiniAssetHolding {\n    /* eslint-disable dot-notation */\n    if (typeof data['address'] === 'undefined')\n      throw new Error(`Response is missing required field 'address': ${data}`);\n    if (typeof data['amount'] === 'undefined')\n      throw new Error(`Response is missing required field 'amount': ${data}`);\n    if (typeof data['is-frozen'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'is-frozen': ${data}`\n      );\n    return new MiniAssetHolding({\n      address: data['address'],\n      amount: data['amount'],\n      isFrozen: data['is-frozen'],\n      deleted: data['deleted'],\n      optedInAtRound: data['opted-in-at-round'],\n      optedOutAtRound: data['opted-out-at-round'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Participation account data that needs to be checked/acted on by the network.\n */\nexport class ParticipationUpdates extends BaseModel {\n  /**\n   * (partupdrmv) a list of online accounts that needs to be converted to offline\n   * since their participation key expired.\n   */\n  public expiredParticipationAccounts?: string[];\n\n  /**\n   * Creates a new `ParticipationUpdates` object.\n   * @param expiredParticipationAccounts - (partupdrmv) a list of online accounts that needs to be converted to offline\n   * since their participation key expired.\n   */\n  constructor({\n    expiredParticipationAccounts,\n  }: {\n    expiredParticipationAccounts?: string[];\n  }) {\n    super();\n    this.expiredParticipationAccounts = expiredParticipationAccounts;\n\n    this.attribute_map = {\n      expiredParticipationAccounts: 'expired-participation-accounts',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): ParticipationUpdates {\n    /* eslint-disable dot-notation */\n    return new ParticipationUpdates({\n      expiredParticipationAccounts: data['expired-participation-accounts'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * (sp) represents a state proof.\n * Definition:\n * crypto/stateproof/structs.go : StateProof\n */\nexport class StateProofFields extends BaseModel {\n  /**\n   * (P)\n   */\n  public partProofs?: MerkleArrayProof;\n\n  /**\n   * (pr) Sequence of reveal positions.\n   */\n  public positionsToReveal?: (number | bigint)[];\n\n  /**\n   * (r) Note that this is actually stored as a map[uint64] - Reveal in the actual\n   * msgp\n   */\n  public reveals?: StateProofReveal[];\n\n  /**\n   * (v) Salt version of the merkle signature.\n   */\n  public saltVersion?: number | bigint;\n\n  /**\n   * (c)\n   */\n  public sigCommit?: Uint8Array;\n\n  /**\n   * (S)\n   */\n  public sigProofs?: MerkleArrayProof;\n\n  /**\n   * (w)\n   */\n  public signedWeight?: number | bigint;\n\n  /**\n   * Creates a new `StateProofFields` object.\n   * @param partProofs - (P)\n   * @param positionsToReveal - (pr) Sequence of reveal positions.\n   * @param reveals - (r) Note that this is actually stored as a map[uint64] - Reveal in the actual\n   * msgp\n   * @param saltVersion - (v) Salt version of the merkle signature.\n   * @param sigCommit - (c)\n   * @param sigProofs - (S)\n   * @param signedWeight - (w)\n   */\n  constructor({\n    partProofs,\n    positionsToReveal,\n    reveals,\n    saltVersion,\n    sigCommit,\n    sigProofs,\n    signedWeight,\n  }: {\n    partProofs?: MerkleArrayProof;\n    positionsToReveal?: (number | bigint)[];\n    reveals?: StateProofReveal[];\n    saltVersion?: number | bigint;\n    sigCommit?: string | Uint8Array;\n    sigProofs?: MerkleArrayProof;\n    signedWeight?: number | bigint;\n  }) {\n    super();\n    this.partProofs = partProofs;\n    this.positionsToReveal = positionsToReveal;\n    this.reveals = reveals;\n    this.saltVersion = saltVersion;\n    this.sigCommit =\n      typeof sigCommit === 'string'\n        ? new Uint8Array(Buffer.from(sigCommit, 'base64'))\n        : sigCommit;\n    this.sigProofs = sigProofs;\n    this.signedWeight = signedWeight;\n\n    this.attribute_map = {\n      partProofs: 'part-proofs',\n      positionsToReveal: 'positions-to-reveal',\n      reveals: 'reveals',\n      saltVersion: 'salt-version',\n      sigCommit: 'sig-commit',\n      sigProofs: 'sig-proofs',\n      signedWeight: 'signed-weight',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): StateProofFields {\n    /* eslint-disable dot-notation */\n    return new StateProofFields({\n      partProofs:\n        typeof data['part-proofs'] !== 'undefined'\n          ? MerkleArrayProof.from_obj_for_encoding(data['part-proofs'])\n          : undefined,\n      positionsToReveal: data['positions-to-reveal'],\n      reveals:\n        typeof data['reveals'] !== 'undefined'\n          ? data['reveals'].map(StateProofReveal.from_obj_for_encoding)\n          : undefined,\n      saltVersion: data['salt-version'],\n      sigCommit: data['sig-commit'],\n      sigProofs:\n        typeof data['sig-proofs'] !== 'undefined'\n          ? MerkleArrayProof.from_obj_for_encoding(data['sig-proofs'])\n          : undefined,\n      signedWeight: data['signed-weight'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\nexport class StateProofParticipant extends BaseModel {\n  /**\n   * (p)\n   */\n  public verifier?: StateProofVerifier;\n\n  /**\n   * (w)\n   */\n  public weight?: number | bigint;\n\n  /**\n   * Creates a new `StateProofParticipant` object.\n   * @param verifier - (p)\n   * @param weight - (w)\n   */\n  constructor({\n    verifier,\n    weight,\n  }: {\n    verifier?: StateProofVerifier;\n    weight?: number | bigint;\n  }) {\n    super();\n    this.verifier = verifier;\n    this.weight = weight;\n\n    this.attribute_map = {\n      verifier: 'verifier',\n      weight: 'weight',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): StateProofParticipant {\n    /* eslint-disable dot-notation */\n    return new StateProofParticipant({\n      verifier:\n        typeof data['verifier'] !== 'undefined'\n          ? StateProofVerifier.from_obj_for_encoding(data['verifier'])\n          : undefined,\n      weight: data['weight'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\nexport class StateProofReveal extends BaseModel {\n  /**\n   * (p)\n   */\n  public participant?: StateProofParticipant;\n\n  /**\n   * The position in the signature and participants arrays corresponding to this\n   * entry.\n   */\n  public position?: number | bigint;\n\n  /**\n   * (s)\n   */\n  public sigSlot?: StateProofSigSlot;\n\n  /**\n   * Creates a new `StateProofReveal` object.\n   * @param participant - (p)\n   * @param position - The position in the signature and participants arrays corresponding to this\n   * entry.\n   * @param sigSlot - (s)\n   */\n  constructor({\n    participant,\n    position,\n    sigSlot,\n  }: {\n    participant?: StateProofParticipant;\n    position?: number | bigint;\n    sigSlot?: StateProofSigSlot;\n  }) {\n    super();\n    this.participant = participant;\n    this.position = position;\n    this.sigSlot = sigSlot;\n\n    this.attribute_map = {\n      participant: 'participant',\n      position: 'position',\n      sigSlot: 'sig-slot',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): StateProofReveal {\n    /* eslint-disable dot-notation */\n    return new StateProofReveal({\n      participant:\n        typeof data['participant'] !== 'undefined'\n          ? StateProofParticipant.from_obj_for_encoding(data['participant'])\n          : undefined,\n      position: data['position'],\n      sigSlot:\n        typeof data['sig-slot'] !== 'undefined'\n          ? StateProofSigSlot.from_obj_for_encoding(data['sig-slot'])\n          : undefined,\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\nexport class StateProofSigSlot extends BaseModel {\n  /**\n   * (l) The total weight of signatures in the lower-numbered slots.\n   */\n  public lowerSigWeight?: number | bigint;\n\n  public signature?: StateProofSignature;\n\n  /**\n   * Creates a new `StateProofSigSlot` object.\n   * @param lowerSigWeight - (l) The total weight of signatures in the lower-numbered slots.\n   * @param signature -\n   */\n  constructor({\n    lowerSigWeight,\n    signature,\n  }: {\n    lowerSigWeight?: number | bigint;\n    signature?: StateProofSignature;\n  }) {\n    super();\n    this.lowerSigWeight = lowerSigWeight;\n    this.signature = signature;\n\n    this.attribute_map = {\n      lowerSigWeight: 'lower-sig-weight',\n      signature: 'signature',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): StateProofSigSlot {\n    /* eslint-disable dot-notation */\n    return new StateProofSigSlot({\n      lowerSigWeight: data['lower-sig-weight'],\n      signature:\n        typeof data['signature'] !== 'undefined'\n          ? StateProofSignature.from_obj_for_encoding(data['signature'])\n          : undefined,\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\nexport class StateProofSignature extends BaseModel {\n  public falconSignature?: Uint8Array;\n\n  public merkleArrayIndex?: number | bigint;\n\n  public proof?: MerkleArrayProof;\n\n  /**\n   * (vkey)\n   */\n  public verifyingKey?: Uint8Array;\n\n  /**\n   * Creates a new `StateProofSignature` object.\n   * @param falconSignature -\n   * @param merkleArrayIndex -\n   * @param proof -\n   * @param verifyingKey - (vkey)\n   */\n  constructor({\n    falconSignature,\n    merkleArrayIndex,\n    proof,\n    verifyingKey,\n  }: {\n    falconSignature?: string | Uint8Array;\n    merkleArrayIndex?: number | bigint;\n    proof?: MerkleArrayProof;\n    verifyingKey?: string | Uint8Array;\n  }) {\n    super();\n    this.falconSignature =\n      typeof falconSignature === 'string'\n        ? new Uint8Array(Buffer.from(falconSignature, 'base64'))\n        : falconSignature;\n    this.merkleArrayIndex = merkleArrayIndex;\n    this.proof = proof;\n    this.verifyingKey =\n      typeof verifyingKey === 'string'\n        ? new Uint8Array(Buffer.from(verifyingKey, 'base64'))\n        : verifyingKey;\n\n    this.attribute_map = {\n      falconSignature: 'falcon-signature',\n      merkleArrayIndex: 'merkle-array-index',\n      proof: 'proof',\n      verifyingKey: 'verifying-key',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): StateProofSignature {\n    /* eslint-disable dot-notation */\n    return new StateProofSignature({\n      falconSignature: data['falcon-signature'],\n      merkleArrayIndex: data['merkle-array-index'],\n      proof:\n        typeof data['proof'] !== 'undefined'\n          ? MerkleArrayProof.from_obj_for_encoding(data['proof'])\n          : undefined,\n      verifyingKey: data['verifying-key'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\nexport class StateProofTracking extends BaseModel {\n  /**\n   * (n) Next round for which we will accept a state proof transaction.\n   */\n  public nextRound?: number | bigint;\n\n  /**\n   * (t) The total number of microalgos held by the online accounts during the\n   * StateProof round.\n   */\n  public onlineTotalWeight?: number | bigint;\n\n  /**\n   * State Proof Type. Note the raw object uses map with this as key.\n   */\n  public type?: number | bigint;\n\n  /**\n   * (v) Root of a vector commitment containing online accounts that will help sign\n   * the proof.\n   */\n  public votersCommitment?: Uint8Array;\n\n  /**\n   * Creates a new `StateProofTracking` object.\n   * @param nextRound - (n) Next round for which we will accept a state proof transaction.\n   * @param onlineTotalWeight - (t) The total number of microalgos held by the online accounts during the\n   * StateProof round.\n   * @param type - State Proof Type. Note the raw object uses map with this as key.\n   * @param votersCommitment - (v) Root of a vector commitment containing online accounts that will help sign\n   * the proof.\n   */\n  constructor({\n    nextRound,\n    onlineTotalWeight,\n    type,\n    votersCommitment,\n  }: {\n    nextRound?: number | bigint;\n    onlineTotalWeight?: number | bigint;\n    type?: number | bigint;\n    votersCommitment?: string | Uint8Array;\n  }) {\n    super();\n    this.nextRound = nextRound;\n    this.onlineTotalWeight = onlineTotalWeight;\n    this.type = type;\n    this.votersCommitment =\n      typeof votersCommitment === 'string'\n        ? new Uint8Array(Buffer.from(votersCommitment, 'base64'))\n        : votersCommitment;\n\n    this.attribute_map = {\n      nextRound: 'next-round',\n      onlineTotalWeight: 'online-total-weight',\n      type: 'type',\n      votersCommitment: 'voters-commitment',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): StateProofTracking {\n    /* eslint-disable dot-notation */\n    return new StateProofTracking({\n      nextRound: data['next-round'],\n      onlineTotalWeight: data['online-total-weight'],\n      type: data['type'],\n      votersCommitment: data['voters-commitment'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\nexport class StateProofVerifier extends BaseModel {\n  /**\n   * (cmt) Represents the root of the vector commitment tree.\n   */\n  public commitment?: Uint8Array;\n\n  /**\n   * (lf) Key lifetime.\n   */\n  public keyLifetime?: number | bigint;\n\n  /**\n   * Creates a new `StateProofVerifier` object.\n   * @param commitment - (cmt) Represents the root of the vector commitment tree.\n   * @param keyLifetime - (lf) Key lifetime.\n   */\n  constructor({\n    commitment,\n    keyLifetime,\n  }: {\n    commitment?: string | Uint8Array;\n    keyLifetime?: number | bigint;\n  }) {\n    super();\n    this.commitment =\n      typeof commitment === 'string'\n        ? new Uint8Array(Buffer.from(commitment, 'base64'))\n        : commitment;\n    this.keyLifetime = keyLifetime;\n\n    this.attribute_map = {\n      commitment: 'commitment',\n      keyLifetime: 'key-lifetime',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): StateProofVerifier {\n    /* eslint-disable dot-notation */\n    return new StateProofVerifier({\n      commitment: data['commitment'],\n      keyLifetime: data['key-lifetime'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Represents a (apls) local-state or (apgs) global-state schema. These schemas\n * determine how much storage may be used in a local-state or global-state for an\n * application. The more space used, the larger minimum balance must be maintained\n * in the account holding the data.\n */\nexport class StateSchema extends BaseModel {\n  /**\n   * Maximum number of TEAL byte slices that may be stored in the key/value store.\n   */\n  public numByteSlice: number | bigint;\n\n  /**\n   * Maximum number of TEAL uints that may be stored in the key/value store.\n   */\n  public numUint: number | bigint;\n\n  /**\n   * Creates a new `StateSchema` object.\n   * @param numByteSlice - Maximum number of TEAL byte slices that may be stored in the key/value store.\n   * @param numUint - Maximum number of TEAL uints that may be stored in the key/value store.\n   */\n  constructor({\n    numByteSlice,\n    numUint,\n  }: {\n    numByteSlice: number | bigint;\n    numUint: number | bigint;\n  }) {\n    super();\n    this.numByteSlice = numByteSlice;\n    this.numUint = numUint;\n\n    this.attribute_map = {\n      numByteSlice: 'num-byte-slice',\n      numUint: 'num-uint',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): StateSchema {\n    /* eslint-disable dot-notation */\n    if (typeof data['num-byte-slice'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'num-byte-slice': ${data}`\n      );\n    if (typeof data['num-uint'] === 'undefined')\n      throw new Error(`Response is missing required field 'num-uint': ${data}`);\n    return new StateSchema({\n      numByteSlice: data['num-byte-slice'],\n      numUint: data['num-uint'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Represents a key-value pair in an application store.\n */\nexport class TealKeyValue extends BaseModel {\n  public key: string;\n\n  /**\n   * Represents a TEAL value.\n   */\n  public value: TealValue;\n\n  /**\n   * Creates a new `TealKeyValue` object.\n   * @param key -\n   * @param value - Represents a TEAL value.\n   */\n  constructor({ key, value }: { key: string; value: TealValue }) {\n    super();\n    this.key = key;\n    this.value = value;\n\n    this.attribute_map = {\n      key: 'key',\n      value: 'value',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): TealKeyValue {\n    /* eslint-disable dot-notation */\n    if (typeof data['key'] === 'undefined')\n      throw new Error(`Response is missing required field 'key': ${data}`);\n    if (typeof data['value'] === 'undefined')\n      throw new Error(`Response is missing required field 'value': ${data}`);\n    return new TealKeyValue({\n      key: data['key'],\n      value: TealValue.from_obj_for_encoding(data['value']),\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Represents a TEAL value.\n */\nexport class TealValue extends BaseModel {\n  /**\n   * (tb) bytes value.\n   */\n  public bytes: string;\n\n  /**\n   * (tt) value type. Value `1` refers to **bytes**, value `2` refers to **uint**\n   */\n  public type: number | bigint;\n\n  /**\n   * (ui) uint value.\n   */\n  public uint: number | bigint;\n\n  /**\n   * Creates a new `TealValue` object.\n   * @param bytes - (tb) bytes value.\n   * @param type - (tt) value type. Value `1` refers to **bytes**, value `2` refers to **uint**\n   * @param uint - (ui) uint value.\n   */\n  constructor({\n    bytes,\n    type,\n    uint,\n  }: {\n    bytes: string;\n    type: number | bigint;\n    uint: number | bigint;\n  }) {\n    super();\n    this.bytes = bytes;\n    this.type = type;\n    this.uint = uint;\n\n    this.attribute_map = {\n      bytes: 'bytes',\n      type: 'type',\n      uint: 'uint',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): TealValue {\n    /* eslint-disable dot-notation */\n    if (typeof data['bytes'] === 'undefined')\n      throw new Error(`Response is missing required field 'bytes': ${data}`);\n    if (typeof data['type'] === 'undefined')\n      throw new Error(`Response is missing required field 'type': ${data}`);\n    if (typeof data['uint'] === 'undefined')\n      throw new Error(`Response is missing required field 'uint': ${data}`);\n    return new TealValue({\n      bytes: data['bytes'],\n      type: data['type'],\n      uint: data['uint'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Contains all fields common to all transactions and serves as an envelope to all\n * transactions type. Represents both regular and inner transactions.\n * Definition:\n * data/transactions/signedtxn.go : SignedTxn\n * data/transactions/transaction.go : Transaction\n */\nexport class Transaction extends BaseModel {\n  /**\n   * (fee) Transaction fee.\n   */\n  public fee: number | bigint;\n\n  /**\n   * (fv) First valid round for this transaction.\n   */\n  public firstValid: number | bigint;\n\n  /**\n   * (lv) Last valid round for this transaction.\n   */\n  public lastValid: number | bigint;\n\n  /**\n   * (snd) Sender's address.\n   */\n  public sender: string;\n\n  /**\n   * Fields for application transactions.\n   * Definition:\n   * data/transactions/application.go : ApplicationCallTxnFields\n   */\n  public applicationTransaction?: TransactionApplication;\n\n  /**\n   * Fields for asset allocation, re-configuration, and destruction.\n   * A zero value for asset-id indicates asset creation.\n   * A zero value for the params indicates asset destruction.\n   * Definition:\n   * data/transactions/asset.go : AssetConfigTxnFields\n   */\n  public assetConfigTransaction?: TransactionAssetConfig;\n\n  /**\n   * Fields for an asset freeze transaction.\n   * Definition:\n   * data/transactions/asset.go : AssetFreezeTxnFields\n   */\n  public assetFreezeTransaction?: TransactionAssetFreeze;\n\n  /**\n   * Fields for an asset transfer transaction.\n   * Definition:\n   * data/transactions/asset.go : AssetTransferTxnFields\n   */\n  public assetTransferTransaction?: TransactionAssetTransfer;\n\n  /**\n   * (sgnr) this is included with signed transactions when the signing address does\n   * not equal the sender. The backend can use this to ensure that auth addr is equal\n   * to the accounts auth addr.\n   */\n  public authAddr?: string;\n\n  /**\n   * (rc) rewards applied to close-remainder-to account.\n   */\n  public closeRewards?: number | bigint;\n\n  /**\n   * (ca) closing amount for transaction.\n   */\n  public closingAmount?: number | bigint;\n\n  /**\n   * Round when the transaction was confirmed.\n   */\n  public confirmedRound?: number | bigint;\n\n  /**\n   * Specifies an application index (ID) if an application was created with this\n   * transaction.\n   */\n  public createdApplicationIndex?: number | bigint;\n\n  /**\n   * Specifies an asset index (ID) if an asset was created with this transaction.\n   */\n  public createdAssetIndex?: number | bigint;\n\n  /**\n   * (gh) Hash of genesis block.\n   */\n  public genesisHash?: Uint8Array;\n\n  /**\n   * (gen) genesis block ID.\n   */\n  public genesisId?: string;\n\n  /**\n   * (gd) Global state key/value changes for the application being executed by this\n   * transaction.\n   */\n  public globalStateDelta?: EvalDeltaKeyValue[];\n\n  /**\n   * (grp) Base64 encoded byte array of a sha512/256 digest. When present indicates\n   * that this transaction is part of a transaction group and the value is the\n   * sha512/256 hash of the transactions in that group.\n   */\n  public group?: Uint8Array;\n\n  /**\n   * Transaction ID\n   */\n  public id?: string;\n\n  /**\n   * Inner transactions produced by application execution.\n   */\n  public innerTxns?: Transaction[];\n\n  /**\n   * Offset into the round where this transaction was confirmed.\n   */\n  public intraRoundOffset?: number | bigint;\n\n  /**\n   * Fields for a keyreg transaction.\n   * Definition:\n   * data/transactions/keyreg.go : KeyregTxnFields\n   */\n  public keyregTransaction?: TransactionKeyreg;\n\n  /**\n   * (lx) Base64 encoded 32-byte array. Lease enforces mutual exclusion of\n   * transactions. If this field is nonzero, then once the transaction is confirmed,\n   * it acquires the lease identified by the (Sender, Lease) pair of the transaction\n   * until the LastValid round passes. While this transaction possesses the lease, no\n   * other transaction specifying this lease can be confirmed.\n   */\n  public lease?: Uint8Array;\n\n  /**\n   * (ld) Local state key/value changes for the application being executed by this\n   * transaction.\n   */\n  public localStateDelta?: AccountStateDelta[];\n\n  /**\n   * (lg) Logs for the application being executed by this transaction.\n   */\n  public logs?: Uint8Array[];\n\n  /**\n   * (note) Free form data.\n   */\n  public note?: Uint8Array;\n\n  /**\n   * Fields for a payment transaction.\n   * Definition:\n   * data/transactions/payment.go : PaymentTxnFields\n   */\n  public paymentTransaction?: TransactionPayment;\n\n  /**\n   * (rr) rewards applied to receiver account.\n   */\n  public receiverRewards?: number | bigint;\n\n  /**\n   * (rekey) when included in a valid transaction, the accounts auth addr will be\n   * updated with this value and future signatures must be signed with the key\n   * represented by this address.\n   */\n  public rekeyTo?: string;\n\n  /**\n   * Time when the block this transaction is in was confirmed.\n   */\n  public roundTime?: number | bigint;\n\n  /**\n   * (rs) rewards applied to sender account.\n   */\n  public senderRewards?: number | bigint;\n\n  /**\n   * Validation signature associated with some data. Only one of the signatures\n   * should be provided.\n   */\n  public signature?: TransactionSignature;\n\n  /**\n   * Fields for a state proof transaction.\n   * Definition:\n   * data/transactions/stateproof.go : StateProofTxnFields\n   */\n  public stateProofTransaction?: TransactionStateProof;\n\n  /**\n   * (type) Indicates what type of transaction this is. Different types have\n   * different fields.\n   * Valid types, and where their fields are stored:\n   * * (pay) payment-transaction\n   * * (keyreg) keyreg-transaction\n   * * (acfg) asset-config-transaction\n   * * (axfer) asset-transfer-transaction\n   * * (afrz) asset-freeze-transaction\n   * * (appl) application-transaction\n   * * (stpf) state-proof-transaction\n   */\n  public txType?: string;\n\n  /**\n   * Creates a new `Transaction` object.\n   * @param fee - (fee) Transaction fee.\n   * @param firstValid - (fv) First valid round for this transaction.\n   * @param lastValid - (lv) Last valid round for this transaction.\n   * @param sender - (snd) Sender's address.\n   * @param applicationTransaction - Fields for application transactions.\n   * Definition:\n   * data/transactions/application.go : ApplicationCallTxnFields\n   * @param assetConfigTransaction - Fields for asset allocation, re-configuration, and destruction.\n   * A zero value for asset-id indicates asset creation.\n   * A zero value for the params indicates asset destruction.\n   * Definition:\n   * data/transactions/asset.go : AssetConfigTxnFields\n   * @param assetFreezeTransaction - Fields for an asset freeze transaction.\n   * Definition:\n   * data/transactions/asset.go : AssetFreezeTxnFields\n   * @param assetTransferTransaction - Fields for an asset transfer transaction.\n   * Definition:\n   * data/transactions/asset.go : AssetTransferTxnFields\n   * @param authAddr - (sgnr) this is included with signed transactions when the signing address does\n   * not equal the sender. The backend can use this to ensure that auth addr is equal\n   * to the accounts auth addr.\n   * @param closeRewards - (rc) rewards applied to close-remainder-to account.\n   * @param closingAmount - (ca) closing amount for transaction.\n   * @param confirmedRound - Round when the transaction was confirmed.\n   * @param createdApplicationIndex - Specifies an application index (ID) if an application was created with this\n   * transaction.\n   * @param createdAssetIndex - Specifies an asset index (ID) if an asset was created with this transaction.\n   * @param genesisHash - (gh) Hash of genesis block.\n   * @param genesisId - (gen) genesis block ID.\n   * @param globalStateDelta - (gd) Global state key/value changes for the application being executed by this\n   * transaction.\n   * @param group - (grp) Base64 encoded byte array of a sha512/256 digest. When present indicates\n   * that this transaction is part of a transaction group and the value is the\n   * sha512/256 hash of the transactions in that group.\n   * @param id - Transaction ID\n   * @param innerTxns - Inner transactions produced by application execution.\n   * @param intraRoundOffset - Offset into the round where this transaction was confirmed.\n   * @param keyregTransaction - Fields for a keyreg transaction.\n   * Definition:\n   * data/transactions/keyreg.go : KeyregTxnFields\n   * @param lease - (lx) Base64 encoded 32-byte array. Lease enforces mutual exclusion of\n   * transactions. If this field is nonzero, then once the transaction is confirmed,\n   * it acquires the lease identified by the (Sender, Lease) pair of the transaction\n   * until the LastValid round passes. While this transaction possesses the lease, no\n   * other transaction specifying this lease can be confirmed.\n   * @param localStateDelta - (ld) Local state key/value changes for the application being executed by this\n   * transaction.\n   * @param logs - (lg) Logs for the application being executed by this transaction.\n   * @param note - (note) Free form data.\n   * @param paymentTransaction - Fields for a payment transaction.\n   * Definition:\n   * data/transactions/payment.go : PaymentTxnFields\n   * @param receiverRewards - (rr) rewards applied to receiver account.\n   * @param rekeyTo - (rekey) when included in a valid transaction, the accounts auth addr will be\n   * updated with this value and future signatures must be signed with the key\n   * represented by this address.\n   * @param roundTime - Time when the block this transaction is in was confirmed.\n   * @param senderRewards - (rs) rewards applied to sender account.\n   * @param signature - Validation signature associated with some data. Only one of the signatures\n   * should be provided.\n   * @param stateProofTransaction - Fields for a state proof transaction.\n   * Definition:\n   * data/transactions/stateproof.go : StateProofTxnFields\n   * @param txType - (type) Indicates what type of transaction this is. Different types have\n   * different fields.\n   * Valid types, and where their fields are stored:\n   * * (pay) payment-transaction\n   * * (keyreg) keyreg-transaction\n   * * (acfg) asset-config-transaction\n   * * (axfer) asset-transfer-transaction\n   * * (afrz) asset-freeze-transaction\n   * * (appl) application-transaction\n   * * (stpf) state-proof-transaction\n   */\n  constructor({\n    fee,\n    firstValid,\n    lastValid,\n    sender,\n    applicationTransaction,\n    assetConfigTransaction,\n    assetFreezeTransaction,\n    assetTransferTransaction,\n    authAddr,\n    closeRewards,\n    closingAmount,\n    confirmedRound,\n    createdApplicationIndex,\n    createdAssetIndex,\n    genesisHash,\n    genesisId,\n    globalStateDelta,\n    group,\n    id,\n    innerTxns,\n    intraRoundOffset,\n    keyregTransaction,\n    lease,\n    localStateDelta,\n    logs,\n    note,\n    paymentTransaction,\n    receiverRewards,\n    rekeyTo,\n    roundTime,\n    senderRewards,\n    signature,\n    stateProofTransaction,\n    txType,\n  }: {\n    fee: number | bigint;\n    firstValid: number | bigint;\n    lastValid: number | bigint;\n    sender: string;\n    applicationTransaction?: TransactionApplication;\n    assetConfigTransaction?: TransactionAssetConfig;\n    assetFreezeTransaction?: TransactionAssetFreeze;\n    assetTransferTransaction?: TransactionAssetTransfer;\n    authAddr?: string;\n    closeRewards?: number | bigint;\n    closingAmount?: number | bigint;\n    confirmedRound?: number | bigint;\n    createdApplicationIndex?: number | bigint;\n    createdAssetIndex?: number | bigint;\n    genesisHash?: string | Uint8Array;\n    genesisId?: string;\n    globalStateDelta?: EvalDeltaKeyValue[];\n    group?: string | Uint8Array;\n    id?: string;\n    innerTxns?: Transaction[];\n    intraRoundOffset?: number | bigint;\n    keyregTransaction?: TransactionKeyreg;\n    lease?: string | Uint8Array;\n    localStateDelta?: AccountStateDelta[];\n    logs?: Uint8Array[];\n    note?: string | Uint8Array;\n    paymentTransaction?: TransactionPayment;\n    receiverRewards?: number | bigint;\n    rekeyTo?: string;\n    roundTime?: number | bigint;\n    senderRewards?: number | bigint;\n    signature?: TransactionSignature;\n    stateProofTransaction?: TransactionStateProof;\n    txType?: string;\n  }) {\n    super();\n    this.fee = fee;\n    this.firstValid = firstValid;\n    this.lastValid = lastValid;\n    this.sender = sender;\n    this.applicationTransaction = applicationTransaction;\n    this.assetConfigTransaction = assetConfigTransaction;\n    this.assetFreezeTransaction = assetFreezeTransaction;\n    this.assetTransferTransaction = assetTransferTransaction;\n    this.authAddr = authAddr;\n    this.closeRewards = closeRewards;\n    this.closingAmount = closingAmount;\n    this.confirmedRound = confirmedRound;\n    this.createdApplicationIndex = createdApplicationIndex;\n    this.createdAssetIndex = createdAssetIndex;\n    this.genesisHash =\n      typeof genesisHash === 'string'\n        ? new Uint8Array(Buffer.from(genesisHash, 'base64'))\n        : genesisHash;\n    this.genesisId = genesisId;\n    this.globalStateDelta = globalStateDelta;\n    this.group =\n      typeof group === 'string'\n        ? new Uint8Array(Buffer.from(group, 'base64'))\n        : group;\n    this.id = id;\n    this.innerTxns = innerTxns;\n    this.intraRoundOffset = intraRoundOffset;\n    this.keyregTransaction = keyregTransaction;\n    this.lease =\n      typeof lease === 'string'\n        ? new Uint8Array(Buffer.from(lease, 'base64'))\n        : lease;\n    this.localStateDelta = localStateDelta;\n    this.logs = logs;\n    this.note =\n      typeof note === 'string'\n        ? new Uint8Array(Buffer.from(note, 'base64'))\n        : note;\n    this.paymentTransaction = paymentTransaction;\n    this.receiverRewards = receiverRewards;\n    this.rekeyTo = rekeyTo;\n    this.roundTime = roundTime;\n    this.senderRewards = senderRewards;\n    this.signature = signature;\n    this.stateProofTransaction = stateProofTransaction;\n    this.txType = txType;\n\n    this.attribute_map = {\n      fee: 'fee',\n      firstValid: 'first-valid',\n      lastValid: 'last-valid',\n      sender: 'sender',\n      applicationTransaction: 'application-transaction',\n      assetConfigTransaction: 'asset-config-transaction',\n      assetFreezeTransaction: 'asset-freeze-transaction',\n      assetTransferTransaction: 'asset-transfer-transaction',\n      authAddr: 'auth-addr',\n      closeRewards: 'close-rewards',\n      closingAmount: 'closing-amount',\n      confirmedRound: 'confirmed-round',\n      createdApplicationIndex: 'created-application-index',\n      createdAssetIndex: 'created-asset-index',\n      genesisHash: 'genesis-hash',\n      genesisId: 'genesis-id',\n      globalStateDelta: 'global-state-delta',\n      group: 'group',\n      id: 'id',\n      innerTxns: 'inner-txns',\n      intraRoundOffset: 'intra-round-offset',\n      keyregTransaction: 'keyreg-transaction',\n      lease: 'lease',\n      localStateDelta: 'local-state-delta',\n      logs: 'logs',\n      note: 'note',\n      paymentTransaction: 'payment-transaction',\n      receiverRewards: 'receiver-rewards',\n      rekeyTo: 'rekey-to',\n      roundTime: 'round-time',\n      senderRewards: 'sender-rewards',\n      signature: 'signature',\n      stateProofTransaction: 'state-proof-transaction',\n      txType: 'tx-type',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): Transaction {\n    /* eslint-disable dot-notation */\n    if (typeof data['fee'] === 'undefined')\n      throw new Error(`Response is missing required field 'fee': ${data}`);\n    if (typeof data['first-valid'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'first-valid': ${data}`\n      );\n    if (typeof data['last-valid'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'last-valid': ${data}`\n      );\n    if (typeof data['sender'] === 'undefined')\n      throw new Error(`Response is missing required field 'sender': ${data}`);\n    return new Transaction({\n      fee: data['fee'],\n      firstValid: data['first-valid'],\n      lastValid: data['last-valid'],\n      sender: data['sender'],\n      applicationTransaction:\n        typeof data['application-transaction'] !== 'undefined'\n          ? TransactionApplication.from_obj_for_encoding(\n              data['application-transaction']\n            )\n          : undefined,\n      assetConfigTransaction:\n        typeof data['asset-config-transaction'] !== 'undefined'\n          ? TransactionAssetConfig.from_obj_for_encoding(\n              data['asset-config-transaction']\n            )\n          : undefined,\n      assetFreezeTransaction:\n        typeof data['asset-freeze-transaction'] !== 'undefined'\n          ? TransactionAssetFreeze.from_obj_for_encoding(\n              data['asset-freeze-transaction']\n            )\n          : undefined,\n      assetTransferTransaction:\n        typeof data['asset-transfer-transaction'] !== 'undefined'\n          ? TransactionAssetTransfer.from_obj_for_encoding(\n              data['asset-transfer-transaction']\n            )\n          : undefined,\n      authAddr: data['auth-addr'],\n      closeRewards: data['close-rewards'],\n      closingAmount: data['closing-amount'],\n      confirmedRound: data['confirmed-round'],\n      createdApplicationIndex: data['created-application-index'],\n      createdAssetIndex: data['created-asset-index'],\n      genesisHash: data['genesis-hash'],\n      genesisId: data['genesis-id'],\n      globalStateDelta:\n        typeof data['global-state-delta'] !== 'undefined'\n          ? data['global-state-delta'].map(\n              EvalDeltaKeyValue.from_obj_for_encoding\n            )\n          : undefined,\n      group: data['group'],\n      id: data['id'],\n      innerTxns:\n        typeof data['inner-txns'] !== 'undefined'\n          ? data['inner-txns'].map(Transaction.from_obj_for_encoding)\n          : undefined,\n      intraRoundOffset: data['intra-round-offset'],\n      keyregTransaction:\n        typeof data['keyreg-transaction'] !== 'undefined'\n          ? TransactionKeyreg.from_obj_for_encoding(data['keyreg-transaction'])\n          : undefined,\n      lease: data['lease'],\n      localStateDelta:\n        typeof data['local-state-delta'] !== 'undefined'\n          ? data['local-state-delta'].map(\n              AccountStateDelta.from_obj_for_encoding\n            )\n          : undefined,\n      logs: data['logs'],\n      note: data['note'],\n      paymentTransaction:\n        typeof data['payment-transaction'] !== 'undefined'\n          ? TransactionPayment.from_obj_for_encoding(\n              data['payment-transaction']\n            )\n          : undefined,\n      receiverRewards: data['receiver-rewards'],\n      rekeyTo: data['rekey-to'],\n      roundTime: data['round-time'],\n      senderRewards: data['sender-rewards'],\n      signature:\n        typeof data['signature'] !== 'undefined'\n          ? TransactionSignature.from_obj_for_encoding(data['signature'])\n          : undefined,\n      stateProofTransaction:\n        typeof data['state-proof-transaction'] !== 'undefined'\n          ? TransactionStateProof.from_obj_for_encoding(\n              data['state-proof-transaction']\n            )\n          : undefined,\n      txType: data['tx-type'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Fields for application transactions.\n * Definition:\n * data/transactions/application.go : ApplicationCallTxnFields\n */\nexport class TransactionApplication extends BaseModel {\n  /**\n   * (apid) ID of the application being configured or empty if creating.\n   */\n  public applicationId: number | bigint;\n\n  /**\n   * (apat) List of accounts in addition to the sender that may be accessed from the\n   * application's approval-program and clear-state-program.\n   */\n  public accounts?: string[];\n\n  /**\n   * (apaa) transaction specific arguments accessed from the application's\n   * approval-program and clear-state-program.\n   */\n  public applicationArgs?: Uint8Array[];\n\n  /**\n   * (apap) Logic executed for every application transaction, except when\n   * on-completion is set to \"clear\". It can read and write global state for the\n   * application, as well as account-specific local state. Approval programs may\n   * reject the transaction.\n   */\n  public approvalProgram?: Uint8Array;\n\n  /**\n   * (apsu) Logic executed for application transactions with on-completion set to\n   * \"clear\". It can read and write global state for the application, as well as\n   * account-specific local state. Clear state programs cannot reject the\n   * transaction.\n   */\n  public clearStateProgram?: Uint8Array;\n\n  /**\n   * (epp) specifies the additional app program len requested in pages.\n   */\n  public extraProgramPages?: number | bigint;\n\n  /**\n   * (apfa) Lists the applications in addition to the application-id whose global\n   * states may be accessed by this application's approval-program and\n   * clear-state-program. The access is read-only.\n   */\n  public foreignApps?: (number | bigint)[];\n\n  /**\n   * (apas) lists the assets whose parameters may be accessed by this application's\n   * ApprovalProgram and ClearStateProgram. The access is read-only.\n   */\n  public foreignAssets?: (number | bigint)[];\n\n  /**\n   * Represents a (apls) local-state or (apgs) global-state schema. These schemas\n   * determine how much storage may be used in a local-state or global-state for an\n   * application. The more space used, the larger minimum balance must be maintained\n   * in the account holding the data.\n   */\n  public globalStateSchema?: StateSchema;\n\n  /**\n   * Represents a (apls) local-state or (apgs) global-state schema. These schemas\n   * determine how much storage may be used in a local-state or global-state for an\n   * application. The more space used, the larger minimum balance must be maintained\n   * in the account holding the data.\n   */\n  public localStateSchema?: StateSchema;\n\n  /**\n   * (apan) defines the what additional actions occur with the transaction.\n   * Valid types:\n   * * noop\n   * * optin\n   * * closeout\n   * * clear\n   * * update\n   * * update\n   * * delete\n   */\n  public onCompletion?: string;\n\n  /**\n   * Creates a new `TransactionApplication` object.\n   * @param applicationId - (apid) ID of the application being configured or empty if creating.\n   * @param accounts - (apat) List of accounts in addition to the sender that may be accessed from the\n   * application's approval-program and clear-state-program.\n   * @param applicationArgs - (apaa) transaction specific arguments accessed from the application's\n   * approval-program and clear-state-program.\n   * @param approvalProgram - (apap) Logic executed for every application transaction, except when\n   * on-completion is set to \"clear\". It can read and write global state for the\n   * application, as well as account-specific local state. Approval programs may\n   * reject the transaction.\n   * @param clearStateProgram - (apsu) Logic executed for application transactions with on-completion set to\n   * \"clear\". It can read and write global state for the application, as well as\n   * account-specific local state. Clear state programs cannot reject the\n   * transaction.\n   * @param extraProgramPages - (epp) specifies the additional app program len requested in pages.\n   * @param foreignApps - (apfa) Lists the applications in addition to the application-id whose global\n   * states may be accessed by this application's approval-program and\n   * clear-state-program. The access is read-only.\n   * @param foreignAssets - (apas) lists the assets whose parameters may be accessed by this application's\n   * ApprovalProgram and ClearStateProgram. The access is read-only.\n   * @param globalStateSchema - Represents a (apls) local-state or (apgs) global-state schema. These schemas\n   * determine how much storage may be used in a local-state or global-state for an\n   * application. The more space used, the larger minimum balance must be maintained\n   * in the account holding the data.\n   * @param localStateSchema - Represents a (apls) local-state or (apgs) global-state schema. These schemas\n   * determine how much storage may be used in a local-state or global-state for an\n   * application. The more space used, the larger minimum balance must be maintained\n   * in the account holding the data.\n   * @param onCompletion - (apan) defines the what additional actions occur with the transaction.\n   * Valid types:\n   * * noop\n   * * optin\n   * * closeout\n   * * clear\n   * * update\n   * * update\n   * * delete\n   */\n  constructor({\n    applicationId,\n    accounts,\n    applicationArgs,\n    approvalProgram,\n    clearStateProgram,\n    extraProgramPages,\n    foreignApps,\n    foreignAssets,\n    globalStateSchema,\n    localStateSchema,\n    onCompletion,\n  }: {\n    applicationId: number | bigint;\n    accounts?: string[];\n    applicationArgs?: Uint8Array[];\n    approvalProgram?: string | Uint8Array;\n    clearStateProgram?: string | Uint8Array;\n    extraProgramPages?: number | bigint;\n    foreignApps?: (number | bigint)[];\n    foreignAssets?: (number | bigint)[];\n    globalStateSchema?: StateSchema;\n    localStateSchema?: StateSchema;\n    onCompletion?: string;\n  }) {\n    super();\n    this.applicationId = applicationId;\n    this.accounts = accounts;\n    this.applicationArgs = applicationArgs;\n    this.approvalProgram =\n      typeof approvalProgram === 'string'\n        ? new Uint8Array(Buffer.from(approvalProgram, 'base64'))\n        : approvalProgram;\n    this.clearStateProgram =\n      typeof clearStateProgram === 'string'\n        ? new Uint8Array(Buffer.from(clearStateProgram, 'base64'))\n        : clearStateProgram;\n    this.extraProgramPages = extraProgramPages;\n    this.foreignApps = foreignApps;\n    this.foreignAssets = foreignAssets;\n    this.globalStateSchema = globalStateSchema;\n    this.localStateSchema = localStateSchema;\n    this.onCompletion = onCompletion;\n\n    this.attribute_map = {\n      applicationId: 'application-id',\n      accounts: 'accounts',\n      applicationArgs: 'application-args',\n      approvalProgram: 'approval-program',\n      clearStateProgram: 'clear-state-program',\n      extraProgramPages: 'extra-program-pages',\n      foreignApps: 'foreign-apps',\n      foreignAssets: 'foreign-assets',\n      globalStateSchema: 'global-state-schema',\n      localStateSchema: 'local-state-schema',\n      onCompletion: 'on-completion',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): TransactionApplication {\n    /* eslint-disable dot-notation */\n    if (typeof data['application-id'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'application-id': ${data}`\n      );\n    return new TransactionApplication({\n      applicationId: data['application-id'],\n      accounts: data['accounts'],\n      applicationArgs: data['application-args'],\n      approvalProgram: data['approval-program'],\n      clearStateProgram: data['clear-state-program'],\n      extraProgramPages: data['extra-program-pages'],\n      foreignApps: data['foreign-apps'],\n      foreignAssets: data['foreign-assets'],\n      globalStateSchema:\n        typeof data['global-state-schema'] !== 'undefined'\n          ? StateSchema.from_obj_for_encoding(data['global-state-schema'])\n          : undefined,\n      localStateSchema:\n        typeof data['local-state-schema'] !== 'undefined'\n          ? StateSchema.from_obj_for_encoding(data['local-state-schema'])\n          : undefined,\n      onCompletion: data['on-completion'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Fields for asset allocation, re-configuration, and destruction.\n * A zero value for asset-id indicates asset creation.\n * A zero value for the params indicates asset destruction.\n * Definition:\n * data/transactions/asset.go : AssetConfigTxnFields\n */\nexport class TransactionAssetConfig extends BaseModel {\n  /**\n   * (xaid) ID of the asset being configured or empty if creating.\n   */\n  public assetId?: number | bigint;\n\n  /**\n   * AssetParams specifies the parameters for an asset.\n   * (apar) when part of an AssetConfig transaction.\n   * Definition:\n   * data/transactions/asset.go : AssetParams\n   */\n  public params?: AssetParams;\n\n  /**\n   * Creates a new `TransactionAssetConfig` object.\n   * @param assetId - (xaid) ID of the asset being configured or empty if creating.\n   * @param params - AssetParams specifies the parameters for an asset.\n   * (apar) when part of an AssetConfig transaction.\n   * Definition:\n   * data/transactions/asset.go : AssetParams\n   */\n  constructor({\n    assetId,\n    params,\n  }: {\n    assetId?: number | bigint;\n    params?: AssetParams;\n  }) {\n    super();\n    this.assetId = assetId;\n    this.params = params;\n\n    this.attribute_map = {\n      assetId: 'asset-id',\n      params: 'params',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): TransactionAssetConfig {\n    /* eslint-disable dot-notation */\n    return new TransactionAssetConfig({\n      assetId: data['asset-id'],\n      params:\n        typeof data['params'] !== 'undefined'\n          ? AssetParams.from_obj_for_encoding(data['params'])\n          : undefined,\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Fields for an asset freeze transaction.\n * Definition:\n * data/transactions/asset.go : AssetFreezeTxnFields\n */\nexport class TransactionAssetFreeze extends BaseModel {\n  /**\n   * (fadd) Address of the account whose asset is being frozen or thawed.\n   */\n  public address: string;\n\n  /**\n   * (faid) ID of the asset being frozen or thawed.\n   */\n  public assetId: number | bigint;\n\n  /**\n   * (afrz) The new freeze status.\n   */\n  public newFreezeStatus: boolean;\n\n  /**\n   * Creates a new `TransactionAssetFreeze` object.\n   * @param address - (fadd) Address of the account whose asset is being frozen or thawed.\n   * @param assetId - (faid) ID of the asset being frozen or thawed.\n   * @param newFreezeStatus - (afrz) The new freeze status.\n   */\n  constructor({\n    address,\n    assetId,\n    newFreezeStatus,\n  }: {\n    address: string;\n    assetId: number | bigint;\n    newFreezeStatus: boolean;\n  }) {\n    super();\n    this.address = address;\n    this.assetId = assetId;\n    this.newFreezeStatus = newFreezeStatus;\n\n    this.attribute_map = {\n      address: 'address',\n      assetId: 'asset-id',\n      newFreezeStatus: 'new-freeze-status',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): TransactionAssetFreeze {\n    /* eslint-disable dot-notation */\n    if (typeof data['address'] === 'undefined')\n      throw new Error(`Response is missing required field 'address': ${data}`);\n    if (typeof data['asset-id'] === 'undefined')\n      throw new Error(`Response is missing required field 'asset-id': ${data}`);\n    if (typeof data['new-freeze-status'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'new-freeze-status': ${data}`\n      );\n    return new TransactionAssetFreeze({\n      address: data['address'],\n      assetId: data['asset-id'],\n      newFreezeStatus: data['new-freeze-status'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Fields for an asset transfer transaction.\n * Definition:\n * data/transactions/asset.go : AssetTransferTxnFields\n */\nexport class TransactionAssetTransfer extends BaseModel {\n  /**\n   * (aamt) Amount of asset to transfer. A zero amount transferred to self allocates\n   * that asset in the account's Assets map.\n   */\n  public amount: number | bigint;\n\n  /**\n   * (xaid) ID of the asset being transferred.\n   */\n  public assetId: number | bigint;\n\n  /**\n   * (arcv) Recipient address of the transfer.\n   */\n  public receiver: string;\n\n  /**\n   * Number of assets transfered to the close-to account as part of the transaction.\n   */\n  public closeAmount?: number | bigint;\n\n  /**\n   * (aclose) Indicates that the asset should be removed from the account's Assets\n   * map, and specifies where the remaining asset holdings should be transferred.\n   * It's always valid to transfer remaining asset holdings to the creator account.\n   */\n  public closeTo?: string;\n\n  /**\n   * (asnd) The effective sender during a clawback transactions. If this is not a\n   * zero value, the real transaction sender must be the Clawback address from the\n   * AssetParams.\n   */\n  public sender?: string;\n\n  /**\n   * Creates a new `TransactionAssetTransfer` object.\n   * @param amount - (aamt) Amount of asset to transfer. A zero amount transferred to self allocates\n   * that asset in the account's Assets map.\n   * @param assetId - (xaid) ID of the asset being transferred.\n   * @param receiver - (arcv) Recipient address of the transfer.\n   * @param closeAmount - Number of assets transfered to the close-to account as part of the transaction.\n   * @param closeTo - (aclose) Indicates that the asset should be removed from the account's Assets\n   * map, and specifies where the remaining asset holdings should be transferred.\n   * It's always valid to transfer remaining asset holdings to the creator account.\n   * @param sender - (asnd) The effective sender during a clawback transactions. If this is not a\n   * zero value, the real transaction sender must be the Clawback address from the\n   * AssetParams.\n   */\n  constructor({\n    amount,\n    assetId,\n    receiver,\n    closeAmount,\n    closeTo,\n    sender,\n  }: {\n    amount: number | bigint;\n    assetId: number | bigint;\n    receiver: string;\n    closeAmount?: number | bigint;\n    closeTo?: string;\n    sender?: string;\n  }) {\n    super();\n    this.amount = amount;\n    this.assetId = assetId;\n    this.receiver = receiver;\n    this.closeAmount = closeAmount;\n    this.closeTo = closeTo;\n    this.sender = sender;\n\n    this.attribute_map = {\n      amount: 'amount',\n      assetId: 'asset-id',\n      receiver: 'receiver',\n      closeAmount: 'close-amount',\n      closeTo: 'close-to',\n      sender: 'sender',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): TransactionAssetTransfer {\n    /* eslint-disable dot-notation */\n    if (typeof data['amount'] === 'undefined')\n      throw new Error(`Response is missing required field 'amount': ${data}`);\n    if (typeof data['asset-id'] === 'undefined')\n      throw new Error(`Response is missing required field 'asset-id': ${data}`);\n    if (typeof data['receiver'] === 'undefined')\n      throw new Error(`Response is missing required field 'receiver': ${data}`);\n    return new TransactionAssetTransfer({\n      amount: data['amount'],\n      assetId: data['asset-id'],\n      receiver: data['receiver'],\n      closeAmount: data['close-amount'],\n      closeTo: data['close-to'],\n      sender: data['sender'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Fields for a keyreg transaction.\n * Definition:\n * data/transactions/keyreg.go : KeyregTxnFields\n */\nexport class TransactionKeyreg extends BaseModel {\n  /**\n   * (nonpart) Mark the account as participating or non-participating.\n   */\n  public nonParticipation?: boolean;\n\n  /**\n   * (selkey) Public key used with the Verified Random Function (VRF) result during\n   * committee selection.\n   */\n  public selectionParticipationKey?: Uint8Array;\n\n  /**\n   * (sprfkey) State proof key used in key registration transactions.\n   */\n  public stateProofKey?: Uint8Array;\n\n  /**\n   * (votefst) First round this participation key is valid.\n   */\n  public voteFirstValid?: number | bigint;\n\n  /**\n   * (votekd) Number of subkeys in each batch of participation keys.\n   */\n  public voteKeyDilution?: number | bigint;\n\n  /**\n   * (votelst) Last round this participation key is valid.\n   */\n  public voteLastValid?: number | bigint;\n\n  /**\n   * (votekey) Participation public key used in key registration transactions.\n   */\n  public voteParticipationKey?: Uint8Array;\n\n  /**\n   * Creates a new `TransactionKeyreg` object.\n   * @param nonParticipation - (nonpart) Mark the account as participating or non-participating.\n   * @param selectionParticipationKey - (selkey) Public key used with the Verified Random Function (VRF) result during\n   * committee selection.\n   * @param stateProofKey - (sprfkey) State proof key used in key registration transactions.\n   * @param voteFirstValid - (votefst) First round this participation key is valid.\n   * @param voteKeyDilution - (votekd) Number of subkeys in each batch of participation keys.\n   * @param voteLastValid - (votelst) Last round this participation key is valid.\n   * @param voteParticipationKey - (votekey) Participation public key used in key registration transactions.\n   */\n  constructor({\n    nonParticipation,\n    selectionParticipationKey,\n    stateProofKey,\n    voteFirstValid,\n    voteKeyDilution,\n    voteLastValid,\n    voteParticipationKey,\n  }: {\n    nonParticipation?: boolean;\n    selectionParticipationKey?: string | Uint8Array;\n    stateProofKey?: string | Uint8Array;\n    voteFirstValid?: number | bigint;\n    voteKeyDilution?: number | bigint;\n    voteLastValid?: number | bigint;\n    voteParticipationKey?: string | Uint8Array;\n  }) {\n    super();\n    this.nonParticipation = nonParticipation;\n    this.selectionParticipationKey =\n      typeof selectionParticipationKey === 'string'\n        ? new Uint8Array(Buffer.from(selectionParticipationKey, 'base64'))\n        : selectionParticipationKey;\n    this.stateProofKey =\n      typeof stateProofKey === 'string'\n        ? new Uint8Array(Buffer.from(stateProofKey, 'base64'))\n        : stateProofKey;\n    this.voteFirstValid = voteFirstValid;\n    this.voteKeyDilution = voteKeyDilution;\n    this.voteLastValid = voteLastValid;\n    this.voteParticipationKey =\n      typeof voteParticipationKey === 'string'\n        ? new Uint8Array(Buffer.from(voteParticipationKey, 'base64'))\n        : voteParticipationKey;\n\n    this.attribute_map = {\n      nonParticipation: 'non-participation',\n      selectionParticipationKey: 'selection-participation-key',\n      stateProofKey: 'state-proof-key',\n      voteFirstValid: 'vote-first-valid',\n      voteKeyDilution: 'vote-key-dilution',\n      voteLastValid: 'vote-last-valid',\n      voteParticipationKey: 'vote-participation-key',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): TransactionKeyreg {\n    /* eslint-disable dot-notation */\n    return new TransactionKeyreg({\n      nonParticipation: data['non-participation'],\n      selectionParticipationKey: data['selection-participation-key'],\n      stateProofKey: data['state-proof-key'],\n      voteFirstValid: data['vote-first-valid'],\n      voteKeyDilution: data['vote-key-dilution'],\n      voteLastValid: data['vote-last-valid'],\n      voteParticipationKey: data['vote-participation-key'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Fields for a payment transaction.\n * Definition:\n * data/transactions/payment.go : PaymentTxnFields\n */\nexport class TransactionPayment extends BaseModel {\n  /**\n   * (amt) number of MicroAlgos intended to be transferred.\n   */\n  public amount: number | bigint;\n\n  /**\n   * (rcv) receiver's address.\n   */\n  public receiver: string;\n\n  /**\n   * Number of MicroAlgos that were sent to the close-remainder-to address when\n   * closing the sender account.\n   */\n  public closeAmount?: number | bigint;\n\n  /**\n   * (close) when set, indicates that the sending account should be closed and all\n   * remaining funds be transferred to this address.\n   */\n  public closeRemainderTo?: string;\n\n  /**\n   * Creates a new `TransactionPayment` object.\n   * @param amount - (amt) number of MicroAlgos intended to be transferred.\n   * @param receiver - (rcv) receiver's address.\n   * @param closeAmount - Number of MicroAlgos that were sent to the close-remainder-to address when\n   * closing the sender account.\n   * @param closeRemainderTo - (close) when set, indicates that the sending account should be closed and all\n   * remaining funds be transferred to this address.\n   */\n  constructor({\n    amount,\n    receiver,\n    closeAmount,\n    closeRemainderTo,\n  }: {\n    amount: number | bigint;\n    receiver: string;\n    closeAmount?: number | bigint;\n    closeRemainderTo?: string;\n  }) {\n    super();\n    this.amount = amount;\n    this.receiver = receiver;\n    this.closeAmount = closeAmount;\n    this.closeRemainderTo = closeRemainderTo;\n\n    this.attribute_map = {\n      amount: 'amount',\n      receiver: 'receiver',\n      closeAmount: 'close-amount',\n      closeRemainderTo: 'close-remainder-to',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): TransactionPayment {\n    /* eslint-disable dot-notation */\n    if (typeof data['amount'] === 'undefined')\n      throw new Error(`Response is missing required field 'amount': ${data}`);\n    if (typeof data['receiver'] === 'undefined')\n      throw new Error(`Response is missing required field 'receiver': ${data}`);\n    return new TransactionPayment({\n      amount: data['amount'],\n      receiver: data['receiver'],\n      closeAmount: data['close-amount'],\n      closeRemainderTo: data['close-remainder-to'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n *\n */\nexport class TransactionResponse extends BaseModel {\n  /**\n   * Round at which the results were computed.\n   */\n  public currentRound: number | bigint;\n\n  /**\n   * Contains all fields common to all transactions and serves as an envelope to all\n   * transactions type. Represents both regular and inner transactions.\n   * Definition:\n   * data/transactions/signedtxn.go : SignedTxn\n   * data/transactions/transaction.go : Transaction\n   */\n  public transaction: Transaction;\n\n  /**\n   * Creates a new `TransactionResponse` object.\n   * @param currentRound - Round at which the results were computed.\n   * @param transaction - Contains all fields common to all transactions and serves as an envelope to all\n   * transactions type. Represents both regular and inner transactions.\n   * Definition:\n   * data/transactions/signedtxn.go : SignedTxn\n   * data/transactions/transaction.go : Transaction\n   */\n  constructor({\n    currentRound,\n    transaction,\n  }: {\n    currentRound: number | bigint;\n    transaction: Transaction;\n  }) {\n    super();\n    this.currentRound = currentRound;\n    this.transaction = transaction;\n\n    this.attribute_map = {\n      currentRound: 'current-round',\n      transaction: 'transaction',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): TransactionResponse {\n    /* eslint-disable dot-notation */\n    if (typeof data['current-round'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'current-round': ${data}`\n      );\n    if (typeof data['transaction'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'transaction': ${data}`\n      );\n    return new TransactionResponse({\n      currentRound: data['current-round'],\n      transaction: Transaction.from_obj_for_encoding(data['transaction']),\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Validation signature associated with some data. Only one of the signatures\n * should be provided.\n */\nexport class TransactionSignature extends BaseModel {\n  /**\n   * (lsig) Programatic transaction signature.\n   * Definition:\n   * data/transactions/logicsig.go\n   */\n  public logicsig?: TransactionSignatureLogicsig;\n\n  /**\n   * (msig) structure holding multiple subsignatures.\n   * Definition:\n   * crypto/multisig.go : MultisigSig\n   */\n  public multisig?: TransactionSignatureMultisig;\n\n  /**\n   * (sig) Standard ed25519 signature.\n   */\n  public sig?: Uint8Array;\n\n  /**\n   * Creates a new `TransactionSignature` object.\n   * @param logicsig - (lsig) Programatic transaction signature.\n   * Definition:\n   * data/transactions/logicsig.go\n   * @param multisig - (msig) structure holding multiple subsignatures.\n   * Definition:\n   * crypto/multisig.go : MultisigSig\n   * @param sig - (sig) Standard ed25519 signature.\n   */\n  constructor({\n    logicsig,\n    multisig,\n    sig,\n  }: {\n    logicsig?: TransactionSignatureLogicsig;\n    multisig?: TransactionSignatureMultisig;\n    sig?: string | Uint8Array;\n  }) {\n    super();\n    this.logicsig = logicsig;\n    this.multisig = multisig;\n    this.sig =\n      typeof sig === 'string'\n        ? new Uint8Array(Buffer.from(sig, 'base64'))\n        : sig;\n\n    this.attribute_map = {\n      logicsig: 'logicsig',\n      multisig: 'multisig',\n      sig: 'sig',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): TransactionSignature {\n    /* eslint-disable dot-notation */\n    return new TransactionSignature({\n      logicsig:\n        typeof data['logicsig'] !== 'undefined'\n          ? TransactionSignatureLogicsig.from_obj_for_encoding(data['logicsig'])\n          : undefined,\n      multisig:\n        typeof data['multisig'] !== 'undefined'\n          ? TransactionSignatureMultisig.from_obj_for_encoding(data['multisig'])\n          : undefined,\n      sig: data['sig'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * (lsig) Programatic transaction signature.\n * Definition:\n * data/transactions/logicsig.go\n */\nexport class TransactionSignatureLogicsig extends BaseModel {\n  /**\n   * (l) Program signed by a signature or multi signature, or hashed to be the\n   * address of ana ccount. Base64 encoded TEAL program.\n   */\n  public logic: Uint8Array;\n\n  /**\n   * (arg) Logic arguments, base64 encoded.\n   */\n  public args?: Uint8Array[];\n\n  /**\n   * (msig) structure holding multiple subsignatures.\n   * Definition:\n   * crypto/multisig.go : MultisigSig\n   */\n  public multisigSignature?: TransactionSignatureMultisig;\n\n  /**\n   * (sig) ed25519 signature.\n   */\n  public signature?: Uint8Array;\n\n  /**\n   * Creates a new `TransactionSignatureLogicsig` object.\n   * @param logic - (l) Program signed by a signature or multi signature, or hashed to be the\n   * address of ana ccount. Base64 encoded TEAL program.\n   * @param args - (arg) Logic arguments, base64 encoded.\n   * @param multisigSignature - (msig) structure holding multiple subsignatures.\n   * Definition:\n   * crypto/multisig.go : MultisigSig\n   * @param signature - (sig) ed25519 signature.\n   */\n  constructor({\n    logic,\n    args,\n    multisigSignature,\n    signature,\n  }: {\n    logic: string | Uint8Array;\n    args?: Uint8Array[];\n    multisigSignature?: TransactionSignatureMultisig;\n    signature?: string | Uint8Array;\n  }) {\n    super();\n    this.logic =\n      typeof logic === 'string'\n        ? new Uint8Array(Buffer.from(logic, 'base64'))\n        : logic;\n    this.args = args;\n    this.multisigSignature = multisigSignature;\n    this.signature =\n      typeof signature === 'string'\n        ? new Uint8Array(Buffer.from(signature, 'base64'))\n        : signature;\n\n    this.attribute_map = {\n      logic: 'logic',\n      args: 'args',\n      multisigSignature: 'multisig-signature',\n      signature: 'signature',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): TransactionSignatureLogicsig {\n    /* eslint-disable dot-notation */\n    if (typeof data['logic'] === 'undefined')\n      throw new Error(`Response is missing required field 'logic': ${data}`);\n    return new TransactionSignatureLogicsig({\n      logic: data['logic'],\n      args: data['args'],\n      multisigSignature:\n        typeof data['multisig-signature'] !== 'undefined'\n          ? TransactionSignatureMultisig.from_obj_for_encoding(\n              data['multisig-signature']\n            )\n          : undefined,\n      signature: data['signature'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * (msig) structure holding multiple subsignatures.\n * Definition:\n * crypto/multisig.go : MultisigSig\n */\nexport class TransactionSignatureMultisig extends BaseModel {\n  /**\n   * (subsig) holds pairs of public key and signatures.\n   */\n  public subsignature?: TransactionSignatureMultisigSubsignature[];\n\n  /**\n   * (thr)\n   */\n  public threshold?: number | bigint;\n\n  /**\n   * (v)\n   */\n  public version?: number | bigint;\n\n  /**\n   * Creates a new `TransactionSignatureMultisig` object.\n   * @param subsignature - (subsig) holds pairs of public key and signatures.\n   * @param threshold - (thr)\n   * @param version - (v)\n   */\n  constructor({\n    subsignature,\n    threshold,\n    version,\n  }: {\n    subsignature?: TransactionSignatureMultisigSubsignature[];\n    threshold?: number | bigint;\n    version?: number | bigint;\n  }) {\n    super();\n    this.subsignature = subsignature;\n    this.threshold = threshold;\n    this.version = version;\n\n    this.attribute_map = {\n      subsignature: 'subsignature',\n      threshold: 'threshold',\n      version: 'version',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): TransactionSignatureMultisig {\n    /* eslint-disable dot-notation */\n    return new TransactionSignatureMultisig({\n      subsignature:\n        typeof data['subsignature'] !== 'undefined'\n          ? data['subsignature'].map(\n              TransactionSignatureMultisigSubsignature.from_obj_for_encoding\n            )\n          : undefined,\n      threshold: data['threshold'],\n      version: data['version'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\nexport class TransactionSignatureMultisigSubsignature extends BaseModel {\n  /**\n   * (pk)\n   */\n  public publicKey?: Uint8Array;\n\n  /**\n   * (s)\n   */\n  public signature?: Uint8Array;\n\n  /**\n   * Creates a new `TransactionSignatureMultisigSubsignature` object.\n   * @param publicKey - (pk)\n   * @param signature - (s)\n   */\n  constructor({\n    publicKey,\n    signature,\n  }: {\n    publicKey?: string | Uint8Array;\n    signature?: string | Uint8Array;\n  }) {\n    super();\n    this.publicKey =\n      typeof publicKey === 'string'\n        ? new Uint8Array(Buffer.from(publicKey, 'base64'))\n        : publicKey;\n    this.signature =\n      typeof signature === 'string'\n        ? new Uint8Array(Buffer.from(signature, 'base64'))\n        : signature;\n\n    this.attribute_map = {\n      publicKey: 'public-key',\n      signature: 'signature',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): TransactionSignatureMultisigSubsignature {\n    /* eslint-disable dot-notation */\n    return new TransactionSignatureMultisigSubsignature({\n      publicKey: data['public-key'],\n      signature: data['signature'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Fields for a state proof transaction.\n * Definition:\n * data/transactions/stateproof.go : StateProofTxnFields\n */\nexport class TransactionStateProof extends BaseModel {\n  /**\n   * (spmsg)\n   */\n  public message?: IndexerStateProofMessage;\n\n  /**\n   * (sp) represents a state proof.\n   * Definition:\n   * crypto/stateproof/structs.go : StateProof\n   */\n  public stateProof?: StateProofFields;\n\n  /**\n   * (sptype) Type of the state proof. Integer representing an entry defined in\n   * protocol/stateproof.go\n   */\n  public stateProofType?: number | bigint;\n\n  /**\n   * Creates a new `TransactionStateProof` object.\n   * @param message - (spmsg)\n   * @param stateProof - (sp) represents a state proof.\n   * Definition:\n   * crypto/stateproof/structs.go : StateProof\n   * @param stateProofType - (sptype) Type of the state proof. Integer representing an entry defined in\n   * protocol/stateproof.go\n   */\n  constructor({\n    message,\n    stateProof,\n    stateProofType,\n  }: {\n    message?: IndexerStateProofMessage;\n    stateProof?: StateProofFields;\n    stateProofType?: number | bigint;\n  }) {\n    super();\n    this.message = message;\n    this.stateProof = stateProof;\n    this.stateProofType = stateProofType;\n\n    this.attribute_map = {\n      message: 'message',\n      stateProof: 'state-proof',\n      stateProofType: 'state-proof-type',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): TransactionStateProof {\n    /* eslint-disable dot-notation */\n    return new TransactionStateProof({\n      message:\n        typeof data['message'] !== 'undefined'\n          ? IndexerStateProofMessage.from_obj_for_encoding(data['message'])\n          : undefined,\n      stateProof:\n        typeof data['state-proof'] !== 'undefined'\n          ? StateProofFields.from_obj_for_encoding(data['state-proof'])\n          : undefined,\n      stateProofType: data['state-proof-type'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n *\n */\nexport class TransactionsResponse extends BaseModel {\n  /**\n   * Round at which the results were computed.\n   */\n  public currentRound: number | bigint;\n\n  public transactions: Transaction[];\n\n  /**\n   * Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  public nextToken?: string;\n\n  /**\n   * Creates a new `TransactionsResponse` object.\n   * @param currentRound - Round at which the results were computed.\n   * @param transactions -\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  constructor({\n    currentRound,\n    transactions,\n    nextToken,\n  }: {\n    currentRound: number | bigint;\n    transactions: Transaction[];\n    nextToken?: string;\n  }) {\n    super();\n    this.currentRound = currentRound;\n    this.transactions = transactions;\n    this.nextToken = nextToken;\n\n    this.attribute_map = {\n      currentRound: 'current-round',\n      transactions: 'transactions',\n      nextToken: 'next-token',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): TransactionsResponse {\n    /* eslint-disable dot-notation */\n    if (typeof data['current-round'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'current-round': ${data}`\n      );\n    if (!Array.isArray(data['transactions']))\n      throw new Error(\n        `Response is missing required array field 'transactions': ${data}`\n      );\n    return new TransactionsResponse({\n      currentRound: data['current-round'],\n      transactions: data['transactions'].map(Transaction.from_obj_for_encoding),\n      nextToken: data['next-token'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}