{"ast":null,"code":"import _regeneratorRuntime from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectSpread from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _asyncToGenerator from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Buffer } from 'buffer';\nimport { Application, ApplicationParams, ApplicationStateSchema, DryrunRequest } from './client/v2/algod/models/types';\nimport { TransactionType } from './types/transactions';\nimport { encodeAddress, getApplicationAddress } from './encoding/address';\nvar defaultAppId = 1380011588;\nvar defaultMaxWidth = 30;\nfunction decodePrograms(ap) {\n  // eslint-disable-next-line no-param-reassign\n  ap.params['approval-program'] = Buffer.from(ap.params['approval-program'].toString(), 'base64');\n  // eslint-disable-next-line no-param-reassign\n  ap.params['clear-state-program'] = Buffer.from(ap.params['clear-state-program'].toString(), 'base64');\n  return ap;\n}\n/**\n * createDryrun takes an Algod Client (from algod.AlgodV2Client) and an array of Signed Transactions\n * from (transaction.SignedTransaction) and creates a DryrunRequest object with relevant balances\n * @param client - the AlgodClient to make requests against\n * @param txns - the array of SignedTransaction to use for generating the DryrunRequest object\n * @param protocolVersion - the string representing the protocol version to use\n * @param latestTimestamp - the timestamp\n * @returns the DryrunRequest object constructed from the SignedTransactions passed\n */\nexport function createDryrun(_x) {\n  return _createDryrun.apply(this, arguments);\n}\nfunction _createDryrun() {\n  _createDryrun = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref) {\n    var client, txns, protocolVersion, latestTimestamp, round, sources, appInfos, acctInfos, apps, assets, accts, _iterator, _step, t, assetPromises, _i, _arr, assetId, appPromises, _i2, _arr2, appId, acctPromises, _i3, _arr3, acct;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          client = _ref.client, txns = _ref.txns, protocolVersion = _ref.protocolVersion, latestTimestamp = _ref.latestTimestamp, round = _ref.round, sources = _ref.sources;\n          appInfos = [];\n          acctInfos = [];\n          apps = [];\n          assets = [];\n          accts = [];\n          _iterator = _createForOfIteratorHelper(txns);\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              t = _step.value;\n              if (t.txn.type === TransactionType.appl) {\n                accts.push(encodeAddress(t.txn.from.publicKey));\n                if (t.txn.appAccounts) accts.push.apply(accts, _toConsumableArray(t.txn.appAccounts.map(function (a) {\n                  return encodeAddress(a.publicKey);\n                })));\n                if (t.txn.appForeignApps) {\n                  apps.push.apply(apps, _toConsumableArray(t.txn.appForeignApps));\n                  accts.push.apply(accts, _toConsumableArray(t.txn.appForeignApps.map(function (aidx) {\n                    return getApplicationAddress(aidx);\n                  })));\n                }\n                if (t.txn.appForeignAssets) assets.push.apply(assets, _toConsumableArray(t.txn.appForeignAssets));\n                // Create application,\n                if (t.txn.appIndex === undefined || t.txn.appIndex === 0) {\n                  appInfos.push(new Application({\n                    id: defaultAppId,\n                    params: new ApplicationParams({\n                      creator: encodeAddress(t.txn.from.publicKey),\n                      approvalProgram: t.txn.appApprovalProgram,\n                      clearStateProgram: t.txn.appClearProgram,\n                      localStateSchema: new ApplicationStateSchema({\n                        numUint: t.txn.appLocalInts,\n                        numByteSlice: t.txn.appLocalByteSlices\n                      }),\n                      globalStateSchema: new ApplicationStateSchema({\n                        numUint: t.txn.appGlobalInts,\n                        numByteSlice: t.txn.appGlobalByteSlices\n                      })\n                    })\n                  }));\n                } else {\n                  apps.push(t.txn.appIndex);\n                  accts.push(getApplicationAddress(t.txn.appIndex));\n                }\n              }\n            }\n            // Dedupe and add creator to accts array\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n          assetPromises = [];\n          for (_i = 0, _arr = _toConsumableArray(new Set(assets)); _i < _arr.length; _i++) {\n            assetId = _arr[_i];\n            assetPromises.push(client.getAssetByID(assetId).do().then(function (assetInfo) {\n              accts.push(assetInfo.params.creator);\n            }));\n          }\n          // Wait for assets to finish since we append to accts array\n          _context.next = 12;\n          return Promise.all(assetPromises);\n        case 12:\n          // Dedupe and get app info for all apps\n          appPromises = [];\n          for (_i2 = 0, _arr2 = _toConsumableArray(new Set(apps)); _i2 < _arr2.length; _i2++) {\n            appId = _arr2[_i2];\n            appPromises.push(client.getApplicationByID(appId).do().then(function (appInfo) {\n              var ai = decodePrograms(appInfo);\n              appInfos.push(ai);\n              accts.push(ai.params.creator);\n            }));\n          }\n          _context.next = 16;\n          return Promise.all(appPromises);\n        case 16:\n          acctPromises = [];\n          for (_i3 = 0, _arr3 = _toConsumableArray(new Set(accts)); _i3 < _arr3.length; _i3++) {\n            acct = _arr3[_i3];\n            acctPromises.push(client.accountInformation(acct).do().then(function (acctInfo) {\n              if ('created-apps' in acctInfo) {\n                // eslint-disable-next-line no-param-reassign\n                acctInfo['created-apps'] = acctInfo['created-apps'].map(function (app) {\n                  return decodePrograms(app);\n                });\n              }\n              acctInfos.push(acctInfo);\n            }));\n          }\n          _context.next = 20;\n          return Promise.all(acctPromises);\n        case 20:\n          return _context.abrupt(\"return\", new DryrunRequest({\n            txns: txns.map(function (st) {\n              return _objectSpread(_objectSpread({}, st), {}, {\n                txn: st.txn.get_obj_for_encoding()\n              });\n            }),\n            accounts: acctInfos,\n            apps: appInfos,\n            latestTimestamp: latestTimestamp,\n            round: round,\n            protocolVersion: protocolVersion,\n            sources: sources\n          }));\n        case 21:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _createDryrun.apply(this, arguments);\n}\nvar DryrunStackValue = /*#__PURE__*/function () {\n  function DryrunStackValue(sv) {\n    _classCallCheck(this, DryrunStackValue);\n    this.type = 0;\n    this.bytes = '';\n    this.uint = 0;\n    this.type = sv.type;\n    this.bytes = sv.bytes;\n    this.uint = sv.uint;\n  }\n  _createClass(DryrunStackValue, [{\n    key: \"toString\",\n    value: function toString() {\n      if (this.type === 1) {\n        return \"0x\".concat(Buffer.from(this.bytes, 'base64').toString('hex'));\n      }\n      return this.uint.toString();\n    }\n  }]);\n  return DryrunStackValue;\n}();\nvar DryrunTraceLine = /*#__PURE__*/_createClass(function DryrunTraceLine(line) {\n  _classCallCheck(this, DryrunTraceLine);\n  this.error = '';\n  this.line = 0;\n  this.pc = 0;\n  this.scratch = [];\n  this.stack = [];\n  this.error = line.error === undefined ? '' : line.error;\n  this.line = line.line;\n  this.pc = line.pc;\n  this.scratch = line.scratch;\n  this.stack = line.stack.map(function (sv) {\n    return new DryrunStackValue(sv);\n  });\n});\nvar DryrunTrace = /*#__PURE__*/_createClass(function DryrunTrace(t) {\n  _classCallCheck(this, DryrunTrace);\n  this.trace = [];\n  if (t == null) return;\n  this.trace = t.map(function (line) {\n    return new DryrunTraceLine(line);\n  });\n});\nfunction truncate(str, maxValueWidth) {\n  if (str.length > maxValueWidth && maxValueWidth > 0) {\n    return \"\".concat(str.slice(0, maxValueWidth), \"...\");\n  }\n  return str;\n}\nfunction scratchToString(prevScratch, currScratch) {\n  if (currScratch.length === 0) return '';\n  var newScratchIdx = null;\n  for (var idx = 0; idx < currScratch.length; idx++) {\n    if (idx > prevScratch.length) {\n      newScratchIdx = idx;\n      continue;\n    }\n    if (JSON.stringify(prevScratch[idx]) !== JSON.stringify(currScratch[idx])) {\n      newScratchIdx = idx;\n    }\n  }\n  if (newScratchIdx == null) return '';\n  var newScratch = currScratch[newScratchIdx];\n  if (newScratch.bytes.length > 0) {\n    return \"\".concat(newScratchIdx, \" = 0x\").concat(Buffer.from(newScratch.bytes, 'base64').toString('hex'));\n  }\n  return \"\".concat(newScratchIdx, \" = \").concat(newScratch.uint.toString());\n}\nfunction stackToString(stack, reverse) {\n  var svs = reverse ? stack.reverse() : stack;\n  return \"[\".concat(svs.map(function (sv) {\n    switch (sv.type) {\n      case 1:\n        return \"0x\".concat(Buffer.from(sv.bytes, 'base64').toString('hex'));\n      case 2:\n        return \"\".concat(sv.uint.toString());\n      default:\n        return '';\n    }\n  }).join(', '), \"]\");\n}\nvar DryrunTransactionResult = /*#__PURE__*/function () {\n  function DryrunTransactionResult(dtr) {\n    _classCallCheck(this, DryrunTransactionResult);\n    this.disassembly = [];\n    this.appCallMessages = [];\n    this.localDeltas = [];\n    this.globalDelta = [];\n    this.cost = 0;\n    this.logicSigMessages = [];\n    this.logicSigDisassembly = [];\n    this.logs = [];\n    this.appCallTrace = undefined;\n    this.logicSigTrace = undefined;\n    this.required = ['disassembly'];\n    this.optionals = ['app-call-messages', 'local-deltas', 'global-delta', 'cost', 'logic-sig-messages', 'logic-sig-disassembly', 'logs'];\n    this.traces = ['app-call-trace', 'logic-sig-trace'];\n    this.disassembly = dtr.disassembly;\n    this.appCallMessages = dtr['app-call-messages'];\n    this.localDeltas = dtr['local-deltas'];\n    this.globalDelta = dtr['global-delta'];\n    this.cost = dtr.cost;\n    this.logicSigMessages = dtr['logic-sig-messages'];\n    this.logicSigDisassembly = dtr['logic-sig-disassembly'];\n    this.logs = dtr.logs;\n    this.appCallTrace = new DryrunTrace(dtr['app-call-trace']);\n    this.logicSigTrace = new DryrunTrace(dtr['logic-sig-trace']);\n  }\n  _createClass(DryrunTransactionResult, [{\n    key: \"appCallRejected\",\n    value: function appCallRejected() {\n      return this.appCallMessages !== undefined && this.appCallMessages.includes('REJECT');\n    }\n  }, {\n    key: \"logicSigRejected\",\n    value: function logicSigRejected() {\n      return this.logicSigMessages !== undefined && this.logicSigMessages.includes('REJECT');\n    }\n  }, {\n    key: \"appTrace\",\n    value: function appTrace(spc) {\n      if (this.appCallTrace === undefined || !this.disassembly) return '';\n      var conf = spc;\n      if (spc === undefined) conf = {\n        maxValueWidth: defaultMaxWidth,\n        topOfStackFirst: false\n      };\n      return DryrunTransactionResult.trace(this.appCallTrace, this.disassembly, conf);\n    }\n  }, {\n    key: \"lsigTrace\",\n    value: function lsigTrace(spc) {\n      if (this.logicSigTrace === undefined || this.logicSigDisassembly === undefined) return '';\n      var conf = spc;\n      if (spc === undefined) conf = {\n        maxValueWidth: defaultMaxWidth,\n        topOfStackFirst: true\n      };\n      return DryrunTransactionResult.trace(this.logicSigTrace, this.logicSigDisassembly, conf);\n    }\n  }], [{\n    key: \"trace\",\n    value: function trace(drt, disassembly, spc) {\n      var maxWidth = spc.maxValueWidth || defaultMaxWidth;\n      // Create the array of arrays, each sub array contains N columns\n      var lines = [['pc#', 'ln#', 'source', 'scratch', 'stack']];\n      for (var idx = 0; idx < drt.trace.length; idx++) {\n        var _drt$trace$idx = drt.trace[idx],\n          line = _drt$trace$idx.line,\n          error = _drt$trace$idx.error,\n          pc = _drt$trace$idx.pc,\n          scratch = _drt$trace$idx.scratch,\n          stack = _drt$trace$idx.stack;\n        var currScratch = scratch !== undefined ? scratch : [];\n        var prevScratch = idx > 0 && drt.trace[idx - 1].scratch !== undefined ? drt.trace[idx - 1].scratch : [];\n        var src = error === '' ? disassembly[line] : \"!! \".concat(error, \" !!\");\n        lines.push([pc.toString().padEnd(3, ' '), line.toString().padEnd(3, ' '), truncate(src, maxWidth), truncate(scratchToString(prevScratch, currScratch), maxWidth), truncate(stackToString(stack, spc.topOfStackFirst), maxWidth)]);\n      }\n      // Get the max length for each column\n      var maxLengths = lines.reduce(function (prev, curr) {\n        var newVal = new Array(lines[0].length).fill(0);\n        for (var _idx = 0; _idx < prev.length; _idx++) {\n          newVal[_idx] = curr[_idx].length > prev[_idx] ? curr[_idx].length : prev[_idx];\n        }\n        return newVal;\n      }, new Array(lines[0].length).fill(0));\n      return \"\".concat(lines.map(function (line) {\n        return line.map(function (v, idx) {\n          return v.padEnd(maxLengths[idx] + 1, ' ');\n        }).join('|').trim();\n      }).join('\\n'), \"\\n\");\n    }\n  }]);\n  return DryrunTransactionResult;\n}();\nexport var DryrunResult = /*#__PURE__*/_createClass(function DryrunResult(drrResp) {\n  _classCallCheck(this, DryrunResult);\n  this.error = '';\n  this.protocolVersion = '';\n  this.txns = [];\n  this.error = drrResp.error;\n  this.protocolVersion = drrResp['protocol-version'];\n  this.txns = drrResp.txns.map(function (txn) {\n    return new DryrunTransactionResult(txn);\n  });\n});","map":{"version":3,"names":["Buffer","Application","ApplicationParams","ApplicationStateSchema","DryrunRequest","TransactionType","encodeAddress","getApplicationAddress","defaultAppId","defaultMaxWidth","decodePrograms","ap","params","from","toString","createDryrun","_x","_createDryrun","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_ref","client","txns","protocolVersion","latestTimestamp","round","sources","appInfos","acctInfos","apps","assets","accts","_iterator","_step","t","assetPromises","_i","_arr","assetId","appPromises","_i2","_arr2","appId","acctPromises","_i3","_arr3","acct","wrap","_callee$","_context","prev","next","_createForOfIteratorHelper","s","n","done","value","txn","type","appl","push","publicKey","appAccounts","_toConsumableArray","map","a","appForeignApps","aidx","appForeignAssets","appIndex","undefined","id","creator","approvalProgram","appApprovalProgram","clearStateProgram","appClearProgram","localStateSchema","numUint","appLocalInts","numByteSlice","appLocalByteSlices","globalStateSchema","appGlobalInts","appGlobalByteSlices","err","e","f","Set","length","getAssetByID","do","then","assetInfo","Promise","all","getApplicationByID","appInfo","ai","accountInformation","acctInfo","app","abrupt","st","_objectSpread","get_obj_for_encoding","accounts","stop","DryrunStackValue","sv","_classCallCheck","bytes","uint","_createClass","key","concat","DryrunTraceLine","line","error","pc","scratch","stack","DryrunTrace","trace","truncate","str","maxValueWidth","slice","scratchToString","prevScratch","currScratch","newScratchIdx","idx","JSON","stringify","newScratch","stackToString","reverse","svs","join","DryrunTransactionResult","dtr","disassembly","appCallMessages","localDeltas","globalDelta","cost","logicSigMessages","logicSigDisassembly","logs","appCallTrace","logicSigTrace","required","optionals","traces","appCallRejected","includes","logicSigRejected","appTrace","spc","conf","topOfStackFirst","lsigTrace","drt","maxWidth","lines","_drt$trace$idx","src","padEnd","maxLengths","reduce","curr","newVal","Array","fill","v","trim","DryrunResult","drrResp"],"sources":["/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/algosdk/src/dryrun.ts"],"sourcesContent":["import { Buffer } from 'buffer';\nimport AlgodClient from './client/v2/algod/algod';\nimport {\n  AccountStateDelta,\n  Application,\n  ApplicationParams,\n  ApplicationStateSchema,\n  DryrunRequest,\n  DryrunSource,\n  EvalDeltaKeyValue,\n  TealValue,\n} from './client/v2/algod/models/types';\nimport { SignedTransaction } from './transaction';\nimport { TransactionType } from './types/transactions';\nimport { encodeAddress, getApplicationAddress } from './encoding/address';\n\nconst defaultAppId = 1380011588;\nconst defaultMaxWidth = 30;\n\n// When writing the DryrunRequest object as msgpack the output needs to be the byte arrays not b64 string\ninterface AppParamsWithPrograms {\n  ['approval-program']: string | Uint8Array;\n  ['clear-state-program']: string | Uint8Array;\n  ['creator']: string;\n}\n\ninterface AppWithAppParams {\n  ['params']: AppParamsWithPrograms;\n}\n\nfunction decodePrograms(ap: AppWithAppParams): AppWithAppParams {\n  // eslint-disable-next-line no-param-reassign\n  ap.params['approval-program'] = Buffer.from(\n    ap.params['approval-program'].toString(),\n    'base64'\n  );\n  // eslint-disable-next-line no-param-reassign\n  ap.params['clear-state-program'] = Buffer.from(\n    ap.params['clear-state-program'].toString(),\n    'base64'\n  );\n\n  return ap;\n}\n\n/**\n * createDryrun takes an Algod Client (from algod.AlgodV2Client) and an array of Signed Transactions\n * from (transaction.SignedTransaction) and creates a DryrunRequest object with relevant balances\n * @param client - the AlgodClient to make requests against\n * @param txns - the array of SignedTransaction to use for generating the DryrunRequest object\n * @param protocolVersion - the string representing the protocol version to use\n * @param latestTimestamp - the timestamp\n * @returns the DryrunRequest object constructed from the SignedTransactions passed\n */\nexport async function createDryrun({\n  client,\n  txns,\n  protocolVersion,\n  latestTimestamp,\n  round,\n  sources,\n}: {\n  client: AlgodClient;\n  txns: SignedTransaction[];\n  protocolVersion?: string;\n  latestTimestamp?: number | bigint;\n  round?: number | bigint;\n  sources?: DryrunSource[];\n}): Promise<DryrunRequest> {\n  const appInfos = [];\n  const acctInfos = [];\n\n  const apps: number[] = [];\n  const assets: number[] = [];\n  const accts: string[] = [];\n\n  for (const t of txns) {\n    if (t.txn.type === TransactionType.appl) {\n      accts.push(encodeAddress(t.txn.from.publicKey));\n\n      if (t.txn.appAccounts)\n        accts.push(...t.txn.appAccounts.map((a) => encodeAddress(a.publicKey)));\n\n      if (t.txn.appForeignApps) {\n        apps.push(...t.txn.appForeignApps);\n        accts.push(\n          ...t.txn.appForeignApps.map((aidx) => getApplicationAddress(aidx))\n        );\n      }\n\n      if (t.txn.appForeignAssets) assets.push(...t.txn.appForeignAssets);\n\n      // Create application,\n      if (t.txn.appIndex === undefined || t.txn.appIndex === 0) {\n        appInfos.push(\n          new Application({\n            id: defaultAppId,\n            params: new ApplicationParams({\n              creator: encodeAddress(t.txn.from.publicKey),\n              approvalProgram: t.txn.appApprovalProgram,\n              clearStateProgram: t.txn.appClearProgram,\n              localStateSchema: new ApplicationStateSchema({\n                numUint: t.txn.appLocalInts,\n                numByteSlice: t.txn.appLocalByteSlices,\n              }),\n              globalStateSchema: new ApplicationStateSchema({\n                numUint: t.txn.appGlobalInts,\n                numByteSlice: t.txn.appGlobalByteSlices,\n              }),\n            }),\n          })\n        );\n      } else {\n        apps.push(t.txn.appIndex);\n        accts.push(getApplicationAddress(t.txn.appIndex));\n      }\n    }\n  }\n\n  // Dedupe and add creator to accts array\n  const assetPromises = [];\n  for (const assetId of [...new Set(assets)]) {\n    assetPromises.push(\n      client\n        .getAssetByID(assetId)\n        .do()\n        .then((assetInfo) => {\n          accts.push(assetInfo.params.creator);\n        })\n    );\n  }\n  // Wait for assets to finish since we append to accts array\n  await Promise.all(assetPromises);\n\n  // Dedupe and get app info for all apps\n  const appPromises = [];\n  for (const appId of [...new Set(apps)]) {\n    appPromises.push(\n      client\n        .getApplicationByID(appId)\n        .do()\n        .then((appInfo) => {\n          const ai = decodePrograms(appInfo as AppWithAppParams);\n          appInfos.push(ai);\n          accts.push(ai.params.creator);\n        })\n    );\n  }\n  await Promise.all(appPromises);\n\n  const acctPromises = [];\n  for (const acct of [...new Set(accts)]) {\n    acctPromises.push(\n      client\n        .accountInformation(acct)\n        .do()\n        .then((acctInfo) => {\n          if ('created-apps' in acctInfo) {\n            // eslint-disable-next-line no-param-reassign\n            acctInfo['created-apps'] = acctInfo['created-apps'].map((app) =>\n              decodePrograms(app)\n            );\n          }\n          acctInfos.push(acctInfo);\n        })\n    );\n  }\n  await Promise.all(acctPromises);\n\n  return new DryrunRequest({\n    txns: txns.map((st) => ({ ...st, txn: st.txn.get_obj_for_encoding() })),\n    accounts: acctInfos,\n    apps: appInfos,\n    latestTimestamp,\n    round,\n    protocolVersion,\n    sources,\n  });\n}\n\ninterface StackValueResponse {\n  type: number;\n  bytes: string;\n  uint: number;\n}\n\nclass DryrunStackValue {\n  type: number = 0;\n  bytes: string = '';\n  uint: number = 0;\n\n  constructor(sv: StackValueResponse) {\n    this.type = sv.type;\n    this.bytes = sv.bytes;\n    this.uint = sv.uint;\n  }\n\n  toString(): string {\n    if (this.type === 1) {\n      return `0x${Buffer.from(this.bytes, 'base64').toString('hex')}`;\n    }\n    return this.uint.toString();\n  }\n}\n\ninterface DryrunTraceLineResponse {\n  error: string;\n  line: number;\n  pc: number;\n  scratch: TealValue[];\n  stack: StackValueResponse[];\n}\n\nclass DryrunTraceLine {\n  error: string = '';\n  line: number = 0;\n  pc: number = 0;\n  scratch: TealValue[] = [];\n  stack: DryrunStackValue[] = [];\n\n  constructor(line: DryrunTraceLineResponse) {\n    this.error = line.error === undefined ? '' : line.error;\n    this.line = line.line;\n    this.pc = line.pc;\n    this.scratch = line.scratch;\n    this.stack = line.stack.map(\n      (sv: StackValueResponse) => new DryrunStackValue(sv)\n    );\n  }\n}\n\nclass DryrunTrace {\n  trace: DryrunTraceLine[] = [];\n  constructor(t: DryrunTraceLineResponse[]) {\n    if (t == null) return;\n    this.trace = t.map((line) => new DryrunTraceLine(line));\n  }\n}\n\ninterface DryrunTransactionResultResponse {\n  disassembly: string[];\n  appCallMessages: string[] | undefined;\n  localDeltas: AccountStateDelta[] | undefined;\n  globalDelta: EvalDeltaKeyValue[] | undefined;\n  cost: number | undefined;\n  logicSigMessages: string[] | undefined;\n  logicSigDisassembly: string[] | undefined;\n  logs: string[] | undefined;\n  appCallTrace: DryrunTrace | undefined;\n  logicSigTrace: DryrunTrace | undefined;\n}\n\ninterface StackPrinterConfig {\n  maxValueWidth: number | undefined;\n  topOfStackFirst: boolean | undefined;\n}\n\nfunction truncate(str: string, maxValueWidth: number): string {\n  if (str.length > maxValueWidth && maxValueWidth > 0) {\n    return `${str.slice(0, maxValueWidth)}...`;\n  }\n  return str;\n}\n\nfunction scratchToString(\n  prevScratch: TealValue[],\n  currScratch: TealValue[]\n): string {\n  if (currScratch.length === 0) return '';\n\n  let newScratchIdx = null;\n  for (let idx = 0; idx < currScratch.length; idx++) {\n    if (idx > prevScratch.length) {\n      newScratchIdx = idx;\n      continue;\n    }\n\n    if (JSON.stringify(prevScratch[idx]) !== JSON.stringify(currScratch[idx])) {\n      newScratchIdx = idx;\n    }\n  }\n\n  if (newScratchIdx == null) return '';\n\n  const newScratch = currScratch[newScratchIdx];\n  if (newScratch.bytes.length > 0) {\n    return `${newScratchIdx} = 0x${Buffer.from(\n      newScratch.bytes,\n      'base64'\n    ).toString('hex')}`;\n  }\n  return `${newScratchIdx} = ${newScratch.uint.toString()}`;\n}\n\nfunction stackToString(stack: DryrunStackValue[], reverse: boolean): string {\n  const svs = reverse ? stack.reverse() : stack;\n  return `[${svs\n    .map((sv: DryrunStackValue) => {\n      switch (sv.type) {\n        case 1:\n          return `0x${Buffer.from(sv.bytes, 'base64').toString('hex')}`;\n        case 2:\n          return `${sv.uint.toString()}`;\n        default:\n          return '';\n      }\n    })\n    .join(', ')}]`;\n}\n\nclass DryrunTransactionResult {\n  disassembly: string[] = [];\n  appCallMessages: string[] | undefined = [];\n  localDeltas: AccountStateDelta[] | undefined = [];\n  globalDelta: EvalDeltaKeyValue[] | undefined = [];\n  cost: number | undefined = 0;\n  logicSigMessages: string[] | undefined = [];\n  logicSigDisassembly: string[] | undefined = [];\n  logs: string[] | undefined = [];\n\n  appCallTrace: DryrunTrace | undefined = undefined;\n  logicSigTrace: DryrunTrace | undefined = undefined;\n\n  required = ['disassembly'];\n  optionals = [\n    'app-call-messages',\n    'local-deltas',\n    'global-delta',\n    'cost',\n    'logic-sig-messages',\n    'logic-sig-disassembly',\n    'logs',\n  ];\n\n  traces = ['app-call-trace', 'logic-sig-trace'];\n\n  constructor(dtr: DryrunTransactionResultResponse) {\n    this.disassembly = dtr.disassembly;\n    this.appCallMessages = dtr['app-call-messages'];\n    this.localDeltas = dtr['local-deltas'];\n    this.globalDelta = dtr['global-delta'];\n    this.cost = dtr.cost;\n    this.logicSigMessages = dtr['logic-sig-messages'];\n    this.logicSigDisassembly = dtr['logic-sig-disassembly'];\n    this.logs = dtr.logs;\n    this.appCallTrace = new DryrunTrace(dtr['app-call-trace']);\n    this.logicSigTrace = new DryrunTrace(dtr['logic-sig-trace']);\n  }\n\n  appCallRejected(): boolean {\n    return (\n      this.appCallMessages !== undefined &&\n      this.appCallMessages.includes('REJECT')\n    );\n  }\n\n  logicSigRejected(): boolean {\n    return (\n      this.logicSigMessages !== undefined &&\n      this.logicSigMessages.includes('REJECT')\n    );\n  }\n\n  static trace(\n    drt: DryrunTrace,\n    disassembly: string[],\n    spc: StackPrinterConfig\n  ): string {\n    const maxWidth = spc.maxValueWidth || defaultMaxWidth;\n\n    // Create the array of arrays, each sub array contains N columns\n    const lines = [['pc#', 'ln#', 'source', 'scratch', 'stack']];\n    for (let idx = 0; idx < drt.trace.length; idx++) {\n      const { line, error, pc, scratch, stack } = drt.trace[idx];\n\n      const currScratch = scratch !== undefined ? scratch : [];\n      const prevScratch =\n        idx > 0 && drt.trace[idx - 1].scratch !== undefined\n          ? drt.trace[idx - 1].scratch\n          : [];\n\n      const src = error === '' ? disassembly[line] : `!! ${error} !!`;\n\n      lines.push([\n        pc.toString().padEnd(3, ' '),\n        line.toString().padEnd(3, ' '),\n        truncate(src, maxWidth),\n        truncate(scratchToString(prevScratch, currScratch), maxWidth),\n        truncate(stackToString(stack, spc.topOfStackFirst), maxWidth),\n      ]);\n    }\n\n    // Get the max length for each column\n    const maxLengths = lines.reduce((prev, curr) => {\n      const newVal = new Array(lines[0].length).fill(0);\n      for (let idx = 0; idx < prev.length; idx++) {\n        newVal[idx] =\n          curr[idx].length > prev[idx] ? curr[idx].length : prev[idx];\n      }\n      return newVal;\n    }, new Array(lines[0].length).fill(0));\n\n    return `${lines\n      .map((line) =>\n        line\n          .map((v, idx) => v.padEnd(maxLengths[idx] + 1, ' '))\n          .join('|')\n          .trim()\n      )\n      .join('\\n')}\\n`;\n  }\n\n  appTrace(spc?: StackPrinterConfig): string {\n    if (this.appCallTrace === undefined || !this.disassembly) return '';\n\n    let conf = spc;\n    if (spc === undefined)\n      conf = {\n        maxValueWidth: defaultMaxWidth,\n        topOfStackFirst: false,\n      } as StackPrinterConfig;\n\n    return DryrunTransactionResult.trace(\n      this.appCallTrace,\n      this.disassembly,\n      conf\n    );\n  }\n\n  lsigTrace(spc?: StackPrinterConfig): string {\n    if (\n      this.logicSigTrace === undefined ||\n      this.logicSigDisassembly === undefined\n    )\n      return '';\n\n    let conf = spc;\n    if (spc === undefined)\n      conf = {\n        maxValueWidth: defaultMaxWidth,\n        topOfStackFirst: true,\n      } as StackPrinterConfig;\n\n    return DryrunTransactionResult.trace(\n      this.logicSigTrace,\n      this.logicSigDisassembly,\n      conf\n    );\n  }\n}\n\ninterface DryrunResultResponse {\n  ['error']: string;\n  ['protocol-version']: string;\n  ['txns']: DryrunTransactionResultResponse[];\n}\n\nexport class DryrunResult {\n  error: string = '';\n  protocolVersion: string = '';\n  txns: DryrunTransactionResult[] = [];\n  constructor(drrResp: DryrunResultResponse) {\n    this.error = drrResp.error;\n    this.protocolVersion = drrResp['protocol-version'];\n    this.txns = drrResp.txns.map(\n      (txn: DryrunTransactionResultResponse) => new DryrunTransactionResult(txn)\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}