{"ast":null,"code":"import _classCallCheck from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/**\n * NOTICE: This file was generated. Editing this file manually is not recommended.\n */\n/* eslint-disable no-use-before-define */\nimport { Buffer } from 'buffer';\nimport BaseModel from '../../basemodel';\n/**\n * Account information at a given round.\n * Definition:\n * data/basics/userBalance.go : AccountData\n */\nexport var Account = /*#__PURE__*/function (_BaseModel) {\n  _inherits(Account, _BaseModel);\n  var _super = _createSuper(Account);\n  /**\n   * Creates a new `Account` object.\n   * @param address - the account public key\n   * @param amount - (algo) total number of MicroAlgos in the account\n   * @param amountWithoutPendingRewards - specifies the amount of MicroAlgos in the account, without the pending rewards.\n   * @param pendingRewards - amount of MicroAlgos of pending rewards in this account.\n   * @param rewards - (ern) total rewards of MicroAlgos the account has received, including pending\n   * rewards.\n   * @param round - The round for which this information is relevant.\n   * @param status - (onl) delegation status of the account's MicroAlgos\n   * * Offline - indicates that the associated account is delegated.\n   * * Online - indicates that the associated account used as part of the delegation\n   * pool.\n   * * NotParticipating - indicates that the associated account is neither a\n   * delegator nor a delegate.\n   * @param totalAppsOptedIn - The count of all applications that have been opted in, equivalent to the count\n   * of application local data (AppLocalState objects) stored in this account.\n   * @param totalAssetsOptedIn - The count of all assets that have been opted in, equivalent to the count of\n   * AssetHolding objects held by this account.\n   * @param totalBoxBytes - For app-accounts only. The total number of bytes allocated for the keys and\n   * values of boxes which belong to the associated application.\n   * @param totalBoxes - For app-accounts only. The total number of boxes which belong to the associated\n   * application.\n   * @param totalCreatedApps - The count of all apps (AppParams objects) created by this account.\n   * @param totalCreatedAssets - The count of all assets (AssetParams objects) created by this account.\n   * @param appsLocalState - (appl) applications local data stored in this account.\n   * Note the raw object uses `map[int] -> AppLocalState` for this type.\n   * @param appsTotalExtraPages - (teap) the sum of all extra application program pages for this account.\n   * @param appsTotalSchema - (tsch) stores the sum of all of the local schemas and global schemas in this\n   * account.\n   * Note: the raw account uses `StateSchema` for this type.\n   * @param assets - (asset) assets held by this account.\n   * Note the raw object uses `map[int] -> AssetHolding` for this type.\n   * @param authAddr - (spend) the address against which signing should be checked. If empty, the\n   * address of the current account is used. This field can be updated in any\n   * transaction by setting the RekeyTo field.\n   * @param closedAtRound - Round during which this account was most recently closed.\n   * @param createdApps - (appp) parameters of applications created by this account including app global\n   * data.\n   * Note: the raw account uses `map[int] -> AppParams` for this type.\n   * @param createdAssets - (apar) parameters of assets created by this account.\n   * Note: the raw account uses `map[int] -> Asset` for this type.\n   * @param createdAtRound - Round during which this account first appeared in a transaction.\n   * @param deleted - Whether or not this account is currently closed.\n   * @param participation - AccountParticipation describes the parameters used by this account in consensus\n   * protocol.\n   * @param rewardBase - (ebase) used as part of the rewards computation. Only applicable to accounts\n   * which are participating.\n   * @param sigType - Indicates what type of signature is used by this account, must be one of:\n   * * sig\n   * * msig\n   * * lsig\n   * * or null if unknown\n   */\n  function Account(_ref) {\n    var _this;\n    var address = _ref.address,\n      amount = _ref.amount,\n      amountWithoutPendingRewards = _ref.amountWithoutPendingRewards,\n      pendingRewards = _ref.pendingRewards,\n      rewards = _ref.rewards,\n      round = _ref.round,\n      status = _ref.status,\n      totalAppsOptedIn = _ref.totalAppsOptedIn,\n      totalAssetsOptedIn = _ref.totalAssetsOptedIn,\n      totalBoxBytes = _ref.totalBoxBytes,\n      totalBoxes = _ref.totalBoxes,\n      totalCreatedApps = _ref.totalCreatedApps,\n      totalCreatedAssets = _ref.totalCreatedAssets,\n      appsLocalState = _ref.appsLocalState,\n      appsTotalExtraPages = _ref.appsTotalExtraPages,\n      appsTotalSchema = _ref.appsTotalSchema,\n      assets = _ref.assets,\n      authAddr = _ref.authAddr,\n      closedAtRound = _ref.closedAtRound,\n      createdApps = _ref.createdApps,\n      createdAssets = _ref.createdAssets,\n      createdAtRound = _ref.createdAtRound,\n      deleted = _ref.deleted,\n      participation = _ref.participation,\n      rewardBase = _ref.rewardBase,\n      sigType = _ref.sigType;\n    _classCallCheck(this, Account);\n    _this = _super.call(this);\n    _this.address = address;\n    _this.amount = amount;\n    _this.amountWithoutPendingRewards = amountWithoutPendingRewards;\n    _this.pendingRewards = pendingRewards;\n    _this.rewards = rewards;\n    _this.round = round;\n    _this.status = status;\n    _this.totalAppsOptedIn = totalAppsOptedIn;\n    _this.totalAssetsOptedIn = totalAssetsOptedIn;\n    _this.totalBoxBytes = totalBoxBytes;\n    _this.totalBoxes = totalBoxes;\n    _this.totalCreatedApps = totalCreatedApps;\n    _this.totalCreatedAssets = totalCreatedAssets;\n    _this.appsLocalState = appsLocalState;\n    _this.appsTotalExtraPages = appsTotalExtraPages;\n    _this.appsTotalSchema = appsTotalSchema;\n    _this.assets = assets;\n    _this.authAddr = authAddr;\n    _this.closedAtRound = closedAtRound;\n    _this.createdApps = createdApps;\n    _this.createdAssets = createdAssets;\n    _this.createdAtRound = createdAtRound;\n    _this.deleted = deleted;\n    _this.participation = participation;\n    _this.rewardBase = rewardBase;\n    _this.sigType = sigType;\n    _this.attribute_map = {\n      address: 'address',\n      amount: 'amount',\n      amountWithoutPendingRewards: 'amount-without-pending-rewards',\n      pendingRewards: 'pending-rewards',\n      rewards: 'rewards',\n      round: 'round',\n      status: 'status',\n      totalAppsOptedIn: 'total-apps-opted-in',\n      totalAssetsOptedIn: 'total-assets-opted-in',\n      totalBoxBytes: 'total-box-bytes',\n      totalBoxes: 'total-boxes',\n      totalCreatedApps: 'total-created-apps',\n      totalCreatedAssets: 'total-created-assets',\n      appsLocalState: 'apps-local-state',\n      appsTotalExtraPages: 'apps-total-extra-pages',\n      appsTotalSchema: 'apps-total-schema',\n      assets: 'assets',\n      authAddr: 'auth-addr',\n      closedAtRound: 'closed-at-round',\n      createdApps: 'created-apps',\n      createdAssets: 'created-assets',\n      createdAtRound: 'created-at-round',\n      deleted: 'deleted',\n      participation: 'participation',\n      rewardBase: 'reward-base',\n      sigType: 'sig-type'\n    };\n    return _this;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(Account, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['address'] === 'undefined') throw new Error(\"Response is missing required field 'address': \".concat(data));\n      if (typeof data['amount'] === 'undefined') throw new Error(\"Response is missing required field 'amount': \".concat(data));\n      if (typeof data['amount-without-pending-rewards'] === 'undefined') throw new Error(\"Response is missing required field 'amount-without-pending-rewards': \".concat(data));\n      if (typeof data['pending-rewards'] === 'undefined') throw new Error(\"Response is missing required field 'pending-rewards': \".concat(data));\n      if (typeof data['rewards'] === 'undefined') throw new Error(\"Response is missing required field 'rewards': \".concat(data));\n      if (typeof data['round'] === 'undefined') throw new Error(\"Response is missing required field 'round': \".concat(data));\n      if (typeof data['status'] === 'undefined') throw new Error(\"Response is missing required field 'status': \".concat(data));\n      if (typeof data['total-apps-opted-in'] === 'undefined') throw new Error(\"Response is missing required field 'total-apps-opted-in': \".concat(data));\n      if (typeof data['total-assets-opted-in'] === 'undefined') throw new Error(\"Response is missing required field 'total-assets-opted-in': \".concat(data));\n      if (typeof data['total-box-bytes'] === 'undefined') throw new Error(\"Response is missing required field 'total-box-bytes': \".concat(data));\n      if (typeof data['total-boxes'] === 'undefined') throw new Error(\"Response is missing required field 'total-boxes': \".concat(data));\n      if (typeof data['total-created-apps'] === 'undefined') throw new Error(\"Response is missing required field 'total-created-apps': \".concat(data));\n      if (typeof data['total-created-assets'] === 'undefined') throw new Error(\"Response is missing required field 'total-created-assets': \".concat(data));\n      return new Account({\n        address: data['address'],\n        amount: data['amount'],\n        amountWithoutPendingRewards: data['amount-without-pending-rewards'],\n        pendingRewards: data['pending-rewards'],\n        rewards: data['rewards'],\n        round: data['round'],\n        status: data['status'],\n        totalAppsOptedIn: data['total-apps-opted-in'],\n        totalAssetsOptedIn: data['total-assets-opted-in'],\n        totalBoxBytes: data['total-box-bytes'],\n        totalBoxes: data['total-boxes'],\n        totalCreatedApps: data['total-created-apps'],\n        totalCreatedAssets: data['total-created-assets'],\n        appsLocalState: typeof data['apps-local-state'] !== 'undefined' ? data['apps-local-state'].map(ApplicationLocalState.from_obj_for_encoding) : undefined,\n        appsTotalExtraPages: data['apps-total-extra-pages'],\n        appsTotalSchema: typeof data['apps-total-schema'] !== 'undefined' ? ApplicationStateSchema.from_obj_for_encoding(data['apps-total-schema']) : undefined,\n        assets: typeof data['assets'] !== 'undefined' ? data['assets'].map(AssetHolding.from_obj_for_encoding) : undefined,\n        authAddr: data['auth-addr'],\n        closedAtRound: data['closed-at-round'],\n        createdApps: typeof data['created-apps'] !== 'undefined' ? data['created-apps'].map(Application.from_obj_for_encoding) : undefined,\n        createdAssets: typeof data['created-assets'] !== 'undefined' ? data['created-assets'].map(Asset.from_obj_for_encoding) : undefined,\n        createdAtRound: data['created-at-round'],\n        deleted: data['deleted'],\n        participation: typeof data['participation'] !== 'undefined' ? AccountParticipation.from_obj_for_encoding(data['participation']) : undefined,\n        rewardBase: data['reward-base'],\n        sigType: data['sig-type']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return Account;\n}(BaseModel);\n/**\n * AccountParticipation describes the parameters used by this account in consensus\n * protocol.\n */\nexport var AccountParticipation = /*#__PURE__*/function (_BaseModel2) {\n  _inherits(AccountParticipation, _BaseModel2);\n  var _super2 = _createSuper(AccountParticipation);\n  /**\n   * Creates a new `AccountParticipation` object.\n   * @param selectionParticipationKey - (sel) Selection public key (if any) currently registered for this round.\n   * @param voteFirstValid - (voteFst) First round for which this participation is valid.\n   * @param voteKeyDilution - (voteKD) Number of subkeys in each batch of participation keys.\n   * @param voteLastValid - (voteLst) Last round for which this participation is valid.\n   * @param voteParticipationKey - (vote) root participation public key (if any) currently registered for this\n   * round.\n   * @param stateProofKey - (stprf) Root of the state proof key (if any)\n   */\n  function AccountParticipation(_ref2) {\n    var _this2;\n    var selectionParticipationKey = _ref2.selectionParticipationKey,\n      voteFirstValid = _ref2.voteFirstValid,\n      voteKeyDilution = _ref2.voteKeyDilution,\n      voteLastValid = _ref2.voteLastValid,\n      voteParticipationKey = _ref2.voteParticipationKey,\n      stateProofKey = _ref2.stateProofKey;\n    _classCallCheck(this, AccountParticipation);\n    _this2 = _super2.call(this);\n    _this2.selectionParticipationKey = typeof selectionParticipationKey === 'string' ? new Uint8Array(Buffer.from(selectionParticipationKey, 'base64')) : selectionParticipationKey;\n    _this2.voteFirstValid = voteFirstValid;\n    _this2.voteKeyDilution = voteKeyDilution;\n    _this2.voteLastValid = voteLastValid;\n    _this2.voteParticipationKey = typeof voteParticipationKey === 'string' ? new Uint8Array(Buffer.from(voteParticipationKey, 'base64')) : voteParticipationKey;\n    _this2.stateProofKey = typeof stateProofKey === 'string' ? new Uint8Array(Buffer.from(stateProofKey, 'base64')) : stateProofKey;\n    _this2.attribute_map = {\n      selectionParticipationKey: 'selection-participation-key',\n      voteFirstValid: 'vote-first-valid',\n      voteKeyDilution: 'vote-key-dilution',\n      voteLastValid: 'vote-last-valid',\n      voteParticipationKey: 'vote-participation-key',\n      stateProofKey: 'state-proof-key'\n    };\n    return _this2;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(AccountParticipation, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['selection-participation-key'] === 'undefined') throw new Error(\"Response is missing required field 'selection-participation-key': \".concat(data));\n      if (typeof data['vote-first-valid'] === 'undefined') throw new Error(\"Response is missing required field 'vote-first-valid': \".concat(data));\n      if (typeof data['vote-key-dilution'] === 'undefined') throw new Error(\"Response is missing required field 'vote-key-dilution': \".concat(data));\n      if (typeof data['vote-last-valid'] === 'undefined') throw new Error(\"Response is missing required field 'vote-last-valid': \".concat(data));\n      if (typeof data['vote-participation-key'] === 'undefined') throw new Error(\"Response is missing required field 'vote-participation-key': \".concat(data));\n      return new AccountParticipation({\n        selectionParticipationKey: data['selection-participation-key'],\n        voteFirstValid: data['vote-first-valid'],\n        voteKeyDilution: data['vote-key-dilution'],\n        voteLastValid: data['vote-last-valid'],\n        voteParticipationKey: data['vote-participation-key'],\n        stateProofKey: data['state-proof-key']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return AccountParticipation;\n}(BaseModel);\n/**\n *\n */\nexport var AccountResponse = /*#__PURE__*/function (_BaseModel3) {\n  _inherits(AccountResponse, _BaseModel3);\n  var _super3 = _createSuper(AccountResponse);\n  /**\n   * Creates a new `AccountResponse` object.\n   * @param account - Account information at a given round.\n   * Definition:\n   * data/basics/userBalance.go : AccountData\n   * @param currentRound - Round at which the results were computed.\n   */\n  function AccountResponse(_ref3) {\n    var _this3;\n    var account = _ref3.account,\n      currentRound = _ref3.currentRound;\n    _classCallCheck(this, AccountResponse);\n    _this3 = _super3.call(this);\n    _this3.account = account;\n    _this3.currentRound = currentRound;\n    _this3.attribute_map = {\n      account: 'account',\n      currentRound: 'current-round'\n    };\n    return _this3;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(AccountResponse, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['account'] === 'undefined') throw new Error(\"Response is missing required field 'account': \".concat(data));\n      if (typeof data['current-round'] === 'undefined') throw new Error(\"Response is missing required field 'current-round': \".concat(data));\n      return new AccountResponse({\n        account: Account.from_obj_for_encoding(data['account']),\n        currentRound: data['current-round']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return AccountResponse;\n}(BaseModel);\n/**\n * Application state delta.\n */\nexport var AccountStateDelta = /*#__PURE__*/function (_BaseModel4) {\n  _inherits(AccountStateDelta, _BaseModel4);\n  var _super4 = _createSuper(AccountStateDelta);\n  /**\n   * Creates a new `AccountStateDelta` object.\n   * @param address -\n   * @param delta - Application state delta.\n   */\n  function AccountStateDelta(_ref4) {\n    var _this4;\n    var address = _ref4.address,\n      delta = _ref4.delta;\n    _classCallCheck(this, AccountStateDelta);\n    _this4 = _super4.call(this);\n    _this4.address = address;\n    _this4.delta = delta;\n    _this4.attribute_map = {\n      address: 'address',\n      delta: 'delta'\n    };\n    return _this4;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(AccountStateDelta, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['address'] === 'undefined') throw new Error(\"Response is missing required field 'address': \".concat(data));\n      if (!Array.isArray(data['delta'])) throw new Error(\"Response is missing required array field 'delta': \".concat(data));\n      return new AccountStateDelta({\n        address: data['address'],\n        delta: data['delta'].map(EvalDeltaKeyValue.from_obj_for_encoding)\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return AccountStateDelta;\n}(BaseModel);\n/**\n *\n */\nexport var AccountsResponse = /*#__PURE__*/function (_BaseModel5) {\n  _inherits(AccountsResponse, _BaseModel5);\n  var _super5 = _createSuper(AccountsResponse);\n  /**\n   * Creates a new `AccountsResponse` object.\n   * @param accounts -\n   * @param currentRound - Round at which the results were computed.\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  function AccountsResponse(_ref5) {\n    var _this5;\n    var accounts = _ref5.accounts,\n      currentRound = _ref5.currentRound,\n      nextToken = _ref5.nextToken;\n    _classCallCheck(this, AccountsResponse);\n    _this5 = _super5.call(this);\n    _this5.accounts = accounts;\n    _this5.currentRound = currentRound;\n    _this5.nextToken = nextToken;\n    _this5.attribute_map = {\n      accounts: 'accounts',\n      currentRound: 'current-round',\n      nextToken: 'next-token'\n    };\n    return _this5;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(AccountsResponse, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (!Array.isArray(data['accounts'])) throw new Error(\"Response is missing required array field 'accounts': \".concat(data));\n      if (typeof data['current-round'] === 'undefined') throw new Error(\"Response is missing required field 'current-round': \".concat(data));\n      return new AccountsResponse({\n        accounts: data['accounts'].map(Account.from_obj_for_encoding),\n        currentRound: data['current-round'],\n        nextToken: data['next-token']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return AccountsResponse;\n}(BaseModel);\n/**\n * Application index and its parameters\n */\nexport var Application = /*#__PURE__*/function (_BaseModel6) {\n  _inherits(Application, _BaseModel6);\n  var _super6 = _createSuper(Application);\n  /**\n   * Creates a new `Application` object.\n   * @param id - (appidx) application index.\n   * @param params - (appparams) application parameters.\n   * @param createdAtRound - Round when this application was created.\n   * @param deleted - Whether or not this application is currently deleted.\n   * @param deletedAtRound - Round when this application was deleted.\n   */\n  function Application(_ref6) {\n    var _this6;\n    var id = _ref6.id,\n      params = _ref6.params,\n      createdAtRound = _ref6.createdAtRound,\n      deleted = _ref6.deleted,\n      deletedAtRound = _ref6.deletedAtRound;\n    _classCallCheck(this, Application);\n    _this6 = _super6.call(this);\n    _this6.id = id;\n    _this6.params = params;\n    _this6.createdAtRound = createdAtRound;\n    _this6.deleted = deleted;\n    _this6.deletedAtRound = deletedAtRound;\n    _this6.attribute_map = {\n      id: 'id',\n      params: 'params',\n      createdAtRound: 'created-at-round',\n      deleted: 'deleted',\n      deletedAtRound: 'deleted-at-round'\n    };\n    return _this6;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(Application, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['id'] === 'undefined') throw new Error(\"Response is missing required field 'id': \".concat(data));\n      if (typeof data['params'] === 'undefined') throw new Error(\"Response is missing required field 'params': \".concat(data));\n      return new Application({\n        id: data['id'],\n        params: ApplicationParams.from_obj_for_encoding(data['params']),\n        createdAtRound: data['created-at-round'],\n        deleted: data['deleted'],\n        deletedAtRound: data['deleted-at-round']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return Application;\n}(BaseModel);\n/**\n * Stores local state associated with an application.\n */\nexport var ApplicationLocalState = /*#__PURE__*/function (_BaseModel7) {\n  _inherits(ApplicationLocalState, _BaseModel7);\n  var _super7 = _createSuper(ApplicationLocalState);\n  /**\n   * Creates a new `ApplicationLocalState` object.\n   * @param id - The application which this local state is for.\n   * @param schema - (hsch) schema.\n   * @param closedOutAtRound - Round when account closed out of the application.\n   * @param deleted - Whether or not the application local state is currently deleted from its\n   * account.\n   * @param keyValue - (tkv) storage.\n   * @param optedInAtRound - Round when the account opted into the application.\n   */\n  function ApplicationLocalState(_ref7) {\n    var _this7;\n    var id = _ref7.id,\n      schema = _ref7.schema,\n      closedOutAtRound = _ref7.closedOutAtRound,\n      deleted = _ref7.deleted,\n      keyValue = _ref7.keyValue,\n      optedInAtRound = _ref7.optedInAtRound;\n    _classCallCheck(this, ApplicationLocalState);\n    _this7 = _super7.call(this);\n    _this7.id = id;\n    _this7.schema = schema;\n    _this7.closedOutAtRound = closedOutAtRound;\n    _this7.deleted = deleted;\n    _this7.keyValue = keyValue;\n    _this7.optedInAtRound = optedInAtRound;\n    _this7.attribute_map = {\n      id: 'id',\n      schema: 'schema',\n      closedOutAtRound: 'closed-out-at-round',\n      deleted: 'deleted',\n      keyValue: 'key-value',\n      optedInAtRound: 'opted-in-at-round'\n    };\n    return _this7;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(ApplicationLocalState, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['id'] === 'undefined') throw new Error(\"Response is missing required field 'id': \".concat(data));\n      if (typeof data['schema'] === 'undefined') throw new Error(\"Response is missing required field 'schema': \".concat(data));\n      return new ApplicationLocalState({\n        id: data['id'],\n        schema: ApplicationStateSchema.from_obj_for_encoding(data['schema']),\n        closedOutAtRound: data['closed-out-at-round'],\n        deleted: data['deleted'],\n        keyValue: typeof data['key-value'] !== 'undefined' ? data['key-value'].map(TealKeyValue.from_obj_for_encoding) : undefined,\n        optedInAtRound: data['opted-in-at-round']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return ApplicationLocalState;\n}(BaseModel);\n/**\n *\n */\nexport var ApplicationLocalStatesResponse = /*#__PURE__*/function (_BaseModel8) {\n  _inherits(ApplicationLocalStatesResponse, _BaseModel8);\n  var _super8 = _createSuper(ApplicationLocalStatesResponse);\n  /**\n   * Creates a new `ApplicationLocalStatesResponse` object.\n   * @param appsLocalStates -\n   * @param currentRound - Round at which the results were computed.\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  function ApplicationLocalStatesResponse(_ref8) {\n    var _this8;\n    var appsLocalStates = _ref8.appsLocalStates,\n      currentRound = _ref8.currentRound,\n      nextToken = _ref8.nextToken;\n    _classCallCheck(this, ApplicationLocalStatesResponse);\n    _this8 = _super8.call(this);\n    _this8.appsLocalStates = appsLocalStates;\n    _this8.currentRound = currentRound;\n    _this8.nextToken = nextToken;\n    _this8.attribute_map = {\n      appsLocalStates: 'apps-local-states',\n      currentRound: 'current-round',\n      nextToken: 'next-token'\n    };\n    return _this8;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(ApplicationLocalStatesResponse, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (!Array.isArray(data['apps-local-states'])) throw new Error(\"Response is missing required array field 'apps-local-states': \".concat(data));\n      if (typeof data['current-round'] === 'undefined') throw new Error(\"Response is missing required field 'current-round': \".concat(data));\n      return new ApplicationLocalStatesResponse({\n        appsLocalStates: data['apps-local-states'].map(ApplicationLocalState.from_obj_for_encoding),\n        currentRound: data['current-round'],\n        nextToken: data['next-token']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return ApplicationLocalStatesResponse;\n}(BaseModel);\n/**\n * Stores the global information associated with an application.\n */\nexport var ApplicationLogData = /*#__PURE__*/function (_BaseModel9) {\n  _inherits(ApplicationLogData, _BaseModel9);\n  var _super9 = _createSuper(ApplicationLogData);\n  /**\n   * Creates a new `ApplicationLogData` object.\n   * @param logs - (lg) Logs for the application being executed by the transaction.\n   * @param txid - Transaction ID\n   */\n  function ApplicationLogData(_ref9) {\n    var _this9;\n    var logs = _ref9.logs,\n      txid = _ref9.txid;\n    _classCallCheck(this, ApplicationLogData);\n    _this9 = _super9.call(this);\n    _this9.logs = logs;\n    _this9.txid = txid;\n    _this9.attribute_map = {\n      logs: 'logs',\n      txid: 'txid'\n    };\n    return _this9;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(ApplicationLogData, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (!Array.isArray(data['logs'])) throw new Error(\"Response is missing required array field 'logs': \".concat(data));\n      if (typeof data['txid'] === 'undefined') throw new Error(\"Response is missing required field 'txid': \".concat(data));\n      return new ApplicationLogData({\n        logs: data['logs'],\n        txid: data['txid']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return ApplicationLogData;\n}(BaseModel);\n/**\n *\n */\nexport var ApplicationLogsResponse = /*#__PURE__*/function (_BaseModel10) {\n  _inherits(ApplicationLogsResponse, _BaseModel10);\n  var _super10 = _createSuper(ApplicationLogsResponse);\n  /**\n   * Creates a new `ApplicationLogsResponse` object.\n   * @param applicationId - (appidx) application index.\n   * @param currentRound - Round at which the results were computed.\n   * @param logData -\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  function ApplicationLogsResponse(_ref10) {\n    var _this10;\n    var applicationId = _ref10.applicationId,\n      currentRound = _ref10.currentRound,\n      logData = _ref10.logData,\n      nextToken = _ref10.nextToken;\n    _classCallCheck(this, ApplicationLogsResponse);\n    _this10 = _super10.call(this);\n    _this10.applicationId = applicationId;\n    _this10.currentRound = currentRound;\n    _this10.logData = logData;\n    _this10.nextToken = nextToken;\n    _this10.attribute_map = {\n      applicationId: 'application-id',\n      currentRound: 'current-round',\n      logData: 'log-data',\n      nextToken: 'next-token'\n    };\n    return _this10;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(ApplicationLogsResponse, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['application-id'] === 'undefined') throw new Error(\"Response is missing required field 'application-id': \".concat(data));\n      if (typeof data['current-round'] === 'undefined') throw new Error(\"Response is missing required field 'current-round': \".concat(data));\n      return new ApplicationLogsResponse({\n        applicationId: data['application-id'],\n        currentRound: data['current-round'],\n        logData: typeof data['log-data'] !== 'undefined' ? data['log-data'].map(ApplicationLogData.from_obj_for_encoding) : undefined,\n        nextToken: data['next-token']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return ApplicationLogsResponse;\n}(BaseModel);\n/**\n * Stores the global information associated with an application.\n */\nexport var ApplicationParams = /*#__PURE__*/function (_BaseModel11) {\n  _inherits(ApplicationParams, _BaseModel11);\n  var _super11 = _createSuper(ApplicationParams);\n  /**\n   * Creates a new `ApplicationParams` object.\n   * @param approvalProgram - (approv) approval program.\n   * @param clearStateProgram - (clearp) approval program.\n   * @param creator - The address that created this application. This is the address where the\n   * parameters and global state for this application can be found.\n   * @param extraProgramPages - (epp) the amount of extra program pages available to this app.\n   * @param globalState - [\\gs) global schema\n   * @param globalStateSchema - [\\gsch) global schema\n   * @param localStateSchema - [\\lsch) local schema\n   */\n  function ApplicationParams(_ref11) {\n    var _this11;\n    var approvalProgram = _ref11.approvalProgram,\n      clearStateProgram = _ref11.clearStateProgram,\n      creator = _ref11.creator,\n      extraProgramPages = _ref11.extraProgramPages,\n      globalState = _ref11.globalState,\n      globalStateSchema = _ref11.globalStateSchema,\n      localStateSchema = _ref11.localStateSchema;\n    _classCallCheck(this, ApplicationParams);\n    _this11 = _super11.call(this);\n    _this11.approvalProgram = typeof approvalProgram === 'string' ? new Uint8Array(Buffer.from(approvalProgram, 'base64')) : approvalProgram;\n    _this11.clearStateProgram = typeof clearStateProgram === 'string' ? new Uint8Array(Buffer.from(clearStateProgram, 'base64')) : clearStateProgram;\n    _this11.creator = creator;\n    _this11.extraProgramPages = extraProgramPages;\n    _this11.globalState = globalState;\n    _this11.globalStateSchema = globalStateSchema;\n    _this11.localStateSchema = localStateSchema;\n    _this11.attribute_map = {\n      approvalProgram: 'approval-program',\n      clearStateProgram: 'clear-state-program',\n      creator: 'creator',\n      extraProgramPages: 'extra-program-pages',\n      globalState: 'global-state',\n      globalStateSchema: 'global-state-schema',\n      localStateSchema: 'local-state-schema'\n    };\n    return _this11;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(ApplicationParams, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['approval-program'] === 'undefined') throw new Error(\"Response is missing required field 'approval-program': \".concat(data));\n      if (typeof data['clear-state-program'] === 'undefined') throw new Error(\"Response is missing required field 'clear-state-program': \".concat(data));\n      return new ApplicationParams({\n        approvalProgram: data['approval-program'],\n        clearStateProgram: data['clear-state-program'],\n        creator: data['creator'],\n        extraProgramPages: data['extra-program-pages'],\n        globalState: typeof data['global-state'] !== 'undefined' ? data['global-state'].map(TealKeyValue.from_obj_for_encoding) : undefined,\n        globalStateSchema: typeof data['global-state-schema'] !== 'undefined' ? ApplicationStateSchema.from_obj_for_encoding(data['global-state-schema']) : undefined,\n        localStateSchema: typeof data['local-state-schema'] !== 'undefined' ? ApplicationStateSchema.from_obj_for_encoding(data['local-state-schema']) : undefined\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return ApplicationParams;\n}(BaseModel);\n/**\n *\n */\nexport var ApplicationResponse = /*#__PURE__*/function (_BaseModel12) {\n  _inherits(ApplicationResponse, _BaseModel12);\n  var _super12 = _createSuper(ApplicationResponse);\n  /**\n   * Creates a new `ApplicationResponse` object.\n   * @param currentRound - Round at which the results were computed.\n   * @param application - Application index and its parameters\n   */\n  function ApplicationResponse(_ref12) {\n    var _this12;\n    var currentRound = _ref12.currentRound,\n      application = _ref12.application;\n    _classCallCheck(this, ApplicationResponse);\n    _this12 = _super12.call(this);\n    _this12.currentRound = currentRound;\n    _this12.application = application;\n    _this12.attribute_map = {\n      currentRound: 'current-round',\n      application: 'application'\n    };\n    return _this12;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(ApplicationResponse, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['current-round'] === 'undefined') throw new Error(\"Response is missing required field 'current-round': \".concat(data));\n      return new ApplicationResponse({\n        currentRound: data['current-round'],\n        application: typeof data['application'] !== 'undefined' ? Application.from_obj_for_encoding(data['application']) : undefined\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return ApplicationResponse;\n}(BaseModel);\n/**\n * Specifies maximums on the number of each type that may be stored.\n */\nexport var ApplicationStateSchema = /*#__PURE__*/function (_BaseModel13) {\n  _inherits(ApplicationStateSchema, _BaseModel13);\n  var _super13 = _createSuper(ApplicationStateSchema);\n  /**\n   * Creates a new `ApplicationStateSchema` object.\n   * @param numByteSlice - (nbs) num of byte slices.\n   * @param numUint - (nui) num of uints.\n   */\n  function ApplicationStateSchema(_ref13) {\n    var _this13;\n    var numByteSlice = _ref13.numByteSlice,\n      numUint = _ref13.numUint;\n    _classCallCheck(this, ApplicationStateSchema);\n    _this13 = _super13.call(this);\n    _this13.numByteSlice = numByteSlice;\n    _this13.numUint = numUint;\n    _this13.attribute_map = {\n      numByteSlice: 'num-byte-slice',\n      numUint: 'num-uint'\n    };\n    return _this13;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(ApplicationStateSchema, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['num-byte-slice'] === 'undefined') throw new Error(\"Response is missing required field 'num-byte-slice': \".concat(data));\n      if (typeof data['num-uint'] === 'undefined') throw new Error(\"Response is missing required field 'num-uint': \".concat(data));\n      return new ApplicationStateSchema({\n        numByteSlice: data['num-byte-slice'],\n        numUint: data['num-uint']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return ApplicationStateSchema;\n}(BaseModel);\n/**\n *\n */\nexport var ApplicationsResponse = /*#__PURE__*/function (_BaseModel14) {\n  _inherits(ApplicationsResponse, _BaseModel14);\n  var _super14 = _createSuper(ApplicationsResponse);\n  /**\n   * Creates a new `ApplicationsResponse` object.\n   * @param applications -\n   * @param currentRound - Round at which the results were computed.\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  function ApplicationsResponse(_ref14) {\n    var _this14;\n    var applications = _ref14.applications,\n      currentRound = _ref14.currentRound,\n      nextToken = _ref14.nextToken;\n    _classCallCheck(this, ApplicationsResponse);\n    _this14 = _super14.call(this);\n    _this14.applications = applications;\n    _this14.currentRound = currentRound;\n    _this14.nextToken = nextToken;\n    _this14.attribute_map = {\n      applications: 'applications',\n      currentRound: 'current-round',\n      nextToken: 'next-token'\n    };\n    return _this14;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(ApplicationsResponse, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (!Array.isArray(data['applications'])) throw new Error(\"Response is missing required array field 'applications': \".concat(data));\n      if (typeof data['current-round'] === 'undefined') throw new Error(\"Response is missing required field 'current-round': \".concat(data));\n      return new ApplicationsResponse({\n        applications: data['applications'].map(Application.from_obj_for_encoding),\n        currentRound: data['current-round'],\n        nextToken: data['next-token']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return ApplicationsResponse;\n}(BaseModel);\n/**\n * Specifies both the unique identifier and the parameters for an asset\n */\nexport var Asset = /*#__PURE__*/function (_BaseModel15) {\n  _inherits(Asset, _BaseModel15);\n  var _super15 = _createSuper(Asset);\n  /**\n   * Creates a new `Asset` object.\n   * @param index - unique asset identifier\n   * @param params - AssetParams specifies the parameters for an asset.\n   * (apar) when part of an AssetConfig transaction.\n   * Definition:\n   * data/transactions/asset.go : AssetParams\n   * @param createdAtRound - Round during which this asset was created.\n   * @param deleted - Whether or not this asset is currently deleted.\n   * @param destroyedAtRound - Round during which this asset was destroyed.\n   */\n  function Asset(_ref15) {\n    var _this15;\n    var index = _ref15.index,\n      params = _ref15.params,\n      createdAtRound = _ref15.createdAtRound,\n      deleted = _ref15.deleted,\n      destroyedAtRound = _ref15.destroyedAtRound;\n    _classCallCheck(this, Asset);\n    _this15 = _super15.call(this);\n    _this15.index = index;\n    _this15.params = params;\n    _this15.createdAtRound = createdAtRound;\n    _this15.deleted = deleted;\n    _this15.destroyedAtRound = destroyedAtRound;\n    _this15.attribute_map = {\n      index: 'index',\n      params: 'params',\n      createdAtRound: 'created-at-round',\n      deleted: 'deleted',\n      destroyedAtRound: 'destroyed-at-round'\n    };\n    return _this15;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(Asset, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['index'] === 'undefined') throw new Error(\"Response is missing required field 'index': \".concat(data));\n      if (typeof data['params'] === 'undefined') throw new Error(\"Response is missing required field 'params': \".concat(data));\n      return new Asset({\n        index: data['index'],\n        params: AssetParams.from_obj_for_encoding(data['params']),\n        createdAtRound: data['created-at-round'],\n        deleted: data['deleted'],\n        destroyedAtRound: data['destroyed-at-round']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return Asset;\n}(BaseModel);\n/**\n *\n */\nexport var AssetBalancesResponse = /*#__PURE__*/function (_BaseModel16) {\n  _inherits(AssetBalancesResponse, _BaseModel16);\n  var _super16 = _createSuper(AssetBalancesResponse);\n  /**\n   * Creates a new `AssetBalancesResponse` object.\n   * @param balances -\n   * @param currentRound - Round at which the results were computed.\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  function AssetBalancesResponse(_ref16) {\n    var _this16;\n    var balances = _ref16.balances,\n      currentRound = _ref16.currentRound,\n      nextToken = _ref16.nextToken;\n    _classCallCheck(this, AssetBalancesResponse);\n    _this16 = _super16.call(this);\n    _this16.balances = balances;\n    _this16.currentRound = currentRound;\n    _this16.nextToken = nextToken;\n    _this16.attribute_map = {\n      balances: 'balances',\n      currentRound: 'current-round',\n      nextToken: 'next-token'\n    };\n    return _this16;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(AssetBalancesResponse, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (!Array.isArray(data['balances'])) throw new Error(\"Response is missing required array field 'balances': \".concat(data));\n      if (typeof data['current-round'] === 'undefined') throw new Error(\"Response is missing required field 'current-round': \".concat(data));\n      return new AssetBalancesResponse({\n        balances: data['balances'].map(MiniAssetHolding.from_obj_for_encoding),\n        currentRound: data['current-round'],\n        nextToken: data['next-token']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return AssetBalancesResponse;\n}(BaseModel);\n/**\n * Describes an asset held by an account.\n * Definition:\n * data/basics/userBalance.go : AssetHolding\n */\nexport var AssetHolding = /*#__PURE__*/function (_BaseModel17) {\n  _inherits(AssetHolding, _BaseModel17);\n  var _super17 = _createSuper(AssetHolding);\n  /**\n   * Creates a new `AssetHolding` object.\n   * @param amount - (a) number of units held.\n   * @param assetId - Asset ID of the holding.\n   * @param isFrozen - (f) whether or not the holding is frozen.\n   * @param deleted - Whether or not the asset holding is currently deleted from its account.\n   * @param optedInAtRound - Round during which the account opted into this asset holding.\n   * @param optedOutAtRound - Round during which the account opted out of this asset holding.\n   */\n  function AssetHolding(_ref17) {\n    var _this17;\n    var amount = _ref17.amount,\n      assetId = _ref17.assetId,\n      isFrozen = _ref17.isFrozen,\n      deleted = _ref17.deleted,\n      optedInAtRound = _ref17.optedInAtRound,\n      optedOutAtRound = _ref17.optedOutAtRound;\n    _classCallCheck(this, AssetHolding);\n    _this17 = _super17.call(this);\n    _this17.amount = amount;\n    _this17.assetId = assetId;\n    _this17.isFrozen = isFrozen;\n    _this17.deleted = deleted;\n    _this17.optedInAtRound = optedInAtRound;\n    _this17.optedOutAtRound = optedOutAtRound;\n    _this17.attribute_map = {\n      amount: 'amount',\n      assetId: 'asset-id',\n      isFrozen: 'is-frozen',\n      deleted: 'deleted',\n      optedInAtRound: 'opted-in-at-round',\n      optedOutAtRound: 'opted-out-at-round'\n    };\n    return _this17;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(AssetHolding, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['amount'] === 'undefined') throw new Error(\"Response is missing required field 'amount': \".concat(data));\n      if (typeof data['asset-id'] === 'undefined') throw new Error(\"Response is missing required field 'asset-id': \".concat(data));\n      if (typeof data['is-frozen'] === 'undefined') throw new Error(\"Response is missing required field 'is-frozen': \".concat(data));\n      return new AssetHolding({\n        amount: data['amount'],\n        assetId: data['asset-id'],\n        isFrozen: data['is-frozen'],\n        deleted: data['deleted'],\n        optedInAtRound: data['opted-in-at-round'],\n        optedOutAtRound: data['opted-out-at-round']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return AssetHolding;\n}(BaseModel);\n/**\n *\n */\nexport var AssetHoldingsResponse = /*#__PURE__*/function (_BaseModel18) {\n  _inherits(AssetHoldingsResponse, _BaseModel18);\n  var _super18 = _createSuper(AssetHoldingsResponse);\n  /**\n   * Creates a new `AssetHoldingsResponse` object.\n   * @param assets -\n   * @param currentRound - Round at which the results were computed.\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  function AssetHoldingsResponse(_ref18) {\n    var _this18;\n    var assets = _ref18.assets,\n      currentRound = _ref18.currentRound,\n      nextToken = _ref18.nextToken;\n    _classCallCheck(this, AssetHoldingsResponse);\n    _this18 = _super18.call(this);\n    _this18.assets = assets;\n    _this18.currentRound = currentRound;\n    _this18.nextToken = nextToken;\n    _this18.attribute_map = {\n      assets: 'assets',\n      currentRound: 'current-round',\n      nextToken: 'next-token'\n    };\n    return _this18;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(AssetHoldingsResponse, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (!Array.isArray(data['assets'])) throw new Error(\"Response is missing required array field 'assets': \".concat(data));\n      if (typeof data['current-round'] === 'undefined') throw new Error(\"Response is missing required field 'current-round': \".concat(data));\n      return new AssetHoldingsResponse({\n        assets: data['assets'].map(AssetHolding.from_obj_for_encoding),\n        currentRound: data['current-round'],\n        nextToken: data['next-token']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return AssetHoldingsResponse;\n}(BaseModel);\n/**\n * AssetParams specifies the parameters for an asset.\n * (apar) when part of an AssetConfig transaction.\n * Definition:\n * data/transactions/asset.go : AssetParams\n */\nexport var AssetParams = /*#__PURE__*/function (_BaseModel19) {\n  _inherits(AssetParams, _BaseModel19);\n  var _super19 = _createSuper(AssetParams);\n  /**\n   * Creates a new `AssetParams` object.\n   * @param creator - The address that created this asset. This is the address where the parameters\n   * for this asset can be found, and also the address where unwanted asset units can\n   * be sent in the worst case.\n   * @param decimals - (dc) The number of digits to use after the decimal point when displaying this\n   * asset. If 0, the asset is not divisible. If 1, the base unit of the asset is in\n   * tenths. If 2, the base unit of the asset is in hundredths, and so on. This value\n   * must be between 0 and 19 (inclusive).\n   * @param total - (t) The total number of units of this asset.\n   * @param clawback - (c) Address of account used to clawback holdings of this asset. If empty,\n   * clawback is not permitted.\n   * @param defaultFrozen - (df) Whether holdings of this asset are frozen by default.\n   * @param freeze - (f) Address of account used to freeze holdings of this asset. If empty, freezing\n   * is not permitted.\n   * @param manager - (m) Address of account used to manage the keys of this asset and to destroy it.\n   * @param metadataHash - (am) A commitment to some unspecified asset metadata. The format of this\n   * metadata is up to the application.\n   * @param name - (an) Name of this asset, as supplied by the creator. Included only when the\n   * asset name is composed of printable utf-8 characters.\n   * @param nameB64 - Base64 encoded name of this asset, as supplied by the creator.\n   * @param reserve - (r) Address of account holding reserve (non-minted) units of this asset.\n   * @param unitName - (un) Name of a unit of this asset, as supplied by the creator. Included only\n   * when the name of a unit of this asset is composed of printable utf-8 characters.\n   * @param unitNameB64 - Base64 encoded name of a unit of this asset, as supplied by the creator.\n   * @param url - (au) URL where more information about the asset can be retrieved. Included only\n   * when the URL is composed of printable utf-8 characters.\n   * @param urlB64 - Base64 encoded URL where more information about the asset can be retrieved.\n   */\n  function AssetParams(_ref19) {\n    var _this19;\n    var creator = _ref19.creator,\n      decimals = _ref19.decimals,\n      total = _ref19.total,\n      clawback = _ref19.clawback,\n      defaultFrozen = _ref19.defaultFrozen,\n      freeze = _ref19.freeze,\n      manager = _ref19.manager,\n      metadataHash = _ref19.metadataHash,\n      name = _ref19.name,\n      nameB64 = _ref19.nameB64,\n      reserve = _ref19.reserve,\n      unitName = _ref19.unitName,\n      unitNameB64 = _ref19.unitNameB64,\n      url = _ref19.url,\n      urlB64 = _ref19.urlB64;\n    _classCallCheck(this, AssetParams);\n    _this19 = _super19.call(this);\n    _this19.creator = creator;\n    _this19.decimals = decimals;\n    _this19.total = total;\n    _this19.clawback = clawback;\n    _this19.defaultFrozen = defaultFrozen;\n    _this19.freeze = freeze;\n    _this19.manager = manager;\n    _this19.metadataHash = typeof metadataHash === 'string' ? new Uint8Array(Buffer.from(metadataHash, 'base64')) : metadataHash;\n    _this19.name = name;\n    _this19.nameB64 = typeof nameB64 === 'string' ? new Uint8Array(Buffer.from(nameB64, 'base64')) : nameB64;\n    _this19.reserve = reserve;\n    _this19.unitName = unitName;\n    _this19.unitNameB64 = typeof unitNameB64 === 'string' ? new Uint8Array(Buffer.from(unitNameB64, 'base64')) : unitNameB64;\n    _this19.url = url;\n    _this19.urlB64 = typeof urlB64 === 'string' ? new Uint8Array(Buffer.from(urlB64, 'base64')) : urlB64;\n    _this19.attribute_map = {\n      creator: 'creator',\n      decimals: 'decimals',\n      total: 'total',\n      clawback: 'clawback',\n      defaultFrozen: 'default-frozen',\n      freeze: 'freeze',\n      manager: 'manager',\n      metadataHash: 'metadata-hash',\n      name: 'name',\n      nameB64: 'name-b64',\n      reserve: 'reserve',\n      unitName: 'unit-name',\n      unitNameB64: 'unit-name-b64',\n      url: 'url',\n      urlB64: 'url-b64'\n    };\n    return _this19;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(AssetParams, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['creator'] === 'undefined') throw new Error(\"Response is missing required field 'creator': \".concat(data));\n      if (typeof data['decimals'] === 'undefined') throw new Error(\"Response is missing required field 'decimals': \".concat(data));\n      if (typeof data['total'] === 'undefined') throw new Error(\"Response is missing required field 'total': \".concat(data));\n      return new AssetParams({\n        creator: data['creator'],\n        decimals: data['decimals'],\n        total: data['total'],\n        clawback: data['clawback'],\n        defaultFrozen: data['default-frozen'],\n        freeze: data['freeze'],\n        manager: data['manager'],\n        metadataHash: data['metadata-hash'],\n        name: data['name'],\n        nameB64: data['name-b64'],\n        reserve: data['reserve'],\n        unitName: data['unit-name'],\n        unitNameB64: data['unit-name-b64'],\n        url: data['url'],\n        urlB64: data['url-b64']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return AssetParams;\n}(BaseModel);\n/**\n *\n */\nexport var AssetResponse = /*#__PURE__*/function (_BaseModel20) {\n  _inherits(AssetResponse, _BaseModel20);\n  var _super20 = _createSuper(AssetResponse);\n  /**\n   * Creates a new `AssetResponse` object.\n   * @param asset - Specifies both the unique identifier and the parameters for an asset\n   * @param currentRound - Round at which the results were computed.\n   */\n  function AssetResponse(_ref20) {\n    var _this20;\n    var asset = _ref20.asset,\n      currentRound = _ref20.currentRound;\n    _classCallCheck(this, AssetResponse);\n    _this20 = _super20.call(this);\n    _this20.asset = asset;\n    _this20.currentRound = currentRound;\n    _this20.attribute_map = {\n      asset: 'asset',\n      currentRound: 'current-round'\n    };\n    return _this20;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(AssetResponse, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['asset'] === 'undefined') throw new Error(\"Response is missing required field 'asset': \".concat(data));\n      if (typeof data['current-round'] === 'undefined') throw new Error(\"Response is missing required field 'current-round': \".concat(data));\n      return new AssetResponse({\n        asset: Asset.from_obj_for_encoding(data['asset']),\n        currentRound: data['current-round']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return AssetResponse;\n}(BaseModel);\n/**\n *\n */\nexport var AssetsResponse = /*#__PURE__*/function (_BaseModel21) {\n  _inherits(AssetsResponse, _BaseModel21);\n  var _super21 = _createSuper(AssetsResponse);\n  /**\n   * Creates a new `AssetsResponse` object.\n   * @param assets -\n   * @param currentRound - Round at which the results were computed.\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  function AssetsResponse(_ref21) {\n    var _this21;\n    var assets = _ref21.assets,\n      currentRound = _ref21.currentRound,\n      nextToken = _ref21.nextToken;\n    _classCallCheck(this, AssetsResponse);\n    _this21 = _super21.call(this);\n    _this21.assets = assets;\n    _this21.currentRound = currentRound;\n    _this21.nextToken = nextToken;\n    _this21.attribute_map = {\n      assets: 'assets',\n      currentRound: 'current-round',\n      nextToken: 'next-token'\n    };\n    return _this21;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(AssetsResponse, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (!Array.isArray(data['assets'])) throw new Error(\"Response is missing required array field 'assets': \".concat(data));\n      if (typeof data['current-round'] === 'undefined') throw new Error(\"Response is missing required field 'current-round': \".concat(data));\n      return new AssetsResponse({\n        assets: data['assets'].map(Asset.from_obj_for_encoding),\n        currentRound: data['current-round'],\n        nextToken: data['next-token']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return AssetsResponse;\n}(BaseModel);\n/**\n * Block information.\n * Definition:\n * data/bookkeeping/block.go : Block\n */\nexport var Block = /*#__PURE__*/function (_BaseModel22) {\n  _inherits(Block, _BaseModel22);\n  var _super22 = _createSuper(Block);\n  /**\n   * Creates a new `Block` object.\n   * @param genesisHash - (gh) hash to which this block belongs.\n   * @param genesisId - (gen) ID to which this block belongs.\n   * @param previousBlockHash - (prev) Previous block hash.\n   * @param round - (rnd) Current round on which this block was appended to the chain.\n   * @param seed - (seed) Sortition seed.\n   * @param timestamp - (ts) Block creation timestamp in seconds since eposh\n   * @param transactionsRoot - (txn) TransactionsRoot authenticates the set of transactions appearing in the\n   * block. More specifically, it's the root of a merkle tree whose leaves are the\n   * block's Txids, in lexicographic order. For the empty block, it's 0. Note that\n   * the TxnRoot does not authenticate the signatures on the transactions, only the\n   * transactions themselves. Two blocks with the same transactions but in a\n   * different order and with different signatures will have the same TxnRoot.\n   * @param transactionsRootSha256 - (txn256) TransactionsRootSHA256 is an auxiliary TransactionRoot, built using a\n   * vector commitment instead of a merkle tree, and SHA256 hash function instead of\n   * the default SHA512_256. This commitment can be used on environments where only\n   * the SHA256 function exists.\n   * @param participationUpdates - Participation account data that needs to be checked/acted on by the network.\n   * @param rewards - Fields relating to rewards,\n   * @param stateProofTracking - Tracks the status of state proofs.\n   * @param transactions - (txns) list of transactions corresponding to a given round.\n   * @param txnCounter - (tc) TxnCounter counts the number of transactions committed in the ledger, from\n   * the time at which support for this feature was introduced.\n   * Specifically, TxnCounter is the number of the next transaction that will be\n   * committed after this block. It is 0 when no transactions have ever been\n   * committed (since TxnCounter started being supported).\n   * @param upgradeState - Fields relating to a protocol upgrade.\n   * @param upgradeVote - Fields relating to voting for a protocol upgrade.\n   */\n  function Block(_ref22) {\n    var _this22;\n    var genesisHash = _ref22.genesisHash,\n      genesisId = _ref22.genesisId,\n      previousBlockHash = _ref22.previousBlockHash,\n      round = _ref22.round,\n      seed = _ref22.seed,\n      timestamp = _ref22.timestamp,\n      transactionsRoot = _ref22.transactionsRoot,\n      transactionsRootSha256 = _ref22.transactionsRootSha256,\n      participationUpdates = _ref22.participationUpdates,\n      rewards = _ref22.rewards,\n      stateProofTracking = _ref22.stateProofTracking,\n      transactions = _ref22.transactions,\n      txnCounter = _ref22.txnCounter,\n      upgradeState = _ref22.upgradeState,\n      upgradeVote = _ref22.upgradeVote;\n    _classCallCheck(this, Block);\n    _this22 = _super22.call(this);\n    _this22.genesisHash = typeof genesisHash === 'string' ? new Uint8Array(Buffer.from(genesisHash, 'base64')) : genesisHash;\n    _this22.genesisId = genesisId;\n    _this22.previousBlockHash = typeof previousBlockHash === 'string' ? new Uint8Array(Buffer.from(previousBlockHash, 'base64')) : previousBlockHash;\n    _this22.round = round;\n    _this22.seed = typeof seed === 'string' ? new Uint8Array(Buffer.from(seed, 'base64')) : seed;\n    _this22.timestamp = timestamp;\n    _this22.transactionsRoot = typeof transactionsRoot === 'string' ? new Uint8Array(Buffer.from(transactionsRoot, 'base64')) : transactionsRoot;\n    _this22.transactionsRootSha256 = typeof transactionsRootSha256 === 'string' ? new Uint8Array(Buffer.from(transactionsRootSha256, 'base64')) : transactionsRootSha256;\n    _this22.participationUpdates = participationUpdates;\n    _this22.rewards = rewards;\n    _this22.stateProofTracking = stateProofTracking;\n    _this22.transactions = transactions;\n    _this22.txnCounter = txnCounter;\n    _this22.upgradeState = upgradeState;\n    _this22.upgradeVote = upgradeVote;\n    _this22.attribute_map = {\n      genesisHash: 'genesis-hash',\n      genesisId: 'genesis-id',\n      previousBlockHash: 'previous-block-hash',\n      round: 'round',\n      seed: 'seed',\n      timestamp: 'timestamp',\n      transactionsRoot: 'transactions-root',\n      transactionsRootSha256: 'transactions-root-sha256',\n      participationUpdates: 'participation-updates',\n      rewards: 'rewards',\n      stateProofTracking: 'state-proof-tracking',\n      transactions: 'transactions',\n      txnCounter: 'txn-counter',\n      upgradeState: 'upgrade-state',\n      upgradeVote: 'upgrade-vote'\n    };\n    return _this22;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(Block, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['genesis-hash'] === 'undefined') throw new Error(\"Response is missing required field 'genesis-hash': \".concat(data));\n      if (typeof data['genesis-id'] === 'undefined') throw new Error(\"Response is missing required field 'genesis-id': \".concat(data));\n      if (typeof data['previous-block-hash'] === 'undefined') throw new Error(\"Response is missing required field 'previous-block-hash': \".concat(data));\n      if (typeof data['round'] === 'undefined') throw new Error(\"Response is missing required field 'round': \".concat(data));\n      if (typeof data['seed'] === 'undefined') throw new Error(\"Response is missing required field 'seed': \".concat(data));\n      if (typeof data['timestamp'] === 'undefined') throw new Error(\"Response is missing required field 'timestamp': \".concat(data));\n      if (typeof data['transactions-root'] === 'undefined') throw new Error(\"Response is missing required field 'transactions-root': \".concat(data));\n      if (typeof data['transactions-root-sha256'] === 'undefined') throw new Error(\"Response is missing required field 'transactions-root-sha256': \".concat(data));\n      return new Block({\n        genesisHash: data['genesis-hash'],\n        genesisId: data['genesis-id'],\n        previousBlockHash: data['previous-block-hash'],\n        round: data['round'],\n        seed: data['seed'],\n        timestamp: data['timestamp'],\n        transactionsRoot: data['transactions-root'],\n        transactionsRootSha256: data['transactions-root-sha256'],\n        participationUpdates: typeof data['participation-updates'] !== 'undefined' ? ParticipationUpdates.from_obj_for_encoding(data['participation-updates']) : undefined,\n        rewards: typeof data['rewards'] !== 'undefined' ? BlockRewards.from_obj_for_encoding(data['rewards']) : undefined,\n        stateProofTracking: typeof data['state-proof-tracking'] !== 'undefined' ? data['state-proof-tracking'].map(StateProofTracking.from_obj_for_encoding) : undefined,\n        transactions: typeof data['transactions'] !== 'undefined' ? data['transactions'].map(Transaction.from_obj_for_encoding) : undefined,\n        txnCounter: data['txn-counter'],\n        upgradeState: typeof data['upgrade-state'] !== 'undefined' ? BlockUpgradeState.from_obj_for_encoding(data['upgrade-state']) : undefined,\n        upgradeVote: typeof data['upgrade-vote'] !== 'undefined' ? BlockUpgradeVote.from_obj_for_encoding(data['upgrade-vote']) : undefined\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return Block;\n}(BaseModel);\n/**\n * Fields relating to rewards,\n */\nexport var BlockRewards = /*#__PURE__*/function (_BaseModel23) {\n  _inherits(BlockRewards, _BaseModel23);\n  var _super23 = _createSuper(BlockRewards);\n  /**\n   * Creates a new `BlockRewards` object.\n   * @param feeSink - (fees) accepts transaction fees, it can only spend to the incentive pool.\n   * @param rewardsCalculationRound - (rwcalr) number of leftover MicroAlgos after the distribution of rewards-rate\n   * MicroAlgos for every reward unit in the next round.\n   * @param rewardsLevel - (earn) How many rewards, in MicroAlgos, have been distributed to each RewardUnit\n   * of MicroAlgos since genesis.\n   * @param rewardsPool - (rwd) accepts periodic injections from the fee-sink and continually\n   * redistributes them as rewards.\n   * @param rewardsRate - (rate) Number of new MicroAlgos added to the participation stake from rewards at\n   * the next round.\n   * @param rewardsResidue - (frac) Number of leftover MicroAlgos after the distribution of\n   * RewardsRate/rewardUnits MicroAlgos for every reward unit in the next round.\n   */\n  function BlockRewards(_ref23) {\n    var _this23;\n    var feeSink = _ref23.feeSink,\n      rewardsCalculationRound = _ref23.rewardsCalculationRound,\n      rewardsLevel = _ref23.rewardsLevel,\n      rewardsPool = _ref23.rewardsPool,\n      rewardsRate = _ref23.rewardsRate,\n      rewardsResidue = _ref23.rewardsResidue;\n    _classCallCheck(this, BlockRewards);\n    _this23 = _super23.call(this);\n    _this23.feeSink = feeSink;\n    _this23.rewardsCalculationRound = rewardsCalculationRound;\n    _this23.rewardsLevel = rewardsLevel;\n    _this23.rewardsPool = rewardsPool;\n    _this23.rewardsRate = rewardsRate;\n    _this23.rewardsResidue = rewardsResidue;\n    _this23.attribute_map = {\n      feeSink: 'fee-sink',\n      rewardsCalculationRound: 'rewards-calculation-round',\n      rewardsLevel: 'rewards-level',\n      rewardsPool: 'rewards-pool',\n      rewardsRate: 'rewards-rate',\n      rewardsResidue: 'rewards-residue'\n    };\n    return _this23;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(BlockRewards, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['fee-sink'] === 'undefined') throw new Error(\"Response is missing required field 'fee-sink': \".concat(data));\n      if (typeof data['rewards-calculation-round'] === 'undefined') throw new Error(\"Response is missing required field 'rewards-calculation-round': \".concat(data));\n      if (typeof data['rewards-level'] === 'undefined') throw new Error(\"Response is missing required field 'rewards-level': \".concat(data));\n      if (typeof data['rewards-pool'] === 'undefined') throw new Error(\"Response is missing required field 'rewards-pool': \".concat(data));\n      if (typeof data['rewards-rate'] === 'undefined') throw new Error(\"Response is missing required field 'rewards-rate': \".concat(data));\n      if (typeof data['rewards-residue'] === 'undefined') throw new Error(\"Response is missing required field 'rewards-residue': \".concat(data));\n      return new BlockRewards({\n        feeSink: data['fee-sink'],\n        rewardsCalculationRound: data['rewards-calculation-round'],\n        rewardsLevel: data['rewards-level'],\n        rewardsPool: data['rewards-pool'],\n        rewardsRate: data['rewards-rate'],\n        rewardsResidue: data['rewards-residue']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return BlockRewards;\n}(BaseModel);\n/**\n * Fields relating to a protocol upgrade.\n */\nexport var BlockUpgradeState = /*#__PURE__*/function (_BaseModel24) {\n  _inherits(BlockUpgradeState, _BaseModel24);\n  var _super24 = _createSuper(BlockUpgradeState);\n  /**\n   * Creates a new `BlockUpgradeState` object.\n   * @param currentProtocol - (proto) The current protocol version.\n   * @param nextProtocol - (nextproto) The next proposed protocol version.\n   * @param nextProtocolApprovals - (nextyes) Number of blocks which approved the protocol upgrade.\n   * @param nextProtocolSwitchOn - (nextswitch) Round on which the protocol upgrade will take effect.\n   * @param nextProtocolVoteBefore - (nextbefore) Deadline round for this protocol upgrade (No votes will be consider\n   * after this round).\n   */\n  function BlockUpgradeState(_ref24) {\n    var _this24;\n    var currentProtocol = _ref24.currentProtocol,\n      nextProtocol = _ref24.nextProtocol,\n      nextProtocolApprovals = _ref24.nextProtocolApprovals,\n      nextProtocolSwitchOn = _ref24.nextProtocolSwitchOn,\n      nextProtocolVoteBefore = _ref24.nextProtocolVoteBefore;\n    _classCallCheck(this, BlockUpgradeState);\n    _this24 = _super24.call(this);\n    _this24.currentProtocol = currentProtocol;\n    _this24.nextProtocol = nextProtocol;\n    _this24.nextProtocolApprovals = nextProtocolApprovals;\n    _this24.nextProtocolSwitchOn = nextProtocolSwitchOn;\n    _this24.nextProtocolVoteBefore = nextProtocolVoteBefore;\n    _this24.attribute_map = {\n      currentProtocol: 'current-protocol',\n      nextProtocol: 'next-protocol',\n      nextProtocolApprovals: 'next-protocol-approvals',\n      nextProtocolSwitchOn: 'next-protocol-switch-on',\n      nextProtocolVoteBefore: 'next-protocol-vote-before'\n    };\n    return _this24;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(BlockUpgradeState, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['current-protocol'] === 'undefined') throw new Error(\"Response is missing required field 'current-protocol': \".concat(data));\n      return new BlockUpgradeState({\n        currentProtocol: data['current-protocol'],\n        nextProtocol: data['next-protocol'],\n        nextProtocolApprovals: data['next-protocol-approvals'],\n        nextProtocolSwitchOn: data['next-protocol-switch-on'],\n        nextProtocolVoteBefore: data['next-protocol-vote-before']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return BlockUpgradeState;\n}(BaseModel);\n/**\n * Fields relating to voting for a protocol upgrade.\n */\nexport var BlockUpgradeVote = /*#__PURE__*/function (_BaseModel25) {\n  _inherits(BlockUpgradeVote, _BaseModel25);\n  var _super25 = _createSuper(BlockUpgradeVote);\n  /**\n   * Creates a new `BlockUpgradeVote` object.\n   * @param upgradeApprove - (upgradeyes) Indicates a yes vote for the current proposal.\n   * @param upgradeDelay - (upgradedelay) Indicates the time between acceptance and execution.\n   * @param upgradePropose - (upgradeprop) Indicates a proposed upgrade.\n   */\n  function BlockUpgradeVote(_ref25) {\n    var _this25;\n    var upgradeApprove = _ref25.upgradeApprove,\n      upgradeDelay = _ref25.upgradeDelay,\n      upgradePropose = _ref25.upgradePropose;\n    _classCallCheck(this, BlockUpgradeVote);\n    _this25 = _super25.call(this);\n    _this25.upgradeApprove = upgradeApprove;\n    _this25.upgradeDelay = upgradeDelay;\n    _this25.upgradePropose = upgradePropose;\n    _this25.attribute_map = {\n      upgradeApprove: 'upgrade-approve',\n      upgradeDelay: 'upgrade-delay',\n      upgradePropose: 'upgrade-propose'\n    };\n    return _this25;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(BlockUpgradeVote, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      return new BlockUpgradeVote({\n        upgradeApprove: data['upgrade-approve'],\n        upgradeDelay: data['upgrade-delay'],\n        upgradePropose: data['upgrade-propose']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return BlockUpgradeVote;\n}(BaseModel);\n/**\n * Box name and its content.\n */\nexport var Box = /*#__PURE__*/function (_BaseModel26) {\n  _inherits(Box, _BaseModel26);\n  var _super26 = _createSuper(Box);\n  /**\n   * Creates a new `Box` object.\n   * @param name - (name) box name, base64 encoded\n   * @param value - (value) box value, base64 encoded.\n   */\n  function Box(_ref26) {\n    var _this26;\n    var name = _ref26.name,\n      value = _ref26.value;\n    _classCallCheck(this, Box);\n    _this26 = _super26.call(this);\n    _this26.name = typeof name === 'string' ? new Uint8Array(Buffer.from(name, 'base64')) : name;\n    _this26.value = typeof value === 'string' ? new Uint8Array(Buffer.from(value, 'base64')) : value;\n    _this26.attribute_map = {\n      name: 'name',\n      value: 'value'\n    };\n    return _this26;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(Box, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['name'] === 'undefined') throw new Error(\"Response is missing required field 'name': \".concat(data));\n      if (typeof data['value'] === 'undefined') throw new Error(\"Response is missing required field 'value': \".concat(data));\n      return new Box({\n        name: data['name'],\n        value: data['value']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return Box;\n}(BaseModel);\n/**\n * Box descriptor describes an app box without a value.\n */\nexport var BoxDescriptor = /*#__PURE__*/function (_BaseModel27) {\n  _inherits(BoxDescriptor, _BaseModel27);\n  var _super27 = _createSuper(BoxDescriptor);\n  /**\n   * Creates a new `BoxDescriptor` object.\n   * @param name - Base64 encoded box name\n   */\n  function BoxDescriptor(_ref27) {\n    var _this27;\n    var name = _ref27.name;\n    _classCallCheck(this, BoxDescriptor);\n    _this27 = _super27.call(this);\n    _this27.name = typeof name === 'string' ? new Uint8Array(Buffer.from(name, 'base64')) : name;\n    _this27.attribute_map = {\n      name: 'name'\n    };\n    return _this27;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(BoxDescriptor, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['name'] === 'undefined') throw new Error(\"Response is missing required field 'name': \".concat(data));\n      return new BoxDescriptor({\n        name: data['name']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return BoxDescriptor;\n}(BaseModel);\n/**\n * Box names of an application\n */\nexport var BoxesResponse = /*#__PURE__*/function (_BaseModel28) {\n  _inherits(BoxesResponse, _BaseModel28);\n  var _super28 = _createSuper(BoxesResponse);\n  /**\n   * Creates a new `BoxesResponse` object.\n   * @param applicationId - (appidx) application index.\n   * @param boxes -\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  function BoxesResponse(_ref28) {\n    var _this28;\n    var applicationId = _ref28.applicationId,\n      boxes = _ref28.boxes,\n      nextToken = _ref28.nextToken;\n    _classCallCheck(this, BoxesResponse);\n    _this28 = _super28.call(this);\n    _this28.applicationId = applicationId;\n    _this28.boxes = boxes;\n    _this28.nextToken = nextToken;\n    _this28.attribute_map = {\n      applicationId: 'application-id',\n      boxes: 'boxes',\n      nextToken: 'next-token'\n    };\n    return _this28;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(BoxesResponse, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['application-id'] === 'undefined') throw new Error(\"Response is missing required field 'application-id': \".concat(data));\n      if (!Array.isArray(data['boxes'])) throw new Error(\"Response is missing required array field 'boxes': \".concat(data));\n      return new BoxesResponse({\n        applicationId: data['application-id'],\n        boxes: data['boxes'].map(BoxDescriptor.from_obj_for_encoding),\n        nextToken: data['next-token']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return BoxesResponse;\n}(BaseModel);\n/**\n * Response for errors\n */\nexport var ErrorResponse = /*#__PURE__*/function (_BaseModel29) {\n  _inherits(ErrorResponse, _BaseModel29);\n  var _super29 = _createSuper(ErrorResponse);\n  /**\n   * Creates a new `ErrorResponse` object.\n   * @param message -\n   * @param data -\n   */\n  function ErrorResponse(_ref29) {\n    var _this29;\n    var message = _ref29.message,\n      data = _ref29.data;\n    _classCallCheck(this, ErrorResponse);\n    _this29 = _super29.call(this);\n    _this29.message = message;\n    _this29.data = data;\n    _this29.attribute_map = {\n      message: 'message',\n      data: 'data'\n    };\n    return _this29;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(ErrorResponse, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['message'] === 'undefined') throw new Error(\"Response is missing required field 'message': \".concat(data));\n      return new ErrorResponse({\n        message: data['message'],\n        data: data['data']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return ErrorResponse;\n}(BaseModel);\n/**\n * Represents a TEAL value delta.\n */\nexport var EvalDelta = /*#__PURE__*/function (_BaseModel30) {\n  _inherits(EvalDelta, _BaseModel30);\n  var _super30 = _createSuper(EvalDelta);\n  /**\n   * Creates a new `EvalDelta` object.\n   * @param action - (at) delta action.\n   * @param bytes - (bs) bytes value.\n   * @param uint - (ui) uint value.\n   */\n  function EvalDelta(_ref30) {\n    var _this30;\n    var action = _ref30.action,\n      bytes = _ref30.bytes,\n      uint = _ref30.uint;\n    _classCallCheck(this, EvalDelta);\n    _this30 = _super30.call(this);\n    _this30.action = action;\n    _this30.bytes = bytes;\n    _this30.uint = uint;\n    _this30.attribute_map = {\n      action: 'action',\n      bytes: 'bytes',\n      uint: 'uint'\n    };\n    return _this30;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(EvalDelta, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['action'] === 'undefined') throw new Error(\"Response is missing required field 'action': \".concat(data));\n      return new EvalDelta({\n        action: data['action'],\n        bytes: data['bytes'],\n        uint: data['uint']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return EvalDelta;\n}(BaseModel);\n/**\n * Key-value pairs for StateDelta.\n */\nexport var EvalDeltaKeyValue = /*#__PURE__*/function (_BaseModel31) {\n  _inherits(EvalDeltaKeyValue, _BaseModel31);\n  var _super31 = _createSuper(EvalDeltaKeyValue);\n  /**\n   * Creates a new `EvalDeltaKeyValue` object.\n   * @param key -\n   * @param value - Represents a TEAL value delta.\n   */\n  function EvalDeltaKeyValue(_ref31) {\n    var _this31;\n    var key = _ref31.key,\n      value = _ref31.value;\n    _classCallCheck(this, EvalDeltaKeyValue);\n    _this31 = _super31.call(this);\n    _this31.key = key;\n    _this31.value = value;\n    _this31.attribute_map = {\n      key: 'key',\n      value: 'value'\n    };\n    return _this31;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(EvalDeltaKeyValue, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['key'] === 'undefined') throw new Error(\"Response is missing required field 'key': \".concat(data));\n      if (typeof data['value'] === 'undefined') throw new Error(\"Response is missing required field 'value': \".concat(data));\n      return new EvalDeltaKeyValue({\n        key: data['key'],\n        value: EvalDelta.from_obj_for_encoding(data['value'])\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return EvalDeltaKeyValue;\n}(BaseModel);\nexport var HashFactory = /*#__PURE__*/function (_BaseModel32) {\n  _inherits(HashFactory, _BaseModel32);\n  var _super32 = _createSuper(HashFactory);\n  /**\n   * Creates a new `HashFactory` object.\n   * @param hashType - (t)\n   */\n  function HashFactory(_ref32) {\n    var _this32;\n    var hashType = _ref32.hashType;\n    _classCallCheck(this, HashFactory);\n    _this32 = _super32.call(this);\n    _this32.hashType = hashType;\n    _this32.attribute_map = {\n      hashType: 'hash-type'\n    };\n    return _this32;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(HashFactory, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      return new HashFactory({\n        hashType: data['hash-type']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return HashFactory;\n}(BaseModel);\n/**\n * A health check response.\n */\nexport var HealthCheck = /*#__PURE__*/function (_BaseModel33) {\n  _inherits(HealthCheck, _BaseModel33);\n  var _super33 = _createSuper(HealthCheck);\n  /**\n   * Creates a new `HealthCheck` object.\n   * @param dbAvailable -\n   * @param isMigrating -\n   * @param message -\n   * @param round -\n   * @param version - Current version.\n   * @param data -\n   * @param errors -\n   */\n  function HealthCheck(_ref33) {\n    var _this33;\n    var dbAvailable = _ref33.dbAvailable,\n      isMigrating = _ref33.isMigrating,\n      message = _ref33.message,\n      round = _ref33.round,\n      version = _ref33.version,\n      data = _ref33.data,\n      errors = _ref33.errors;\n    _classCallCheck(this, HealthCheck);\n    _this33 = _super33.call(this);\n    _this33.dbAvailable = dbAvailable;\n    _this33.isMigrating = isMigrating;\n    _this33.message = message;\n    _this33.round = round;\n    _this33.version = version;\n    _this33.data = data;\n    _this33.errors = errors;\n    _this33.attribute_map = {\n      dbAvailable: 'db-available',\n      isMigrating: 'is-migrating',\n      message: 'message',\n      round: 'round',\n      version: 'version',\n      data: 'data',\n      errors: 'errors'\n    };\n    return _this33;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(HealthCheck, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['db-available'] === 'undefined') throw new Error(\"Response is missing required field 'db-available': \".concat(data));\n      if (typeof data['is-migrating'] === 'undefined') throw new Error(\"Response is missing required field 'is-migrating': \".concat(data));\n      if (typeof data['message'] === 'undefined') throw new Error(\"Response is missing required field 'message': \".concat(data));\n      if (typeof data['round'] === 'undefined') throw new Error(\"Response is missing required field 'round': \".concat(data));\n      if (typeof data['version'] === 'undefined') throw new Error(\"Response is missing required field 'version': \".concat(data));\n      return new HealthCheck({\n        dbAvailable: data['db-available'],\n        isMigrating: data['is-migrating'],\n        message: data['message'],\n        round: data['round'],\n        version: data['version'],\n        data: data['data'],\n        errors: data['errors']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return HealthCheck;\n}(BaseModel);\nexport var IndexerStateProofMessage = /*#__PURE__*/function (_BaseModel34) {\n  _inherits(IndexerStateProofMessage, _BaseModel34);\n  var _super34 = _createSuper(IndexerStateProofMessage);\n  /**\n   * Creates a new `IndexerStateProofMessage` object.\n   * @param blockHeadersCommitment - (b)\n   * @param firstAttestedRound - (f)\n   * @param latestAttestedRound - (l)\n   * @param lnProvenWeight - (P)\n   * @param votersCommitment - (v)\n   */\n  function IndexerStateProofMessage(_ref34) {\n    var _this34;\n    var blockHeadersCommitment = _ref34.blockHeadersCommitment,\n      firstAttestedRound = _ref34.firstAttestedRound,\n      latestAttestedRound = _ref34.latestAttestedRound,\n      lnProvenWeight = _ref34.lnProvenWeight,\n      votersCommitment = _ref34.votersCommitment;\n    _classCallCheck(this, IndexerStateProofMessage);\n    _this34 = _super34.call(this);\n    _this34.blockHeadersCommitment = typeof blockHeadersCommitment === 'string' ? new Uint8Array(Buffer.from(blockHeadersCommitment, 'base64')) : blockHeadersCommitment;\n    _this34.firstAttestedRound = firstAttestedRound;\n    _this34.latestAttestedRound = latestAttestedRound;\n    _this34.lnProvenWeight = lnProvenWeight;\n    _this34.votersCommitment = typeof votersCommitment === 'string' ? new Uint8Array(Buffer.from(votersCommitment, 'base64')) : votersCommitment;\n    _this34.attribute_map = {\n      blockHeadersCommitment: 'block-headers-commitment',\n      firstAttestedRound: 'first-attested-round',\n      latestAttestedRound: 'latest-attested-round',\n      lnProvenWeight: 'ln-proven-weight',\n      votersCommitment: 'voters-commitment'\n    };\n    return _this34;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(IndexerStateProofMessage, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      return new IndexerStateProofMessage({\n        blockHeadersCommitment: data['block-headers-commitment'],\n        firstAttestedRound: data['first-attested-round'],\n        latestAttestedRound: data['latest-attested-round'],\n        lnProvenWeight: data['ln-proven-weight'],\n        votersCommitment: data['voters-commitment']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return IndexerStateProofMessage;\n}(BaseModel);\nexport var MerkleArrayProof = /*#__PURE__*/function (_BaseModel35) {\n  _inherits(MerkleArrayProof, _BaseModel35);\n  var _super35 = _createSuper(MerkleArrayProof);\n  /**\n   * Creates a new `MerkleArrayProof` object.\n   * @param hashFactory -\n   * @param path - (pth)\n   * @param treeDepth - (td)\n   */\n  function MerkleArrayProof(_ref35) {\n    var _this35;\n    var hashFactory = _ref35.hashFactory,\n      path = _ref35.path,\n      treeDepth = _ref35.treeDepth;\n    _classCallCheck(this, MerkleArrayProof);\n    _this35 = _super35.call(this);\n    _this35.hashFactory = hashFactory;\n    _this35.path = path;\n    _this35.treeDepth = treeDepth;\n    _this35.attribute_map = {\n      hashFactory: 'hash-factory',\n      path: 'path',\n      treeDepth: 'tree-depth'\n    };\n    return _this35;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(MerkleArrayProof, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      return new MerkleArrayProof({\n        hashFactory: typeof data['hash-factory'] !== 'undefined' ? HashFactory.from_obj_for_encoding(data['hash-factory']) : undefined,\n        path: data['path'],\n        treeDepth: data['tree-depth']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return MerkleArrayProof;\n}(BaseModel);\n/**\n * A simplified version of AssetHolding\n */\nexport var MiniAssetHolding = /*#__PURE__*/function (_BaseModel36) {\n  _inherits(MiniAssetHolding, _BaseModel36);\n  var _super36 = _createSuper(MiniAssetHolding);\n  /**\n   * Creates a new `MiniAssetHolding` object.\n   * @param address -\n   * @param amount -\n   * @param isFrozen -\n   * @param deleted - Whether or not this asset holding is currently deleted from its account.\n   * @param optedInAtRound - Round during which the account opted into the asset.\n   * @param optedOutAtRound - Round during which the account opted out of the asset.\n   */\n  function MiniAssetHolding(_ref36) {\n    var _this36;\n    var address = _ref36.address,\n      amount = _ref36.amount,\n      isFrozen = _ref36.isFrozen,\n      deleted = _ref36.deleted,\n      optedInAtRound = _ref36.optedInAtRound,\n      optedOutAtRound = _ref36.optedOutAtRound;\n    _classCallCheck(this, MiniAssetHolding);\n    _this36 = _super36.call(this);\n    _this36.address = address;\n    _this36.amount = amount;\n    _this36.isFrozen = isFrozen;\n    _this36.deleted = deleted;\n    _this36.optedInAtRound = optedInAtRound;\n    _this36.optedOutAtRound = optedOutAtRound;\n    _this36.attribute_map = {\n      address: 'address',\n      amount: 'amount',\n      isFrozen: 'is-frozen',\n      deleted: 'deleted',\n      optedInAtRound: 'opted-in-at-round',\n      optedOutAtRound: 'opted-out-at-round'\n    };\n    return _this36;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(MiniAssetHolding, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['address'] === 'undefined') throw new Error(\"Response is missing required field 'address': \".concat(data));\n      if (typeof data['amount'] === 'undefined') throw new Error(\"Response is missing required field 'amount': \".concat(data));\n      if (typeof data['is-frozen'] === 'undefined') throw new Error(\"Response is missing required field 'is-frozen': \".concat(data));\n      return new MiniAssetHolding({\n        address: data['address'],\n        amount: data['amount'],\n        isFrozen: data['is-frozen'],\n        deleted: data['deleted'],\n        optedInAtRound: data['opted-in-at-round'],\n        optedOutAtRound: data['opted-out-at-round']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return MiniAssetHolding;\n}(BaseModel);\n/**\n * Participation account data that needs to be checked/acted on by the network.\n */\nexport var ParticipationUpdates = /*#__PURE__*/function (_BaseModel37) {\n  _inherits(ParticipationUpdates, _BaseModel37);\n  var _super37 = _createSuper(ParticipationUpdates);\n  /**\n   * Creates a new `ParticipationUpdates` object.\n   * @param expiredParticipationAccounts - (partupdrmv) a list of online accounts that needs to be converted to offline\n   * since their participation key expired.\n   */\n  function ParticipationUpdates(_ref37) {\n    var _this37;\n    var expiredParticipationAccounts = _ref37.expiredParticipationAccounts;\n    _classCallCheck(this, ParticipationUpdates);\n    _this37 = _super37.call(this);\n    _this37.expiredParticipationAccounts = expiredParticipationAccounts;\n    _this37.attribute_map = {\n      expiredParticipationAccounts: 'expired-participation-accounts'\n    };\n    return _this37;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(ParticipationUpdates, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      return new ParticipationUpdates({\n        expiredParticipationAccounts: data['expired-participation-accounts']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return ParticipationUpdates;\n}(BaseModel);\n/**\n * (sp) represents a state proof.\n * Definition:\n * crypto/stateproof/structs.go : StateProof\n */\nexport var StateProofFields = /*#__PURE__*/function (_BaseModel38) {\n  _inherits(StateProofFields, _BaseModel38);\n  var _super38 = _createSuper(StateProofFields);\n  /**\n   * Creates a new `StateProofFields` object.\n   * @param partProofs - (P)\n   * @param positionsToReveal - (pr) Sequence of reveal positions.\n   * @param reveals - (r) Note that this is actually stored as a map[uint64] - Reveal in the actual\n   * msgp\n   * @param saltVersion - (v) Salt version of the merkle signature.\n   * @param sigCommit - (c)\n   * @param sigProofs - (S)\n   * @param signedWeight - (w)\n   */\n  function StateProofFields(_ref38) {\n    var _this38;\n    var partProofs = _ref38.partProofs,\n      positionsToReveal = _ref38.positionsToReveal,\n      reveals = _ref38.reveals,\n      saltVersion = _ref38.saltVersion,\n      sigCommit = _ref38.sigCommit,\n      sigProofs = _ref38.sigProofs,\n      signedWeight = _ref38.signedWeight;\n    _classCallCheck(this, StateProofFields);\n    _this38 = _super38.call(this);\n    _this38.partProofs = partProofs;\n    _this38.positionsToReveal = positionsToReveal;\n    _this38.reveals = reveals;\n    _this38.saltVersion = saltVersion;\n    _this38.sigCommit = typeof sigCommit === 'string' ? new Uint8Array(Buffer.from(sigCommit, 'base64')) : sigCommit;\n    _this38.sigProofs = sigProofs;\n    _this38.signedWeight = signedWeight;\n    _this38.attribute_map = {\n      partProofs: 'part-proofs',\n      positionsToReveal: 'positions-to-reveal',\n      reveals: 'reveals',\n      saltVersion: 'salt-version',\n      sigCommit: 'sig-commit',\n      sigProofs: 'sig-proofs',\n      signedWeight: 'signed-weight'\n    };\n    return _this38;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(StateProofFields, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      return new StateProofFields({\n        partProofs: typeof data['part-proofs'] !== 'undefined' ? MerkleArrayProof.from_obj_for_encoding(data['part-proofs']) : undefined,\n        positionsToReveal: data['positions-to-reveal'],\n        reveals: typeof data['reveals'] !== 'undefined' ? data['reveals'].map(StateProofReveal.from_obj_for_encoding) : undefined,\n        saltVersion: data['salt-version'],\n        sigCommit: data['sig-commit'],\n        sigProofs: typeof data['sig-proofs'] !== 'undefined' ? MerkleArrayProof.from_obj_for_encoding(data['sig-proofs']) : undefined,\n        signedWeight: data['signed-weight']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return StateProofFields;\n}(BaseModel);\nexport var StateProofParticipant = /*#__PURE__*/function (_BaseModel39) {\n  _inherits(StateProofParticipant, _BaseModel39);\n  var _super39 = _createSuper(StateProofParticipant);\n  /**\n   * Creates a new `StateProofParticipant` object.\n   * @param verifier - (p)\n   * @param weight - (w)\n   */\n  function StateProofParticipant(_ref39) {\n    var _this39;\n    var verifier = _ref39.verifier,\n      weight = _ref39.weight;\n    _classCallCheck(this, StateProofParticipant);\n    _this39 = _super39.call(this);\n    _this39.verifier = verifier;\n    _this39.weight = weight;\n    _this39.attribute_map = {\n      verifier: 'verifier',\n      weight: 'weight'\n    };\n    return _this39;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(StateProofParticipant, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      return new StateProofParticipant({\n        verifier: typeof data['verifier'] !== 'undefined' ? StateProofVerifier.from_obj_for_encoding(data['verifier']) : undefined,\n        weight: data['weight']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return StateProofParticipant;\n}(BaseModel);\nexport var StateProofReveal = /*#__PURE__*/function (_BaseModel40) {\n  _inherits(StateProofReveal, _BaseModel40);\n  var _super40 = _createSuper(StateProofReveal);\n  /**\n   * Creates a new `StateProofReveal` object.\n   * @param participant - (p)\n   * @param position - The position in the signature and participants arrays corresponding to this\n   * entry.\n   * @param sigSlot - (s)\n   */\n  function StateProofReveal(_ref40) {\n    var _this40;\n    var participant = _ref40.participant,\n      position = _ref40.position,\n      sigSlot = _ref40.sigSlot;\n    _classCallCheck(this, StateProofReveal);\n    _this40 = _super40.call(this);\n    _this40.participant = participant;\n    _this40.position = position;\n    _this40.sigSlot = sigSlot;\n    _this40.attribute_map = {\n      participant: 'participant',\n      position: 'position',\n      sigSlot: 'sig-slot'\n    };\n    return _this40;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(StateProofReveal, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      return new StateProofReveal({\n        participant: typeof data['participant'] !== 'undefined' ? StateProofParticipant.from_obj_for_encoding(data['participant']) : undefined,\n        position: data['position'],\n        sigSlot: typeof data['sig-slot'] !== 'undefined' ? StateProofSigSlot.from_obj_for_encoding(data['sig-slot']) : undefined\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return StateProofReveal;\n}(BaseModel);\nexport var StateProofSigSlot = /*#__PURE__*/function (_BaseModel41) {\n  _inherits(StateProofSigSlot, _BaseModel41);\n  var _super41 = _createSuper(StateProofSigSlot);\n  /**\n   * Creates a new `StateProofSigSlot` object.\n   * @param lowerSigWeight - (l) The total weight of signatures in the lower-numbered slots.\n   * @param signature -\n   */\n  function StateProofSigSlot(_ref41) {\n    var _this41;\n    var lowerSigWeight = _ref41.lowerSigWeight,\n      signature = _ref41.signature;\n    _classCallCheck(this, StateProofSigSlot);\n    _this41 = _super41.call(this);\n    _this41.lowerSigWeight = lowerSigWeight;\n    _this41.signature = signature;\n    _this41.attribute_map = {\n      lowerSigWeight: 'lower-sig-weight',\n      signature: 'signature'\n    };\n    return _this41;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(StateProofSigSlot, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      return new StateProofSigSlot({\n        lowerSigWeight: data['lower-sig-weight'],\n        signature: typeof data['signature'] !== 'undefined' ? StateProofSignature.from_obj_for_encoding(data['signature']) : undefined\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return StateProofSigSlot;\n}(BaseModel);\nexport var StateProofSignature = /*#__PURE__*/function (_BaseModel42) {\n  _inherits(StateProofSignature, _BaseModel42);\n  var _super42 = _createSuper(StateProofSignature);\n  /**\n   * Creates a new `StateProofSignature` object.\n   * @param falconSignature -\n   * @param merkleArrayIndex -\n   * @param proof -\n   * @param verifyingKey - (vkey)\n   */\n  function StateProofSignature(_ref42) {\n    var _this42;\n    var falconSignature = _ref42.falconSignature,\n      merkleArrayIndex = _ref42.merkleArrayIndex,\n      proof = _ref42.proof,\n      verifyingKey = _ref42.verifyingKey;\n    _classCallCheck(this, StateProofSignature);\n    _this42 = _super42.call(this);\n    _this42.falconSignature = typeof falconSignature === 'string' ? new Uint8Array(Buffer.from(falconSignature, 'base64')) : falconSignature;\n    _this42.merkleArrayIndex = merkleArrayIndex;\n    _this42.proof = proof;\n    _this42.verifyingKey = typeof verifyingKey === 'string' ? new Uint8Array(Buffer.from(verifyingKey, 'base64')) : verifyingKey;\n    _this42.attribute_map = {\n      falconSignature: 'falcon-signature',\n      merkleArrayIndex: 'merkle-array-index',\n      proof: 'proof',\n      verifyingKey: 'verifying-key'\n    };\n    return _this42;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(StateProofSignature, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      return new StateProofSignature({\n        falconSignature: data['falcon-signature'],\n        merkleArrayIndex: data['merkle-array-index'],\n        proof: typeof data['proof'] !== 'undefined' ? MerkleArrayProof.from_obj_for_encoding(data['proof']) : undefined,\n        verifyingKey: data['verifying-key']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return StateProofSignature;\n}(BaseModel);\nexport var StateProofTracking = /*#__PURE__*/function (_BaseModel43) {\n  _inherits(StateProofTracking, _BaseModel43);\n  var _super43 = _createSuper(StateProofTracking);\n  /**\n   * Creates a new `StateProofTracking` object.\n   * @param nextRound - (n) Next round for which we will accept a state proof transaction.\n   * @param onlineTotalWeight - (t) The total number of microalgos held by the online accounts during the\n   * StateProof round.\n   * @param type - State Proof Type. Note the raw object uses map with this as key.\n   * @param votersCommitment - (v) Root of a vector commitment containing online accounts that will help sign\n   * the proof.\n   */\n  function StateProofTracking(_ref43) {\n    var _this43;\n    var nextRound = _ref43.nextRound,\n      onlineTotalWeight = _ref43.onlineTotalWeight,\n      type = _ref43.type,\n      votersCommitment = _ref43.votersCommitment;\n    _classCallCheck(this, StateProofTracking);\n    _this43 = _super43.call(this);\n    _this43.nextRound = nextRound;\n    _this43.onlineTotalWeight = onlineTotalWeight;\n    _this43.type = type;\n    _this43.votersCommitment = typeof votersCommitment === 'string' ? new Uint8Array(Buffer.from(votersCommitment, 'base64')) : votersCommitment;\n    _this43.attribute_map = {\n      nextRound: 'next-round',\n      onlineTotalWeight: 'online-total-weight',\n      type: 'type',\n      votersCommitment: 'voters-commitment'\n    };\n    return _this43;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(StateProofTracking, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      return new StateProofTracking({\n        nextRound: data['next-round'],\n        onlineTotalWeight: data['online-total-weight'],\n        type: data['type'],\n        votersCommitment: data['voters-commitment']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return StateProofTracking;\n}(BaseModel);\nexport var StateProofVerifier = /*#__PURE__*/function (_BaseModel44) {\n  _inherits(StateProofVerifier, _BaseModel44);\n  var _super44 = _createSuper(StateProofVerifier);\n  /**\n   * Creates a new `StateProofVerifier` object.\n   * @param commitment - (cmt) Represents the root of the vector commitment tree.\n   * @param keyLifetime - (lf) Key lifetime.\n   */\n  function StateProofVerifier(_ref44) {\n    var _this44;\n    var commitment = _ref44.commitment,\n      keyLifetime = _ref44.keyLifetime;\n    _classCallCheck(this, StateProofVerifier);\n    _this44 = _super44.call(this);\n    _this44.commitment = typeof commitment === 'string' ? new Uint8Array(Buffer.from(commitment, 'base64')) : commitment;\n    _this44.keyLifetime = keyLifetime;\n    _this44.attribute_map = {\n      commitment: 'commitment',\n      keyLifetime: 'key-lifetime'\n    };\n    return _this44;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(StateProofVerifier, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      return new StateProofVerifier({\n        commitment: data['commitment'],\n        keyLifetime: data['key-lifetime']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return StateProofVerifier;\n}(BaseModel);\n/**\n * Represents a (apls) local-state or (apgs) global-state schema. These schemas\n * determine how much storage may be used in a local-state or global-state for an\n * application. The more space used, the larger minimum balance must be maintained\n * in the account holding the data.\n */\nexport var StateSchema = /*#__PURE__*/function (_BaseModel45) {\n  _inherits(StateSchema, _BaseModel45);\n  var _super45 = _createSuper(StateSchema);\n  /**\n   * Creates a new `StateSchema` object.\n   * @param numByteSlice - Maximum number of TEAL byte slices that may be stored in the key/value store.\n   * @param numUint - Maximum number of TEAL uints that may be stored in the key/value store.\n   */\n  function StateSchema(_ref45) {\n    var _this45;\n    var numByteSlice = _ref45.numByteSlice,\n      numUint = _ref45.numUint;\n    _classCallCheck(this, StateSchema);\n    _this45 = _super45.call(this);\n    _this45.numByteSlice = numByteSlice;\n    _this45.numUint = numUint;\n    _this45.attribute_map = {\n      numByteSlice: 'num-byte-slice',\n      numUint: 'num-uint'\n    };\n    return _this45;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(StateSchema, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['num-byte-slice'] === 'undefined') throw new Error(\"Response is missing required field 'num-byte-slice': \".concat(data));\n      if (typeof data['num-uint'] === 'undefined') throw new Error(\"Response is missing required field 'num-uint': \".concat(data));\n      return new StateSchema({\n        numByteSlice: data['num-byte-slice'],\n        numUint: data['num-uint']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return StateSchema;\n}(BaseModel);\n/**\n * Represents a key-value pair in an application store.\n */\nexport var TealKeyValue = /*#__PURE__*/function (_BaseModel46) {\n  _inherits(TealKeyValue, _BaseModel46);\n  var _super46 = _createSuper(TealKeyValue);\n  /**\n   * Creates a new `TealKeyValue` object.\n   * @param key -\n   * @param value - Represents a TEAL value.\n   */\n  function TealKeyValue(_ref46) {\n    var _this46;\n    var key = _ref46.key,\n      value = _ref46.value;\n    _classCallCheck(this, TealKeyValue);\n    _this46 = _super46.call(this);\n    _this46.key = key;\n    _this46.value = value;\n    _this46.attribute_map = {\n      key: 'key',\n      value: 'value'\n    };\n    return _this46;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(TealKeyValue, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['key'] === 'undefined') throw new Error(\"Response is missing required field 'key': \".concat(data));\n      if (typeof data['value'] === 'undefined') throw new Error(\"Response is missing required field 'value': \".concat(data));\n      return new TealKeyValue({\n        key: data['key'],\n        value: TealValue.from_obj_for_encoding(data['value'])\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return TealKeyValue;\n}(BaseModel);\n/**\n * Represents a TEAL value.\n */\nexport var TealValue = /*#__PURE__*/function (_BaseModel47) {\n  _inherits(TealValue, _BaseModel47);\n  var _super47 = _createSuper(TealValue);\n  /**\n   * Creates a new `TealValue` object.\n   * @param bytes - (tb) bytes value.\n   * @param type - (tt) value type. Value `1` refers to **bytes**, value `2` refers to **uint**\n   * @param uint - (ui) uint value.\n   */\n  function TealValue(_ref47) {\n    var _this47;\n    var bytes = _ref47.bytes,\n      type = _ref47.type,\n      uint = _ref47.uint;\n    _classCallCheck(this, TealValue);\n    _this47 = _super47.call(this);\n    _this47.bytes = bytes;\n    _this47.type = type;\n    _this47.uint = uint;\n    _this47.attribute_map = {\n      bytes: 'bytes',\n      type: 'type',\n      uint: 'uint'\n    };\n    return _this47;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(TealValue, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['bytes'] === 'undefined') throw new Error(\"Response is missing required field 'bytes': \".concat(data));\n      if (typeof data['type'] === 'undefined') throw new Error(\"Response is missing required field 'type': \".concat(data));\n      if (typeof data['uint'] === 'undefined') throw new Error(\"Response is missing required field 'uint': \".concat(data));\n      return new TealValue({\n        bytes: data['bytes'],\n        type: data['type'],\n        uint: data['uint']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return TealValue;\n}(BaseModel);\n/**\n * Contains all fields common to all transactions and serves as an envelope to all\n * transactions type. Represents both regular and inner transactions.\n * Definition:\n * data/transactions/signedtxn.go : SignedTxn\n * data/transactions/transaction.go : Transaction\n */\nexport var Transaction = /*#__PURE__*/function (_BaseModel48) {\n  _inherits(Transaction, _BaseModel48);\n  var _super48 = _createSuper(Transaction);\n  /**\n   * Creates a new `Transaction` object.\n   * @param fee - (fee) Transaction fee.\n   * @param firstValid - (fv) First valid round for this transaction.\n   * @param lastValid - (lv) Last valid round for this transaction.\n   * @param sender - (snd) Sender's address.\n   * @param applicationTransaction - Fields for application transactions.\n   * Definition:\n   * data/transactions/application.go : ApplicationCallTxnFields\n   * @param assetConfigTransaction - Fields for asset allocation, re-configuration, and destruction.\n   * A zero value for asset-id indicates asset creation.\n   * A zero value for the params indicates asset destruction.\n   * Definition:\n   * data/transactions/asset.go : AssetConfigTxnFields\n   * @param assetFreezeTransaction - Fields for an asset freeze transaction.\n   * Definition:\n   * data/transactions/asset.go : AssetFreezeTxnFields\n   * @param assetTransferTransaction - Fields for an asset transfer transaction.\n   * Definition:\n   * data/transactions/asset.go : AssetTransferTxnFields\n   * @param authAddr - (sgnr) this is included with signed transactions when the signing address does\n   * not equal the sender. The backend can use this to ensure that auth addr is equal\n   * to the accounts auth addr.\n   * @param closeRewards - (rc) rewards applied to close-remainder-to account.\n   * @param closingAmount - (ca) closing amount for transaction.\n   * @param confirmedRound - Round when the transaction was confirmed.\n   * @param createdApplicationIndex - Specifies an application index (ID) if an application was created with this\n   * transaction.\n   * @param createdAssetIndex - Specifies an asset index (ID) if an asset was created with this transaction.\n   * @param genesisHash - (gh) Hash of genesis block.\n   * @param genesisId - (gen) genesis block ID.\n   * @param globalStateDelta - (gd) Global state key/value changes for the application being executed by this\n   * transaction.\n   * @param group - (grp) Base64 encoded byte array of a sha512/256 digest. When present indicates\n   * that this transaction is part of a transaction group and the value is the\n   * sha512/256 hash of the transactions in that group.\n   * @param id - Transaction ID\n   * @param innerTxns - Inner transactions produced by application execution.\n   * @param intraRoundOffset - Offset into the round where this transaction was confirmed.\n   * @param keyregTransaction - Fields for a keyreg transaction.\n   * Definition:\n   * data/transactions/keyreg.go : KeyregTxnFields\n   * @param lease - (lx) Base64 encoded 32-byte array. Lease enforces mutual exclusion of\n   * transactions. If this field is nonzero, then once the transaction is confirmed,\n   * it acquires the lease identified by the (Sender, Lease) pair of the transaction\n   * until the LastValid round passes. While this transaction possesses the lease, no\n   * other transaction specifying this lease can be confirmed.\n   * @param localStateDelta - (ld) Local state key/value changes for the application being executed by this\n   * transaction.\n   * @param logs - (lg) Logs for the application being executed by this transaction.\n   * @param note - (note) Free form data.\n   * @param paymentTransaction - Fields for a payment transaction.\n   * Definition:\n   * data/transactions/payment.go : PaymentTxnFields\n   * @param receiverRewards - (rr) rewards applied to receiver account.\n   * @param rekeyTo - (rekey) when included in a valid transaction, the accounts auth addr will be\n   * updated with this value and future signatures must be signed with the key\n   * represented by this address.\n   * @param roundTime - Time when the block this transaction is in was confirmed.\n   * @param senderRewards - (rs) rewards applied to sender account.\n   * @param signature - Validation signature associated with some data. Only one of the signatures\n   * should be provided.\n   * @param stateProofTransaction - Fields for a state proof transaction.\n   * Definition:\n   * data/transactions/stateproof.go : StateProofTxnFields\n   * @param txType - (type) Indicates what type of transaction this is. Different types have\n   * different fields.\n   * Valid types, and where their fields are stored:\n   * * (pay) payment-transaction\n   * * (keyreg) keyreg-transaction\n   * * (acfg) asset-config-transaction\n   * * (axfer) asset-transfer-transaction\n   * * (afrz) asset-freeze-transaction\n   * * (appl) application-transaction\n   * * (stpf) state-proof-transaction\n   */\n  function Transaction(_ref48) {\n    var _this48;\n    var fee = _ref48.fee,\n      firstValid = _ref48.firstValid,\n      lastValid = _ref48.lastValid,\n      sender = _ref48.sender,\n      applicationTransaction = _ref48.applicationTransaction,\n      assetConfigTransaction = _ref48.assetConfigTransaction,\n      assetFreezeTransaction = _ref48.assetFreezeTransaction,\n      assetTransferTransaction = _ref48.assetTransferTransaction,\n      authAddr = _ref48.authAddr,\n      closeRewards = _ref48.closeRewards,\n      closingAmount = _ref48.closingAmount,\n      confirmedRound = _ref48.confirmedRound,\n      createdApplicationIndex = _ref48.createdApplicationIndex,\n      createdAssetIndex = _ref48.createdAssetIndex,\n      genesisHash = _ref48.genesisHash,\n      genesisId = _ref48.genesisId,\n      globalStateDelta = _ref48.globalStateDelta,\n      group = _ref48.group,\n      id = _ref48.id,\n      innerTxns = _ref48.innerTxns,\n      intraRoundOffset = _ref48.intraRoundOffset,\n      keyregTransaction = _ref48.keyregTransaction,\n      lease = _ref48.lease,\n      localStateDelta = _ref48.localStateDelta,\n      logs = _ref48.logs,\n      note = _ref48.note,\n      paymentTransaction = _ref48.paymentTransaction,\n      receiverRewards = _ref48.receiverRewards,\n      rekeyTo = _ref48.rekeyTo,\n      roundTime = _ref48.roundTime,\n      senderRewards = _ref48.senderRewards,\n      signature = _ref48.signature,\n      stateProofTransaction = _ref48.stateProofTransaction,\n      txType = _ref48.txType;\n    _classCallCheck(this, Transaction);\n    _this48 = _super48.call(this);\n    _this48.fee = fee;\n    _this48.firstValid = firstValid;\n    _this48.lastValid = lastValid;\n    _this48.sender = sender;\n    _this48.applicationTransaction = applicationTransaction;\n    _this48.assetConfigTransaction = assetConfigTransaction;\n    _this48.assetFreezeTransaction = assetFreezeTransaction;\n    _this48.assetTransferTransaction = assetTransferTransaction;\n    _this48.authAddr = authAddr;\n    _this48.closeRewards = closeRewards;\n    _this48.closingAmount = closingAmount;\n    _this48.confirmedRound = confirmedRound;\n    _this48.createdApplicationIndex = createdApplicationIndex;\n    _this48.createdAssetIndex = createdAssetIndex;\n    _this48.genesisHash = typeof genesisHash === 'string' ? new Uint8Array(Buffer.from(genesisHash, 'base64')) : genesisHash;\n    _this48.genesisId = genesisId;\n    _this48.globalStateDelta = globalStateDelta;\n    _this48.group = typeof group === 'string' ? new Uint8Array(Buffer.from(group, 'base64')) : group;\n    _this48.id = id;\n    _this48.innerTxns = innerTxns;\n    _this48.intraRoundOffset = intraRoundOffset;\n    _this48.keyregTransaction = keyregTransaction;\n    _this48.lease = typeof lease === 'string' ? new Uint8Array(Buffer.from(lease, 'base64')) : lease;\n    _this48.localStateDelta = localStateDelta;\n    _this48.logs = logs;\n    _this48.note = typeof note === 'string' ? new Uint8Array(Buffer.from(note, 'base64')) : note;\n    _this48.paymentTransaction = paymentTransaction;\n    _this48.receiverRewards = receiverRewards;\n    _this48.rekeyTo = rekeyTo;\n    _this48.roundTime = roundTime;\n    _this48.senderRewards = senderRewards;\n    _this48.signature = signature;\n    _this48.stateProofTransaction = stateProofTransaction;\n    _this48.txType = txType;\n    _this48.attribute_map = {\n      fee: 'fee',\n      firstValid: 'first-valid',\n      lastValid: 'last-valid',\n      sender: 'sender',\n      applicationTransaction: 'application-transaction',\n      assetConfigTransaction: 'asset-config-transaction',\n      assetFreezeTransaction: 'asset-freeze-transaction',\n      assetTransferTransaction: 'asset-transfer-transaction',\n      authAddr: 'auth-addr',\n      closeRewards: 'close-rewards',\n      closingAmount: 'closing-amount',\n      confirmedRound: 'confirmed-round',\n      createdApplicationIndex: 'created-application-index',\n      createdAssetIndex: 'created-asset-index',\n      genesisHash: 'genesis-hash',\n      genesisId: 'genesis-id',\n      globalStateDelta: 'global-state-delta',\n      group: 'group',\n      id: 'id',\n      innerTxns: 'inner-txns',\n      intraRoundOffset: 'intra-round-offset',\n      keyregTransaction: 'keyreg-transaction',\n      lease: 'lease',\n      localStateDelta: 'local-state-delta',\n      logs: 'logs',\n      note: 'note',\n      paymentTransaction: 'payment-transaction',\n      receiverRewards: 'receiver-rewards',\n      rekeyTo: 'rekey-to',\n      roundTime: 'round-time',\n      senderRewards: 'sender-rewards',\n      signature: 'signature',\n      stateProofTransaction: 'state-proof-transaction',\n      txType: 'tx-type'\n    };\n    return _this48;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(Transaction, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['fee'] === 'undefined') throw new Error(\"Response is missing required field 'fee': \".concat(data));\n      if (typeof data['first-valid'] === 'undefined') throw new Error(\"Response is missing required field 'first-valid': \".concat(data));\n      if (typeof data['last-valid'] === 'undefined') throw new Error(\"Response is missing required field 'last-valid': \".concat(data));\n      if (typeof data['sender'] === 'undefined') throw new Error(\"Response is missing required field 'sender': \".concat(data));\n      return new Transaction({\n        fee: data['fee'],\n        firstValid: data['first-valid'],\n        lastValid: data['last-valid'],\n        sender: data['sender'],\n        applicationTransaction: typeof data['application-transaction'] !== 'undefined' ? TransactionApplication.from_obj_for_encoding(data['application-transaction']) : undefined,\n        assetConfigTransaction: typeof data['asset-config-transaction'] !== 'undefined' ? TransactionAssetConfig.from_obj_for_encoding(data['asset-config-transaction']) : undefined,\n        assetFreezeTransaction: typeof data['asset-freeze-transaction'] !== 'undefined' ? TransactionAssetFreeze.from_obj_for_encoding(data['asset-freeze-transaction']) : undefined,\n        assetTransferTransaction: typeof data['asset-transfer-transaction'] !== 'undefined' ? TransactionAssetTransfer.from_obj_for_encoding(data['asset-transfer-transaction']) : undefined,\n        authAddr: data['auth-addr'],\n        closeRewards: data['close-rewards'],\n        closingAmount: data['closing-amount'],\n        confirmedRound: data['confirmed-round'],\n        createdApplicationIndex: data['created-application-index'],\n        createdAssetIndex: data['created-asset-index'],\n        genesisHash: data['genesis-hash'],\n        genesisId: data['genesis-id'],\n        globalStateDelta: typeof data['global-state-delta'] !== 'undefined' ? data['global-state-delta'].map(EvalDeltaKeyValue.from_obj_for_encoding) : undefined,\n        group: data['group'],\n        id: data['id'],\n        innerTxns: typeof data['inner-txns'] !== 'undefined' ? data['inner-txns'].map(Transaction.from_obj_for_encoding) : undefined,\n        intraRoundOffset: data['intra-round-offset'],\n        keyregTransaction: typeof data['keyreg-transaction'] !== 'undefined' ? TransactionKeyreg.from_obj_for_encoding(data['keyreg-transaction']) : undefined,\n        lease: data['lease'],\n        localStateDelta: typeof data['local-state-delta'] !== 'undefined' ? data['local-state-delta'].map(AccountStateDelta.from_obj_for_encoding) : undefined,\n        logs: data['logs'],\n        note: data['note'],\n        paymentTransaction: typeof data['payment-transaction'] !== 'undefined' ? TransactionPayment.from_obj_for_encoding(data['payment-transaction']) : undefined,\n        receiverRewards: data['receiver-rewards'],\n        rekeyTo: data['rekey-to'],\n        roundTime: data['round-time'],\n        senderRewards: data['sender-rewards'],\n        signature: typeof data['signature'] !== 'undefined' ? TransactionSignature.from_obj_for_encoding(data['signature']) : undefined,\n        stateProofTransaction: typeof data['state-proof-transaction'] !== 'undefined' ? TransactionStateProof.from_obj_for_encoding(data['state-proof-transaction']) : undefined,\n        txType: data['tx-type']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return Transaction;\n}(BaseModel);\n/**\n * Fields for application transactions.\n * Definition:\n * data/transactions/application.go : ApplicationCallTxnFields\n */\nexport var TransactionApplication = /*#__PURE__*/function (_BaseModel49) {\n  _inherits(TransactionApplication, _BaseModel49);\n  var _super49 = _createSuper(TransactionApplication);\n  /**\n   * Creates a new `TransactionApplication` object.\n   * @param applicationId - (apid) ID of the application being configured or empty if creating.\n   * @param accounts - (apat) List of accounts in addition to the sender that may be accessed from the\n   * application's approval-program and clear-state-program.\n   * @param applicationArgs - (apaa) transaction specific arguments accessed from the application's\n   * approval-program and clear-state-program.\n   * @param approvalProgram - (apap) Logic executed for every application transaction, except when\n   * on-completion is set to \"clear\". It can read and write global state for the\n   * application, as well as account-specific local state. Approval programs may\n   * reject the transaction.\n   * @param clearStateProgram - (apsu) Logic executed for application transactions with on-completion set to\n   * \"clear\". It can read and write global state for the application, as well as\n   * account-specific local state. Clear state programs cannot reject the\n   * transaction.\n   * @param extraProgramPages - (epp) specifies the additional app program len requested in pages.\n   * @param foreignApps - (apfa) Lists the applications in addition to the application-id whose global\n   * states may be accessed by this application's approval-program and\n   * clear-state-program. The access is read-only.\n   * @param foreignAssets - (apas) lists the assets whose parameters may be accessed by this application's\n   * ApprovalProgram and ClearStateProgram. The access is read-only.\n   * @param globalStateSchema - Represents a (apls) local-state or (apgs) global-state schema. These schemas\n   * determine how much storage may be used in a local-state or global-state for an\n   * application. The more space used, the larger minimum balance must be maintained\n   * in the account holding the data.\n   * @param localStateSchema - Represents a (apls) local-state or (apgs) global-state schema. These schemas\n   * determine how much storage may be used in a local-state or global-state for an\n   * application. The more space used, the larger minimum balance must be maintained\n   * in the account holding the data.\n   * @param onCompletion - (apan) defines the what additional actions occur with the transaction.\n   * Valid types:\n   * * noop\n   * * optin\n   * * closeout\n   * * clear\n   * * update\n   * * update\n   * * delete\n   */\n  function TransactionApplication(_ref49) {\n    var _this49;\n    var applicationId = _ref49.applicationId,\n      accounts = _ref49.accounts,\n      applicationArgs = _ref49.applicationArgs,\n      approvalProgram = _ref49.approvalProgram,\n      clearStateProgram = _ref49.clearStateProgram,\n      extraProgramPages = _ref49.extraProgramPages,\n      foreignApps = _ref49.foreignApps,\n      foreignAssets = _ref49.foreignAssets,\n      globalStateSchema = _ref49.globalStateSchema,\n      localStateSchema = _ref49.localStateSchema,\n      onCompletion = _ref49.onCompletion;\n    _classCallCheck(this, TransactionApplication);\n    _this49 = _super49.call(this);\n    _this49.applicationId = applicationId;\n    _this49.accounts = accounts;\n    _this49.applicationArgs = applicationArgs;\n    _this49.approvalProgram = typeof approvalProgram === 'string' ? new Uint8Array(Buffer.from(approvalProgram, 'base64')) : approvalProgram;\n    _this49.clearStateProgram = typeof clearStateProgram === 'string' ? new Uint8Array(Buffer.from(clearStateProgram, 'base64')) : clearStateProgram;\n    _this49.extraProgramPages = extraProgramPages;\n    _this49.foreignApps = foreignApps;\n    _this49.foreignAssets = foreignAssets;\n    _this49.globalStateSchema = globalStateSchema;\n    _this49.localStateSchema = localStateSchema;\n    _this49.onCompletion = onCompletion;\n    _this49.attribute_map = {\n      applicationId: 'application-id',\n      accounts: 'accounts',\n      applicationArgs: 'application-args',\n      approvalProgram: 'approval-program',\n      clearStateProgram: 'clear-state-program',\n      extraProgramPages: 'extra-program-pages',\n      foreignApps: 'foreign-apps',\n      foreignAssets: 'foreign-assets',\n      globalStateSchema: 'global-state-schema',\n      localStateSchema: 'local-state-schema',\n      onCompletion: 'on-completion'\n    };\n    return _this49;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(TransactionApplication, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['application-id'] === 'undefined') throw new Error(\"Response is missing required field 'application-id': \".concat(data));\n      return new TransactionApplication({\n        applicationId: data['application-id'],\n        accounts: data['accounts'],\n        applicationArgs: data['application-args'],\n        approvalProgram: data['approval-program'],\n        clearStateProgram: data['clear-state-program'],\n        extraProgramPages: data['extra-program-pages'],\n        foreignApps: data['foreign-apps'],\n        foreignAssets: data['foreign-assets'],\n        globalStateSchema: typeof data['global-state-schema'] !== 'undefined' ? StateSchema.from_obj_for_encoding(data['global-state-schema']) : undefined,\n        localStateSchema: typeof data['local-state-schema'] !== 'undefined' ? StateSchema.from_obj_for_encoding(data['local-state-schema']) : undefined,\n        onCompletion: data['on-completion']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return TransactionApplication;\n}(BaseModel);\n/**\n * Fields for asset allocation, re-configuration, and destruction.\n * A zero value for asset-id indicates asset creation.\n * A zero value for the params indicates asset destruction.\n * Definition:\n * data/transactions/asset.go : AssetConfigTxnFields\n */\nexport var TransactionAssetConfig = /*#__PURE__*/function (_BaseModel50) {\n  _inherits(TransactionAssetConfig, _BaseModel50);\n  var _super50 = _createSuper(TransactionAssetConfig);\n  /**\n   * Creates a new `TransactionAssetConfig` object.\n   * @param assetId - (xaid) ID of the asset being configured or empty if creating.\n   * @param params - AssetParams specifies the parameters for an asset.\n   * (apar) when part of an AssetConfig transaction.\n   * Definition:\n   * data/transactions/asset.go : AssetParams\n   */\n  function TransactionAssetConfig(_ref50) {\n    var _this50;\n    var assetId = _ref50.assetId,\n      params = _ref50.params;\n    _classCallCheck(this, TransactionAssetConfig);\n    _this50 = _super50.call(this);\n    _this50.assetId = assetId;\n    _this50.params = params;\n    _this50.attribute_map = {\n      assetId: 'asset-id',\n      params: 'params'\n    };\n    return _this50;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(TransactionAssetConfig, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      return new TransactionAssetConfig({\n        assetId: data['asset-id'],\n        params: typeof data['params'] !== 'undefined' ? AssetParams.from_obj_for_encoding(data['params']) : undefined\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return TransactionAssetConfig;\n}(BaseModel);\n/**\n * Fields for an asset freeze transaction.\n * Definition:\n * data/transactions/asset.go : AssetFreezeTxnFields\n */\nexport var TransactionAssetFreeze = /*#__PURE__*/function (_BaseModel51) {\n  _inherits(TransactionAssetFreeze, _BaseModel51);\n  var _super51 = _createSuper(TransactionAssetFreeze);\n  /**\n   * Creates a new `TransactionAssetFreeze` object.\n   * @param address - (fadd) Address of the account whose asset is being frozen or thawed.\n   * @param assetId - (faid) ID of the asset being frozen or thawed.\n   * @param newFreezeStatus - (afrz) The new freeze status.\n   */\n  function TransactionAssetFreeze(_ref51) {\n    var _this51;\n    var address = _ref51.address,\n      assetId = _ref51.assetId,\n      newFreezeStatus = _ref51.newFreezeStatus;\n    _classCallCheck(this, TransactionAssetFreeze);\n    _this51 = _super51.call(this);\n    _this51.address = address;\n    _this51.assetId = assetId;\n    _this51.newFreezeStatus = newFreezeStatus;\n    _this51.attribute_map = {\n      address: 'address',\n      assetId: 'asset-id',\n      newFreezeStatus: 'new-freeze-status'\n    };\n    return _this51;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(TransactionAssetFreeze, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['address'] === 'undefined') throw new Error(\"Response is missing required field 'address': \".concat(data));\n      if (typeof data['asset-id'] === 'undefined') throw new Error(\"Response is missing required field 'asset-id': \".concat(data));\n      if (typeof data['new-freeze-status'] === 'undefined') throw new Error(\"Response is missing required field 'new-freeze-status': \".concat(data));\n      return new TransactionAssetFreeze({\n        address: data['address'],\n        assetId: data['asset-id'],\n        newFreezeStatus: data['new-freeze-status']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return TransactionAssetFreeze;\n}(BaseModel);\n/**\n * Fields for an asset transfer transaction.\n * Definition:\n * data/transactions/asset.go : AssetTransferTxnFields\n */\nexport var TransactionAssetTransfer = /*#__PURE__*/function (_BaseModel52) {\n  _inherits(TransactionAssetTransfer, _BaseModel52);\n  var _super52 = _createSuper(TransactionAssetTransfer);\n  /**\n   * Creates a new `TransactionAssetTransfer` object.\n   * @param amount - (aamt) Amount of asset to transfer. A zero amount transferred to self allocates\n   * that asset in the account's Assets map.\n   * @param assetId - (xaid) ID of the asset being transferred.\n   * @param receiver - (arcv) Recipient address of the transfer.\n   * @param closeAmount - Number of assets transfered to the close-to account as part of the transaction.\n   * @param closeTo - (aclose) Indicates that the asset should be removed from the account's Assets\n   * map, and specifies where the remaining asset holdings should be transferred.\n   * It's always valid to transfer remaining asset holdings to the creator account.\n   * @param sender - (asnd) The effective sender during a clawback transactions. If this is not a\n   * zero value, the real transaction sender must be the Clawback address from the\n   * AssetParams.\n   */\n  function TransactionAssetTransfer(_ref52) {\n    var _this52;\n    var amount = _ref52.amount,\n      assetId = _ref52.assetId,\n      receiver = _ref52.receiver,\n      closeAmount = _ref52.closeAmount,\n      closeTo = _ref52.closeTo,\n      sender = _ref52.sender;\n    _classCallCheck(this, TransactionAssetTransfer);\n    _this52 = _super52.call(this);\n    _this52.amount = amount;\n    _this52.assetId = assetId;\n    _this52.receiver = receiver;\n    _this52.closeAmount = closeAmount;\n    _this52.closeTo = closeTo;\n    _this52.sender = sender;\n    _this52.attribute_map = {\n      amount: 'amount',\n      assetId: 'asset-id',\n      receiver: 'receiver',\n      closeAmount: 'close-amount',\n      closeTo: 'close-to',\n      sender: 'sender'\n    };\n    return _this52;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(TransactionAssetTransfer, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['amount'] === 'undefined') throw new Error(\"Response is missing required field 'amount': \".concat(data));\n      if (typeof data['asset-id'] === 'undefined') throw new Error(\"Response is missing required field 'asset-id': \".concat(data));\n      if (typeof data['receiver'] === 'undefined') throw new Error(\"Response is missing required field 'receiver': \".concat(data));\n      return new TransactionAssetTransfer({\n        amount: data['amount'],\n        assetId: data['asset-id'],\n        receiver: data['receiver'],\n        closeAmount: data['close-amount'],\n        closeTo: data['close-to'],\n        sender: data['sender']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return TransactionAssetTransfer;\n}(BaseModel);\n/**\n * Fields for a keyreg transaction.\n * Definition:\n * data/transactions/keyreg.go : KeyregTxnFields\n */\nexport var TransactionKeyreg = /*#__PURE__*/function (_BaseModel53) {\n  _inherits(TransactionKeyreg, _BaseModel53);\n  var _super53 = _createSuper(TransactionKeyreg);\n  /**\n   * Creates a new `TransactionKeyreg` object.\n   * @param nonParticipation - (nonpart) Mark the account as participating or non-participating.\n   * @param selectionParticipationKey - (selkey) Public key used with the Verified Random Function (VRF) result during\n   * committee selection.\n   * @param stateProofKey - (sprfkey) State proof key used in key registration transactions.\n   * @param voteFirstValid - (votefst) First round this participation key is valid.\n   * @param voteKeyDilution - (votekd) Number of subkeys in each batch of participation keys.\n   * @param voteLastValid - (votelst) Last round this participation key is valid.\n   * @param voteParticipationKey - (votekey) Participation public key used in key registration transactions.\n   */\n  function TransactionKeyreg(_ref53) {\n    var _this53;\n    var nonParticipation = _ref53.nonParticipation,\n      selectionParticipationKey = _ref53.selectionParticipationKey,\n      stateProofKey = _ref53.stateProofKey,\n      voteFirstValid = _ref53.voteFirstValid,\n      voteKeyDilution = _ref53.voteKeyDilution,\n      voteLastValid = _ref53.voteLastValid,\n      voteParticipationKey = _ref53.voteParticipationKey;\n    _classCallCheck(this, TransactionKeyreg);\n    _this53 = _super53.call(this);\n    _this53.nonParticipation = nonParticipation;\n    _this53.selectionParticipationKey = typeof selectionParticipationKey === 'string' ? new Uint8Array(Buffer.from(selectionParticipationKey, 'base64')) : selectionParticipationKey;\n    _this53.stateProofKey = typeof stateProofKey === 'string' ? new Uint8Array(Buffer.from(stateProofKey, 'base64')) : stateProofKey;\n    _this53.voteFirstValid = voteFirstValid;\n    _this53.voteKeyDilution = voteKeyDilution;\n    _this53.voteLastValid = voteLastValid;\n    _this53.voteParticipationKey = typeof voteParticipationKey === 'string' ? new Uint8Array(Buffer.from(voteParticipationKey, 'base64')) : voteParticipationKey;\n    _this53.attribute_map = {\n      nonParticipation: 'non-participation',\n      selectionParticipationKey: 'selection-participation-key',\n      stateProofKey: 'state-proof-key',\n      voteFirstValid: 'vote-first-valid',\n      voteKeyDilution: 'vote-key-dilution',\n      voteLastValid: 'vote-last-valid',\n      voteParticipationKey: 'vote-participation-key'\n    };\n    return _this53;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(TransactionKeyreg, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      return new TransactionKeyreg({\n        nonParticipation: data['non-participation'],\n        selectionParticipationKey: data['selection-participation-key'],\n        stateProofKey: data['state-proof-key'],\n        voteFirstValid: data['vote-first-valid'],\n        voteKeyDilution: data['vote-key-dilution'],\n        voteLastValid: data['vote-last-valid'],\n        voteParticipationKey: data['vote-participation-key']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return TransactionKeyreg;\n}(BaseModel);\n/**\n * Fields for a payment transaction.\n * Definition:\n * data/transactions/payment.go : PaymentTxnFields\n */\nexport var TransactionPayment = /*#__PURE__*/function (_BaseModel54) {\n  _inherits(TransactionPayment, _BaseModel54);\n  var _super54 = _createSuper(TransactionPayment);\n  /**\n   * Creates a new `TransactionPayment` object.\n   * @param amount - (amt) number of MicroAlgos intended to be transferred.\n   * @param receiver - (rcv) receiver's address.\n   * @param closeAmount - Number of MicroAlgos that were sent to the close-remainder-to address when\n   * closing the sender account.\n   * @param closeRemainderTo - (close) when set, indicates that the sending account should be closed and all\n   * remaining funds be transferred to this address.\n   */\n  function TransactionPayment(_ref54) {\n    var _this54;\n    var amount = _ref54.amount,\n      receiver = _ref54.receiver,\n      closeAmount = _ref54.closeAmount,\n      closeRemainderTo = _ref54.closeRemainderTo;\n    _classCallCheck(this, TransactionPayment);\n    _this54 = _super54.call(this);\n    _this54.amount = amount;\n    _this54.receiver = receiver;\n    _this54.closeAmount = closeAmount;\n    _this54.closeRemainderTo = closeRemainderTo;\n    _this54.attribute_map = {\n      amount: 'amount',\n      receiver: 'receiver',\n      closeAmount: 'close-amount',\n      closeRemainderTo: 'close-remainder-to'\n    };\n    return _this54;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(TransactionPayment, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['amount'] === 'undefined') throw new Error(\"Response is missing required field 'amount': \".concat(data));\n      if (typeof data['receiver'] === 'undefined') throw new Error(\"Response is missing required field 'receiver': \".concat(data));\n      return new TransactionPayment({\n        amount: data['amount'],\n        receiver: data['receiver'],\n        closeAmount: data['close-amount'],\n        closeRemainderTo: data['close-remainder-to']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return TransactionPayment;\n}(BaseModel);\n/**\n *\n */\nexport var TransactionResponse = /*#__PURE__*/function (_BaseModel55) {\n  _inherits(TransactionResponse, _BaseModel55);\n  var _super55 = _createSuper(TransactionResponse);\n  /**\n   * Creates a new `TransactionResponse` object.\n   * @param currentRound - Round at which the results were computed.\n   * @param transaction - Contains all fields common to all transactions and serves as an envelope to all\n   * transactions type. Represents both regular and inner transactions.\n   * Definition:\n   * data/transactions/signedtxn.go : SignedTxn\n   * data/transactions/transaction.go : Transaction\n   */\n  function TransactionResponse(_ref55) {\n    var _this55;\n    var currentRound = _ref55.currentRound,\n      transaction = _ref55.transaction;\n    _classCallCheck(this, TransactionResponse);\n    _this55 = _super55.call(this);\n    _this55.currentRound = currentRound;\n    _this55.transaction = transaction;\n    _this55.attribute_map = {\n      currentRound: 'current-round',\n      transaction: 'transaction'\n    };\n    return _this55;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(TransactionResponse, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['current-round'] === 'undefined') throw new Error(\"Response is missing required field 'current-round': \".concat(data));\n      if (typeof data['transaction'] === 'undefined') throw new Error(\"Response is missing required field 'transaction': \".concat(data));\n      return new TransactionResponse({\n        currentRound: data['current-round'],\n        transaction: Transaction.from_obj_for_encoding(data['transaction'])\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return TransactionResponse;\n}(BaseModel);\n/**\n * Validation signature associated with some data. Only one of the signatures\n * should be provided.\n */\nexport var TransactionSignature = /*#__PURE__*/function (_BaseModel56) {\n  _inherits(TransactionSignature, _BaseModel56);\n  var _super56 = _createSuper(TransactionSignature);\n  /**\n   * Creates a new `TransactionSignature` object.\n   * @param logicsig - (lsig) Programatic transaction signature.\n   * Definition:\n   * data/transactions/logicsig.go\n   * @param multisig - (msig) structure holding multiple subsignatures.\n   * Definition:\n   * crypto/multisig.go : MultisigSig\n   * @param sig - (sig) Standard ed25519 signature.\n   */\n  function TransactionSignature(_ref56) {\n    var _this56;\n    var logicsig = _ref56.logicsig,\n      multisig = _ref56.multisig,\n      sig = _ref56.sig;\n    _classCallCheck(this, TransactionSignature);\n    _this56 = _super56.call(this);\n    _this56.logicsig = logicsig;\n    _this56.multisig = multisig;\n    _this56.sig = typeof sig === 'string' ? new Uint8Array(Buffer.from(sig, 'base64')) : sig;\n    _this56.attribute_map = {\n      logicsig: 'logicsig',\n      multisig: 'multisig',\n      sig: 'sig'\n    };\n    return _this56;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(TransactionSignature, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      return new TransactionSignature({\n        logicsig: typeof data['logicsig'] !== 'undefined' ? TransactionSignatureLogicsig.from_obj_for_encoding(data['logicsig']) : undefined,\n        multisig: typeof data['multisig'] !== 'undefined' ? TransactionSignatureMultisig.from_obj_for_encoding(data['multisig']) : undefined,\n        sig: data['sig']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return TransactionSignature;\n}(BaseModel);\n/**\n * (lsig) Programatic transaction signature.\n * Definition:\n * data/transactions/logicsig.go\n */\nexport var TransactionSignatureLogicsig = /*#__PURE__*/function (_BaseModel57) {\n  _inherits(TransactionSignatureLogicsig, _BaseModel57);\n  var _super57 = _createSuper(TransactionSignatureLogicsig);\n  /**\n   * Creates a new `TransactionSignatureLogicsig` object.\n   * @param logic - (l) Program signed by a signature or multi signature, or hashed to be the\n   * address of ana ccount. Base64 encoded TEAL program.\n   * @param args - (arg) Logic arguments, base64 encoded.\n   * @param multisigSignature - (msig) structure holding multiple subsignatures.\n   * Definition:\n   * crypto/multisig.go : MultisigSig\n   * @param signature - (sig) ed25519 signature.\n   */\n  function TransactionSignatureLogicsig(_ref57) {\n    var _this57;\n    var logic = _ref57.logic,\n      args = _ref57.args,\n      multisigSignature = _ref57.multisigSignature,\n      signature = _ref57.signature;\n    _classCallCheck(this, TransactionSignatureLogicsig);\n    _this57 = _super57.call(this);\n    _this57.logic = typeof logic === 'string' ? new Uint8Array(Buffer.from(logic, 'base64')) : logic;\n    _this57.args = args;\n    _this57.multisigSignature = multisigSignature;\n    _this57.signature = typeof signature === 'string' ? new Uint8Array(Buffer.from(signature, 'base64')) : signature;\n    _this57.attribute_map = {\n      logic: 'logic',\n      args: 'args',\n      multisigSignature: 'multisig-signature',\n      signature: 'signature'\n    };\n    return _this57;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(TransactionSignatureLogicsig, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['logic'] === 'undefined') throw new Error(\"Response is missing required field 'logic': \".concat(data));\n      return new TransactionSignatureLogicsig({\n        logic: data['logic'],\n        args: data['args'],\n        multisigSignature: typeof data['multisig-signature'] !== 'undefined' ? TransactionSignatureMultisig.from_obj_for_encoding(data['multisig-signature']) : undefined,\n        signature: data['signature']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return TransactionSignatureLogicsig;\n}(BaseModel);\n/**\n * (msig) structure holding multiple subsignatures.\n * Definition:\n * crypto/multisig.go : MultisigSig\n */\nexport var TransactionSignatureMultisig = /*#__PURE__*/function (_BaseModel58) {\n  _inherits(TransactionSignatureMultisig, _BaseModel58);\n  var _super58 = _createSuper(TransactionSignatureMultisig);\n  /**\n   * Creates a new `TransactionSignatureMultisig` object.\n   * @param subsignature - (subsig) holds pairs of public key and signatures.\n   * @param threshold - (thr)\n   * @param version - (v)\n   */\n  function TransactionSignatureMultisig(_ref58) {\n    var _this58;\n    var subsignature = _ref58.subsignature,\n      threshold = _ref58.threshold,\n      version = _ref58.version;\n    _classCallCheck(this, TransactionSignatureMultisig);\n    _this58 = _super58.call(this);\n    _this58.subsignature = subsignature;\n    _this58.threshold = threshold;\n    _this58.version = version;\n    _this58.attribute_map = {\n      subsignature: 'subsignature',\n      threshold: 'threshold',\n      version: 'version'\n    };\n    return _this58;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(TransactionSignatureMultisig, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      return new TransactionSignatureMultisig({\n        subsignature: typeof data['subsignature'] !== 'undefined' ? data['subsignature'].map(TransactionSignatureMultisigSubsignature.from_obj_for_encoding) : undefined,\n        threshold: data['threshold'],\n        version: data['version']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return TransactionSignatureMultisig;\n}(BaseModel);\nexport var TransactionSignatureMultisigSubsignature = /*#__PURE__*/function (_BaseModel59) {\n  _inherits(TransactionSignatureMultisigSubsignature, _BaseModel59);\n  var _super59 = _createSuper(TransactionSignatureMultisigSubsignature);\n  /**\n   * Creates a new `TransactionSignatureMultisigSubsignature` object.\n   * @param publicKey - (pk)\n   * @param signature - (s)\n   */\n  function TransactionSignatureMultisigSubsignature(_ref59) {\n    var _this59;\n    var publicKey = _ref59.publicKey,\n      signature = _ref59.signature;\n    _classCallCheck(this, TransactionSignatureMultisigSubsignature);\n    _this59 = _super59.call(this);\n    _this59.publicKey = typeof publicKey === 'string' ? new Uint8Array(Buffer.from(publicKey, 'base64')) : publicKey;\n    _this59.signature = typeof signature === 'string' ? new Uint8Array(Buffer.from(signature, 'base64')) : signature;\n    _this59.attribute_map = {\n      publicKey: 'public-key',\n      signature: 'signature'\n    };\n    return _this59;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(TransactionSignatureMultisigSubsignature, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      return new TransactionSignatureMultisigSubsignature({\n        publicKey: data['public-key'],\n        signature: data['signature']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return TransactionSignatureMultisigSubsignature;\n}(BaseModel);\n/**\n * Fields for a state proof transaction.\n * Definition:\n * data/transactions/stateproof.go : StateProofTxnFields\n */\nexport var TransactionStateProof = /*#__PURE__*/function (_BaseModel60) {\n  _inherits(TransactionStateProof, _BaseModel60);\n  var _super60 = _createSuper(TransactionStateProof);\n  /**\n   * Creates a new `TransactionStateProof` object.\n   * @param message - (spmsg)\n   * @param stateProof - (sp) represents a state proof.\n   * Definition:\n   * crypto/stateproof/structs.go : StateProof\n   * @param stateProofType - (sptype) Type of the state proof. Integer representing an entry defined in\n   * protocol/stateproof.go\n   */\n  function TransactionStateProof(_ref60) {\n    var _this60;\n    var message = _ref60.message,\n      stateProof = _ref60.stateProof,\n      stateProofType = _ref60.stateProofType;\n    _classCallCheck(this, TransactionStateProof);\n    _this60 = _super60.call(this);\n    _this60.message = message;\n    _this60.stateProof = stateProof;\n    _this60.stateProofType = stateProofType;\n    _this60.attribute_map = {\n      message: 'message',\n      stateProof: 'state-proof',\n      stateProofType: 'state-proof-type'\n    };\n    return _this60;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(TransactionStateProof, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      return new TransactionStateProof({\n        message: typeof data['message'] !== 'undefined' ? IndexerStateProofMessage.from_obj_for_encoding(data['message']) : undefined,\n        stateProof: typeof data['state-proof'] !== 'undefined' ? StateProofFields.from_obj_for_encoding(data['state-proof']) : undefined,\n        stateProofType: data['state-proof-type']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return TransactionStateProof;\n}(BaseModel);\n/**\n *\n */\nexport var TransactionsResponse = /*#__PURE__*/function (_BaseModel61) {\n  _inherits(TransactionsResponse, _BaseModel61);\n  var _super61 = _createSuper(TransactionsResponse);\n  /**\n   * Creates a new `TransactionsResponse` object.\n   * @param currentRound - Round at which the results were computed.\n   * @param transactions -\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  function TransactionsResponse(_ref61) {\n    var _this61;\n    var currentRound = _ref61.currentRound,\n      transactions = _ref61.transactions,\n      nextToken = _ref61.nextToken;\n    _classCallCheck(this, TransactionsResponse);\n    _this61 = _super61.call(this);\n    _this61.currentRound = currentRound;\n    _this61.transactions = transactions;\n    _this61.nextToken = nextToken;\n    _this61.attribute_map = {\n      currentRound: 'current-round',\n      transactions: 'transactions',\n      nextToken: 'next-token'\n    };\n    return _this61;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(TransactionsResponse, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['current-round'] === 'undefined') throw new Error(\"Response is missing required field 'current-round': \".concat(data));\n      if (!Array.isArray(data['transactions'])) throw new Error(\"Response is missing required array field 'transactions': \".concat(data));\n      return new TransactionsResponse({\n        currentRound: data['current-round'],\n        transactions: data['transactions'].map(Transaction.from_obj_for_encoding),\n        nextToken: data['next-token']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return TransactionsResponse;\n}(BaseModel);","map":{"version":3,"names":["Buffer","BaseModel","Account","_BaseModel","_inherits","_super","_createSuper","_ref","_this","address","amount","amountWithoutPendingRewards","pendingRewards","rewards","round","status","totalAppsOptedIn","totalAssetsOptedIn","totalBoxBytes","totalBoxes","totalCreatedApps","totalCreatedAssets","appsLocalState","appsTotalExtraPages","appsTotalSchema","assets","authAddr","closedAtRound","createdApps","createdAssets","createdAtRound","deleted","participation","rewardBase","sigType","_classCallCheck","call","attribute_map","_createClass","key","value","from_obj_for_encoding","data","Error","concat","map","ApplicationLocalState","undefined","ApplicationStateSchema","AssetHolding","Application","Asset","AccountParticipation","_BaseModel2","_super2","_ref2","_this2","selectionParticipationKey","voteFirstValid","voteKeyDilution","voteLastValid","voteParticipationKey","stateProofKey","Uint8Array","from","AccountResponse","_BaseModel3","_super3","_ref3","_this3","account","currentRound","AccountStateDelta","_BaseModel4","_super4","_ref4","_this4","delta","Array","isArray","EvalDeltaKeyValue","AccountsResponse","_BaseModel5","_super5","_ref5","_this5","accounts","nextToken","_BaseModel6","_super6","_ref6","_this6","id","params","deletedAtRound","ApplicationParams","_BaseModel7","_super7","_ref7","_this7","schema","closedOutAtRound","keyValue","optedInAtRound","TealKeyValue","ApplicationLocalStatesResponse","_BaseModel8","_super8","_ref8","_this8","appsLocalStates","ApplicationLogData","_BaseModel9","_super9","_ref9","_this9","logs","txid","ApplicationLogsResponse","_BaseModel10","_super10","_ref10","_this10","applicationId","logData","_BaseModel11","_super11","_ref11","_this11","approvalProgram","clearStateProgram","creator","extraProgramPages","globalState","globalStateSchema","localStateSchema","ApplicationResponse","_BaseModel12","_super12","_ref12","_this12","application","_BaseModel13","_super13","_ref13","_this13","numByteSlice","numUint","ApplicationsResponse","_BaseModel14","_super14","_ref14","_this14","applications","_BaseModel15","_super15","_ref15","_this15","index","destroyedAtRound","AssetParams","AssetBalancesResponse","_BaseModel16","_super16","_ref16","_this16","balances","MiniAssetHolding","_BaseModel17","_super17","_ref17","_this17","assetId","isFrozen","optedOutAtRound","AssetHoldingsResponse","_BaseModel18","_super18","_ref18","_this18","_BaseModel19","_super19","_ref19","_this19","decimals","total","clawback","defaultFrozen","freeze","manager","metadataHash","name","nameB64","reserve","unitName","unitNameB64","url","urlB64","AssetResponse","_BaseModel20","_super20","_ref20","_this20","asset","AssetsResponse","_BaseModel21","_super21","_ref21","_this21","Block","_BaseModel22","_super22","_ref22","_this22","genesisHash","genesisId","previousBlockHash","seed","timestamp","transactionsRoot","transactionsRootSha256","participationUpdates","stateProofTracking","transactions","txnCounter","upgradeState","upgradeVote","ParticipationUpdates","BlockRewards","StateProofTracking","Transaction","BlockUpgradeState","BlockUpgradeVote","_BaseModel23","_super23","_ref23","_this23","feeSink","rewardsCalculationRound","rewardsLevel","rewardsPool","rewardsRate","rewardsResidue","_BaseModel24","_super24","_ref24","_this24","currentProtocol","nextProtocol","nextProtocolApprovals","nextProtocolSwitchOn","nextProtocolVoteBefore","_BaseModel25","_super25","_ref25","_this25","upgradeApprove","upgradeDelay","upgradePropose","Box","_BaseModel26","_super26","_ref26","_this26","BoxDescriptor","_BaseModel27","_super27","_ref27","_this27","BoxesResponse","_BaseModel28","_super28","_ref28","_this28","boxes","ErrorResponse","_BaseModel29","_super29","_ref29","_this29","message","EvalDelta","_BaseModel30","_super30","_ref30","_this30","action","bytes","uint","_BaseModel31","_super31","_ref31","_this31","HashFactory","_BaseModel32","_super32","_ref32","_this32","hashType","HealthCheck","_BaseModel33","_super33","_ref33","_this33","dbAvailable","isMigrating","version","errors","IndexerStateProofMessage","_BaseModel34","_super34","_ref34","_this34","blockHeadersCommitment","firstAttestedRound","latestAttestedRound","lnProvenWeight","votersCommitment","MerkleArrayProof","_BaseModel35","_super35","_ref35","_this35","hashFactory","path","treeDepth","_BaseModel36","_super36","_ref36","_this36","_BaseModel37","_super37","_ref37","_this37","expiredParticipationAccounts","StateProofFields","_BaseModel38","_super38","_ref38","_this38","partProofs","positionsToReveal","reveals","saltVersion","sigCommit","sigProofs","signedWeight","StateProofReveal","StateProofParticipant","_BaseModel39","_super39","_ref39","_this39","verifier","weight","StateProofVerifier","_BaseModel40","_super40","_ref40","_this40","participant","position","sigSlot","StateProofSigSlot","_BaseModel41","_super41","_ref41","_this41","lowerSigWeight","signature","StateProofSignature","_BaseModel42","_super42","_ref42","_this42","falconSignature","merkleArrayIndex","proof","verifyingKey","_BaseModel43","_super43","_ref43","_this43","nextRound","onlineTotalWeight","type","_BaseModel44","_super44","_ref44","_this44","commitment","keyLifetime","StateSchema","_BaseModel45","_super45","_ref45","_this45","_BaseModel46","_super46","_ref46","_this46","TealValue","_BaseModel47","_super47","_ref47","_this47","_BaseModel48","_super48","_ref48","_this48","fee","firstValid","lastValid","sender","applicationTransaction","assetConfigTransaction","assetFreezeTransaction","assetTransferTransaction","closeRewards","closingAmount","confirmedRound","createdApplicationIndex","createdAssetIndex","globalStateDelta","group","innerTxns","intraRoundOffset","keyregTransaction","lease","localStateDelta","note","paymentTransaction","receiverRewards","rekeyTo","roundTime","senderRewards","stateProofTransaction","txType","TransactionApplication","TransactionAssetConfig","TransactionAssetFreeze","TransactionAssetTransfer","TransactionKeyreg","TransactionPayment","TransactionSignature","TransactionStateProof","_BaseModel49","_super49","_ref49","_this49","applicationArgs","foreignApps","foreignAssets","onCompletion","_BaseModel50","_super50","_ref50","_this50","_BaseModel51","_super51","_ref51","_this51","newFreezeStatus","_BaseModel52","_super52","_ref52","_this52","receiver","closeAmount","closeTo","_BaseModel53","_super53","_ref53","_this53","nonParticipation","_BaseModel54","_super54","_ref54","_this54","closeRemainderTo","TransactionResponse","_BaseModel55","_super55","_ref55","_this55","transaction","_BaseModel56","_super56","_ref56","_this56","logicsig","multisig","sig","TransactionSignatureLogicsig","TransactionSignatureMultisig","_BaseModel57","_super57","_ref57","_this57","logic","args","multisigSignature","_BaseModel58","_super58","_ref58","_this58","subsignature","threshold","TransactionSignatureMultisigSubsignature","_BaseModel59","_super59","_ref59","_this59","publicKey","_BaseModel60","_super60","_ref60","_this60","stateProof","stateProofType","TransactionsResponse","_BaseModel61","_super61","_ref61","_this61"],"sources":["/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/algosdk/src/client/v2/indexer/models/types.ts"],"sourcesContent":["/**\n * NOTICE: This file was generated. Editing this file manually is not recommended.\n */\n\n/* eslint-disable no-use-before-define */\nimport { Buffer } from 'buffer';\nimport BaseModel from '../../basemodel';\n\n/**\n * Account information at a given round.\n * Definition:\n * data/basics/userBalance.go : AccountData\n */\nexport class Account extends BaseModel {\n  /**\n   * the account public key\n   */\n  public address: string;\n\n  /**\n   * (algo) total number of MicroAlgos in the account\n   */\n  public amount: number | bigint;\n\n  /**\n   * specifies the amount of MicroAlgos in the account, without the pending rewards.\n   */\n  public amountWithoutPendingRewards: number | bigint;\n\n  /**\n   * amount of MicroAlgos of pending rewards in this account.\n   */\n  public pendingRewards: number | bigint;\n\n  /**\n   * (ern) total rewards of MicroAlgos the account has received, including pending\n   * rewards.\n   */\n  public rewards: number | bigint;\n\n  /**\n   * The round for which this information is relevant.\n   */\n  public round: number | bigint;\n\n  /**\n   * (onl) delegation status of the account's MicroAlgos\n   * * Offline - indicates that the associated account is delegated.\n   * * Online - indicates that the associated account used as part of the delegation\n   * pool.\n   * * NotParticipating - indicates that the associated account is neither a\n   * delegator nor a delegate.\n   */\n  public status: string;\n\n  /**\n   * The count of all applications that have been opted in, equivalent to the count\n   * of application local data (AppLocalState objects) stored in this account.\n   */\n  public totalAppsOptedIn: number | bigint;\n\n  /**\n   * The count of all assets that have been opted in, equivalent to the count of\n   * AssetHolding objects held by this account.\n   */\n  public totalAssetsOptedIn: number | bigint;\n\n  /**\n   * For app-accounts only. The total number of bytes allocated for the keys and\n   * values of boxes which belong to the associated application.\n   */\n  public totalBoxBytes: number | bigint;\n\n  /**\n   * For app-accounts only. The total number of boxes which belong to the associated\n   * application.\n   */\n  public totalBoxes: number | bigint;\n\n  /**\n   * The count of all apps (AppParams objects) created by this account.\n   */\n  public totalCreatedApps: number | bigint;\n\n  /**\n   * The count of all assets (AssetParams objects) created by this account.\n   */\n  public totalCreatedAssets: number | bigint;\n\n  /**\n   * (appl) applications local data stored in this account.\n   * Note the raw object uses `map[int] -> AppLocalState` for this type.\n   */\n  public appsLocalState?: ApplicationLocalState[];\n\n  /**\n   * (teap) the sum of all extra application program pages for this account.\n   */\n  public appsTotalExtraPages?: number | bigint;\n\n  /**\n   * (tsch) stores the sum of all of the local schemas and global schemas in this\n   * account.\n   * Note: the raw account uses `StateSchema` for this type.\n   */\n  public appsTotalSchema?: ApplicationStateSchema;\n\n  /**\n   * (asset) assets held by this account.\n   * Note the raw object uses `map[int] -> AssetHolding` for this type.\n   */\n  public assets?: AssetHolding[];\n\n  /**\n   * (spend) the address against which signing should be checked. If empty, the\n   * address of the current account is used. This field can be updated in any\n   * transaction by setting the RekeyTo field.\n   */\n  public authAddr?: string;\n\n  /**\n   * Round during which this account was most recently closed.\n   */\n  public closedAtRound?: number | bigint;\n\n  /**\n   * (appp) parameters of applications created by this account including app global\n   * data.\n   * Note: the raw account uses `map[int] -> AppParams` for this type.\n   */\n  public createdApps?: Application[];\n\n  /**\n   * (apar) parameters of assets created by this account.\n   * Note: the raw account uses `map[int] -> Asset` for this type.\n   */\n  public createdAssets?: Asset[];\n\n  /**\n   * Round during which this account first appeared in a transaction.\n   */\n  public createdAtRound?: number | bigint;\n\n  /**\n   * Whether or not this account is currently closed.\n   */\n  public deleted?: boolean;\n\n  /**\n   * AccountParticipation describes the parameters used by this account in consensus\n   * protocol.\n   */\n  public participation?: AccountParticipation;\n\n  /**\n   * (ebase) used as part of the rewards computation. Only applicable to accounts\n   * which are participating.\n   */\n  public rewardBase?: number | bigint;\n\n  /**\n   * Indicates what type of signature is used by this account, must be one of:\n   * * sig\n   * * msig\n   * * lsig\n   * * or null if unknown\n   */\n  public sigType?: string;\n\n  /**\n   * Creates a new `Account` object.\n   * @param address - the account public key\n   * @param amount - (algo) total number of MicroAlgos in the account\n   * @param amountWithoutPendingRewards - specifies the amount of MicroAlgos in the account, without the pending rewards.\n   * @param pendingRewards - amount of MicroAlgos of pending rewards in this account.\n   * @param rewards - (ern) total rewards of MicroAlgos the account has received, including pending\n   * rewards.\n   * @param round - The round for which this information is relevant.\n   * @param status - (onl) delegation status of the account's MicroAlgos\n   * * Offline - indicates that the associated account is delegated.\n   * * Online - indicates that the associated account used as part of the delegation\n   * pool.\n   * * NotParticipating - indicates that the associated account is neither a\n   * delegator nor a delegate.\n   * @param totalAppsOptedIn - The count of all applications that have been opted in, equivalent to the count\n   * of application local data (AppLocalState objects) stored in this account.\n   * @param totalAssetsOptedIn - The count of all assets that have been opted in, equivalent to the count of\n   * AssetHolding objects held by this account.\n   * @param totalBoxBytes - For app-accounts only. The total number of bytes allocated for the keys and\n   * values of boxes which belong to the associated application.\n   * @param totalBoxes - For app-accounts only. The total number of boxes which belong to the associated\n   * application.\n   * @param totalCreatedApps - The count of all apps (AppParams objects) created by this account.\n   * @param totalCreatedAssets - The count of all assets (AssetParams objects) created by this account.\n   * @param appsLocalState - (appl) applications local data stored in this account.\n   * Note the raw object uses `map[int] -> AppLocalState` for this type.\n   * @param appsTotalExtraPages - (teap) the sum of all extra application program pages for this account.\n   * @param appsTotalSchema - (tsch) stores the sum of all of the local schemas and global schemas in this\n   * account.\n   * Note: the raw account uses `StateSchema` for this type.\n   * @param assets - (asset) assets held by this account.\n   * Note the raw object uses `map[int] -> AssetHolding` for this type.\n   * @param authAddr - (spend) the address against which signing should be checked. If empty, the\n   * address of the current account is used. This field can be updated in any\n   * transaction by setting the RekeyTo field.\n   * @param closedAtRound - Round during which this account was most recently closed.\n   * @param createdApps - (appp) parameters of applications created by this account including app global\n   * data.\n   * Note: the raw account uses `map[int] -> AppParams` for this type.\n   * @param createdAssets - (apar) parameters of assets created by this account.\n   * Note: the raw account uses `map[int] -> Asset` for this type.\n   * @param createdAtRound - Round during which this account first appeared in a transaction.\n   * @param deleted - Whether or not this account is currently closed.\n   * @param participation - AccountParticipation describes the parameters used by this account in consensus\n   * protocol.\n   * @param rewardBase - (ebase) used as part of the rewards computation. Only applicable to accounts\n   * which are participating.\n   * @param sigType - Indicates what type of signature is used by this account, must be one of:\n   * * sig\n   * * msig\n   * * lsig\n   * * or null if unknown\n   */\n  constructor({\n    address,\n    amount,\n    amountWithoutPendingRewards,\n    pendingRewards,\n    rewards,\n    round,\n    status,\n    totalAppsOptedIn,\n    totalAssetsOptedIn,\n    totalBoxBytes,\n    totalBoxes,\n    totalCreatedApps,\n    totalCreatedAssets,\n    appsLocalState,\n    appsTotalExtraPages,\n    appsTotalSchema,\n    assets,\n    authAddr,\n    closedAtRound,\n    createdApps,\n    createdAssets,\n    createdAtRound,\n    deleted,\n    participation,\n    rewardBase,\n    sigType,\n  }: {\n    address: string;\n    amount: number | bigint;\n    amountWithoutPendingRewards: number | bigint;\n    pendingRewards: number | bigint;\n    rewards: number | bigint;\n    round: number | bigint;\n    status: string;\n    totalAppsOptedIn: number | bigint;\n    totalAssetsOptedIn: number | bigint;\n    totalBoxBytes: number | bigint;\n    totalBoxes: number | bigint;\n    totalCreatedApps: number | bigint;\n    totalCreatedAssets: number | bigint;\n    appsLocalState?: ApplicationLocalState[];\n    appsTotalExtraPages?: number | bigint;\n    appsTotalSchema?: ApplicationStateSchema;\n    assets?: AssetHolding[];\n    authAddr?: string;\n    closedAtRound?: number | bigint;\n    createdApps?: Application[];\n    createdAssets?: Asset[];\n    createdAtRound?: number | bigint;\n    deleted?: boolean;\n    participation?: AccountParticipation;\n    rewardBase?: number | bigint;\n    sigType?: string;\n  }) {\n    super();\n    this.address = address;\n    this.amount = amount;\n    this.amountWithoutPendingRewards = amountWithoutPendingRewards;\n    this.pendingRewards = pendingRewards;\n    this.rewards = rewards;\n    this.round = round;\n    this.status = status;\n    this.totalAppsOptedIn = totalAppsOptedIn;\n    this.totalAssetsOptedIn = totalAssetsOptedIn;\n    this.totalBoxBytes = totalBoxBytes;\n    this.totalBoxes = totalBoxes;\n    this.totalCreatedApps = totalCreatedApps;\n    this.totalCreatedAssets = totalCreatedAssets;\n    this.appsLocalState = appsLocalState;\n    this.appsTotalExtraPages = appsTotalExtraPages;\n    this.appsTotalSchema = appsTotalSchema;\n    this.assets = assets;\n    this.authAddr = authAddr;\n    this.closedAtRound = closedAtRound;\n    this.createdApps = createdApps;\n    this.createdAssets = createdAssets;\n    this.createdAtRound = createdAtRound;\n    this.deleted = deleted;\n    this.participation = participation;\n    this.rewardBase = rewardBase;\n    this.sigType = sigType;\n\n    this.attribute_map = {\n      address: 'address',\n      amount: 'amount',\n      amountWithoutPendingRewards: 'amount-without-pending-rewards',\n      pendingRewards: 'pending-rewards',\n      rewards: 'rewards',\n      round: 'round',\n      status: 'status',\n      totalAppsOptedIn: 'total-apps-opted-in',\n      totalAssetsOptedIn: 'total-assets-opted-in',\n      totalBoxBytes: 'total-box-bytes',\n      totalBoxes: 'total-boxes',\n      totalCreatedApps: 'total-created-apps',\n      totalCreatedAssets: 'total-created-assets',\n      appsLocalState: 'apps-local-state',\n      appsTotalExtraPages: 'apps-total-extra-pages',\n      appsTotalSchema: 'apps-total-schema',\n      assets: 'assets',\n      authAddr: 'auth-addr',\n      closedAtRound: 'closed-at-round',\n      createdApps: 'created-apps',\n      createdAssets: 'created-assets',\n      createdAtRound: 'created-at-round',\n      deleted: 'deleted',\n      participation: 'participation',\n      rewardBase: 'reward-base',\n      sigType: 'sig-type',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): Account {\n    /* eslint-disable dot-notation */\n    if (typeof data['address'] === 'undefined')\n      throw new Error(`Response is missing required field 'address': ${data}`);\n    if (typeof data['amount'] === 'undefined')\n      throw new Error(`Response is missing required field 'amount': ${data}`);\n    if (typeof data['amount-without-pending-rewards'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'amount-without-pending-rewards': ${data}`\n      );\n    if (typeof data['pending-rewards'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'pending-rewards': ${data}`\n      );\n    if (typeof data['rewards'] === 'undefined')\n      throw new Error(`Response is missing required field 'rewards': ${data}`);\n    if (typeof data['round'] === 'undefined')\n      throw new Error(`Response is missing required field 'round': ${data}`);\n    if (typeof data['status'] === 'undefined')\n      throw new Error(`Response is missing required field 'status': ${data}`);\n    if (typeof data['total-apps-opted-in'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'total-apps-opted-in': ${data}`\n      );\n    if (typeof data['total-assets-opted-in'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'total-assets-opted-in': ${data}`\n      );\n    if (typeof data['total-box-bytes'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'total-box-bytes': ${data}`\n      );\n    if (typeof data['total-boxes'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'total-boxes': ${data}`\n      );\n    if (typeof data['total-created-apps'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'total-created-apps': ${data}`\n      );\n    if (typeof data['total-created-assets'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'total-created-assets': ${data}`\n      );\n    return new Account({\n      address: data['address'],\n      amount: data['amount'],\n      amountWithoutPendingRewards: data['amount-without-pending-rewards'],\n      pendingRewards: data['pending-rewards'],\n      rewards: data['rewards'],\n      round: data['round'],\n      status: data['status'],\n      totalAppsOptedIn: data['total-apps-opted-in'],\n      totalAssetsOptedIn: data['total-assets-opted-in'],\n      totalBoxBytes: data['total-box-bytes'],\n      totalBoxes: data['total-boxes'],\n      totalCreatedApps: data['total-created-apps'],\n      totalCreatedAssets: data['total-created-assets'],\n      appsLocalState:\n        typeof data['apps-local-state'] !== 'undefined'\n          ? data['apps-local-state'].map(\n              ApplicationLocalState.from_obj_for_encoding\n            )\n          : undefined,\n      appsTotalExtraPages: data['apps-total-extra-pages'],\n      appsTotalSchema:\n        typeof data['apps-total-schema'] !== 'undefined'\n          ? ApplicationStateSchema.from_obj_for_encoding(\n              data['apps-total-schema']\n            )\n          : undefined,\n      assets:\n        typeof data['assets'] !== 'undefined'\n          ? data['assets'].map(AssetHolding.from_obj_for_encoding)\n          : undefined,\n      authAddr: data['auth-addr'],\n      closedAtRound: data['closed-at-round'],\n      createdApps:\n        typeof data['created-apps'] !== 'undefined'\n          ? data['created-apps'].map(Application.from_obj_for_encoding)\n          : undefined,\n      createdAssets:\n        typeof data['created-assets'] !== 'undefined'\n          ? data['created-assets'].map(Asset.from_obj_for_encoding)\n          : undefined,\n      createdAtRound: data['created-at-round'],\n      deleted: data['deleted'],\n      participation:\n        typeof data['participation'] !== 'undefined'\n          ? AccountParticipation.from_obj_for_encoding(data['participation'])\n          : undefined,\n      rewardBase: data['reward-base'],\n      sigType: data['sig-type'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * AccountParticipation describes the parameters used by this account in consensus\n * protocol.\n */\nexport class AccountParticipation extends BaseModel {\n  /**\n   * (sel) Selection public key (if any) currently registered for this round.\n   */\n  public selectionParticipationKey: Uint8Array;\n\n  /**\n   * (voteFst) First round for which this participation is valid.\n   */\n  public voteFirstValid: number | bigint;\n\n  /**\n   * (voteKD) Number of subkeys in each batch of participation keys.\n   */\n  public voteKeyDilution: number | bigint;\n\n  /**\n   * (voteLst) Last round for which this participation is valid.\n   */\n  public voteLastValid: number | bigint;\n\n  /**\n   * (vote) root participation public key (if any) currently registered for this\n   * round.\n   */\n  public voteParticipationKey: Uint8Array;\n\n  /**\n   * (stprf) Root of the state proof key (if any)\n   */\n  public stateProofKey?: Uint8Array;\n\n  /**\n   * Creates a new `AccountParticipation` object.\n   * @param selectionParticipationKey - (sel) Selection public key (if any) currently registered for this round.\n   * @param voteFirstValid - (voteFst) First round for which this participation is valid.\n   * @param voteKeyDilution - (voteKD) Number of subkeys in each batch of participation keys.\n   * @param voteLastValid - (voteLst) Last round for which this participation is valid.\n   * @param voteParticipationKey - (vote) root participation public key (if any) currently registered for this\n   * round.\n   * @param stateProofKey - (stprf) Root of the state proof key (if any)\n   */\n  constructor({\n    selectionParticipationKey,\n    voteFirstValid,\n    voteKeyDilution,\n    voteLastValid,\n    voteParticipationKey,\n    stateProofKey,\n  }: {\n    selectionParticipationKey: string | Uint8Array;\n    voteFirstValid: number | bigint;\n    voteKeyDilution: number | bigint;\n    voteLastValid: number | bigint;\n    voteParticipationKey: string | Uint8Array;\n    stateProofKey?: string | Uint8Array;\n  }) {\n    super();\n    this.selectionParticipationKey =\n      typeof selectionParticipationKey === 'string'\n        ? new Uint8Array(Buffer.from(selectionParticipationKey, 'base64'))\n        : selectionParticipationKey;\n    this.voteFirstValid = voteFirstValid;\n    this.voteKeyDilution = voteKeyDilution;\n    this.voteLastValid = voteLastValid;\n    this.voteParticipationKey =\n      typeof voteParticipationKey === 'string'\n        ? new Uint8Array(Buffer.from(voteParticipationKey, 'base64'))\n        : voteParticipationKey;\n    this.stateProofKey =\n      typeof stateProofKey === 'string'\n        ? new Uint8Array(Buffer.from(stateProofKey, 'base64'))\n        : stateProofKey;\n\n    this.attribute_map = {\n      selectionParticipationKey: 'selection-participation-key',\n      voteFirstValid: 'vote-first-valid',\n      voteKeyDilution: 'vote-key-dilution',\n      voteLastValid: 'vote-last-valid',\n      voteParticipationKey: 'vote-participation-key',\n      stateProofKey: 'state-proof-key',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): AccountParticipation {\n    /* eslint-disable dot-notation */\n    if (typeof data['selection-participation-key'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'selection-participation-key': ${data}`\n      );\n    if (typeof data['vote-first-valid'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'vote-first-valid': ${data}`\n      );\n    if (typeof data['vote-key-dilution'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'vote-key-dilution': ${data}`\n      );\n    if (typeof data['vote-last-valid'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'vote-last-valid': ${data}`\n      );\n    if (typeof data['vote-participation-key'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'vote-participation-key': ${data}`\n      );\n    return new AccountParticipation({\n      selectionParticipationKey: data['selection-participation-key'],\n      voteFirstValid: data['vote-first-valid'],\n      voteKeyDilution: data['vote-key-dilution'],\n      voteLastValid: data['vote-last-valid'],\n      voteParticipationKey: data['vote-participation-key'],\n      stateProofKey: data['state-proof-key'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n *\n */\nexport class AccountResponse extends BaseModel {\n  /**\n   * Account information at a given round.\n   * Definition:\n   * data/basics/userBalance.go : AccountData\n   */\n  public account: Account;\n\n  /**\n   * Round at which the results were computed.\n   */\n  public currentRound: number | bigint;\n\n  /**\n   * Creates a new `AccountResponse` object.\n   * @param account - Account information at a given round.\n   * Definition:\n   * data/basics/userBalance.go : AccountData\n   * @param currentRound - Round at which the results were computed.\n   */\n  constructor({\n    account,\n    currentRound,\n  }: {\n    account: Account;\n    currentRound: number | bigint;\n  }) {\n    super();\n    this.account = account;\n    this.currentRound = currentRound;\n\n    this.attribute_map = {\n      account: 'account',\n      currentRound: 'current-round',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): AccountResponse {\n    /* eslint-disable dot-notation */\n    if (typeof data['account'] === 'undefined')\n      throw new Error(`Response is missing required field 'account': ${data}`);\n    if (typeof data['current-round'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'current-round': ${data}`\n      );\n    return new AccountResponse({\n      account: Account.from_obj_for_encoding(data['account']),\n      currentRound: data['current-round'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Application state delta.\n */\nexport class AccountStateDelta extends BaseModel {\n  public address: string;\n\n  /**\n   * Application state delta.\n   */\n  public delta: EvalDeltaKeyValue[];\n\n  /**\n   * Creates a new `AccountStateDelta` object.\n   * @param address -\n   * @param delta - Application state delta.\n   */\n  constructor({\n    address,\n    delta,\n  }: {\n    address: string;\n    delta: EvalDeltaKeyValue[];\n  }) {\n    super();\n    this.address = address;\n    this.delta = delta;\n\n    this.attribute_map = {\n      address: 'address',\n      delta: 'delta',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): AccountStateDelta {\n    /* eslint-disable dot-notation */\n    if (typeof data['address'] === 'undefined')\n      throw new Error(`Response is missing required field 'address': ${data}`);\n    if (!Array.isArray(data['delta']))\n      throw new Error(\n        `Response is missing required array field 'delta': ${data}`\n      );\n    return new AccountStateDelta({\n      address: data['address'],\n      delta: data['delta'].map(EvalDeltaKeyValue.from_obj_for_encoding),\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n *\n */\nexport class AccountsResponse extends BaseModel {\n  public accounts: Account[];\n\n  /**\n   * Round at which the results were computed.\n   */\n  public currentRound: number | bigint;\n\n  /**\n   * Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  public nextToken?: string;\n\n  /**\n   * Creates a new `AccountsResponse` object.\n   * @param accounts -\n   * @param currentRound - Round at which the results were computed.\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  constructor({\n    accounts,\n    currentRound,\n    nextToken,\n  }: {\n    accounts: Account[];\n    currentRound: number | bigint;\n    nextToken?: string;\n  }) {\n    super();\n    this.accounts = accounts;\n    this.currentRound = currentRound;\n    this.nextToken = nextToken;\n\n    this.attribute_map = {\n      accounts: 'accounts',\n      currentRound: 'current-round',\n      nextToken: 'next-token',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): AccountsResponse {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['accounts']))\n      throw new Error(\n        `Response is missing required array field 'accounts': ${data}`\n      );\n    if (typeof data['current-round'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'current-round': ${data}`\n      );\n    return new AccountsResponse({\n      accounts: data['accounts'].map(Account.from_obj_for_encoding),\n      currentRound: data['current-round'],\n      nextToken: data['next-token'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Application index and its parameters\n */\nexport class Application extends BaseModel {\n  /**\n   * (appidx) application index.\n   */\n  public id: number | bigint;\n\n  /**\n   * (appparams) application parameters.\n   */\n  public params: ApplicationParams;\n\n  /**\n   * Round when this application was created.\n   */\n  public createdAtRound?: number | bigint;\n\n  /**\n   * Whether or not this application is currently deleted.\n   */\n  public deleted?: boolean;\n\n  /**\n   * Round when this application was deleted.\n   */\n  public deletedAtRound?: number | bigint;\n\n  /**\n   * Creates a new `Application` object.\n   * @param id - (appidx) application index.\n   * @param params - (appparams) application parameters.\n   * @param createdAtRound - Round when this application was created.\n   * @param deleted - Whether or not this application is currently deleted.\n   * @param deletedAtRound - Round when this application was deleted.\n   */\n  constructor({\n    id,\n    params,\n    createdAtRound,\n    deleted,\n    deletedAtRound,\n  }: {\n    id: number | bigint;\n    params: ApplicationParams;\n    createdAtRound?: number | bigint;\n    deleted?: boolean;\n    deletedAtRound?: number | bigint;\n  }) {\n    super();\n    this.id = id;\n    this.params = params;\n    this.createdAtRound = createdAtRound;\n    this.deleted = deleted;\n    this.deletedAtRound = deletedAtRound;\n\n    this.attribute_map = {\n      id: 'id',\n      params: 'params',\n      createdAtRound: 'created-at-round',\n      deleted: 'deleted',\n      deletedAtRound: 'deleted-at-round',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): Application {\n    /* eslint-disable dot-notation */\n    if (typeof data['id'] === 'undefined')\n      throw new Error(`Response is missing required field 'id': ${data}`);\n    if (typeof data['params'] === 'undefined')\n      throw new Error(`Response is missing required field 'params': ${data}`);\n    return new Application({\n      id: data['id'],\n      params: ApplicationParams.from_obj_for_encoding(data['params']),\n      createdAtRound: data['created-at-round'],\n      deleted: data['deleted'],\n      deletedAtRound: data['deleted-at-round'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Stores local state associated with an application.\n */\nexport class ApplicationLocalState extends BaseModel {\n  /**\n   * The application which this local state is for.\n   */\n  public id: number | bigint;\n\n  /**\n   * (hsch) schema.\n   */\n  public schema: ApplicationStateSchema;\n\n  /**\n   * Round when account closed out of the application.\n   */\n  public closedOutAtRound?: number | bigint;\n\n  /**\n   * Whether or not the application local state is currently deleted from its\n   * account.\n   */\n  public deleted?: boolean;\n\n  /**\n   * (tkv) storage.\n   */\n  public keyValue?: TealKeyValue[];\n\n  /**\n   * Round when the account opted into the application.\n   */\n  public optedInAtRound?: number | bigint;\n\n  /**\n   * Creates a new `ApplicationLocalState` object.\n   * @param id - The application which this local state is for.\n   * @param schema - (hsch) schema.\n   * @param closedOutAtRound - Round when account closed out of the application.\n   * @param deleted - Whether or not the application local state is currently deleted from its\n   * account.\n   * @param keyValue - (tkv) storage.\n   * @param optedInAtRound - Round when the account opted into the application.\n   */\n  constructor({\n    id,\n    schema,\n    closedOutAtRound,\n    deleted,\n    keyValue,\n    optedInAtRound,\n  }: {\n    id: number | bigint;\n    schema: ApplicationStateSchema;\n    closedOutAtRound?: number | bigint;\n    deleted?: boolean;\n    keyValue?: TealKeyValue[];\n    optedInAtRound?: number | bigint;\n  }) {\n    super();\n    this.id = id;\n    this.schema = schema;\n    this.closedOutAtRound = closedOutAtRound;\n    this.deleted = deleted;\n    this.keyValue = keyValue;\n    this.optedInAtRound = optedInAtRound;\n\n    this.attribute_map = {\n      id: 'id',\n      schema: 'schema',\n      closedOutAtRound: 'closed-out-at-round',\n      deleted: 'deleted',\n      keyValue: 'key-value',\n      optedInAtRound: 'opted-in-at-round',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): ApplicationLocalState {\n    /* eslint-disable dot-notation */\n    if (typeof data['id'] === 'undefined')\n      throw new Error(`Response is missing required field 'id': ${data}`);\n    if (typeof data['schema'] === 'undefined')\n      throw new Error(`Response is missing required field 'schema': ${data}`);\n    return new ApplicationLocalState({\n      id: data['id'],\n      schema: ApplicationStateSchema.from_obj_for_encoding(data['schema']),\n      closedOutAtRound: data['closed-out-at-round'],\n      deleted: data['deleted'],\n      keyValue:\n        typeof data['key-value'] !== 'undefined'\n          ? data['key-value'].map(TealKeyValue.from_obj_for_encoding)\n          : undefined,\n      optedInAtRound: data['opted-in-at-round'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n *\n */\nexport class ApplicationLocalStatesResponse extends BaseModel {\n  public appsLocalStates: ApplicationLocalState[];\n\n  /**\n   * Round at which the results were computed.\n   */\n  public currentRound: number | bigint;\n\n  /**\n   * Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  public nextToken?: string;\n\n  /**\n   * Creates a new `ApplicationLocalStatesResponse` object.\n   * @param appsLocalStates -\n   * @param currentRound - Round at which the results were computed.\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  constructor({\n    appsLocalStates,\n    currentRound,\n    nextToken,\n  }: {\n    appsLocalStates: ApplicationLocalState[];\n    currentRound: number | bigint;\n    nextToken?: string;\n  }) {\n    super();\n    this.appsLocalStates = appsLocalStates;\n    this.currentRound = currentRound;\n    this.nextToken = nextToken;\n\n    this.attribute_map = {\n      appsLocalStates: 'apps-local-states',\n      currentRound: 'current-round',\n      nextToken: 'next-token',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): ApplicationLocalStatesResponse {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['apps-local-states']))\n      throw new Error(\n        `Response is missing required array field 'apps-local-states': ${data}`\n      );\n    if (typeof data['current-round'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'current-round': ${data}`\n      );\n    return new ApplicationLocalStatesResponse({\n      appsLocalStates: data['apps-local-states'].map(\n        ApplicationLocalState.from_obj_for_encoding\n      ),\n      currentRound: data['current-round'],\n      nextToken: data['next-token'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Stores the global information associated with an application.\n */\nexport class ApplicationLogData extends BaseModel {\n  /**\n   * (lg) Logs for the application being executed by the transaction.\n   */\n  public logs: Uint8Array[];\n\n  /**\n   * Transaction ID\n   */\n  public txid: string;\n\n  /**\n   * Creates a new `ApplicationLogData` object.\n   * @param logs - (lg) Logs for the application being executed by the transaction.\n   * @param txid - Transaction ID\n   */\n  constructor({ logs, txid }: { logs: Uint8Array[]; txid: string }) {\n    super();\n    this.logs = logs;\n    this.txid = txid;\n\n    this.attribute_map = {\n      logs: 'logs',\n      txid: 'txid',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): ApplicationLogData {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['logs']))\n      throw new Error(\n        `Response is missing required array field 'logs': ${data}`\n      );\n    if (typeof data['txid'] === 'undefined')\n      throw new Error(`Response is missing required field 'txid': ${data}`);\n    return new ApplicationLogData({\n      logs: data['logs'],\n      txid: data['txid'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n *\n */\nexport class ApplicationLogsResponse extends BaseModel {\n  /**\n   * (appidx) application index.\n   */\n  public applicationId: number | bigint;\n\n  /**\n   * Round at which the results were computed.\n   */\n  public currentRound: number | bigint;\n\n  public logData?: ApplicationLogData[];\n\n  /**\n   * Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  public nextToken?: string;\n\n  /**\n   * Creates a new `ApplicationLogsResponse` object.\n   * @param applicationId - (appidx) application index.\n   * @param currentRound - Round at which the results were computed.\n   * @param logData -\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  constructor({\n    applicationId,\n    currentRound,\n    logData,\n    nextToken,\n  }: {\n    applicationId: number | bigint;\n    currentRound: number | bigint;\n    logData?: ApplicationLogData[];\n    nextToken?: string;\n  }) {\n    super();\n    this.applicationId = applicationId;\n    this.currentRound = currentRound;\n    this.logData = logData;\n    this.nextToken = nextToken;\n\n    this.attribute_map = {\n      applicationId: 'application-id',\n      currentRound: 'current-round',\n      logData: 'log-data',\n      nextToken: 'next-token',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): ApplicationLogsResponse {\n    /* eslint-disable dot-notation */\n    if (typeof data['application-id'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'application-id': ${data}`\n      );\n    if (typeof data['current-round'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'current-round': ${data}`\n      );\n    return new ApplicationLogsResponse({\n      applicationId: data['application-id'],\n      currentRound: data['current-round'],\n      logData:\n        typeof data['log-data'] !== 'undefined'\n          ? data['log-data'].map(ApplicationLogData.from_obj_for_encoding)\n          : undefined,\n      nextToken: data['next-token'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Stores the global information associated with an application.\n */\nexport class ApplicationParams extends BaseModel {\n  /**\n   * (approv) approval program.\n   */\n  public approvalProgram: Uint8Array;\n\n  /**\n   * (clearp) approval program.\n   */\n  public clearStateProgram: Uint8Array;\n\n  /**\n   * The address that created this application. This is the address where the\n   * parameters and global state for this application can be found.\n   */\n  public creator?: string;\n\n  /**\n   * (epp) the amount of extra program pages available to this app.\n   */\n  public extraProgramPages?: number | bigint;\n\n  /**\n   * [\\gs) global schema\n   */\n  public globalState?: TealKeyValue[];\n\n  /**\n   * [\\gsch) global schema\n   */\n  public globalStateSchema?: ApplicationStateSchema;\n\n  /**\n   * [\\lsch) local schema\n   */\n  public localStateSchema?: ApplicationStateSchema;\n\n  /**\n   * Creates a new `ApplicationParams` object.\n   * @param approvalProgram - (approv) approval program.\n   * @param clearStateProgram - (clearp) approval program.\n   * @param creator - The address that created this application. This is the address where the\n   * parameters and global state for this application can be found.\n   * @param extraProgramPages - (epp) the amount of extra program pages available to this app.\n   * @param globalState - [\\gs) global schema\n   * @param globalStateSchema - [\\gsch) global schema\n   * @param localStateSchema - [\\lsch) local schema\n   */\n  constructor({\n    approvalProgram,\n    clearStateProgram,\n    creator,\n    extraProgramPages,\n    globalState,\n    globalStateSchema,\n    localStateSchema,\n  }: {\n    approvalProgram: string | Uint8Array;\n    clearStateProgram: string | Uint8Array;\n    creator?: string;\n    extraProgramPages?: number | bigint;\n    globalState?: TealKeyValue[];\n    globalStateSchema?: ApplicationStateSchema;\n    localStateSchema?: ApplicationStateSchema;\n  }) {\n    super();\n    this.approvalProgram =\n      typeof approvalProgram === 'string'\n        ? new Uint8Array(Buffer.from(approvalProgram, 'base64'))\n        : approvalProgram;\n    this.clearStateProgram =\n      typeof clearStateProgram === 'string'\n        ? new Uint8Array(Buffer.from(clearStateProgram, 'base64'))\n        : clearStateProgram;\n    this.creator = creator;\n    this.extraProgramPages = extraProgramPages;\n    this.globalState = globalState;\n    this.globalStateSchema = globalStateSchema;\n    this.localStateSchema = localStateSchema;\n\n    this.attribute_map = {\n      approvalProgram: 'approval-program',\n      clearStateProgram: 'clear-state-program',\n      creator: 'creator',\n      extraProgramPages: 'extra-program-pages',\n      globalState: 'global-state',\n      globalStateSchema: 'global-state-schema',\n      localStateSchema: 'local-state-schema',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): ApplicationParams {\n    /* eslint-disable dot-notation */\n    if (typeof data['approval-program'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'approval-program': ${data}`\n      );\n    if (typeof data['clear-state-program'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'clear-state-program': ${data}`\n      );\n    return new ApplicationParams({\n      approvalProgram: data['approval-program'],\n      clearStateProgram: data['clear-state-program'],\n      creator: data['creator'],\n      extraProgramPages: data['extra-program-pages'],\n      globalState:\n        typeof data['global-state'] !== 'undefined'\n          ? data['global-state'].map(TealKeyValue.from_obj_for_encoding)\n          : undefined,\n      globalStateSchema:\n        typeof data['global-state-schema'] !== 'undefined'\n          ? ApplicationStateSchema.from_obj_for_encoding(\n              data['global-state-schema']\n            )\n          : undefined,\n      localStateSchema:\n        typeof data['local-state-schema'] !== 'undefined'\n          ? ApplicationStateSchema.from_obj_for_encoding(\n              data['local-state-schema']\n            )\n          : undefined,\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n *\n */\nexport class ApplicationResponse extends BaseModel {\n  /**\n   * Round at which the results were computed.\n   */\n  public currentRound: number | bigint;\n\n  /**\n   * Application index and its parameters\n   */\n  public application?: Application;\n\n  /**\n   * Creates a new `ApplicationResponse` object.\n   * @param currentRound - Round at which the results were computed.\n   * @param application - Application index and its parameters\n   */\n  constructor({\n    currentRound,\n    application,\n  }: {\n    currentRound: number | bigint;\n    application?: Application;\n  }) {\n    super();\n    this.currentRound = currentRound;\n    this.application = application;\n\n    this.attribute_map = {\n      currentRound: 'current-round',\n      application: 'application',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): ApplicationResponse {\n    /* eslint-disable dot-notation */\n    if (typeof data['current-round'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'current-round': ${data}`\n      );\n    return new ApplicationResponse({\n      currentRound: data['current-round'],\n      application:\n        typeof data['application'] !== 'undefined'\n          ? Application.from_obj_for_encoding(data['application'])\n          : undefined,\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Specifies maximums on the number of each type that may be stored.\n */\nexport class ApplicationStateSchema extends BaseModel {\n  /**\n   * (nbs) num of byte slices.\n   */\n  public numByteSlice: number | bigint;\n\n  /**\n   * (nui) num of uints.\n   */\n  public numUint: number | bigint;\n\n  /**\n   * Creates a new `ApplicationStateSchema` object.\n   * @param numByteSlice - (nbs) num of byte slices.\n   * @param numUint - (nui) num of uints.\n   */\n  constructor({\n    numByteSlice,\n    numUint,\n  }: {\n    numByteSlice: number | bigint;\n    numUint: number | bigint;\n  }) {\n    super();\n    this.numByteSlice = numByteSlice;\n    this.numUint = numUint;\n\n    this.attribute_map = {\n      numByteSlice: 'num-byte-slice',\n      numUint: 'num-uint',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): ApplicationStateSchema {\n    /* eslint-disable dot-notation */\n    if (typeof data['num-byte-slice'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'num-byte-slice': ${data}`\n      );\n    if (typeof data['num-uint'] === 'undefined')\n      throw new Error(`Response is missing required field 'num-uint': ${data}`);\n    return new ApplicationStateSchema({\n      numByteSlice: data['num-byte-slice'],\n      numUint: data['num-uint'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n *\n */\nexport class ApplicationsResponse extends BaseModel {\n  public applications: Application[];\n\n  /**\n   * Round at which the results were computed.\n   */\n  public currentRound: number | bigint;\n\n  /**\n   * Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  public nextToken?: string;\n\n  /**\n   * Creates a new `ApplicationsResponse` object.\n   * @param applications -\n   * @param currentRound - Round at which the results were computed.\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  constructor({\n    applications,\n    currentRound,\n    nextToken,\n  }: {\n    applications: Application[];\n    currentRound: number | bigint;\n    nextToken?: string;\n  }) {\n    super();\n    this.applications = applications;\n    this.currentRound = currentRound;\n    this.nextToken = nextToken;\n\n    this.attribute_map = {\n      applications: 'applications',\n      currentRound: 'current-round',\n      nextToken: 'next-token',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): ApplicationsResponse {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['applications']))\n      throw new Error(\n        `Response is missing required array field 'applications': ${data}`\n      );\n    if (typeof data['current-round'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'current-round': ${data}`\n      );\n    return new ApplicationsResponse({\n      applications: data['applications'].map(Application.from_obj_for_encoding),\n      currentRound: data['current-round'],\n      nextToken: data['next-token'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Specifies both the unique identifier and the parameters for an asset\n */\nexport class Asset extends BaseModel {\n  /**\n   * unique asset identifier\n   */\n  public index: number | bigint;\n\n  /**\n   * AssetParams specifies the parameters for an asset.\n   * (apar) when part of an AssetConfig transaction.\n   * Definition:\n   * data/transactions/asset.go : AssetParams\n   */\n  public params: AssetParams;\n\n  /**\n   * Round during which this asset was created.\n   */\n  public createdAtRound?: number | bigint;\n\n  /**\n   * Whether or not this asset is currently deleted.\n   */\n  public deleted?: boolean;\n\n  /**\n   * Round during which this asset was destroyed.\n   */\n  public destroyedAtRound?: number | bigint;\n\n  /**\n   * Creates a new `Asset` object.\n   * @param index - unique asset identifier\n   * @param params - AssetParams specifies the parameters for an asset.\n   * (apar) when part of an AssetConfig transaction.\n   * Definition:\n   * data/transactions/asset.go : AssetParams\n   * @param createdAtRound - Round during which this asset was created.\n   * @param deleted - Whether or not this asset is currently deleted.\n   * @param destroyedAtRound - Round during which this asset was destroyed.\n   */\n  constructor({\n    index,\n    params,\n    createdAtRound,\n    deleted,\n    destroyedAtRound,\n  }: {\n    index: number | bigint;\n    params: AssetParams;\n    createdAtRound?: number | bigint;\n    deleted?: boolean;\n    destroyedAtRound?: number | bigint;\n  }) {\n    super();\n    this.index = index;\n    this.params = params;\n    this.createdAtRound = createdAtRound;\n    this.deleted = deleted;\n    this.destroyedAtRound = destroyedAtRound;\n\n    this.attribute_map = {\n      index: 'index',\n      params: 'params',\n      createdAtRound: 'created-at-round',\n      deleted: 'deleted',\n      destroyedAtRound: 'destroyed-at-round',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): Asset {\n    /* eslint-disable dot-notation */\n    if (typeof data['index'] === 'undefined')\n      throw new Error(`Response is missing required field 'index': ${data}`);\n    if (typeof data['params'] === 'undefined')\n      throw new Error(`Response is missing required field 'params': ${data}`);\n    return new Asset({\n      index: data['index'],\n      params: AssetParams.from_obj_for_encoding(data['params']),\n      createdAtRound: data['created-at-round'],\n      deleted: data['deleted'],\n      destroyedAtRound: data['destroyed-at-round'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n *\n */\nexport class AssetBalancesResponse extends BaseModel {\n  public balances: MiniAssetHolding[];\n\n  /**\n   * Round at which the results were computed.\n   */\n  public currentRound: number | bigint;\n\n  /**\n   * Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  public nextToken?: string;\n\n  /**\n   * Creates a new `AssetBalancesResponse` object.\n   * @param balances -\n   * @param currentRound - Round at which the results were computed.\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  constructor({\n    balances,\n    currentRound,\n    nextToken,\n  }: {\n    balances: MiniAssetHolding[];\n    currentRound: number | bigint;\n    nextToken?: string;\n  }) {\n    super();\n    this.balances = balances;\n    this.currentRound = currentRound;\n    this.nextToken = nextToken;\n\n    this.attribute_map = {\n      balances: 'balances',\n      currentRound: 'current-round',\n      nextToken: 'next-token',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): AssetBalancesResponse {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['balances']))\n      throw new Error(\n        `Response is missing required array field 'balances': ${data}`\n      );\n    if (typeof data['current-round'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'current-round': ${data}`\n      );\n    return new AssetBalancesResponse({\n      balances: data['balances'].map(MiniAssetHolding.from_obj_for_encoding),\n      currentRound: data['current-round'],\n      nextToken: data['next-token'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Describes an asset held by an account.\n * Definition:\n * data/basics/userBalance.go : AssetHolding\n */\nexport class AssetHolding extends BaseModel {\n  /**\n   * (a) number of units held.\n   */\n  public amount: number | bigint;\n\n  /**\n   * Asset ID of the holding.\n   */\n  public assetId: number | bigint;\n\n  /**\n   * (f) whether or not the holding is frozen.\n   */\n  public isFrozen: boolean;\n\n  /**\n   * Whether or not the asset holding is currently deleted from its account.\n   */\n  public deleted?: boolean;\n\n  /**\n   * Round during which the account opted into this asset holding.\n   */\n  public optedInAtRound?: number | bigint;\n\n  /**\n   * Round during which the account opted out of this asset holding.\n   */\n  public optedOutAtRound?: number | bigint;\n\n  /**\n   * Creates a new `AssetHolding` object.\n   * @param amount - (a) number of units held.\n   * @param assetId - Asset ID of the holding.\n   * @param isFrozen - (f) whether or not the holding is frozen.\n   * @param deleted - Whether or not the asset holding is currently deleted from its account.\n   * @param optedInAtRound - Round during which the account opted into this asset holding.\n   * @param optedOutAtRound - Round during which the account opted out of this asset holding.\n   */\n  constructor({\n    amount,\n    assetId,\n    isFrozen,\n    deleted,\n    optedInAtRound,\n    optedOutAtRound,\n  }: {\n    amount: number | bigint;\n    assetId: number | bigint;\n    isFrozen: boolean;\n    deleted?: boolean;\n    optedInAtRound?: number | bigint;\n    optedOutAtRound?: number | bigint;\n  }) {\n    super();\n    this.amount = amount;\n    this.assetId = assetId;\n    this.isFrozen = isFrozen;\n    this.deleted = deleted;\n    this.optedInAtRound = optedInAtRound;\n    this.optedOutAtRound = optedOutAtRound;\n\n    this.attribute_map = {\n      amount: 'amount',\n      assetId: 'asset-id',\n      isFrozen: 'is-frozen',\n      deleted: 'deleted',\n      optedInAtRound: 'opted-in-at-round',\n      optedOutAtRound: 'opted-out-at-round',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): AssetHolding {\n    /* eslint-disable dot-notation */\n    if (typeof data['amount'] === 'undefined')\n      throw new Error(`Response is missing required field 'amount': ${data}`);\n    if (typeof data['asset-id'] === 'undefined')\n      throw new Error(`Response is missing required field 'asset-id': ${data}`);\n    if (typeof data['is-frozen'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'is-frozen': ${data}`\n      );\n    return new AssetHolding({\n      amount: data['amount'],\n      assetId: data['asset-id'],\n      isFrozen: data['is-frozen'],\n      deleted: data['deleted'],\n      optedInAtRound: data['opted-in-at-round'],\n      optedOutAtRound: data['opted-out-at-round'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n *\n */\nexport class AssetHoldingsResponse extends BaseModel {\n  public assets: AssetHolding[];\n\n  /**\n   * Round at which the results were computed.\n   */\n  public currentRound: number | bigint;\n\n  /**\n   * Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  public nextToken?: string;\n\n  /**\n   * Creates a new `AssetHoldingsResponse` object.\n   * @param assets -\n   * @param currentRound - Round at which the results were computed.\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  constructor({\n    assets,\n    currentRound,\n    nextToken,\n  }: {\n    assets: AssetHolding[];\n    currentRound: number | bigint;\n    nextToken?: string;\n  }) {\n    super();\n    this.assets = assets;\n    this.currentRound = currentRound;\n    this.nextToken = nextToken;\n\n    this.attribute_map = {\n      assets: 'assets',\n      currentRound: 'current-round',\n      nextToken: 'next-token',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): AssetHoldingsResponse {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['assets']))\n      throw new Error(\n        `Response is missing required array field 'assets': ${data}`\n      );\n    if (typeof data['current-round'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'current-round': ${data}`\n      );\n    return new AssetHoldingsResponse({\n      assets: data['assets'].map(AssetHolding.from_obj_for_encoding),\n      currentRound: data['current-round'],\n      nextToken: data['next-token'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * AssetParams specifies the parameters for an asset.\n * (apar) when part of an AssetConfig transaction.\n * Definition:\n * data/transactions/asset.go : AssetParams\n */\nexport class AssetParams extends BaseModel {\n  /**\n   * The address that created this asset. This is the address where the parameters\n   * for this asset can be found, and also the address where unwanted asset units can\n   * be sent in the worst case.\n   */\n  public creator: string;\n\n  /**\n   * (dc) The number of digits to use after the decimal point when displaying this\n   * asset. If 0, the asset is not divisible. If 1, the base unit of the asset is in\n   * tenths. If 2, the base unit of the asset is in hundredths, and so on. This value\n   * must be between 0 and 19 (inclusive).\n   */\n  public decimals: number | bigint;\n\n  /**\n   * (t) The total number of units of this asset.\n   */\n  public total: number | bigint;\n\n  /**\n   * (c) Address of account used to clawback holdings of this asset. If empty,\n   * clawback is not permitted.\n   */\n  public clawback?: string;\n\n  /**\n   * (df) Whether holdings of this asset are frozen by default.\n   */\n  public defaultFrozen?: boolean;\n\n  /**\n   * (f) Address of account used to freeze holdings of this asset. If empty, freezing\n   * is not permitted.\n   */\n  public freeze?: string;\n\n  /**\n   * (m) Address of account used to manage the keys of this asset and to destroy it.\n   */\n  public manager?: string;\n\n  /**\n   * (am) A commitment to some unspecified asset metadata. The format of this\n   * metadata is up to the application.\n   */\n  public metadataHash?: Uint8Array;\n\n  /**\n   * (an) Name of this asset, as supplied by the creator. Included only when the\n   * asset name is composed of printable utf-8 characters.\n   */\n  public name?: string;\n\n  /**\n   * Base64 encoded name of this asset, as supplied by the creator.\n   */\n  public nameB64?: Uint8Array;\n\n  /**\n   * (r) Address of account holding reserve (non-minted) units of this asset.\n   */\n  public reserve?: string;\n\n  /**\n   * (un) Name of a unit of this asset, as supplied by the creator. Included only\n   * when the name of a unit of this asset is composed of printable utf-8 characters.\n   */\n  public unitName?: string;\n\n  /**\n   * Base64 encoded name of a unit of this asset, as supplied by the creator.\n   */\n  public unitNameB64?: Uint8Array;\n\n  /**\n   * (au) URL where more information about the asset can be retrieved. Included only\n   * when the URL is composed of printable utf-8 characters.\n   */\n  public url?: string;\n\n  /**\n   * Base64 encoded URL where more information about the asset can be retrieved.\n   */\n  public urlB64?: Uint8Array;\n\n  /**\n   * Creates a new `AssetParams` object.\n   * @param creator - The address that created this asset. This is the address where the parameters\n   * for this asset can be found, and also the address where unwanted asset units can\n   * be sent in the worst case.\n   * @param decimals - (dc) The number of digits to use after the decimal point when displaying this\n   * asset. If 0, the asset is not divisible. If 1, the base unit of the asset is in\n   * tenths. If 2, the base unit of the asset is in hundredths, and so on. This value\n   * must be between 0 and 19 (inclusive).\n   * @param total - (t) The total number of units of this asset.\n   * @param clawback - (c) Address of account used to clawback holdings of this asset. If empty,\n   * clawback is not permitted.\n   * @param defaultFrozen - (df) Whether holdings of this asset are frozen by default.\n   * @param freeze - (f) Address of account used to freeze holdings of this asset. If empty, freezing\n   * is not permitted.\n   * @param manager - (m) Address of account used to manage the keys of this asset and to destroy it.\n   * @param metadataHash - (am) A commitment to some unspecified asset metadata. The format of this\n   * metadata is up to the application.\n   * @param name - (an) Name of this asset, as supplied by the creator. Included only when the\n   * asset name is composed of printable utf-8 characters.\n   * @param nameB64 - Base64 encoded name of this asset, as supplied by the creator.\n   * @param reserve - (r) Address of account holding reserve (non-minted) units of this asset.\n   * @param unitName - (un) Name of a unit of this asset, as supplied by the creator. Included only\n   * when the name of a unit of this asset is composed of printable utf-8 characters.\n   * @param unitNameB64 - Base64 encoded name of a unit of this asset, as supplied by the creator.\n   * @param url - (au) URL where more information about the asset can be retrieved. Included only\n   * when the URL is composed of printable utf-8 characters.\n   * @param urlB64 - Base64 encoded URL where more information about the asset can be retrieved.\n   */\n  constructor({\n    creator,\n    decimals,\n    total,\n    clawback,\n    defaultFrozen,\n    freeze,\n    manager,\n    metadataHash,\n    name,\n    nameB64,\n    reserve,\n    unitName,\n    unitNameB64,\n    url,\n    urlB64,\n  }: {\n    creator: string;\n    decimals: number | bigint;\n    total: number | bigint;\n    clawback?: string;\n    defaultFrozen?: boolean;\n    freeze?: string;\n    manager?: string;\n    metadataHash?: string | Uint8Array;\n    name?: string;\n    nameB64?: string | Uint8Array;\n    reserve?: string;\n    unitName?: string;\n    unitNameB64?: string | Uint8Array;\n    url?: string;\n    urlB64?: string | Uint8Array;\n  }) {\n    super();\n    this.creator = creator;\n    this.decimals = decimals;\n    this.total = total;\n    this.clawback = clawback;\n    this.defaultFrozen = defaultFrozen;\n    this.freeze = freeze;\n    this.manager = manager;\n    this.metadataHash =\n      typeof metadataHash === 'string'\n        ? new Uint8Array(Buffer.from(metadataHash, 'base64'))\n        : metadataHash;\n    this.name = name;\n    this.nameB64 =\n      typeof nameB64 === 'string'\n        ? new Uint8Array(Buffer.from(nameB64, 'base64'))\n        : nameB64;\n    this.reserve = reserve;\n    this.unitName = unitName;\n    this.unitNameB64 =\n      typeof unitNameB64 === 'string'\n        ? new Uint8Array(Buffer.from(unitNameB64, 'base64'))\n        : unitNameB64;\n    this.url = url;\n    this.urlB64 =\n      typeof urlB64 === 'string'\n        ? new Uint8Array(Buffer.from(urlB64, 'base64'))\n        : urlB64;\n\n    this.attribute_map = {\n      creator: 'creator',\n      decimals: 'decimals',\n      total: 'total',\n      clawback: 'clawback',\n      defaultFrozen: 'default-frozen',\n      freeze: 'freeze',\n      manager: 'manager',\n      metadataHash: 'metadata-hash',\n      name: 'name',\n      nameB64: 'name-b64',\n      reserve: 'reserve',\n      unitName: 'unit-name',\n      unitNameB64: 'unit-name-b64',\n      url: 'url',\n      urlB64: 'url-b64',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): AssetParams {\n    /* eslint-disable dot-notation */\n    if (typeof data['creator'] === 'undefined')\n      throw new Error(`Response is missing required field 'creator': ${data}`);\n    if (typeof data['decimals'] === 'undefined')\n      throw new Error(`Response is missing required field 'decimals': ${data}`);\n    if (typeof data['total'] === 'undefined')\n      throw new Error(`Response is missing required field 'total': ${data}`);\n    return new AssetParams({\n      creator: data['creator'],\n      decimals: data['decimals'],\n      total: data['total'],\n      clawback: data['clawback'],\n      defaultFrozen: data['default-frozen'],\n      freeze: data['freeze'],\n      manager: data['manager'],\n      metadataHash: data['metadata-hash'],\n      name: data['name'],\n      nameB64: data['name-b64'],\n      reserve: data['reserve'],\n      unitName: data['unit-name'],\n      unitNameB64: data['unit-name-b64'],\n      url: data['url'],\n      urlB64: data['url-b64'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n *\n */\nexport class AssetResponse extends BaseModel {\n  /**\n   * Specifies both the unique identifier and the parameters for an asset\n   */\n  public asset: Asset;\n\n  /**\n   * Round at which the results were computed.\n   */\n  public currentRound: number | bigint;\n\n  /**\n   * Creates a new `AssetResponse` object.\n   * @param asset - Specifies both the unique identifier and the parameters for an asset\n   * @param currentRound - Round at which the results were computed.\n   */\n  constructor({\n    asset,\n    currentRound,\n  }: {\n    asset: Asset;\n    currentRound: number | bigint;\n  }) {\n    super();\n    this.asset = asset;\n    this.currentRound = currentRound;\n\n    this.attribute_map = {\n      asset: 'asset',\n      currentRound: 'current-round',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): AssetResponse {\n    /* eslint-disable dot-notation */\n    if (typeof data['asset'] === 'undefined')\n      throw new Error(`Response is missing required field 'asset': ${data}`);\n    if (typeof data['current-round'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'current-round': ${data}`\n      );\n    return new AssetResponse({\n      asset: Asset.from_obj_for_encoding(data['asset']),\n      currentRound: data['current-round'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n *\n */\nexport class AssetsResponse extends BaseModel {\n  public assets: Asset[];\n\n  /**\n   * Round at which the results were computed.\n   */\n  public currentRound: number | bigint;\n\n  /**\n   * Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  public nextToken?: string;\n\n  /**\n   * Creates a new `AssetsResponse` object.\n   * @param assets -\n   * @param currentRound - Round at which the results were computed.\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  constructor({\n    assets,\n    currentRound,\n    nextToken,\n  }: {\n    assets: Asset[];\n    currentRound: number | bigint;\n    nextToken?: string;\n  }) {\n    super();\n    this.assets = assets;\n    this.currentRound = currentRound;\n    this.nextToken = nextToken;\n\n    this.attribute_map = {\n      assets: 'assets',\n      currentRound: 'current-round',\n      nextToken: 'next-token',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): AssetsResponse {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['assets']))\n      throw new Error(\n        `Response is missing required array field 'assets': ${data}`\n      );\n    if (typeof data['current-round'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'current-round': ${data}`\n      );\n    return new AssetsResponse({\n      assets: data['assets'].map(Asset.from_obj_for_encoding),\n      currentRound: data['current-round'],\n      nextToken: data['next-token'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Block information.\n * Definition:\n * data/bookkeeping/block.go : Block\n */\nexport class Block extends BaseModel {\n  /**\n   * (gh) hash to which this block belongs.\n   */\n  public genesisHash: Uint8Array;\n\n  /**\n   * (gen) ID to which this block belongs.\n   */\n  public genesisId: string;\n\n  /**\n   * (prev) Previous block hash.\n   */\n  public previousBlockHash: Uint8Array;\n\n  /**\n   * (rnd) Current round on which this block was appended to the chain.\n   */\n  public round: number | bigint;\n\n  /**\n   * (seed) Sortition seed.\n   */\n  public seed: Uint8Array;\n\n  /**\n   * (ts) Block creation timestamp in seconds since eposh\n   */\n  public timestamp: number | bigint;\n\n  /**\n   * (txn) TransactionsRoot authenticates the set of transactions appearing in the\n   * block. More specifically, it's the root of a merkle tree whose leaves are the\n   * block's Txids, in lexicographic order. For the empty block, it's 0. Note that\n   * the TxnRoot does not authenticate the signatures on the transactions, only the\n   * transactions themselves. Two blocks with the same transactions but in a\n   * different order and with different signatures will have the same TxnRoot.\n   */\n  public transactionsRoot: Uint8Array;\n\n  /**\n   * (txn256) TransactionsRootSHA256 is an auxiliary TransactionRoot, built using a\n   * vector commitment instead of a merkle tree, and SHA256 hash function instead of\n   * the default SHA512_256. This commitment can be used on environments where only\n   * the SHA256 function exists.\n   */\n  public transactionsRootSha256: Uint8Array;\n\n  /**\n   * Participation account data that needs to be checked/acted on by the network.\n   */\n  public participationUpdates?: ParticipationUpdates;\n\n  /**\n   * Fields relating to rewards,\n   */\n  public rewards?: BlockRewards;\n\n  /**\n   * Tracks the status of state proofs.\n   */\n  public stateProofTracking?: StateProofTracking[];\n\n  /**\n   * (txns) list of transactions corresponding to a given round.\n   */\n  public transactions?: Transaction[];\n\n  /**\n   * (tc) TxnCounter counts the number of transactions committed in the ledger, from\n   * the time at which support for this feature was introduced.\n   * Specifically, TxnCounter is the number of the next transaction that will be\n   * committed after this block. It is 0 when no transactions have ever been\n   * committed (since TxnCounter started being supported).\n   */\n  public txnCounter?: number | bigint;\n\n  /**\n   * Fields relating to a protocol upgrade.\n   */\n  public upgradeState?: BlockUpgradeState;\n\n  /**\n   * Fields relating to voting for a protocol upgrade.\n   */\n  public upgradeVote?: BlockUpgradeVote;\n\n  /**\n   * Creates a new `Block` object.\n   * @param genesisHash - (gh) hash to which this block belongs.\n   * @param genesisId - (gen) ID to which this block belongs.\n   * @param previousBlockHash - (prev) Previous block hash.\n   * @param round - (rnd) Current round on which this block was appended to the chain.\n   * @param seed - (seed) Sortition seed.\n   * @param timestamp - (ts) Block creation timestamp in seconds since eposh\n   * @param transactionsRoot - (txn) TransactionsRoot authenticates the set of transactions appearing in the\n   * block. More specifically, it's the root of a merkle tree whose leaves are the\n   * block's Txids, in lexicographic order. For the empty block, it's 0. Note that\n   * the TxnRoot does not authenticate the signatures on the transactions, only the\n   * transactions themselves. Two blocks with the same transactions but in a\n   * different order and with different signatures will have the same TxnRoot.\n   * @param transactionsRootSha256 - (txn256) TransactionsRootSHA256 is an auxiliary TransactionRoot, built using a\n   * vector commitment instead of a merkle tree, and SHA256 hash function instead of\n   * the default SHA512_256. This commitment can be used on environments where only\n   * the SHA256 function exists.\n   * @param participationUpdates - Participation account data that needs to be checked/acted on by the network.\n   * @param rewards - Fields relating to rewards,\n   * @param stateProofTracking - Tracks the status of state proofs.\n   * @param transactions - (txns) list of transactions corresponding to a given round.\n   * @param txnCounter - (tc) TxnCounter counts the number of transactions committed in the ledger, from\n   * the time at which support for this feature was introduced.\n   * Specifically, TxnCounter is the number of the next transaction that will be\n   * committed after this block. It is 0 when no transactions have ever been\n   * committed (since TxnCounter started being supported).\n   * @param upgradeState - Fields relating to a protocol upgrade.\n   * @param upgradeVote - Fields relating to voting for a protocol upgrade.\n   */\n  constructor({\n    genesisHash,\n    genesisId,\n    previousBlockHash,\n    round,\n    seed,\n    timestamp,\n    transactionsRoot,\n    transactionsRootSha256,\n    participationUpdates,\n    rewards,\n    stateProofTracking,\n    transactions,\n    txnCounter,\n    upgradeState,\n    upgradeVote,\n  }: {\n    genesisHash: string | Uint8Array;\n    genesisId: string;\n    previousBlockHash: string | Uint8Array;\n    round: number | bigint;\n    seed: string | Uint8Array;\n    timestamp: number | bigint;\n    transactionsRoot: string | Uint8Array;\n    transactionsRootSha256: string | Uint8Array;\n    participationUpdates?: ParticipationUpdates;\n    rewards?: BlockRewards;\n    stateProofTracking?: StateProofTracking[];\n    transactions?: Transaction[];\n    txnCounter?: number | bigint;\n    upgradeState?: BlockUpgradeState;\n    upgradeVote?: BlockUpgradeVote;\n  }) {\n    super();\n    this.genesisHash =\n      typeof genesisHash === 'string'\n        ? new Uint8Array(Buffer.from(genesisHash, 'base64'))\n        : genesisHash;\n    this.genesisId = genesisId;\n    this.previousBlockHash =\n      typeof previousBlockHash === 'string'\n        ? new Uint8Array(Buffer.from(previousBlockHash, 'base64'))\n        : previousBlockHash;\n    this.round = round;\n    this.seed =\n      typeof seed === 'string'\n        ? new Uint8Array(Buffer.from(seed, 'base64'))\n        : seed;\n    this.timestamp = timestamp;\n    this.transactionsRoot =\n      typeof transactionsRoot === 'string'\n        ? new Uint8Array(Buffer.from(transactionsRoot, 'base64'))\n        : transactionsRoot;\n    this.transactionsRootSha256 =\n      typeof transactionsRootSha256 === 'string'\n        ? new Uint8Array(Buffer.from(transactionsRootSha256, 'base64'))\n        : transactionsRootSha256;\n    this.participationUpdates = participationUpdates;\n    this.rewards = rewards;\n    this.stateProofTracking = stateProofTracking;\n    this.transactions = transactions;\n    this.txnCounter = txnCounter;\n    this.upgradeState = upgradeState;\n    this.upgradeVote = upgradeVote;\n\n    this.attribute_map = {\n      genesisHash: 'genesis-hash',\n      genesisId: 'genesis-id',\n      previousBlockHash: 'previous-block-hash',\n      round: 'round',\n      seed: 'seed',\n      timestamp: 'timestamp',\n      transactionsRoot: 'transactions-root',\n      transactionsRootSha256: 'transactions-root-sha256',\n      participationUpdates: 'participation-updates',\n      rewards: 'rewards',\n      stateProofTracking: 'state-proof-tracking',\n      transactions: 'transactions',\n      txnCounter: 'txn-counter',\n      upgradeState: 'upgrade-state',\n      upgradeVote: 'upgrade-vote',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): Block {\n    /* eslint-disable dot-notation */\n    if (typeof data['genesis-hash'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'genesis-hash': ${data}`\n      );\n    if (typeof data['genesis-id'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'genesis-id': ${data}`\n      );\n    if (typeof data['previous-block-hash'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'previous-block-hash': ${data}`\n      );\n    if (typeof data['round'] === 'undefined')\n      throw new Error(`Response is missing required field 'round': ${data}`);\n    if (typeof data['seed'] === 'undefined')\n      throw new Error(`Response is missing required field 'seed': ${data}`);\n    if (typeof data['timestamp'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'timestamp': ${data}`\n      );\n    if (typeof data['transactions-root'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'transactions-root': ${data}`\n      );\n    if (typeof data['transactions-root-sha256'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'transactions-root-sha256': ${data}`\n      );\n    return new Block({\n      genesisHash: data['genesis-hash'],\n      genesisId: data['genesis-id'],\n      previousBlockHash: data['previous-block-hash'],\n      round: data['round'],\n      seed: data['seed'],\n      timestamp: data['timestamp'],\n      transactionsRoot: data['transactions-root'],\n      transactionsRootSha256: data['transactions-root-sha256'],\n      participationUpdates:\n        typeof data['participation-updates'] !== 'undefined'\n          ? ParticipationUpdates.from_obj_for_encoding(\n              data['participation-updates']\n            )\n          : undefined,\n      rewards:\n        typeof data['rewards'] !== 'undefined'\n          ? BlockRewards.from_obj_for_encoding(data['rewards'])\n          : undefined,\n      stateProofTracking:\n        typeof data['state-proof-tracking'] !== 'undefined'\n          ? data['state-proof-tracking'].map(\n              StateProofTracking.from_obj_for_encoding\n            )\n          : undefined,\n      transactions:\n        typeof data['transactions'] !== 'undefined'\n          ? data['transactions'].map(Transaction.from_obj_for_encoding)\n          : undefined,\n      txnCounter: data['txn-counter'],\n      upgradeState:\n        typeof data['upgrade-state'] !== 'undefined'\n          ? BlockUpgradeState.from_obj_for_encoding(data['upgrade-state'])\n          : undefined,\n      upgradeVote:\n        typeof data['upgrade-vote'] !== 'undefined'\n          ? BlockUpgradeVote.from_obj_for_encoding(data['upgrade-vote'])\n          : undefined,\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Fields relating to rewards,\n */\nexport class BlockRewards extends BaseModel {\n  /**\n   * (fees) accepts transaction fees, it can only spend to the incentive pool.\n   */\n  public feeSink: string;\n\n  /**\n   * (rwcalr) number of leftover MicroAlgos after the distribution of rewards-rate\n   * MicroAlgos for every reward unit in the next round.\n   */\n  public rewardsCalculationRound: number | bigint;\n\n  /**\n   * (earn) How many rewards, in MicroAlgos, have been distributed to each RewardUnit\n   * of MicroAlgos since genesis.\n   */\n  public rewardsLevel: number | bigint;\n\n  /**\n   * (rwd) accepts periodic injections from the fee-sink and continually\n   * redistributes them as rewards.\n   */\n  public rewardsPool: string;\n\n  /**\n   * (rate) Number of new MicroAlgos added to the participation stake from rewards at\n   * the next round.\n   */\n  public rewardsRate: number | bigint;\n\n  /**\n   * (frac) Number of leftover MicroAlgos after the distribution of\n   * RewardsRate/rewardUnits MicroAlgos for every reward unit in the next round.\n   */\n  public rewardsResidue: number | bigint;\n\n  /**\n   * Creates a new `BlockRewards` object.\n   * @param feeSink - (fees) accepts transaction fees, it can only spend to the incentive pool.\n   * @param rewardsCalculationRound - (rwcalr) number of leftover MicroAlgos after the distribution of rewards-rate\n   * MicroAlgos for every reward unit in the next round.\n   * @param rewardsLevel - (earn) How many rewards, in MicroAlgos, have been distributed to each RewardUnit\n   * of MicroAlgos since genesis.\n   * @param rewardsPool - (rwd) accepts periodic injections from the fee-sink and continually\n   * redistributes them as rewards.\n   * @param rewardsRate - (rate) Number of new MicroAlgos added to the participation stake from rewards at\n   * the next round.\n   * @param rewardsResidue - (frac) Number of leftover MicroAlgos after the distribution of\n   * RewardsRate/rewardUnits MicroAlgos for every reward unit in the next round.\n   */\n  constructor({\n    feeSink,\n    rewardsCalculationRound,\n    rewardsLevel,\n    rewardsPool,\n    rewardsRate,\n    rewardsResidue,\n  }: {\n    feeSink: string;\n    rewardsCalculationRound: number | bigint;\n    rewardsLevel: number | bigint;\n    rewardsPool: string;\n    rewardsRate: number | bigint;\n    rewardsResidue: number | bigint;\n  }) {\n    super();\n    this.feeSink = feeSink;\n    this.rewardsCalculationRound = rewardsCalculationRound;\n    this.rewardsLevel = rewardsLevel;\n    this.rewardsPool = rewardsPool;\n    this.rewardsRate = rewardsRate;\n    this.rewardsResidue = rewardsResidue;\n\n    this.attribute_map = {\n      feeSink: 'fee-sink',\n      rewardsCalculationRound: 'rewards-calculation-round',\n      rewardsLevel: 'rewards-level',\n      rewardsPool: 'rewards-pool',\n      rewardsRate: 'rewards-rate',\n      rewardsResidue: 'rewards-residue',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): BlockRewards {\n    /* eslint-disable dot-notation */\n    if (typeof data['fee-sink'] === 'undefined')\n      throw new Error(`Response is missing required field 'fee-sink': ${data}`);\n    if (typeof data['rewards-calculation-round'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'rewards-calculation-round': ${data}`\n      );\n    if (typeof data['rewards-level'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'rewards-level': ${data}`\n      );\n    if (typeof data['rewards-pool'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'rewards-pool': ${data}`\n      );\n    if (typeof data['rewards-rate'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'rewards-rate': ${data}`\n      );\n    if (typeof data['rewards-residue'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'rewards-residue': ${data}`\n      );\n    return new BlockRewards({\n      feeSink: data['fee-sink'],\n      rewardsCalculationRound: data['rewards-calculation-round'],\n      rewardsLevel: data['rewards-level'],\n      rewardsPool: data['rewards-pool'],\n      rewardsRate: data['rewards-rate'],\n      rewardsResidue: data['rewards-residue'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Fields relating to a protocol upgrade.\n */\nexport class BlockUpgradeState extends BaseModel {\n  /**\n   * (proto) The current protocol version.\n   */\n  public currentProtocol: string;\n\n  /**\n   * (nextproto) The next proposed protocol version.\n   */\n  public nextProtocol?: string;\n\n  /**\n   * (nextyes) Number of blocks which approved the protocol upgrade.\n   */\n  public nextProtocolApprovals?: number | bigint;\n\n  /**\n   * (nextswitch) Round on which the protocol upgrade will take effect.\n   */\n  public nextProtocolSwitchOn?: number | bigint;\n\n  /**\n   * (nextbefore) Deadline round for this protocol upgrade (No votes will be consider\n   * after this round).\n   */\n  public nextProtocolVoteBefore?: number | bigint;\n\n  /**\n   * Creates a new `BlockUpgradeState` object.\n   * @param currentProtocol - (proto) The current protocol version.\n   * @param nextProtocol - (nextproto) The next proposed protocol version.\n   * @param nextProtocolApprovals - (nextyes) Number of blocks which approved the protocol upgrade.\n   * @param nextProtocolSwitchOn - (nextswitch) Round on which the protocol upgrade will take effect.\n   * @param nextProtocolVoteBefore - (nextbefore) Deadline round for this protocol upgrade (No votes will be consider\n   * after this round).\n   */\n  constructor({\n    currentProtocol,\n    nextProtocol,\n    nextProtocolApprovals,\n    nextProtocolSwitchOn,\n    nextProtocolVoteBefore,\n  }: {\n    currentProtocol: string;\n    nextProtocol?: string;\n    nextProtocolApprovals?: number | bigint;\n    nextProtocolSwitchOn?: number | bigint;\n    nextProtocolVoteBefore?: number | bigint;\n  }) {\n    super();\n    this.currentProtocol = currentProtocol;\n    this.nextProtocol = nextProtocol;\n    this.nextProtocolApprovals = nextProtocolApprovals;\n    this.nextProtocolSwitchOn = nextProtocolSwitchOn;\n    this.nextProtocolVoteBefore = nextProtocolVoteBefore;\n\n    this.attribute_map = {\n      currentProtocol: 'current-protocol',\n      nextProtocol: 'next-protocol',\n      nextProtocolApprovals: 'next-protocol-approvals',\n      nextProtocolSwitchOn: 'next-protocol-switch-on',\n      nextProtocolVoteBefore: 'next-protocol-vote-before',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): BlockUpgradeState {\n    /* eslint-disable dot-notation */\n    if (typeof data['current-protocol'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'current-protocol': ${data}`\n      );\n    return new BlockUpgradeState({\n      currentProtocol: data['current-protocol'],\n      nextProtocol: data['next-protocol'],\n      nextProtocolApprovals: data['next-protocol-approvals'],\n      nextProtocolSwitchOn: data['next-protocol-switch-on'],\n      nextProtocolVoteBefore: data['next-protocol-vote-before'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Fields relating to voting for a protocol upgrade.\n */\nexport class BlockUpgradeVote extends BaseModel {\n  /**\n   * (upgradeyes) Indicates a yes vote for the current proposal.\n   */\n  public upgradeApprove?: boolean;\n\n  /**\n   * (upgradedelay) Indicates the time between acceptance and execution.\n   */\n  public upgradeDelay?: number | bigint;\n\n  /**\n   * (upgradeprop) Indicates a proposed upgrade.\n   */\n  public upgradePropose?: string;\n\n  /**\n   * Creates a new `BlockUpgradeVote` object.\n   * @param upgradeApprove - (upgradeyes) Indicates a yes vote for the current proposal.\n   * @param upgradeDelay - (upgradedelay) Indicates the time between acceptance and execution.\n   * @param upgradePropose - (upgradeprop) Indicates a proposed upgrade.\n   */\n  constructor({\n    upgradeApprove,\n    upgradeDelay,\n    upgradePropose,\n  }: {\n    upgradeApprove?: boolean;\n    upgradeDelay?: number | bigint;\n    upgradePropose?: string;\n  }) {\n    super();\n    this.upgradeApprove = upgradeApprove;\n    this.upgradeDelay = upgradeDelay;\n    this.upgradePropose = upgradePropose;\n\n    this.attribute_map = {\n      upgradeApprove: 'upgrade-approve',\n      upgradeDelay: 'upgrade-delay',\n      upgradePropose: 'upgrade-propose',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): BlockUpgradeVote {\n    /* eslint-disable dot-notation */\n    return new BlockUpgradeVote({\n      upgradeApprove: data['upgrade-approve'],\n      upgradeDelay: data['upgrade-delay'],\n      upgradePropose: data['upgrade-propose'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Box name and its content.\n */\nexport class Box extends BaseModel {\n  /**\n   * (name) box name, base64 encoded\n   */\n  public name: Uint8Array;\n\n  /**\n   * (value) box value, base64 encoded.\n   */\n  public value: Uint8Array;\n\n  /**\n   * Creates a new `Box` object.\n   * @param name - (name) box name, base64 encoded\n   * @param value - (value) box value, base64 encoded.\n   */\n  constructor({\n    name,\n    value,\n  }: {\n    name: string | Uint8Array;\n    value: string | Uint8Array;\n  }) {\n    super();\n    this.name =\n      typeof name === 'string'\n        ? new Uint8Array(Buffer.from(name, 'base64'))\n        : name;\n    this.value =\n      typeof value === 'string'\n        ? new Uint8Array(Buffer.from(value, 'base64'))\n        : value;\n\n    this.attribute_map = {\n      name: 'name',\n      value: 'value',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): Box {\n    /* eslint-disable dot-notation */\n    if (typeof data['name'] === 'undefined')\n      throw new Error(`Response is missing required field 'name': ${data}`);\n    if (typeof data['value'] === 'undefined')\n      throw new Error(`Response is missing required field 'value': ${data}`);\n    return new Box({\n      name: data['name'],\n      value: data['value'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Box descriptor describes an app box without a value.\n */\nexport class BoxDescriptor extends BaseModel {\n  /**\n   * Base64 encoded box name\n   */\n  public name: Uint8Array;\n\n  /**\n   * Creates a new `BoxDescriptor` object.\n   * @param name - Base64 encoded box name\n   */\n  constructor({ name }: { name: string | Uint8Array }) {\n    super();\n    this.name =\n      typeof name === 'string'\n        ? new Uint8Array(Buffer.from(name, 'base64'))\n        : name;\n\n    this.attribute_map = {\n      name: 'name',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): BoxDescriptor {\n    /* eslint-disable dot-notation */\n    if (typeof data['name'] === 'undefined')\n      throw new Error(`Response is missing required field 'name': ${data}`);\n    return new BoxDescriptor({\n      name: data['name'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Box names of an application\n */\nexport class BoxesResponse extends BaseModel {\n  /**\n   * (appidx) application index.\n   */\n  public applicationId: number | bigint;\n\n  public boxes: BoxDescriptor[];\n\n  /**\n   * Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  public nextToken?: string;\n\n  /**\n   * Creates a new `BoxesResponse` object.\n   * @param applicationId - (appidx) application index.\n   * @param boxes -\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  constructor({\n    applicationId,\n    boxes,\n    nextToken,\n  }: {\n    applicationId: number | bigint;\n    boxes: BoxDescriptor[];\n    nextToken?: string;\n  }) {\n    super();\n    this.applicationId = applicationId;\n    this.boxes = boxes;\n    this.nextToken = nextToken;\n\n    this.attribute_map = {\n      applicationId: 'application-id',\n      boxes: 'boxes',\n      nextToken: 'next-token',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): BoxesResponse {\n    /* eslint-disable dot-notation */\n    if (typeof data['application-id'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'application-id': ${data}`\n      );\n    if (!Array.isArray(data['boxes']))\n      throw new Error(\n        `Response is missing required array field 'boxes': ${data}`\n      );\n    return new BoxesResponse({\n      applicationId: data['application-id'],\n      boxes: data['boxes'].map(BoxDescriptor.from_obj_for_encoding),\n      nextToken: data['next-token'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Response for errors\n */\nexport class ErrorResponse extends BaseModel {\n  public message: string;\n\n  public data?: Record<string, any>;\n\n  /**\n   * Creates a new `ErrorResponse` object.\n   * @param message -\n   * @param data -\n   */\n  constructor({\n    message,\n    data,\n  }: {\n    message: string;\n    data?: Record<string, any>;\n  }) {\n    super();\n    this.message = message;\n    this.data = data;\n\n    this.attribute_map = {\n      message: 'message',\n      data: 'data',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): ErrorResponse {\n    /* eslint-disable dot-notation */\n    if (typeof data['message'] === 'undefined')\n      throw new Error(`Response is missing required field 'message': ${data}`);\n    return new ErrorResponse({\n      message: data['message'],\n      data: data['data'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Represents a TEAL value delta.\n */\nexport class EvalDelta extends BaseModel {\n  /**\n   * (at) delta action.\n   */\n  public action: number | bigint;\n\n  /**\n   * (bs) bytes value.\n   */\n  public bytes?: string;\n\n  /**\n   * (ui) uint value.\n   */\n  public uint?: number | bigint;\n\n  /**\n   * Creates a new `EvalDelta` object.\n   * @param action - (at) delta action.\n   * @param bytes - (bs) bytes value.\n   * @param uint - (ui) uint value.\n   */\n  constructor({\n    action,\n    bytes,\n    uint,\n  }: {\n    action: number | bigint;\n    bytes?: string;\n    uint?: number | bigint;\n  }) {\n    super();\n    this.action = action;\n    this.bytes = bytes;\n    this.uint = uint;\n\n    this.attribute_map = {\n      action: 'action',\n      bytes: 'bytes',\n      uint: 'uint',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): EvalDelta {\n    /* eslint-disable dot-notation */\n    if (typeof data['action'] === 'undefined')\n      throw new Error(`Response is missing required field 'action': ${data}`);\n    return new EvalDelta({\n      action: data['action'],\n      bytes: data['bytes'],\n      uint: data['uint'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Key-value pairs for StateDelta.\n */\nexport class EvalDeltaKeyValue extends BaseModel {\n  public key: string;\n\n  /**\n   * Represents a TEAL value delta.\n   */\n  public value: EvalDelta;\n\n  /**\n   * Creates a new `EvalDeltaKeyValue` object.\n   * @param key -\n   * @param value - Represents a TEAL value delta.\n   */\n  constructor({ key, value }: { key: string; value: EvalDelta }) {\n    super();\n    this.key = key;\n    this.value = value;\n\n    this.attribute_map = {\n      key: 'key',\n      value: 'value',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): EvalDeltaKeyValue {\n    /* eslint-disable dot-notation */\n    if (typeof data['key'] === 'undefined')\n      throw new Error(`Response is missing required field 'key': ${data}`);\n    if (typeof data['value'] === 'undefined')\n      throw new Error(`Response is missing required field 'value': ${data}`);\n    return new EvalDeltaKeyValue({\n      key: data['key'],\n      value: EvalDelta.from_obj_for_encoding(data['value']),\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\nexport class HashFactory extends BaseModel {\n  /**\n   * (t)\n   */\n  public hashType?: number | bigint;\n\n  /**\n   * Creates a new `HashFactory` object.\n   * @param hashType - (t)\n   */\n  constructor({ hashType }: { hashType?: number | bigint }) {\n    super();\n    this.hashType = hashType;\n\n    this.attribute_map = {\n      hashType: 'hash-type',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): HashFactory {\n    /* eslint-disable dot-notation */\n    return new HashFactory({\n      hashType: data['hash-type'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * A health check response.\n */\nexport class HealthCheck extends BaseModel {\n  public dbAvailable: boolean;\n\n  public isMigrating: boolean;\n\n  public message: string;\n\n  public round: number | bigint;\n\n  /**\n   * Current version.\n   */\n  public version: string;\n\n  public data?: Record<string, any>;\n\n  public errors?: string[];\n\n  /**\n   * Creates a new `HealthCheck` object.\n   * @param dbAvailable -\n   * @param isMigrating -\n   * @param message -\n   * @param round -\n   * @param version - Current version.\n   * @param data -\n   * @param errors -\n   */\n  constructor({\n    dbAvailable,\n    isMigrating,\n    message,\n    round,\n    version,\n    data,\n    errors,\n  }: {\n    dbAvailable: boolean;\n    isMigrating: boolean;\n    message: string;\n    round: number | bigint;\n    version: string;\n    data?: Record<string, any>;\n    errors?: string[];\n  }) {\n    super();\n    this.dbAvailable = dbAvailable;\n    this.isMigrating = isMigrating;\n    this.message = message;\n    this.round = round;\n    this.version = version;\n    this.data = data;\n    this.errors = errors;\n\n    this.attribute_map = {\n      dbAvailable: 'db-available',\n      isMigrating: 'is-migrating',\n      message: 'message',\n      round: 'round',\n      version: 'version',\n      data: 'data',\n      errors: 'errors',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): HealthCheck {\n    /* eslint-disable dot-notation */\n    if (typeof data['db-available'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'db-available': ${data}`\n      );\n    if (typeof data['is-migrating'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'is-migrating': ${data}`\n      );\n    if (typeof data['message'] === 'undefined')\n      throw new Error(`Response is missing required field 'message': ${data}`);\n    if (typeof data['round'] === 'undefined')\n      throw new Error(`Response is missing required field 'round': ${data}`);\n    if (typeof data['version'] === 'undefined')\n      throw new Error(`Response is missing required field 'version': ${data}`);\n    return new HealthCheck({\n      dbAvailable: data['db-available'],\n      isMigrating: data['is-migrating'],\n      message: data['message'],\n      round: data['round'],\n      version: data['version'],\n      data: data['data'],\n      errors: data['errors'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\nexport class IndexerStateProofMessage extends BaseModel {\n  /**\n   * (b)\n   */\n  public blockHeadersCommitment?: Uint8Array;\n\n  /**\n   * (f)\n   */\n  public firstAttestedRound?: number | bigint;\n\n  /**\n   * (l)\n   */\n  public latestAttestedRound?: number | bigint;\n\n  /**\n   * (P)\n   */\n  public lnProvenWeight?: number | bigint;\n\n  /**\n   * (v)\n   */\n  public votersCommitment?: Uint8Array;\n\n  /**\n   * Creates a new `IndexerStateProofMessage` object.\n   * @param blockHeadersCommitment - (b)\n   * @param firstAttestedRound - (f)\n   * @param latestAttestedRound - (l)\n   * @param lnProvenWeight - (P)\n   * @param votersCommitment - (v)\n   */\n  constructor({\n    blockHeadersCommitment,\n    firstAttestedRound,\n    latestAttestedRound,\n    lnProvenWeight,\n    votersCommitment,\n  }: {\n    blockHeadersCommitment?: string | Uint8Array;\n    firstAttestedRound?: number | bigint;\n    latestAttestedRound?: number | bigint;\n    lnProvenWeight?: number | bigint;\n    votersCommitment?: string | Uint8Array;\n  }) {\n    super();\n    this.blockHeadersCommitment =\n      typeof blockHeadersCommitment === 'string'\n        ? new Uint8Array(Buffer.from(blockHeadersCommitment, 'base64'))\n        : blockHeadersCommitment;\n    this.firstAttestedRound = firstAttestedRound;\n    this.latestAttestedRound = latestAttestedRound;\n    this.lnProvenWeight = lnProvenWeight;\n    this.votersCommitment =\n      typeof votersCommitment === 'string'\n        ? new Uint8Array(Buffer.from(votersCommitment, 'base64'))\n        : votersCommitment;\n\n    this.attribute_map = {\n      blockHeadersCommitment: 'block-headers-commitment',\n      firstAttestedRound: 'first-attested-round',\n      latestAttestedRound: 'latest-attested-round',\n      lnProvenWeight: 'ln-proven-weight',\n      votersCommitment: 'voters-commitment',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): IndexerStateProofMessage {\n    /* eslint-disable dot-notation */\n    return new IndexerStateProofMessage({\n      blockHeadersCommitment: data['block-headers-commitment'],\n      firstAttestedRound: data['first-attested-round'],\n      latestAttestedRound: data['latest-attested-round'],\n      lnProvenWeight: data['ln-proven-weight'],\n      votersCommitment: data['voters-commitment'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\nexport class MerkleArrayProof extends BaseModel {\n  public hashFactory?: HashFactory;\n\n  /**\n   * (pth)\n   */\n  public path?: Uint8Array[];\n\n  /**\n   * (td)\n   */\n  public treeDepth?: number | bigint;\n\n  /**\n   * Creates a new `MerkleArrayProof` object.\n   * @param hashFactory -\n   * @param path - (pth)\n   * @param treeDepth - (td)\n   */\n  constructor({\n    hashFactory,\n    path,\n    treeDepth,\n  }: {\n    hashFactory?: HashFactory;\n    path?: Uint8Array[];\n    treeDepth?: number | bigint;\n  }) {\n    super();\n    this.hashFactory = hashFactory;\n    this.path = path;\n    this.treeDepth = treeDepth;\n\n    this.attribute_map = {\n      hashFactory: 'hash-factory',\n      path: 'path',\n      treeDepth: 'tree-depth',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): MerkleArrayProof {\n    /* eslint-disable dot-notation */\n    return new MerkleArrayProof({\n      hashFactory:\n        typeof data['hash-factory'] !== 'undefined'\n          ? HashFactory.from_obj_for_encoding(data['hash-factory'])\n          : undefined,\n      path: data['path'],\n      treeDepth: data['tree-depth'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * A simplified version of AssetHolding\n */\nexport class MiniAssetHolding extends BaseModel {\n  public address: string;\n\n  public amount: number | bigint;\n\n  public isFrozen: boolean;\n\n  /**\n   * Whether or not this asset holding is currently deleted from its account.\n   */\n  public deleted?: boolean;\n\n  /**\n   * Round during which the account opted into the asset.\n   */\n  public optedInAtRound?: number | bigint;\n\n  /**\n   * Round during which the account opted out of the asset.\n   */\n  public optedOutAtRound?: number | bigint;\n\n  /**\n   * Creates a new `MiniAssetHolding` object.\n   * @param address -\n   * @param amount -\n   * @param isFrozen -\n   * @param deleted - Whether or not this asset holding is currently deleted from its account.\n   * @param optedInAtRound - Round during which the account opted into the asset.\n   * @param optedOutAtRound - Round during which the account opted out of the asset.\n   */\n  constructor({\n    address,\n    amount,\n    isFrozen,\n    deleted,\n    optedInAtRound,\n    optedOutAtRound,\n  }: {\n    address: string;\n    amount: number | bigint;\n    isFrozen: boolean;\n    deleted?: boolean;\n    optedInAtRound?: number | bigint;\n    optedOutAtRound?: number | bigint;\n  }) {\n    super();\n    this.address = address;\n    this.amount = amount;\n    this.isFrozen = isFrozen;\n    this.deleted = deleted;\n    this.optedInAtRound = optedInAtRound;\n    this.optedOutAtRound = optedOutAtRound;\n\n    this.attribute_map = {\n      address: 'address',\n      amount: 'amount',\n      isFrozen: 'is-frozen',\n      deleted: 'deleted',\n      optedInAtRound: 'opted-in-at-round',\n      optedOutAtRound: 'opted-out-at-round',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): MiniAssetHolding {\n    /* eslint-disable dot-notation */\n    if (typeof data['address'] === 'undefined')\n      throw new Error(`Response is missing required field 'address': ${data}`);\n    if (typeof data['amount'] === 'undefined')\n      throw new Error(`Response is missing required field 'amount': ${data}`);\n    if (typeof data['is-frozen'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'is-frozen': ${data}`\n      );\n    return new MiniAssetHolding({\n      address: data['address'],\n      amount: data['amount'],\n      isFrozen: data['is-frozen'],\n      deleted: data['deleted'],\n      optedInAtRound: data['opted-in-at-round'],\n      optedOutAtRound: data['opted-out-at-round'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Participation account data that needs to be checked/acted on by the network.\n */\nexport class ParticipationUpdates extends BaseModel {\n  /**\n   * (partupdrmv) a list of online accounts that needs to be converted to offline\n   * since their participation key expired.\n   */\n  public expiredParticipationAccounts?: string[];\n\n  /**\n   * Creates a new `ParticipationUpdates` object.\n   * @param expiredParticipationAccounts - (partupdrmv) a list of online accounts that needs to be converted to offline\n   * since their participation key expired.\n   */\n  constructor({\n    expiredParticipationAccounts,\n  }: {\n    expiredParticipationAccounts?: string[];\n  }) {\n    super();\n    this.expiredParticipationAccounts = expiredParticipationAccounts;\n\n    this.attribute_map = {\n      expiredParticipationAccounts: 'expired-participation-accounts',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): ParticipationUpdates {\n    /* eslint-disable dot-notation */\n    return new ParticipationUpdates({\n      expiredParticipationAccounts: data['expired-participation-accounts'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * (sp) represents a state proof.\n * Definition:\n * crypto/stateproof/structs.go : StateProof\n */\nexport class StateProofFields extends BaseModel {\n  /**\n   * (P)\n   */\n  public partProofs?: MerkleArrayProof;\n\n  /**\n   * (pr) Sequence of reveal positions.\n   */\n  public positionsToReveal?: (number | bigint)[];\n\n  /**\n   * (r) Note that this is actually stored as a map[uint64] - Reveal in the actual\n   * msgp\n   */\n  public reveals?: StateProofReveal[];\n\n  /**\n   * (v) Salt version of the merkle signature.\n   */\n  public saltVersion?: number | bigint;\n\n  /**\n   * (c)\n   */\n  public sigCommit?: Uint8Array;\n\n  /**\n   * (S)\n   */\n  public sigProofs?: MerkleArrayProof;\n\n  /**\n   * (w)\n   */\n  public signedWeight?: number | bigint;\n\n  /**\n   * Creates a new `StateProofFields` object.\n   * @param partProofs - (P)\n   * @param positionsToReveal - (pr) Sequence of reveal positions.\n   * @param reveals - (r) Note that this is actually stored as a map[uint64] - Reveal in the actual\n   * msgp\n   * @param saltVersion - (v) Salt version of the merkle signature.\n   * @param sigCommit - (c)\n   * @param sigProofs - (S)\n   * @param signedWeight - (w)\n   */\n  constructor({\n    partProofs,\n    positionsToReveal,\n    reveals,\n    saltVersion,\n    sigCommit,\n    sigProofs,\n    signedWeight,\n  }: {\n    partProofs?: MerkleArrayProof;\n    positionsToReveal?: (number | bigint)[];\n    reveals?: StateProofReveal[];\n    saltVersion?: number | bigint;\n    sigCommit?: string | Uint8Array;\n    sigProofs?: MerkleArrayProof;\n    signedWeight?: number | bigint;\n  }) {\n    super();\n    this.partProofs = partProofs;\n    this.positionsToReveal = positionsToReveal;\n    this.reveals = reveals;\n    this.saltVersion = saltVersion;\n    this.sigCommit =\n      typeof sigCommit === 'string'\n        ? new Uint8Array(Buffer.from(sigCommit, 'base64'))\n        : sigCommit;\n    this.sigProofs = sigProofs;\n    this.signedWeight = signedWeight;\n\n    this.attribute_map = {\n      partProofs: 'part-proofs',\n      positionsToReveal: 'positions-to-reveal',\n      reveals: 'reveals',\n      saltVersion: 'salt-version',\n      sigCommit: 'sig-commit',\n      sigProofs: 'sig-proofs',\n      signedWeight: 'signed-weight',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): StateProofFields {\n    /* eslint-disable dot-notation */\n    return new StateProofFields({\n      partProofs:\n        typeof data['part-proofs'] !== 'undefined'\n          ? MerkleArrayProof.from_obj_for_encoding(data['part-proofs'])\n          : undefined,\n      positionsToReveal: data['positions-to-reveal'],\n      reveals:\n        typeof data['reveals'] !== 'undefined'\n          ? data['reveals'].map(StateProofReveal.from_obj_for_encoding)\n          : undefined,\n      saltVersion: data['salt-version'],\n      sigCommit: data['sig-commit'],\n      sigProofs:\n        typeof data['sig-proofs'] !== 'undefined'\n          ? MerkleArrayProof.from_obj_for_encoding(data['sig-proofs'])\n          : undefined,\n      signedWeight: data['signed-weight'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\nexport class StateProofParticipant extends BaseModel {\n  /**\n   * (p)\n   */\n  public verifier?: StateProofVerifier;\n\n  /**\n   * (w)\n   */\n  public weight?: number | bigint;\n\n  /**\n   * Creates a new `StateProofParticipant` object.\n   * @param verifier - (p)\n   * @param weight - (w)\n   */\n  constructor({\n    verifier,\n    weight,\n  }: {\n    verifier?: StateProofVerifier;\n    weight?: number | bigint;\n  }) {\n    super();\n    this.verifier = verifier;\n    this.weight = weight;\n\n    this.attribute_map = {\n      verifier: 'verifier',\n      weight: 'weight',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): StateProofParticipant {\n    /* eslint-disable dot-notation */\n    return new StateProofParticipant({\n      verifier:\n        typeof data['verifier'] !== 'undefined'\n          ? StateProofVerifier.from_obj_for_encoding(data['verifier'])\n          : undefined,\n      weight: data['weight'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\nexport class StateProofReveal extends BaseModel {\n  /**\n   * (p)\n   */\n  public participant?: StateProofParticipant;\n\n  /**\n   * The position in the signature and participants arrays corresponding to this\n   * entry.\n   */\n  public position?: number | bigint;\n\n  /**\n   * (s)\n   */\n  public sigSlot?: StateProofSigSlot;\n\n  /**\n   * Creates a new `StateProofReveal` object.\n   * @param participant - (p)\n   * @param position - The position in the signature and participants arrays corresponding to this\n   * entry.\n   * @param sigSlot - (s)\n   */\n  constructor({\n    participant,\n    position,\n    sigSlot,\n  }: {\n    participant?: StateProofParticipant;\n    position?: number | bigint;\n    sigSlot?: StateProofSigSlot;\n  }) {\n    super();\n    this.participant = participant;\n    this.position = position;\n    this.sigSlot = sigSlot;\n\n    this.attribute_map = {\n      participant: 'participant',\n      position: 'position',\n      sigSlot: 'sig-slot',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): StateProofReveal {\n    /* eslint-disable dot-notation */\n    return new StateProofReveal({\n      participant:\n        typeof data['participant'] !== 'undefined'\n          ? StateProofParticipant.from_obj_for_encoding(data['participant'])\n          : undefined,\n      position: data['position'],\n      sigSlot:\n        typeof data['sig-slot'] !== 'undefined'\n          ? StateProofSigSlot.from_obj_for_encoding(data['sig-slot'])\n          : undefined,\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\nexport class StateProofSigSlot extends BaseModel {\n  /**\n   * (l) The total weight of signatures in the lower-numbered slots.\n   */\n  public lowerSigWeight?: number | bigint;\n\n  public signature?: StateProofSignature;\n\n  /**\n   * Creates a new `StateProofSigSlot` object.\n   * @param lowerSigWeight - (l) The total weight of signatures in the lower-numbered slots.\n   * @param signature -\n   */\n  constructor({\n    lowerSigWeight,\n    signature,\n  }: {\n    lowerSigWeight?: number | bigint;\n    signature?: StateProofSignature;\n  }) {\n    super();\n    this.lowerSigWeight = lowerSigWeight;\n    this.signature = signature;\n\n    this.attribute_map = {\n      lowerSigWeight: 'lower-sig-weight',\n      signature: 'signature',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): StateProofSigSlot {\n    /* eslint-disable dot-notation */\n    return new StateProofSigSlot({\n      lowerSigWeight: data['lower-sig-weight'],\n      signature:\n        typeof data['signature'] !== 'undefined'\n          ? StateProofSignature.from_obj_for_encoding(data['signature'])\n          : undefined,\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\nexport class StateProofSignature extends BaseModel {\n  public falconSignature?: Uint8Array;\n\n  public merkleArrayIndex?: number | bigint;\n\n  public proof?: MerkleArrayProof;\n\n  /**\n   * (vkey)\n   */\n  public verifyingKey?: Uint8Array;\n\n  /**\n   * Creates a new `StateProofSignature` object.\n   * @param falconSignature -\n   * @param merkleArrayIndex -\n   * @param proof -\n   * @param verifyingKey - (vkey)\n   */\n  constructor({\n    falconSignature,\n    merkleArrayIndex,\n    proof,\n    verifyingKey,\n  }: {\n    falconSignature?: string | Uint8Array;\n    merkleArrayIndex?: number | bigint;\n    proof?: MerkleArrayProof;\n    verifyingKey?: string | Uint8Array;\n  }) {\n    super();\n    this.falconSignature =\n      typeof falconSignature === 'string'\n        ? new Uint8Array(Buffer.from(falconSignature, 'base64'))\n        : falconSignature;\n    this.merkleArrayIndex = merkleArrayIndex;\n    this.proof = proof;\n    this.verifyingKey =\n      typeof verifyingKey === 'string'\n        ? new Uint8Array(Buffer.from(verifyingKey, 'base64'))\n        : verifyingKey;\n\n    this.attribute_map = {\n      falconSignature: 'falcon-signature',\n      merkleArrayIndex: 'merkle-array-index',\n      proof: 'proof',\n      verifyingKey: 'verifying-key',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): StateProofSignature {\n    /* eslint-disable dot-notation */\n    return new StateProofSignature({\n      falconSignature: data['falcon-signature'],\n      merkleArrayIndex: data['merkle-array-index'],\n      proof:\n        typeof data['proof'] !== 'undefined'\n          ? MerkleArrayProof.from_obj_for_encoding(data['proof'])\n          : undefined,\n      verifyingKey: data['verifying-key'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\nexport class StateProofTracking extends BaseModel {\n  /**\n   * (n) Next round for which we will accept a state proof transaction.\n   */\n  public nextRound?: number | bigint;\n\n  /**\n   * (t) The total number of microalgos held by the online accounts during the\n   * StateProof round.\n   */\n  public onlineTotalWeight?: number | bigint;\n\n  /**\n   * State Proof Type. Note the raw object uses map with this as key.\n   */\n  public type?: number | bigint;\n\n  /**\n   * (v) Root of a vector commitment containing online accounts that will help sign\n   * the proof.\n   */\n  public votersCommitment?: Uint8Array;\n\n  /**\n   * Creates a new `StateProofTracking` object.\n   * @param nextRound - (n) Next round for which we will accept a state proof transaction.\n   * @param onlineTotalWeight - (t) The total number of microalgos held by the online accounts during the\n   * StateProof round.\n   * @param type - State Proof Type. Note the raw object uses map with this as key.\n   * @param votersCommitment - (v) Root of a vector commitment containing online accounts that will help sign\n   * the proof.\n   */\n  constructor({\n    nextRound,\n    onlineTotalWeight,\n    type,\n    votersCommitment,\n  }: {\n    nextRound?: number | bigint;\n    onlineTotalWeight?: number | bigint;\n    type?: number | bigint;\n    votersCommitment?: string | Uint8Array;\n  }) {\n    super();\n    this.nextRound = nextRound;\n    this.onlineTotalWeight = onlineTotalWeight;\n    this.type = type;\n    this.votersCommitment =\n      typeof votersCommitment === 'string'\n        ? new Uint8Array(Buffer.from(votersCommitment, 'base64'))\n        : votersCommitment;\n\n    this.attribute_map = {\n      nextRound: 'next-round',\n      onlineTotalWeight: 'online-total-weight',\n      type: 'type',\n      votersCommitment: 'voters-commitment',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): StateProofTracking {\n    /* eslint-disable dot-notation */\n    return new StateProofTracking({\n      nextRound: data['next-round'],\n      onlineTotalWeight: data['online-total-weight'],\n      type: data['type'],\n      votersCommitment: data['voters-commitment'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\nexport class StateProofVerifier extends BaseModel {\n  /**\n   * (cmt) Represents the root of the vector commitment tree.\n   */\n  public commitment?: Uint8Array;\n\n  /**\n   * (lf) Key lifetime.\n   */\n  public keyLifetime?: number | bigint;\n\n  /**\n   * Creates a new `StateProofVerifier` object.\n   * @param commitment - (cmt) Represents the root of the vector commitment tree.\n   * @param keyLifetime - (lf) Key lifetime.\n   */\n  constructor({\n    commitment,\n    keyLifetime,\n  }: {\n    commitment?: string | Uint8Array;\n    keyLifetime?: number | bigint;\n  }) {\n    super();\n    this.commitment =\n      typeof commitment === 'string'\n        ? new Uint8Array(Buffer.from(commitment, 'base64'))\n        : commitment;\n    this.keyLifetime = keyLifetime;\n\n    this.attribute_map = {\n      commitment: 'commitment',\n      keyLifetime: 'key-lifetime',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): StateProofVerifier {\n    /* eslint-disable dot-notation */\n    return new StateProofVerifier({\n      commitment: data['commitment'],\n      keyLifetime: data['key-lifetime'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Represents a (apls) local-state or (apgs) global-state schema. These schemas\n * determine how much storage may be used in a local-state or global-state for an\n * application. The more space used, the larger minimum balance must be maintained\n * in the account holding the data.\n */\nexport class StateSchema extends BaseModel {\n  /**\n   * Maximum number of TEAL byte slices that may be stored in the key/value store.\n   */\n  public numByteSlice: number | bigint;\n\n  /**\n   * Maximum number of TEAL uints that may be stored in the key/value store.\n   */\n  public numUint: number | bigint;\n\n  /**\n   * Creates a new `StateSchema` object.\n   * @param numByteSlice - Maximum number of TEAL byte slices that may be stored in the key/value store.\n   * @param numUint - Maximum number of TEAL uints that may be stored in the key/value store.\n   */\n  constructor({\n    numByteSlice,\n    numUint,\n  }: {\n    numByteSlice: number | bigint;\n    numUint: number | bigint;\n  }) {\n    super();\n    this.numByteSlice = numByteSlice;\n    this.numUint = numUint;\n\n    this.attribute_map = {\n      numByteSlice: 'num-byte-slice',\n      numUint: 'num-uint',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): StateSchema {\n    /* eslint-disable dot-notation */\n    if (typeof data['num-byte-slice'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'num-byte-slice': ${data}`\n      );\n    if (typeof data['num-uint'] === 'undefined')\n      throw new Error(`Response is missing required field 'num-uint': ${data}`);\n    return new StateSchema({\n      numByteSlice: data['num-byte-slice'],\n      numUint: data['num-uint'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Represents a key-value pair in an application store.\n */\nexport class TealKeyValue extends BaseModel {\n  public key: string;\n\n  /**\n   * Represents a TEAL value.\n   */\n  public value: TealValue;\n\n  /**\n   * Creates a new `TealKeyValue` object.\n   * @param key -\n   * @param value - Represents a TEAL value.\n   */\n  constructor({ key, value }: { key: string; value: TealValue }) {\n    super();\n    this.key = key;\n    this.value = value;\n\n    this.attribute_map = {\n      key: 'key',\n      value: 'value',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): TealKeyValue {\n    /* eslint-disable dot-notation */\n    if (typeof data['key'] === 'undefined')\n      throw new Error(`Response is missing required field 'key': ${data}`);\n    if (typeof data['value'] === 'undefined')\n      throw new Error(`Response is missing required field 'value': ${data}`);\n    return new TealKeyValue({\n      key: data['key'],\n      value: TealValue.from_obj_for_encoding(data['value']),\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Represents a TEAL value.\n */\nexport class TealValue extends BaseModel {\n  /**\n   * (tb) bytes value.\n   */\n  public bytes: string;\n\n  /**\n   * (tt) value type. Value `1` refers to **bytes**, value `2` refers to **uint**\n   */\n  public type: number | bigint;\n\n  /**\n   * (ui) uint value.\n   */\n  public uint: number | bigint;\n\n  /**\n   * Creates a new `TealValue` object.\n   * @param bytes - (tb) bytes value.\n   * @param type - (tt) value type. Value `1` refers to **bytes**, value `2` refers to **uint**\n   * @param uint - (ui) uint value.\n   */\n  constructor({\n    bytes,\n    type,\n    uint,\n  }: {\n    bytes: string;\n    type: number | bigint;\n    uint: number | bigint;\n  }) {\n    super();\n    this.bytes = bytes;\n    this.type = type;\n    this.uint = uint;\n\n    this.attribute_map = {\n      bytes: 'bytes',\n      type: 'type',\n      uint: 'uint',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): TealValue {\n    /* eslint-disable dot-notation */\n    if (typeof data['bytes'] === 'undefined')\n      throw new Error(`Response is missing required field 'bytes': ${data}`);\n    if (typeof data['type'] === 'undefined')\n      throw new Error(`Response is missing required field 'type': ${data}`);\n    if (typeof data['uint'] === 'undefined')\n      throw new Error(`Response is missing required field 'uint': ${data}`);\n    return new TealValue({\n      bytes: data['bytes'],\n      type: data['type'],\n      uint: data['uint'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Contains all fields common to all transactions and serves as an envelope to all\n * transactions type. Represents both regular and inner transactions.\n * Definition:\n * data/transactions/signedtxn.go : SignedTxn\n * data/transactions/transaction.go : Transaction\n */\nexport class Transaction extends BaseModel {\n  /**\n   * (fee) Transaction fee.\n   */\n  public fee: number | bigint;\n\n  /**\n   * (fv) First valid round for this transaction.\n   */\n  public firstValid: number | bigint;\n\n  /**\n   * (lv) Last valid round for this transaction.\n   */\n  public lastValid: number | bigint;\n\n  /**\n   * (snd) Sender's address.\n   */\n  public sender: string;\n\n  /**\n   * Fields for application transactions.\n   * Definition:\n   * data/transactions/application.go : ApplicationCallTxnFields\n   */\n  public applicationTransaction?: TransactionApplication;\n\n  /**\n   * Fields for asset allocation, re-configuration, and destruction.\n   * A zero value for asset-id indicates asset creation.\n   * A zero value for the params indicates asset destruction.\n   * Definition:\n   * data/transactions/asset.go : AssetConfigTxnFields\n   */\n  public assetConfigTransaction?: TransactionAssetConfig;\n\n  /**\n   * Fields for an asset freeze transaction.\n   * Definition:\n   * data/transactions/asset.go : AssetFreezeTxnFields\n   */\n  public assetFreezeTransaction?: TransactionAssetFreeze;\n\n  /**\n   * Fields for an asset transfer transaction.\n   * Definition:\n   * data/transactions/asset.go : AssetTransferTxnFields\n   */\n  public assetTransferTransaction?: TransactionAssetTransfer;\n\n  /**\n   * (sgnr) this is included with signed transactions when the signing address does\n   * not equal the sender. The backend can use this to ensure that auth addr is equal\n   * to the accounts auth addr.\n   */\n  public authAddr?: string;\n\n  /**\n   * (rc) rewards applied to close-remainder-to account.\n   */\n  public closeRewards?: number | bigint;\n\n  /**\n   * (ca) closing amount for transaction.\n   */\n  public closingAmount?: number | bigint;\n\n  /**\n   * Round when the transaction was confirmed.\n   */\n  public confirmedRound?: number | bigint;\n\n  /**\n   * Specifies an application index (ID) if an application was created with this\n   * transaction.\n   */\n  public createdApplicationIndex?: number | bigint;\n\n  /**\n   * Specifies an asset index (ID) if an asset was created with this transaction.\n   */\n  public createdAssetIndex?: number | bigint;\n\n  /**\n   * (gh) Hash of genesis block.\n   */\n  public genesisHash?: Uint8Array;\n\n  /**\n   * (gen) genesis block ID.\n   */\n  public genesisId?: string;\n\n  /**\n   * (gd) Global state key/value changes for the application being executed by this\n   * transaction.\n   */\n  public globalStateDelta?: EvalDeltaKeyValue[];\n\n  /**\n   * (grp) Base64 encoded byte array of a sha512/256 digest. When present indicates\n   * that this transaction is part of a transaction group and the value is the\n   * sha512/256 hash of the transactions in that group.\n   */\n  public group?: Uint8Array;\n\n  /**\n   * Transaction ID\n   */\n  public id?: string;\n\n  /**\n   * Inner transactions produced by application execution.\n   */\n  public innerTxns?: Transaction[];\n\n  /**\n   * Offset into the round where this transaction was confirmed.\n   */\n  public intraRoundOffset?: number | bigint;\n\n  /**\n   * Fields for a keyreg transaction.\n   * Definition:\n   * data/transactions/keyreg.go : KeyregTxnFields\n   */\n  public keyregTransaction?: TransactionKeyreg;\n\n  /**\n   * (lx) Base64 encoded 32-byte array. Lease enforces mutual exclusion of\n   * transactions. If this field is nonzero, then once the transaction is confirmed,\n   * it acquires the lease identified by the (Sender, Lease) pair of the transaction\n   * until the LastValid round passes. While this transaction possesses the lease, no\n   * other transaction specifying this lease can be confirmed.\n   */\n  public lease?: Uint8Array;\n\n  /**\n   * (ld) Local state key/value changes for the application being executed by this\n   * transaction.\n   */\n  public localStateDelta?: AccountStateDelta[];\n\n  /**\n   * (lg) Logs for the application being executed by this transaction.\n   */\n  public logs?: Uint8Array[];\n\n  /**\n   * (note) Free form data.\n   */\n  public note?: Uint8Array;\n\n  /**\n   * Fields for a payment transaction.\n   * Definition:\n   * data/transactions/payment.go : PaymentTxnFields\n   */\n  public paymentTransaction?: TransactionPayment;\n\n  /**\n   * (rr) rewards applied to receiver account.\n   */\n  public receiverRewards?: number | bigint;\n\n  /**\n   * (rekey) when included in a valid transaction, the accounts auth addr will be\n   * updated with this value and future signatures must be signed with the key\n   * represented by this address.\n   */\n  public rekeyTo?: string;\n\n  /**\n   * Time when the block this transaction is in was confirmed.\n   */\n  public roundTime?: number | bigint;\n\n  /**\n   * (rs) rewards applied to sender account.\n   */\n  public senderRewards?: number | bigint;\n\n  /**\n   * Validation signature associated with some data. Only one of the signatures\n   * should be provided.\n   */\n  public signature?: TransactionSignature;\n\n  /**\n   * Fields for a state proof transaction.\n   * Definition:\n   * data/transactions/stateproof.go : StateProofTxnFields\n   */\n  public stateProofTransaction?: TransactionStateProof;\n\n  /**\n   * (type) Indicates what type of transaction this is. Different types have\n   * different fields.\n   * Valid types, and where their fields are stored:\n   * * (pay) payment-transaction\n   * * (keyreg) keyreg-transaction\n   * * (acfg) asset-config-transaction\n   * * (axfer) asset-transfer-transaction\n   * * (afrz) asset-freeze-transaction\n   * * (appl) application-transaction\n   * * (stpf) state-proof-transaction\n   */\n  public txType?: string;\n\n  /**\n   * Creates a new `Transaction` object.\n   * @param fee - (fee) Transaction fee.\n   * @param firstValid - (fv) First valid round for this transaction.\n   * @param lastValid - (lv) Last valid round for this transaction.\n   * @param sender - (snd) Sender's address.\n   * @param applicationTransaction - Fields for application transactions.\n   * Definition:\n   * data/transactions/application.go : ApplicationCallTxnFields\n   * @param assetConfigTransaction - Fields for asset allocation, re-configuration, and destruction.\n   * A zero value for asset-id indicates asset creation.\n   * A zero value for the params indicates asset destruction.\n   * Definition:\n   * data/transactions/asset.go : AssetConfigTxnFields\n   * @param assetFreezeTransaction - Fields for an asset freeze transaction.\n   * Definition:\n   * data/transactions/asset.go : AssetFreezeTxnFields\n   * @param assetTransferTransaction - Fields for an asset transfer transaction.\n   * Definition:\n   * data/transactions/asset.go : AssetTransferTxnFields\n   * @param authAddr - (sgnr) this is included with signed transactions when the signing address does\n   * not equal the sender. The backend can use this to ensure that auth addr is equal\n   * to the accounts auth addr.\n   * @param closeRewards - (rc) rewards applied to close-remainder-to account.\n   * @param closingAmount - (ca) closing amount for transaction.\n   * @param confirmedRound - Round when the transaction was confirmed.\n   * @param createdApplicationIndex - Specifies an application index (ID) if an application was created with this\n   * transaction.\n   * @param createdAssetIndex - Specifies an asset index (ID) if an asset was created with this transaction.\n   * @param genesisHash - (gh) Hash of genesis block.\n   * @param genesisId - (gen) genesis block ID.\n   * @param globalStateDelta - (gd) Global state key/value changes for the application being executed by this\n   * transaction.\n   * @param group - (grp) Base64 encoded byte array of a sha512/256 digest. When present indicates\n   * that this transaction is part of a transaction group and the value is the\n   * sha512/256 hash of the transactions in that group.\n   * @param id - Transaction ID\n   * @param innerTxns - Inner transactions produced by application execution.\n   * @param intraRoundOffset - Offset into the round where this transaction was confirmed.\n   * @param keyregTransaction - Fields for a keyreg transaction.\n   * Definition:\n   * data/transactions/keyreg.go : KeyregTxnFields\n   * @param lease - (lx) Base64 encoded 32-byte array. Lease enforces mutual exclusion of\n   * transactions. If this field is nonzero, then once the transaction is confirmed,\n   * it acquires the lease identified by the (Sender, Lease) pair of the transaction\n   * until the LastValid round passes. While this transaction possesses the lease, no\n   * other transaction specifying this lease can be confirmed.\n   * @param localStateDelta - (ld) Local state key/value changes for the application being executed by this\n   * transaction.\n   * @param logs - (lg) Logs for the application being executed by this transaction.\n   * @param note - (note) Free form data.\n   * @param paymentTransaction - Fields for a payment transaction.\n   * Definition:\n   * data/transactions/payment.go : PaymentTxnFields\n   * @param receiverRewards - (rr) rewards applied to receiver account.\n   * @param rekeyTo - (rekey) when included in a valid transaction, the accounts auth addr will be\n   * updated with this value and future signatures must be signed with the key\n   * represented by this address.\n   * @param roundTime - Time when the block this transaction is in was confirmed.\n   * @param senderRewards - (rs) rewards applied to sender account.\n   * @param signature - Validation signature associated with some data. Only one of the signatures\n   * should be provided.\n   * @param stateProofTransaction - Fields for a state proof transaction.\n   * Definition:\n   * data/transactions/stateproof.go : StateProofTxnFields\n   * @param txType - (type) Indicates what type of transaction this is. Different types have\n   * different fields.\n   * Valid types, and where their fields are stored:\n   * * (pay) payment-transaction\n   * * (keyreg) keyreg-transaction\n   * * (acfg) asset-config-transaction\n   * * (axfer) asset-transfer-transaction\n   * * (afrz) asset-freeze-transaction\n   * * (appl) application-transaction\n   * * (stpf) state-proof-transaction\n   */\n  constructor({\n    fee,\n    firstValid,\n    lastValid,\n    sender,\n    applicationTransaction,\n    assetConfigTransaction,\n    assetFreezeTransaction,\n    assetTransferTransaction,\n    authAddr,\n    closeRewards,\n    closingAmount,\n    confirmedRound,\n    createdApplicationIndex,\n    createdAssetIndex,\n    genesisHash,\n    genesisId,\n    globalStateDelta,\n    group,\n    id,\n    innerTxns,\n    intraRoundOffset,\n    keyregTransaction,\n    lease,\n    localStateDelta,\n    logs,\n    note,\n    paymentTransaction,\n    receiverRewards,\n    rekeyTo,\n    roundTime,\n    senderRewards,\n    signature,\n    stateProofTransaction,\n    txType,\n  }: {\n    fee: number | bigint;\n    firstValid: number | bigint;\n    lastValid: number | bigint;\n    sender: string;\n    applicationTransaction?: TransactionApplication;\n    assetConfigTransaction?: TransactionAssetConfig;\n    assetFreezeTransaction?: TransactionAssetFreeze;\n    assetTransferTransaction?: TransactionAssetTransfer;\n    authAddr?: string;\n    closeRewards?: number | bigint;\n    closingAmount?: number | bigint;\n    confirmedRound?: number | bigint;\n    createdApplicationIndex?: number | bigint;\n    createdAssetIndex?: number | bigint;\n    genesisHash?: string | Uint8Array;\n    genesisId?: string;\n    globalStateDelta?: EvalDeltaKeyValue[];\n    group?: string | Uint8Array;\n    id?: string;\n    innerTxns?: Transaction[];\n    intraRoundOffset?: number | bigint;\n    keyregTransaction?: TransactionKeyreg;\n    lease?: string | Uint8Array;\n    localStateDelta?: AccountStateDelta[];\n    logs?: Uint8Array[];\n    note?: string | Uint8Array;\n    paymentTransaction?: TransactionPayment;\n    receiverRewards?: number | bigint;\n    rekeyTo?: string;\n    roundTime?: number | bigint;\n    senderRewards?: number | bigint;\n    signature?: TransactionSignature;\n    stateProofTransaction?: TransactionStateProof;\n    txType?: string;\n  }) {\n    super();\n    this.fee = fee;\n    this.firstValid = firstValid;\n    this.lastValid = lastValid;\n    this.sender = sender;\n    this.applicationTransaction = applicationTransaction;\n    this.assetConfigTransaction = assetConfigTransaction;\n    this.assetFreezeTransaction = assetFreezeTransaction;\n    this.assetTransferTransaction = assetTransferTransaction;\n    this.authAddr = authAddr;\n    this.closeRewards = closeRewards;\n    this.closingAmount = closingAmount;\n    this.confirmedRound = confirmedRound;\n    this.createdApplicationIndex = createdApplicationIndex;\n    this.createdAssetIndex = createdAssetIndex;\n    this.genesisHash =\n      typeof genesisHash === 'string'\n        ? new Uint8Array(Buffer.from(genesisHash, 'base64'))\n        : genesisHash;\n    this.genesisId = genesisId;\n    this.globalStateDelta = globalStateDelta;\n    this.group =\n      typeof group === 'string'\n        ? new Uint8Array(Buffer.from(group, 'base64'))\n        : group;\n    this.id = id;\n    this.innerTxns = innerTxns;\n    this.intraRoundOffset = intraRoundOffset;\n    this.keyregTransaction = keyregTransaction;\n    this.lease =\n      typeof lease === 'string'\n        ? new Uint8Array(Buffer.from(lease, 'base64'))\n        : lease;\n    this.localStateDelta = localStateDelta;\n    this.logs = logs;\n    this.note =\n      typeof note === 'string'\n        ? new Uint8Array(Buffer.from(note, 'base64'))\n        : note;\n    this.paymentTransaction = paymentTransaction;\n    this.receiverRewards = receiverRewards;\n    this.rekeyTo = rekeyTo;\n    this.roundTime = roundTime;\n    this.senderRewards = senderRewards;\n    this.signature = signature;\n    this.stateProofTransaction = stateProofTransaction;\n    this.txType = txType;\n\n    this.attribute_map = {\n      fee: 'fee',\n      firstValid: 'first-valid',\n      lastValid: 'last-valid',\n      sender: 'sender',\n      applicationTransaction: 'application-transaction',\n      assetConfigTransaction: 'asset-config-transaction',\n      assetFreezeTransaction: 'asset-freeze-transaction',\n      assetTransferTransaction: 'asset-transfer-transaction',\n      authAddr: 'auth-addr',\n      closeRewards: 'close-rewards',\n      closingAmount: 'closing-amount',\n      confirmedRound: 'confirmed-round',\n      createdApplicationIndex: 'created-application-index',\n      createdAssetIndex: 'created-asset-index',\n      genesisHash: 'genesis-hash',\n      genesisId: 'genesis-id',\n      globalStateDelta: 'global-state-delta',\n      group: 'group',\n      id: 'id',\n      innerTxns: 'inner-txns',\n      intraRoundOffset: 'intra-round-offset',\n      keyregTransaction: 'keyreg-transaction',\n      lease: 'lease',\n      localStateDelta: 'local-state-delta',\n      logs: 'logs',\n      note: 'note',\n      paymentTransaction: 'payment-transaction',\n      receiverRewards: 'receiver-rewards',\n      rekeyTo: 'rekey-to',\n      roundTime: 'round-time',\n      senderRewards: 'sender-rewards',\n      signature: 'signature',\n      stateProofTransaction: 'state-proof-transaction',\n      txType: 'tx-type',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): Transaction {\n    /* eslint-disable dot-notation */\n    if (typeof data['fee'] === 'undefined')\n      throw new Error(`Response is missing required field 'fee': ${data}`);\n    if (typeof data['first-valid'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'first-valid': ${data}`\n      );\n    if (typeof data['last-valid'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'last-valid': ${data}`\n      );\n    if (typeof data['sender'] === 'undefined')\n      throw new Error(`Response is missing required field 'sender': ${data}`);\n    return new Transaction({\n      fee: data['fee'],\n      firstValid: data['first-valid'],\n      lastValid: data['last-valid'],\n      sender: data['sender'],\n      applicationTransaction:\n        typeof data['application-transaction'] !== 'undefined'\n          ? TransactionApplication.from_obj_for_encoding(\n              data['application-transaction']\n            )\n          : undefined,\n      assetConfigTransaction:\n        typeof data['asset-config-transaction'] !== 'undefined'\n          ? TransactionAssetConfig.from_obj_for_encoding(\n              data['asset-config-transaction']\n            )\n          : undefined,\n      assetFreezeTransaction:\n        typeof data['asset-freeze-transaction'] !== 'undefined'\n          ? TransactionAssetFreeze.from_obj_for_encoding(\n              data['asset-freeze-transaction']\n            )\n          : undefined,\n      assetTransferTransaction:\n        typeof data['asset-transfer-transaction'] !== 'undefined'\n          ? TransactionAssetTransfer.from_obj_for_encoding(\n              data['asset-transfer-transaction']\n            )\n          : undefined,\n      authAddr: data['auth-addr'],\n      closeRewards: data['close-rewards'],\n      closingAmount: data['closing-amount'],\n      confirmedRound: data['confirmed-round'],\n      createdApplicationIndex: data['created-application-index'],\n      createdAssetIndex: data['created-asset-index'],\n      genesisHash: data['genesis-hash'],\n      genesisId: data['genesis-id'],\n      globalStateDelta:\n        typeof data['global-state-delta'] !== 'undefined'\n          ? data['global-state-delta'].map(\n              EvalDeltaKeyValue.from_obj_for_encoding\n            )\n          : undefined,\n      group: data['group'],\n      id: data['id'],\n      innerTxns:\n        typeof data['inner-txns'] !== 'undefined'\n          ? data['inner-txns'].map(Transaction.from_obj_for_encoding)\n          : undefined,\n      intraRoundOffset: data['intra-round-offset'],\n      keyregTransaction:\n        typeof data['keyreg-transaction'] !== 'undefined'\n          ? TransactionKeyreg.from_obj_for_encoding(data['keyreg-transaction'])\n          : undefined,\n      lease: data['lease'],\n      localStateDelta:\n        typeof data['local-state-delta'] !== 'undefined'\n          ? data['local-state-delta'].map(\n              AccountStateDelta.from_obj_for_encoding\n            )\n          : undefined,\n      logs: data['logs'],\n      note: data['note'],\n      paymentTransaction:\n        typeof data['payment-transaction'] !== 'undefined'\n          ? TransactionPayment.from_obj_for_encoding(\n              data['payment-transaction']\n            )\n          : undefined,\n      receiverRewards: data['receiver-rewards'],\n      rekeyTo: data['rekey-to'],\n      roundTime: data['round-time'],\n      senderRewards: data['sender-rewards'],\n      signature:\n        typeof data['signature'] !== 'undefined'\n          ? TransactionSignature.from_obj_for_encoding(data['signature'])\n          : undefined,\n      stateProofTransaction:\n        typeof data['state-proof-transaction'] !== 'undefined'\n          ? TransactionStateProof.from_obj_for_encoding(\n              data['state-proof-transaction']\n            )\n          : undefined,\n      txType: data['tx-type'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Fields for application transactions.\n * Definition:\n * data/transactions/application.go : ApplicationCallTxnFields\n */\nexport class TransactionApplication extends BaseModel {\n  /**\n   * (apid) ID of the application being configured or empty if creating.\n   */\n  public applicationId: number | bigint;\n\n  /**\n   * (apat) List of accounts in addition to the sender that may be accessed from the\n   * application's approval-program and clear-state-program.\n   */\n  public accounts?: string[];\n\n  /**\n   * (apaa) transaction specific arguments accessed from the application's\n   * approval-program and clear-state-program.\n   */\n  public applicationArgs?: Uint8Array[];\n\n  /**\n   * (apap) Logic executed for every application transaction, except when\n   * on-completion is set to \"clear\". It can read and write global state for the\n   * application, as well as account-specific local state. Approval programs may\n   * reject the transaction.\n   */\n  public approvalProgram?: Uint8Array;\n\n  /**\n   * (apsu) Logic executed for application transactions with on-completion set to\n   * \"clear\". It can read and write global state for the application, as well as\n   * account-specific local state. Clear state programs cannot reject the\n   * transaction.\n   */\n  public clearStateProgram?: Uint8Array;\n\n  /**\n   * (epp) specifies the additional app program len requested in pages.\n   */\n  public extraProgramPages?: number | bigint;\n\n  /**\n   * (apfa) Lists the applications in addition to the application-id whose global\n   * states may be accessed by this application's approval-program and\n   * clear-state-program. The access is read-only.\n   */\n  public foreignApps?: (number | bigint)[];\n\n  /**\n   * (apas) lists the assets whose parameters may be accessed by this application's\n   * ApprovalProgram and ClearStateProgram. The access is read-only.\n   */\n  public foreignAssets?: (number | bigint)[];\n\n  /**\n   * Represents a (apls) local-state or (apgs) global-state schema. These schemas\n   * determine how much storage may be used in a local-state or global-state for an\n   * application. The more space used, the larger minimum balance must be maintained\n   * in the account holding the data.\n   */\n  public globalStateSchema?: StateSchema;\n\n  /**\n   * Represents a (apls) local-state or (apgs) global-state schema. These schemas\n   * determine how much storage may be used in a local-state or global-state for an\n   * application. The more space used, the larger minimum balance must be maintained\n   * in the account holding the data.\n   */\n  public localStateSchema?: StateSchema;\n\n  /**\n   * (apan) defines the what additional actions occur with the transaction.\n   * Valid types:\n   * * noop\n   * * optin\n   * * closeout\n   * * clear\n   * * update\n   * * update\n   * * delete\n   */\n  public onCompletion?: string;\n\n  /**\n   * Creates a new `TransactionApplication` object.\n   * @param applicationId - (apid) ID of the application being configured or empty if creating.\n   * @param accounts - (apat) List of accounts in addition to the sender that may be accessed from the\n   * application's approval-program and clear-state-program.\n   * @param applicationArgs - (apaa) transaction specific arguments accessed from the application's\n   * approval-program and clear-state-program.\n   * @param approvalProgram - (apap) Logic executed for every application transaction, except when\n   * on-completion is set to \"clear\". It can read and write global state for the\n   * application, as well as account-specific local state. Approval programs may\n   * reject the transaction.\n   * @param clearStateProgram - (apsu) Logic executed for application transactions with on-completion set to\n   * \"clear\". It can read and write global state for the application, as well as\n   * account-specific local state. Clear state programs cannot reject the\n   * transaction.\n   * @param extraProgramPages - (epp) specifies the additional app program len requested in pages.\n   * @param foreignApps - (apfa) Lists the applications in addition to the application-id whose global\n   * states may be accessed by this application's approval-program and\n   * clear-state-program. The access is read-only.\n   * @param foreignAssets - (apas) lists the assets whose parameters may be accessed by this application's\n   * ApprovalProgram and ClearStateProgram. The access is read-only.\n   * @param globalStateSchema - Represents a (apls) local-state or (apgs) global-state schema. These schemas\n   * determine how much storage may be used in a local-state or global-state for an\n   * application. The more space used, the larger minimum balance must be maintained\n   * in the account holding the data.\n   * @param localStateSchema - Represents a (apls) local-state or (apgs) global-state schema. These schemas\n   * determine how much storage may be used in a local-state or global-state for an\n   * application. The more space used, the larger minimum balance must be maintained\n   * in the account holding the data.\n   * @param onCompletion - (apan) defines the what additional actions occur with the transaction.\n   * Valid types:\n   * * noop\n   * * optin\n   * * closeout\n   * * clear\n   * * update\n   * * update\n   * * delete\n   */\n  constructor({\n    applicationId,\n    accounts,\n    applicationArgs,\n    approvalProgram,\n    clearStateProgram,\n    extraProgramPages,\n    foreignApps,\n    foreignAssets,\n    globalStateSchema,\n    localStateSchema,\n    onCompletion,\n  }: {\n    applicationId: number | bigint;\n    accounts?: string[];\n    applicationArgs?: Uint8Array[];\n    approvalProgram?: string | Uint8Array;\n    clearStateProgram?: string | Uint8Array;\n    extraProgramPages?: number | bigint;\n    foreignApps?: (number | bigint)[];\n    foreignAssets?: (number | bigint)[];\n    globalStateSchema?: StateSchema;\n    localStateSchema?: StateSchema;\n    onCompletion?: string;\n  }) {\n    super();\n    this.applicationId = applicationId;\n    this.accounts = accounts;\n    this.applicationArgs = applicationArgs;\n    this.approvalProgram =\n      typeof approvalProgram === 'string'\n        ? new Uint8Array(Buffer.from(approvalProgram, 'base64'))\n        : approvalProgram;\n    this.clearStateProgram =\n      typeof clearStateProgram === 'string'\n        ? new Uint8Array(Buffer.from(clearStateProgram, 'base64'))\n        : clearStateProgram;\n    this.extraProgramPages = extraProgramPages;\n    this.foreignApps = foreignApps;\n    this.foreignAssets = foreignAssets;\n    this.globalStateSchema = globalStateSchema;\n    this.localStateSchema = localStateSchema;\n    this.onCompletion = onCompletion;\n\n    this.attribute_map = {\n      applicationId: 'application-id',\n      accounts: 'accounts',\n      applicationArgs: 'application-args',\n      approvalProgram: 'approval-program',\n      clearStateProgram: 'clear-state-program',\n      extraProgramPages: 'extra-program-pages',\n      foreignApps: 'foreign-apps',\n      foreignAssets: 'foreign-assets',\n      globalStateSchema: 'global-state-schema',\n      localStateSchema: 'local-state-schema',\n      onCompletion: 'on-completion',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): TransactionApplication {\n    /* eslint-disable dot-notation */\n    if (typeof data['application-id'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'application-id': ${data}`\n      );\n    return new TransactionApplication({\n      applicationId: data['application-id'],\n      accounts: data['accounts'],\n      applicationArgs: data['application-args'],\n      approvalProgram: data['approval-program'],\n      clearStateProgram: data['clear-state-program'],\n      extraProgramPages: data['extra-program-pages'],\n      foreignApps: data['foreign-apps'],\n      foreignAssets: data['foreign-assets'],\n      globalStateSchema:\n        typeof data['global-state-schema'] !== 'undefined'\n          ? StateSchema.from_obj_for_encoding(data['global-state-schema'])\n          : undefined,\n      localStateSchema:\n        typeof data['local-state-schema'] !== 'undefined'\n          ? StateSchema.from_obj_for_encoding(data['local-state-schema'])\n          : undefined,\n      onCompletion: data['on-completion'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Fields for asset allocation, re-configuration, and destruction.\n * A zero value for asset-id indicates asset creation.\n * A zero value for the params indicates asset destruction.\n * Definition:\n * data/transactions/asset.go : AssetConfigTxnFields\n */\nexport class TransactionAssetConfig extends BaseModel {\n  /**\n   * (xaid) ID of the asset being configured or empty if creating.\n   */\n  public assetId?: number | bigint;\n\n  /**\n   * AssetParams specifies the parameters for an asset.\n   * (apar) when part of an AssetConfig transaction.\n   * Definition:\n   * data/transactions/asset.go : AssetParams\n   */\n  public params?: AssetParams;\n\n  /**\n   * Creates a new `TransactionAssetConfig` object.\n   * @param assetId - (xaid) ID of the asset being configured or empty if creating.\n   * @param params - AssetParams specifies the parameters for an asset.\n   * (apar) when part of an AssetConfig transaction.\n   * Definition:\n   * data/transactions/asset.go : AssetParams\n   */\n  constructor({\n    assetId,\n    params,\n  }: {\n    assetId?: number | bigint;\n    params?: AssetParams;\n  }) {\n    super();\n    this.assetId = assetId;\n    this.params = params;\n\n    this.attribute_map = {\n      assetId: 'asset-id',\n      params: 'params',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): TransactionAssetConfig {\n    /* eslint-disable dot-notation */\n    return new TransactionAssetConfig({\n      assetId: data['asset-id'],\n      params:\n        typeof data['params'] !== 'undefined'\n          ? AssetParams.from_obj_for_encoding(data['params'])\n          : undefined,\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Fields for an asset freeze transaction.\n * Definition:\n * data/transactions/asset.go : AssetFreezeTxnFields\n */\nexport class TransactionAssetFreeze extends BaseModel {\n  /**\n   * (fadd) Address of the account whose asset is being frozen or thawed.\n   */\n  public address: string;\n\n  /**\n   * (faid) ID of the asset being frozen or thawed.\n   */\n  public assetId: number | bigint;\n\n  /**\n   * (afrz) The new freeze status.\n   */\n  public newFreezeStatus: boolean;\n\n  /**\n   * Creates a new `TransactionAssetFreeze` object.\n   * @param address - (fadd) Address of the account whose asset is being frozen or thawed.\n   * @param assetId - (faid) ID of the asset being frozen or thawed.\n   * @param newFreezeStatus - (afrz) The new freeze status.\n   */\n  constructor({\n    address,\n    assetId,\n    newFreezeStatus,\n  }: {\n    address: string;\n    assetId: number | bigint;\n    newFreezeStatus: boolean;\n  }) {\n    super();\n    this.address = address;\n    this.assetId = assetId;\n    this.newFreezeStatus = newFreezeStatus;\n\n    this.attribute_map = {\n      address: 'address',\n      assetId: 'asset-id',\n      newFreezeStatus: 'new-freeze-status',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): TransactionAssetFreeze {\n    /* eslint-disable dot-notation */\n    if (typeof data['address'] === 'undefined')\n      throw new Error(`Response is missing required field 'address': ${data}`);\n    if (typeof data['asset-id'] === 'undefined')\n      throw new Error(`Response is missing required field 'asset-id': ${data}`);\n    if (typeof data['new-freeze-status'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'new-freeze-status': ${data}`\n      );\n    return new TransactionAssetFreeze({\n      address: data['address'],\n      assetId: data['asset-id'],\n      newFreezeStatus: data['new-freeze-status'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Fields for an asset transfer transaction.\n * Definition:\n * data/transactions/asset.go : AssetTransferTxnFields\n */\nexport class TransactionAssetTransfer extends BaseModel {\n  /**\n   * (aamt) Amount of asset to transfer. A zero amount transferred to self allocates\n   * that asset in the account's Assets map.\n   */\n  public amount: number | bigint;\n\n  /**\n   * (xaid) ID of the asset being transferred.\n   */\n  public assetId: number | bigint;\n\n  /**\n   * (arcv) Recipient address of the transfer.\n   */\n  public receiver: string;\n\n  /**\n   * Number of assets transfered to the close-to account as part of the transaction.\n   */\n  public closeAmount?: number | bigint;\n\n  /**\n   * (aclose) Indicates that the asset should be removed from the account's Assets\n   * map, and specifies where the remaining asset holdings should be transferred.\n   * It's always valid to transfer remaining asset holdings to the creator account.\n   */\n  public closeTo?: string;\n\n  /**\n   * (asnd) The effective sender during a clawback transactions. If this is not a\n   * zero value, the real transaction sender must be the Clawback address from the\n   * AssetParams.\n   */\n  public sender?: string;\n\n  /**\n   * Creates a new `TransactionAssetTransfer` object.\n   * @param amount - (aamt) Amount of asset to transfer. A zero amount transferred to self allocates\n   * that asset in the account's Assets map.\n   * @param assetId - (xaid) ID of the asset being transferred.\n   * @param receiver - (arcv) Recipient address of the transfer.\n   * @param closeAmount - Number of assets transfered to the close-to account as part of the transaction.\n   * @param closeTo - (aclose) Indicates that the asset should be removed from the account's Assets\n   * map, and specifies where the remaining asset holdings should be transferred.\n   * It's always valid to transfer remaining asset holdings to the creator account.\n   * @param sender - (asnd) The effective sender during a clawback transactions. If this is not a\n   * zero value, the real transaction sender must be the Clawback address from the\n   * AssetParams.\n   */\n  constructor({\n    amount,\n    assetId,\n    receiver,\n    closeAmount,\n    closeTo,\n    sender,\n  }: {\n    amount: number | bigint;\n    assetId: number | bigint;\n    receiver: string;\n    closeAmount?: number | bigint;\n    closeTo?: string;\n    sender?: string;\n  }) {\n    super();\n    this.amount = amount;\n    this.assetId = assetId;\n    this.receiver = receiver;\n    this.closeAmount = closeAmount;\n    this.closeTo = closeTo;\n    this.sender = sender;\n\n    this.attribute_map = {\n      amount: 'amount',\n      assetId: 'asset-id',\n      receiver: 'receiver',\n      closeAmount: 'close-amount',\n      closeTo: 'close-to',\n      sender: 'sender',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): TransactionAssetTransfer {\n    /* eslint-disable dot-notation */\n    if (typeof data['amount'] === 'undefined')\n      throw new Error(`Response is missing required field 'amount': ${data}`);\n    if (typeof data['asset-id'] === 'undefined')\n      throw new Error(`Response is missing required field 'asset-id': ${data}`);\n    if (typeof data['receiver'] === 'undefined')\n      throw new Error(`Response is missing required field 'receiver': ${data}`);\n    return new TransactionAssetTransfer({\n      amount: data['amount'],\n      assetId: data['asset-id'],\n      receiver: data['receiver'],\n      closeAmount: data['close-amount'],\n      closeTo: data['close-to'],\n      sender: data['sender'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Fields for a keyreg transaction.\n * Definition:\n * data/transactions/keyreg.go : KeyregTxnFields\n */\nexport class TransactionKeyreg extends BaseModel {\n  /**\n   * (nonpart) Mark the account as participating or non-participating.\n   */\n  public nonParticipation?: boolean;\n\n  /**\n   * (selkey) Public key used with the Verified Random Function (VRF) result during\n   * committee selection.\n   */\n  public selectionParticipationKey?: Uint8Array;\n\n  /**\n   * (sprfkey) State proof key used in key registration transactions.\n   */\n  public stateProofKey?: Uint8Array;\n\n  /**\n   * (votefst) First round this participation key is valid.\n   */\n  public voteFirstValid?: number | bigint;\n\n  /**\n   * (votekd) Number of subkeys in each batch of participation keys.\n   */\n  public voteKeyDilution?: number | bigint;\n\n  /**\n   * (votelst) Last round this participation key is valid.\n   */\n  public voteLastValid?: number | bigint;\n\n  /**\n   * (votekey) Participation public key used in key registration transactions.\n   */\n  public voteParticipationKey?: Uint8Array;\n\n  /**\n   * Creates a new `TransactionKeyreg` object.\n   * @param nonParticipation - (nonpart) Mark the account as participating or non-participating.\n   * @param selectionParticipationKey - (selkey) Public key used with the Verified Random Function (VRF) result during\n   * committee selection.\n   * @param stateProofKey - (sprfkey) State proof key used in key registration transactions.\n   * @param voteFirstValid - (votefst) First round this participation key is valid.\n   * @param voteKeyDilution - (votekd) Number of subkeys in each batch of participation keys.\n   * @param voteLastValid - (votelst) Last round this participation key is valid.\n   * @param voteParticipationKey - (votekey) Participation public key used in key registration transactions.\n   */\n  constructor({\n    nonParticipation,\n    selectionParticipationKey,\n    stateProofKey,\n    voteFirstValid,\n    voteKeyDilution,\n    voteLastValid,\n    voteParticipationKey,\n  }: {\n    nonParticipation?: boolean;\n    selectionParticipationKey?: string | Uint8Array;\n    stateProofKey?: string | Uint8Array;\n    voteFirstValid?: number | bigint;\n    voteKeyDilution?: number | bigint;\n    voteLastValid?: number | bigint;\n    voteParticipationKey?: string | Uint8Array;\n  }) {\n    super();\n    this.nonParticipation = nonParticipation;\n    this.selectionParticipationKey =\n      typeof selectionParticipationKey === 'string'\n        ? new Uint8Array(Buffer.from(selectionParticipationKey, 'base64'))\n        : selectionParticipationKey;\n    this.stateProofKey =\n      typeof stateProofKey === 'string'\n        ? new Uint8Array(Buffer.from(stateProofKey, 'base64'))\n        : stateProofKey;\n    this.voteFirstValid = voteFirstValid;\n    this.voteKeyDilution = voteKeyDilution;\n    this.voteLastValid = voteLastValid;\n    this.voteParticipationKey =\n      typeof voteParticipationKey === 'string'\n        ? new Uint8Array(Buffer.from(voteParticipationKey, 'base64'))\n        : voteParticipationKey;\n\n    this.attribute_map = {\n      nonParticipation: 'non-participation',\n      selectionParticipationKey: 'selection-participation-key',\n      stateProofKey: 'state-proof-key',\n      voteFirstValid: 'vote-first-valid',\n      voteKeyDilution: 'vote-key-dilution',\n      voteLastValid: 'vote-last-valid',\n      voteParticipationKey: 'vote-participation-key',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): TransactionKeyreg {\n    /* eslint-disable dot-notation */\n    return new TransactionKeyreg({\n      nonParticipation: data['non-participation'],\n      selectionParticipationKey: data['selection-participation-key'],\n      stateProofKey: data['state-proof-key'],\n      voteFirstValid: data['vote-first-valid'],\n      voteKeyDilution: data['vote-key-dilution'],\n      voteLastValid: data['vote-last-valid'],\n      voteParticipationKey: data['vote-participation-key'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Fields for a payment transaction.\n * Definition:\n * data/transactions/payment.go : PaymentTxnFields\n */\nexport class TransactionPayment extends BaseModel {\n  /**\n   * (amt) number of MicroAlgos intended to be transferred.\n   */\n  public amount: number | bigint;\n\n  /**\n   * (rcv) receiver's address.\n   */\n  public receiver: string;\n\n  /**\n   * Number of MicroAlgos that were sent to the close-remainder-to address when\n   * closing the sender account.\n   */\n  public closeAmount?: number | bigint;\n\n  /**\n   * (close) when set, indicates that the sending account should be closed and all\n   * remaining funds be transferred to this address.\n   */\n  public closeRemainderTo?: string;\n\n  /**\n   * Creates a new `TransactionPayment` object.\n   * @param amount - (amt) number of MicroAlgos intended to be transferred.\n   * @param receiver - (rcv) receiver's address.\n   * @param closeAmount - Number of MicroAlgos that were sent to the close-remainder-to address when\n   * closing the sender account.\n   * @param closeRemainderTo - (close) when set, indicates that the sending account should be closed and all\n   * remaining funds be transferred to this address.\n   */\n  constructor({\n    amount,\n    receiver,\n    closeAmount,\n    closeRemainderTo,\n  }: {\n    amount: number | bigint;\n    receiver: string;\n    closeAmount?: number | bigint;\n    closeRemainderTo?: string;\n  }) {\n    super();\n    this.amount = amount;\n    this.receiver = receiver;\n    this.closeAmount = closeAmount;\n    this.closeRemainderTo = closeRemainderTo;\n\n    this.attribute_map = {\n      amount: 'amount',\n      receiver: 'receiver',\n      closeAmount: 'close-amount',\n      closeRemainderTo: 'close-remainder-to',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): TransactionPayment {\n    /* eslint-disable dot-notation */\n    if (typeof data['amount'] === 'undefined')\n      throw new Error(`Response is missing required field 'amount': ${data}`);\n    if (typeof data['receiver'] === 'undefined')\n      throw new Error(`Response is missing required field 'receiver': ${data}`);\n    return new TransactionPayment({\n      amount: data['amount'],\n      receiver: data['receiver'],\n      closeAmount: data['close-amount'],\n      closeRemainderTo: data['close-remainder-to'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n *\n */\nexport class TransactionResponse extends BaseModel {\n  /**\n   * Round at which the results were computed.\n   */\n  public currentRound: number | bigint;\n\n  /**\n   * Contains all fields common to all transactions and serves as an envelope to all\n   * transactions type. Represents both regular and inner transactions.\n   * Definition:\n   * data/transactions/signedtxn.go : SignedTxn\n   * data/transactions/transaction.go : Transaction\n   */\n  public transaction: Transaction;\n\n  /**\n   * Creates a new `TransactionResponse` object.\n   * @param currentRound - Round at which the results were computed.\n   * @param transaction - Contains all fields common to all transactions and serves as an envelope to all\n   * transactions type. Represents both regular and inner transactions.\n   * Definition:\n   * data/transactions/signedtxn.go : SignedTxn\n   * data/transactions/transaction.go : Transaction\n   */\n  constructor({\n    currentRound,\n    transaction,\n  }: {\n    currentRound: number | bigint;\n    transaction: Transaction;\n  }) {\n    super();\n    this.currentRound = currentRound;\n    this.transaction = transaction;\n\n    this.attribute_map = {\n      currentRound: 'current-round',\n      transaction: 'transaction',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): TransactionResponse {\n    /* eslint-disable dot-notation */\n    if (typeof data['current-round'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'current-round': ${data}`\n      );\n    if (typeof data['transaction'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'transaction': ${data}`\n      );\n    return new TransactionResponse({\n      currentRound: data['current-round'],\n      transaction: Transaction.from_obj_for_encoding(data['transaction']),\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Validation signature associated with some data. Only one of the signatures\n * should be provided.\n */\nexport class TransactionSignature extends BaseModel {\n  /**\n   * (lsig) Programatic transaction signature.\n   * Definition:\n   * data/transactions/logicsig.go\n   */\n  public logicsig?: TransactionSignatureLogicsig;\n\n  /**\n   * (msig) structure holding multiple subsignatures.\n   * Definition:\n   * crypto/multisig.go : MultisigSig\n   */\n  public multisig?: TransactionSignatureMultisig;\n\n  /**\n   * (sig) Standard ed25519 signature.\n   */\n  public sig?: Uint8Array;\n\n  /**\n   * Creates a new `TransactionSignature` object.\n   * @param logicsig - (lsig) Programatic transaction signature.\n   * Definition:\n   * data/transactions/logicsig.go\n   * @param multisig - (msig) structure holding multiple subsignatures.\n   * Definition:\n   * crypto/multisig.go : MultisigSig\n   * @param sig - (sig) Standard ed25519 signature.\n   */\n  constructor({\n    logicsig,\n    multisig,\n    sig,\n  }: {\n    logicsig?: TransactionSignatureLogicsig;\n    multisig?: TransactionSignatureMultisig;\n    sig?: string | Uint8Array;\n  }) {\n    super();\n    this.logicsig = logicsig;\n    this.multisig = multisig;\n    this.sig =\n      typeof sig === 'string'\n        ? new Uint8Array(Buffer.from(sig, 'base64'))\n        : sig;\n\n    this.attribute_map = {\n      logicsig: 'logicsig',\n      multisig: 'multisig',\n      sig: 'sig',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): TransactionSignature {\n    /* eslint-disable dot-notation */\n    return new TransactionSignature({\n      logicsig:\n        typeof data['logicsig'] !== 'undefined'\n          ? TransactionSignatureLogicsig.from_obj_for_encoding(data['logicsig'])\n          : undefined,\n      multisig:\n        typeof data['multisig'] !== 'undefined'\n          ? TransactionSignatureMultisig.from_obj_for_encoding(data['multisig'])\n          : undefined,\n      sig: data['sig'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * (lsig) Programatic transaction signature.\n * Definition:\n * data/transactions/logicsig.go\n */\nexport class TransactionSignatureLogicsig extends BaseModel {\n  /**\n   * (l) Program signed by a signature or multi signature, or hashed to be the\n   * address of ana ccount. Base64 encoded TEAL program.\n   */\n  public logic: Uint8Array;\n\n  /**\n   * (arg) Logic arguments, base64 encoded.\n   */\n  public args?: Uint8Array[];\n\n  /**\n   * (msig) structure holding multiple subsignatures.\n   * Definition:\n   * crypto/multisig.go : MultisigSig\n   */\n  public multisigSignature?: TransactionSignatureMultisig;\n\n  /**\n   * (sig) ed25519 signature.\n   */\n  public signature?: Uint8Array;\n\n  /**\n   * Creates a new `TransactionSignatureLogicsig` object.\n   * @param logic - (l) Program signed by a signature or multi signature, or hashed to be the\n   * address of ana ccount. Base64 encoded TEAL program.\n   * @param args - (arg) Logic arguments, base64 encoded.\n   * @param multisigSignature - (msig) structure holding multiple subsignatures.\n   * Definition:\n   * crypto/multisig.go : MultisigSig\n   * @param signature - (sig) ed25519 signature.\n   */\n  constructor({\n    logic,\n    args,\n    multisigSignature,\n    signature,\n  }: {\n    logic: string | Uint8Array;\n    args?: Uint8Array[];\n    multisigSignature?: TransactionSignatureMultisig;\n    signature?: string | Uint8Array;\n  }) {\n    super();\n    this.logic =\n      typeof logic === 'string'\n        ? new Uint8Array(Buffer.from(logic, 'base64'))\n        : logic;\n    this.args = args;\n    this.multisigSignature = multisigSignature;\n    this.signature =\n      typeof signature === 'string'\n        ? new Uint8Array(Buffer.from(signature, 'base64'))\n        : signature;\n\n    this.attribute_map = {\n      logic: 'logic',\n      args: 'args',\n      multisigSignature: 'multisig-signature',\n      signature: 'signature',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): TransactionSignatureLogicsig {\n    /* eslint-disable dot-notation */\n    if (typeof data['logic'] === 'undefined')\n      throw new Error(`Response is missing required field 'logic': ${data}`);\n    return new TransactionSignatureLogicsig({\n      logic: data['logic'],\n      args: data['args'],\n      multisigSignature:\n        typeof data['multisig-signature'] !== 'undefined'\n          ? TransactionSignatureMultisig.from_obj_for_encoding(\n              data['multisig-signature']\n            )\n          : undefined,\n      signature: data['signature'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * (msig) structure holding multiple subsignatures.\n * Definition:\n * crypto/multisig.go : MultisigSig\n */\nexport class TransactionSignatureMultisig extends BaseModel {\n  /**\n   * (subsig) holds pairs of public key and signatures.\n   */\n  public subsignature?: TransactionSignatureMultisigSubsignature[];\n\n  /**\n   * (thr)\n   */\n  public threshold?: number | bigint;\n\n  /**\n   * (v)\n   */\n  public version?: number | bigint;\n\n  /**\n   * Creates a new `TransactionSignatureMultisig` object.\n   * @param subsignature - (subsig) holds pairs of public key and signatures.\n   * @param threshold - (thr)\n   * @param version - (v)\n   */\n  constructor({\n    subsignature,\n    threshold,\n    version,\n  }: {\n    subsignature?: TransactionSignatureMultisigSubsignature[];\n    threshold?: number | bigint;\n    version?: number | bigint;\n  }) {\n    super();\n    this.subsignature = subsignature;\n    this.threshold = threshold;\n    this.version = version;\n\n    this.attribute_map = {\n      subsignature: 'subsignature',\n      threshold: 'threshold',\n      version: 'version',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): TransactionSignatureMultisig {\n    /* eslint-disable dot-notation */\n    return new TransactionSignatureMultisig({\n      subsignature:\n        typeof data['subsignature'] !== 'undefined'\n          ? data['subsignature'].map(\n              TransactionSignatureMultisigSubsignature.from_obj_for_encoding\n            )\n          : undefined,\n      threshold: data['threshold'],\n      version: data['version'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\nexport class TransactionSignatureMultisigSubsignature extends BaseModel {\n  /**\n   * (pk)\n   */\n  public publicKey?: Uint8Array;\n\n  /**\n   * (s)\n   */\n  public signature?: Uint8Array;\n\n  /**\n   * Creates a new `TransactionSignatureMultisigSubsignature` object.\n   * @param publicKey - (pk)\n   * @param signature - (s)\n   */\n  constructor({\n    publicKey,\n    signature,\n  }: {\n    publicKey?: string | Uint8Array;\n    signature?: string | Uint8Array;\n  }) {\n    super();\n    this.publicKey =\n      typeof publicKey === 'string'\n        ? new Uint8Array(Buffer.from(publicKey, 'base64'))\n        : publicKey;\n    this.signature =\n      typeof signature === 'string'\n        ? new Uint8Array(Buffer.from(signature, 'base64'))\n        : signature;\n\n    this.attribute_map = {\n      publicKey: 'public-key',\n      signature: 'signature',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): TransactionSignatureMultisigSubsignature {\n    /* eslint-disable dot-notation */\n    return new TransactionSignatureMultisigSubsignature({\n      publicKey: data['public-key'],\n      signature: data['signature'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Fields for a state proof transaction.\n * Definition:\n * data/transactions/stateproof.go : StateProofTxnFields\n */\nexport class TransactionStateProof extends BaseModel {\n  /**\n   * (spmsg)\n   */\n  public message?: IndexerStateProofMessage;\n\n  /**\n   * (sp) represents a state proof.\n   * Definition:\n   * crypto/stateproof/structs.go : StateProof\n   */\n  public stateProof?: StateProofFields;\n\n  /**\n   * (sptype) Type of the state proof. Integer representing an entry defined in\n   * protocol/stateproof.go\n   */\n  public stateProofType?: number | bigint;\n\n  /**\n   * Creates a new `TransactionStateProof` object.\n   * @param message - (spmsg)\n   * @param stateProof - (sp) represents a state proof.\n   * Definition:\n   * crypto/stateproof/structs.go : StateProof\n   * @param stateProofType - (sptype) Type of the state proof. Integer representing an entry defined in\n   * protocol/stateproof.go\n   */\n  constructor({\n    message,\n    stateProof,\n    stateProofType,\n  }: {\n    message?: IndexerStateProofMessage;\n    stateProof?: StateProofFields;\n    stateProofType?: number | bigint;\n  }) {\n    super();\n    this.message = message;\n    this.stateProof = stateProof;\n    this.stateProofType = stateProofType;\n\n    this.attribute_map = {\n      message: 'message',\n      stateProof: 'state-proof',\n      stateProofType: 'state-proof-type',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): TransactionStateProof {\n    /* eslint-disable dot-notation */\n    return new TransactionStateProof({\n      message:\n        typeof data['message'] !== 'undefined'\n          ? IndexerStateProofMessage.from_obj_for_encoding(data['message'])\n          : undefined,\n      stateProof:\n        typeof data['state-proof'] !== 'undefined'\n          ? StateProofFields.from_obj_for_encoding(data['state-proof'])\n          : undefined,\n      stateProofType: data['state-proof-type'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n *\n */\nexport class TransactionsResponse extends BaseModel {\n  /**\n   * Round at which the results were computed.\n   */\n  public currentRound: number | bigint;\n\n  public transactions: Transaction[];\n\n  /**\n   * Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  public nextToken?: string;\n\n  /**\n   * Creates a new `TransactionsResponse` object.\n   * @param currentRound - Round at which the results were computed.\n   * @param transactions -\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  constructor({\n    currentRound,\n    transactions,\n    nextToken,\n  }: {\n    currentRound: number | bigint;\n    transactions: Transaction[];\n    nextToken?: string;\n  }) {\n    super();\n    this.currentRound = currentRound;\n    this.transactions = transactions;\n    this.nextToken = nextToken;\n\n    this.attribute_map = {\n      currentRound: 'current-round',\n      transactions: 'transactions',\n      nextToken: 'next-token',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): TransactionsResponse {\n    /* eslint-disable dot-notation */\n    if (typeof data['current-round'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'current-round': ${data}`\n      );\n    if (!Array.isArray(data['transactions']))\n      throw new Error(\n        `Response is missing required array field 'transactions': ${data}`\n      );\n    return new TransactionsResponse({\n      currentRound: data['current-round'],\n      transactions: data['transactions'].map(Transaction.from_obj_for_encoding),\n      nextToken: data['next-token'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}