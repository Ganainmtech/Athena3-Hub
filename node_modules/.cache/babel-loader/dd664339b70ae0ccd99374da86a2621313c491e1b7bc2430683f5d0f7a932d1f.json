{"ast":null,"code":"import JSONRequest from '../jsonrequest';\nexport default class GetTransactionProof extends JSONRequest {\n  constructor(c, intDecoding, round, txID) {\n    super(c, intDecoding);\n    this.round = round;\n    this.txID = txID;\n    this.round = round;\n    this.txID = txID;\n  }\n  path() {\n    return `/v2/blocks/${this.round}/transactions/${this.txID}/proof`;\n  }\n  /**\n   * Exclude assets and application data from results\n   * The type of hash function used to create the proof, must be one of: \"sha512_256\", \"sha256\"\n   *\n   * #### Example\n   * ```typescript\n   * const hashType = \"sha256\";\n   * const round = 123456;\n   * const txId = \"abc123;\n   * const txProof = await algodClient.getTransactionProof(round, txId)\n   *        .hashType(hashType)\n   *        .do();\n   * ```\n   *\n   * @param hashType\n   * @category query\n   */\n  hashType(hashType) {\n    this.query.hashtype = hashType;\n    return this;\n  }\n}","map":{"version":3,"names":["JSONRequest","GetTransactionProof","constructor","c","intDecoding","round","txID","path","hashType","query","hashtype"],"sources":["/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/node_modules/algosdk/src/client/v2/algod/getTransactionProof.ts"],"sourcesContent":["import JSONRequest from '../jsonrequest';\nimport HTTPClient from '../../client';\nimport IntDecoding from '../../../types/intDecoding';\n\nexport default class GetTransactionProof extends JSONRequest {\n  constructor(\n    c: HTTPClient,\n    intDecoding: IntDecoding,\n    private round: number,\n    private txID: string\n  ) {\n    super(c, intDecoding);\n\n    this.round = round;\n    this.txID = txID;\n  }\n\n  path() {\n    return `/v2/blocks/${this.round}/transactions/${this.txID}/proof`;\n  }\n\n  /**\n   * Exclude assets and application data from results\n   * The type of hash function used to create the proof, must be one of: \"sha512_256\", \"sha256\"\n   *\n   * #### Example\n   * ```typescript\n   * const hashType = \"sha256\";\n   * const round = 123456;\n   * const txId = \"abc123;\n   * const txProof = await algodClient.getTransactionProof(round, txId)\n   *        .hashType(hashType)\n   *        .do();\n   * ```\n   *\n   * @param hashType\n   * @category query\n   */\n  hashType(hashType: string) {\n    this.query.hashtype = hashType;\n    return this;\n  }\n}\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,gBAAgB;AAIxC,eAAc,MAAOC,mBAAoB,SAAQD,WAAW;EAC1DE,YACEC,CAAa,EACbC,WAAwB,EAChBC,KAAa,EACbC,IAAY;IAEpB,KAAK,CAACH,CAAC,EAAEC,WAAW,CAAC;IAHb,KAAAC,KAAK,GAALA,KAAK;IACL,KAAAC,IAAI,GAAJA,IAAI;IAIZ,IAAI,CAACD,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,IAAI,GAAGA,IAAI;EAClB;EAEAC,IAAIA,CAAA;IACF,OAAO,cAAc,IAAI,CAACF,KAAK,iBAAiB,IAAI,CAACC,IAAI,QAAQ;EACnE;EAEA;;;;;;;;;;;;;;;;;EAiBAE,QAAQA,CAACA,QAAgB;IACvB,IAAI,CAACC,KAAK,CAACC,QAAQ,GAAGF,QAAQ;IAC9B,OAAO,IAAI;EACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}