{"ast":null,"code":"/*\n * [hi-base32]{@link https://github.com/emn178/hi-base32}\n *\n * @version 0.5.0\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2015-2018\n * @license MIT\n */\n/*jslint bitwise: true */\n(function () {\n  'use strict';\n\n  var root = typeof window === 'object' ? window : {};\n  var NODE_JS = !root.HI_BASE32_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  }\n  var COMMON_JS = !root.HI_BASE32_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var BASE32_ENCODE_CHAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'.split('');\n  var BASE32_DECODE_CHAR = {\n    'A': 0,\n    'B': 1,\n    'C': 2,\n    'D': 3,\n    'E': 4,\n    'F': 5,\n    'G': 6,\n    'H': 7,\n    'I': 8,\n    'J': 9,\n    'K': 10,\n    'L': 11,\n    'M': 12,\n    'N': 13,\n    'O': 14,\n    'P': 15,\n    'Q': 16,\n    'R': 17,\n    'S': 18,\n    'T': 19,\n    'U': 20,\n    'V': 21,\n    'W': 22,\n    'X': 23,\n    'Y': 24,\n    'Z': 25,\n    '2': 26,\n    '3': 27,\n    '4': 28,\n    '5': 29,\n    '6': 30,\n    '7': 31\n  };\n  var blocks = [0, 0, 0, 0, 0, 0, 0, 0];\n  var throwInvalidUtf8 = function throwInvalidUtf8(position, partial) {\n    if (partial.length > 10) {\n      partial = '...' + partial.substr(-10);\n    }\n    var err = new Error('Decoded data is not valid UTF-8.' + ' Maybe try base32.decode.asBytes()?' + ' Partial data after reading ' + position + ' bytes: ' + partial + ' <-');\n    err.position = position;\n    throw err;\n  };\n  var toUtf8String = function toUtf8String(bytes) {\n    var str = '',\n      length = bytes.length,\n      i = 0,\n      followingChars = 0,\n      b,\n      c;\n    while (i < length) {\n      b = bytes[i++];\n      if (b <= 0x7F) {\n        str += String.fromCharCode(b);\n        continue;\n      } else if (b > 0xBF && b <= 0xDF) {\n        c = b & 0x1F;\n        followingChars = 1;\n      } else if (b <= 0xEF) {\n        c = b & 0x0F;\n        followingChars = 2;\n      } else if (b <= 0xF7) {\n        c = b & 0x07;\n        followingChars = 3;\n      } else {\n        throwInvalidUtf8(i, str);\n      }\n      for (var j = 0; j < followingChars; ++j) {\n        b = bytes[i++];\n        if (b < 0x80 || b > 0xBF) {\n          throwInvalidUtf8(i, str);\n        }\n        c <<= 6;\n        c += b & 0x3F;\n      }\n      if (c >= 0xD800 && c <= 0xDFFF) {\n        throwInvalidUtf8(i, str);\n      }\n      if (c > 0x10FFFF) {\n        throwInvalidUtf8(i, str);\n      }\n      if (c <= 0xFFFF) {\n        str += String.fromCharCode(c);\n      } else {\n        c -= 0x10000;\n        str += String.fromCharCode((c >> 10) + 0xD800);\n        str += String.fromCharCode((c & 0x3FF) + 0xDC00);\n      }\n    }\n    return str;\n  };\n  var decodeAsBytes = function decodeAsBytes(base32Str) {\n    if (base32Str === '') {\n      return [];\n    } else if (!/^[A-Z2-7=]+$/.test(base32Str)) {\n      throw new Error('Invalid base32 characters');\n    }\n    base32Str = base32Str.replace(/=/g, '');\n    var v1,\n      v2,\n      v3,\n      v4,\n      v5,\n      v6,\n      v7,\n      v8,\n      bytes = [],\n      index = 0,\n      length = base32Str.length;\n\n    // 4 char to 3 bytes\n    for (var i = 0, count = length >> 3 << 3; i < count;) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v6 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v7 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v8 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      bytes[index++] = (v1 << 3 | v2 >>> 2) & 255;\n      bytes[index++] = (v2 << 6 | v3 << 1 | v4 >>> 4) & 255;\n      bytes[index++] = (v4 << 4 | v5 >>> 1) & 255;\n      bytes[index++] = (v5 << 7 | v6 << 2 | v7 >>> 3) & 255;\n      bytes[index++] = (v7 << 5 | v8) & 255;\n    }\n\n    // remain bytes\n    var remain = length - count;\n    if (remain === 2) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      bytes[index++] = (v1 << 3 | v2 >>> 2) & 255;\n    } else if (remain === 4) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      bytes[index++] = (v1 << 3 | v2 >>> 2) & 255;\n      bytes[index++] = (v2 << 6 | v3 << 1 | v4 >>> 4) & 255;\n    } else if (remain === 5) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      bytes[index++] = (v1 << 3 | v2 >>> 2) & 255;\n      bytes[index++] = (v2 << 6 | v3 << 1 | v4 >>> 4) & 255;\n      bytes[index++] = (v4 << 4 | v5 >>> 1) & 255;\n    } else if (remain === 7) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v6 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v7 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      bytes[index++] = (v1 << 3 | v2 >>> 2) & 255;\n      bytes[index++] = (v2 << 6 | v3 << 1 | v4 >>> 4) & 255;\n      bytes[index++] = (v4 << 4 | v5 >>> 1) & 255;\n      bytes[index++] = (v5 << 7 | v6 << 2 | v7 >>> 3) & 255;\n    }\n    return bytes;\n  };\n  var encodeAscii = function encodeAscii(str) {\n    var v1,\n      v2,\n      v3,\n      v4,\n      v5,\n      base32Str = '',\n      length = str.length;\n    for (var i = 0, count = parseInt(length / 5) * 5; i < count;) {\n      v1 = str.charCodeAt(i++);\n      v2 = str.charCodeAt(i++);\n      v3 = str.charCodeAt(i++);\n      v4 = str.charCodeAt(i++);\n      v5 = str.charCodeAt(i++);\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] + BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] + BASE32_ENCODE_CHAR[v4 >>> 2 & 31] + BASE32_ENCODE_CHAR[(v4 << 3 | v5 >>> 5) & 31] + BASE32_ENCODE_CHAR[v5 & 31];\n    }\n\n    // remain char\n    var remain = length - count;\n    if (remain === 1) {\n      v1 = str.charCodeAt(i);\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[v1 << 2 & 31] + '======';\n    } else if (remain === 2) {\n      v1 = str.charCodeAt(i++);\n      v2 = str.charCodeAt(i);\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[v2 << 4 & 31] + '====';\n    } else if (remain === 3) {\n      v1 = str.charCodeAt(i++);\n      v2 = str.charCodeAt(i++);\n      v3 = str.charCodeAt(i);\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] + BASE32_ENCODE_CHAR[v3 << 1 & 31] + '===';\n    } else if (remain === 4) {\n      v1 = str.charCodeAt(i++);\n      v2 = str.charCodeAt(i++);\n      v3 = str.charCodeAt(i++);\n      v4 = str.charCodeAt(i);\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] + BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] + BASE32_ENCODE_CHAR[v4 >>> 2 & 31] + BASE32_ENCODE_CHAR[v4 << 3 & 31] + '=';\n    }\n    return base32Str;\n  };\n  var encodeUtf8 = function encodeUtf8(str) {\n    var v1,\n      v2,\n      v3,\n      v4,\n      v5,\n      code,\n      end = false,\n      base32Str = '',\n      index = 0,\n      i,\n      start = 0,\n      bytes = 0,\n      length = str.length;\n    if (str === '') {\n      return base32Str;\n    }\n    do {\n      blocks[0] = blocks[5];\n      blocks[1] = blocks[6];\n      blocks[2] = blocks[7];\n      for (i = start; index < length && i < 5; ++index) {\n        code = str.charCodeAt(index);\n        if (code < 0x80) {\n          blocks[i++] = code;\n        } else if (code < 0x800) {\n          blocks[i++] = 0xc0 | code >> 6;\n          blocks[i++] = 0x80 | code & 0x3f;\n        } else if (code < 0xd800 || code >= 0xe000) {\n          blocks[i++] = 0xe0 | code >> 12;\n          blocks[i++] = 0x80 | code >> 6 & 0x3f;\n          blocks[i++] = 0x80 | code & 0x3f;\n        } else {\n          code = 0x10000 + ((code & 0x3ff) << 10 | str.charCodeAt(++index) & 0x3ff);\n          blocks[i++] = 0xf0 | code >> 18;\n          blocks[i++] = 0x80 | code >> 12 & 0x3f;\n          blocks[i++] = 0x80 | code >> 6 & 0x3f;\n          blocks[i++] = 0x80 | code & 0x3f;\n        }\n      }\n      bytes += i - start;\n      start = i - 5;\n      if (index === length) {\n        ++index;\n      }\n      if (index > length && i < 6) {\n        end = true;\n      }\n      v1 = blocks[0];\n      if (i > 4) {\n        v2 = blocks[1];\n        v3 = blocks[2];\n        v4 = blocks[3];\n        v5 = blocks[4];\n        base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] + BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] + BASE32_ENCODE_CHAR[v4 >>> 2 & 31] + BASE32_ENCODE_CHAR[(v4 << 3 | v5 >>> 5) & 31] + BASE32_ENCODE_CHAR[v5 & 31];\n      } else if (i === 1) {\n        base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[v1 << 2 & 31] + '======';\n      } else if (i === 2) {\n        v2 = blocks[1];\n        base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[v2 << 4 & 31] + '====';\n      } else if (i === 3) {\n        v2 = blocks[1];\n        v3 = blocks[2];\n        base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] + BASE32_ENCODE_CHAR[v3 << 1 & 31] + '===';\n      } else {\n        v2 = blocks[1];\n        v3 = blocks[2];\n        v4 = blocks[3];\n        base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] + BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] + BASE32_ENCODE_CHAR[v4 >>> 2 & 31] + BASE32_ENCODE_CHAR[v4 << 3 & 31] + '=';\n      }\n    } while (!end);\n    return base32Str;\n  };\n  var encodeBytes = function encodeBytes(bytes) {\n    var v1,\n      v2,\n      v3,\n      v4,\n      v5,\n      base32Str = '',\n      length = bytes.length;\n    for (var i = 0, count = parseInt(length / 5) * 5; i < count;) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i++];\n      v4 = bytes[i++];\n      v5 = bytes[i++];\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] + BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] + BASE32_ENCODE_CHAR[v4 >>> 2 & 31] + BASE32_ENCODE_CHAR[(v4 << 3 | v5 >>> 5) & 31] + BASE32_ENCODE_CHAR[v5 & 31];\n    }\n\n    // remain char\n    var remain = length - count;\n    if (remain === 1) {\n      v1 = bytes[i];\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[v1 << 2 & 31] + '======';\n    } else if (remain === 2) {\n      v1 = bytes[i++];\n      v2 = bytes[i];\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[v2 << 4 & 31] + '====';\n    } else if (remain === 3) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i];\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] + BASE32_ENCODE_CHAR[v3 << 1 & 31] + '===';\n    } else if (remain === 4) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i++];\n      v4 = bytes[i];\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] + BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] + BASE32_ENCODE_CHAR[v4 >>> 2 & 31] + BASE32_ENCODE_CHAR[v4 << 3 & 31] + '=';\n    }\n    return base32Str;\n  };\n  var encode = function encode(input, asciiOnly) {\n    var notString = typeof input !== 'string';\n    if (notString && input.constructor === ArrayBuffer) {\n      input = new Uint8Array(input);\n    }\n    if (notString) {\n      return encodeBytes(input);\n    } else if (asciiOnly) {\n      return encodeAscii(input);\n    } else {\n      return encodeUtf8(input);\n    }\n  };\n  var decode = function decode(base32Str, asciiOnly) {\n    if (!asciiOnly) {\n      return toUtf8String(decodeAsBytes(base32Str));\n    }\n    if (base32Str === '') {\n      return '';\n    } else if (!/^[A-Z2-7=]+$/.test(base32Str)) {\n      throw new Error('Invalid base32 characters');\n    }\n    var v1,\n      v2,\n      v3,\n      v4,\n      v5,\n      v6,\n      v7,\n      v8,\n      str = '',\n      length = base32Str.indexOf('=');\n    if (length === -1) {\n      length = base32Str.length;\n    }\n\n    // 8 char to 5 bytes\n    for (var i = 0, count = length >> 3 << 3; i < count;) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v6 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v7 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v8 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      str += String.fromCharCode((v1 << 3 | v2 >>> 2) & 255) + String.fromCharCode((v2 << 6 | v3 << 1 | v4 >>> 4) & 255) + String.fromCharCode((v4 << 4 | v5 >>> 1) & 255) + String.fromCharCode((v5 << 7 | v6 << 2 | v7 >>> 3) & 255) + String.fromCharCode((v7 << 5 | v8) & 255);\n    }\n\n    // remain bytes\n    var remain = length - count;\n    if (remain === 2) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      str += String.fromCharCode((v1 << 3 | v2 >>> 2) & 255);\n    } else if (remain === 4) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      str += String.fromCharCode((v1 << 3 | v2 >>> 2) & 255) + String.fromCharCode((v2 << 6 | v3 << 1 | v4 >>> 4) & 255);\n    } else if (remain === 5) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      str += String.fromCharCode((v1 << 3 | v2 >>> 2) & 255) + String.fromCharCode((v2 << 6 | v3 << 1 | v4 >>> 4) & 255) + String.fromCharCode((v4 << 4 | v5 >>> 1) & 255);\n    } else if (remain === 7) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v6 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v7 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      str += String.fromCharCode((v1 << 3 | v2 >>> 2) & 255) + String.fromCharCode((v2 << 6 | v3 << 1 | v4 >>> 4) & 255) + String.fromCharCode((v4 << 4 | v5 >>> 1) & 255) + String.fromCharCode((v5 << 7 | v6 << 2 | v7 >>> 3) & 255);\n    }\n    return str;\n  };\n  var exports = {\n    encode: encode,\n    decode: decode\n  };\n  decode.asBytes = decodeAsBytes;\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    root.base32 = exports;\n    if (AMD) {\n      define(function () {\n        return exports;\n      });\n    }\n  }\n})();","map":{"version":3,"names":["root","window","NODE_JS","HI_BASE32_NO_NODE_JS","process","versions","node","global","COMMON_JS","HI_BASE32_NO_COMMON_JS","module","exports","AMD","define","amd","BASE32_ENCODE_CHAR","split","BASE32_DECODE_CHAR","blocks","throwInvalidUtf8","position","partial","length","substr","err","Error","toUtf8String","bytes","str","i","followingChars","b","c","String","fromCharCode","j","decodeAsBytes","base32Str","test","replace","v1","v2","v3","v4","v5","v6","v7","v8","index","count","charAt","remain","encodeAscii","parseInt","charCodeAt","encodeUtf8","code","end","start","encodeBytes","encode","input","asciiOnly","notString","constructor","ArrayBuffer","Uint8Array","decode","indexOf","asBytes","base32"],"sources":["/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/hi-base32/src/base32.js"],"sourcesContent":["/*\n * [hi-base32]{@link https://github.com/emn178/hi-base32}\n *\n * @version 0.5.0\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2015-2018\n * @license MIT\n */\n/*jslint bitwise: true */\n(function () {\n  'use strict';\n\n  var root = typeof window === 'object' ? window : {};\n  var NODE_JS = !root.HI_BASE32_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  }\n  var COMMON_JS = !root.HI_BASE32_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var BASE32_ENCODE_CHAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'.split('');\n  var BASE32_DECODE_CHAR = {\n    'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6, 'H': 7, 'I': 8,\n    'J': 9, 'K': 10, 'L': 11, 'M': 12, 'N': 13, 'O': 14, 'P': 15, 'Q': 16,\n    'R': 17, 'S': 18, 'T': 19, 'U': 20, 'V': 21, 'W': 22, 'X': 23, 'Y': 24,\n    'Z': 25, '2': 26, '3': 27, '4': 28, '5': 29, '6': 30, '7': 31\n  };\n\n  var blocks = [0, 0, 0, 0, 0, 0, 0, 0];\n\n  var throwInvalidUtf8 = function (position, partial) {\n    if (partial.length > 10) {\n      partial = '...' + partial.substr(-10);\n    }\n    var err = new Error('Decoded data is not valid UTF-8.'\n      + ' Maybe try base32.decode.asBytes()?'\n      + ' Partial data after reading ' + position + ' bytes: ' + partial + ' <-');\n    err.position = position;\n    throw err;\n  };\n\n  var toUtf8String = function (bytes) {\n    var str = '', length = bytes.length, i = 0, followingChars = 0, b, c;\n    while (i < length) {\n      b = bytes[i++];\n      if (b <= 0x7F) {\n        str += String.fromCharCode(b);\n        continue;\n      } else if (b > 0xBF && b <= 0xDF) {\n        c = b & 0x1F;\n        followingChars = 1;\n      } else if (b <= 0xEF) {\n        c = b & 0x0F;\n        followingChars = 2;\n      } else if (b <= 0xF7) {\n        c = b & 0x07;\n        followingChars = 3;\n      } else {\n        throwInvalidUtf8(i, str);\n      }\n\n      for (var j = 0; j < followingChars; ++j) {\n        b = bytes[i++];\n        if (b < 0x80 || b > 0xBF) {\n          throwInvalidUtf8(i, str);\n        }\n        c <<= 6;\n        c += b & 0x3F;\n      }\n      if (c >= 0xD800 && c <= 0xDFFF) {\n        throwInvalidUtf8(i, str);\n      }\n      if (c > 0x10FFFF) {\n        throwInvalidUtf8(i, str);\n      }\n\n      if (c <= 0xFFFF) {\n        str += String.fromCharCode(c);\n      } else {\n        c -= 0x10000;\n        str += String.fromCharCode((c >> 10) + 0xD800);\n        str += String.fromCharCode((c & 0x3FF) + 0xDC00);\n      }\n    }\n    return str;\n  };\n\n  var decodeAsBytes = function (base32Str) {\n    if (base32Str === '') {\n      return [];\n    } else if (!/^[A-Z2-7=]+$/.test(base32Str)) {\n      throw new Error('Invalid base32 characters');\n    }\n    base32Str = base32Str.replace(/=/g, '');\n    var v1, v2, v3, v4, v5, v6, v7, v8, bytes = [], index = 0, length = base32Str.length;\n\n    // 4 char to 3 bytes\n    for (var i = 0, count = length >> 3 << 3; i < count;) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v6 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v7 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v8 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      bytes[index++] = (v1 << 3 | v2 >>> 2) & 255;\n      bytes[index++] = (v2 << 6 | v3 << 1 | v4 >>> 4) & 255;\n      bytes[index++] = (v4 << 4 | v5 >>> 1) & 255;\n      bytes[index++] = (v5 << 7 | v6 << 2 | v7 >>> 3) & 255;\n      bytes[index++] = (v7 << 5 | v8) & 255;\n    }\n\n    // remain bytes\n    var remain = length - count;\n    if (remain === 2) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      bytes[index++] = (v1 << 3 | v2 >>> 2) & 255;\n    } else if (remain === 4) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      bytes[index++] = (v1 << 3 | v2 >>> 2) & 255;\n      bytes[index++] = (v2 << 6 | v3 << 1 | v4 >>> 4) & 255;\n    } else if (remain === 5) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      bytes[index++] = (v1 << 3 | v2 >>> 2) & 255;\n      bytes[index++] = (v2 << 6 | v3 << 1 | v4 >>> 4) & 255;\n      bytes[index++] = (v4 << 4 | v5 >>> 1) & 255;\n    } else if (remain === 7) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v6 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v7 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      bytes[index++] = (v1 << 3 | v2 >>> 2) & 255;\n      bytes[index++] = (v2 << 6 | v3 << 1 | v4 >>> 4) & 255;\n      bytes[index++] = (v4 << 4 | v5 >>> 1) & 255;\n      bytes[index++] = (v5 << 7 | v6 << 2 | v7 >>> 3) & 255;\n    }\n    return bytes;\n  };\n\n  var encodeAscii = function (str) {\n    var v1, v2, v3, v4, v5, base32Str = '', length = str.length;\n    for (var i = 0, count = parseInt(length / 5) * 5; i < count;) {\n      v1 = str.charCodeAt(i++);\n      v2 = str.charCodeAt(i++);\n      v3 = str.charCodeAt(i++);\n      v4 = str.charCodeAt(i++);\n      v5 = str.charCodeAt(i++);\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +\n        BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] +\n        BASE32_ENCODE_CHAR[(v2 >>> 1) & 31] +\n        BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] +\n        BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] +\n        BASE32_ENCODE_CHAR[(v4 >>> 2) & 31] +\n        BASE32_ENCODE_CHAR[(v4 << 3 | v5 >>> 5) & 31] +\n        BASE32_ENCODE_CHAR[v5 & 31];\n    }\n\n    // remain char\n    var remain = length - count;\n    if (remain === 1) {\n      v1 = str.charCodeAt(i);\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +\n        BASE32_ENCODE_CHAR[(v1 << 2) & 31] +\n        '======';\n    } else if (remain === 2) {\n      v1 = str.charCodeAt(i++);\n      v2 = str.charCodeAt(i);\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +\n        BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] +\n        BASE32_ENCODE_CHAR[(v2 >>> 1) & 31] +\n        BASE32_ENCODE_CHAR[(v2 << 4) & 31] +\n        '====';\n    } else if (remain === 3) {\n      v1 = str.charCodeAt(i++);\n      v2 = str.charCodeAt(i++);\n      v3 = str.charCodeAt(i);\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +\n        BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] +\n        BASE32_ENCODE_CHAR[(v2 >>> 1) & 31] +\n        BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] +\n        BASE32_ENCODE_CHAR[(v3 << 1) & 31] +\n        '===';\n    } else if (remain === 4) {\n      v1 = str.charCodeAt(i++);\n      v2 = str.charCodeAt(i++);\n      v3 = str.charCodeAt(i++);\n      v4 = str.charCodeAt(i);\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +\n        BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] +\n        BASE32_ENCODE_CHAR[(v2 >>> 1) & 31] +\n        BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] +\n        BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] +\n        BASE32_ENCODE_CHAR[(v4 >>> 2) & 31] +\n        BASE32_ENCODE_CHAR[(v4 << 3) & 31] +\n        '=';\n    }\n    return base32Str;\n  };\n\n  var encodeUtf8 = function (str) {\n    var v1, v2, v3, v4, v5, code, end = false, base32Str = '',\n      index = 0, i, start = 0, bytes = 0, length = str.length;\n      if (str === '') {\n        return base32Str;\n      }\n    do {\n      blocks[0] = blocks[5];\n      blocks[1] = blocks[6];\n      blocks[2] = blocks[7];\n      for (i = start; index < length && i < 5; ++index) {\n        code = str.charCodeAt(index);\n        if (code < 0x80) {\n          blocks[i++] = code;\n        } else if (code < 0x800) {\n          blocks[i++] = 0xc0 | (code >> 6);\n          blocks[i++] = 0x80 | (code & 0x3f);\n        } else if (code < 0xd800 || code >= 0xe000) {\n          blocks[i++] = 0xe0 | (code >> 12);\n          blocks[i++] = 0x80 | ((code >> 6) & 0x3f);\n          blocks[i++] = 0x80 | (code & 0x3f);\n        } else {\n          code = 0x10000 + (((code & 0x3ff) << 10) | (str.charCodeAt(++index) & 0x3ff));\n          blocks[i++] = 0xf0 | (code >> 18);\n          blocks[i++] = 0x80 | ((code >> 12) & 0x3f);\n          blocks[i++] = 0x80 | ((code >> 6) & 0x3f);\n          blocks[i++] = 0x80 | (code & 0x3f);\n        }\n      }\n      bytes += i - start;\n      start = i - 5;\n      if (index === length) {\n        ++index;\n      }\n      if (index > length && i < 6) {\n        end = true;\n      }\n      v1 = blocks[0];\n      if (i > 4) {\n        v2 = blocks[1];\n        v3 = blocks[2];\n        v4 = blocks[3];\n        v5 = blocks[4];\n        base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +\n          BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] +\n          BASE32_ENCODE_CHAR[(v2 >>> 1) & 31] +\n          BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] +\n          BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] +\n          BASE32_ENCODE_CHAR[(v4 >>> 2) & 31] +\n          BASE32_ENCODE_CHAR[(v4 << 3 | v5 >>> 5) & 31] +\n          BASE32_ENCODE_CHAR[v5 & 31];\n      } else if (i === 1) {\n        base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +\n          BASE32_ENCODE_CHAR[(v1 << 2) & 31] +\n          '======';\n      } else if (i === 2) {\n        v2 = blocks[1];\n        base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +\n          BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] +\n          BASE32_ENCODE_CHAR[(v2 >>> 1) & 31] +\n          BASE32_ENCODE_CHAR[(v2 << 4) & 31] +\n          '====';\n      } else if (i === 3) {\n        v2 = blocks[1];\n        v3 = blocks[2];\n        base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +\n          BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] +\n          BASE32_ENCODE_CHAR[(v2 >>> 1) & 31] +\n          BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] +\n          BASE32_ENCODE_CHAR[(v3 << 1) & 31] +\n          '===';\n      } else {\n        v2 = blocks[1];\n        v3 = blocks[2];\n        v4 = blocks[3];\n        base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +\n          BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] +\n          BASE32_ENCODE_CHAR[(v2 >>> 1) & 31] +\n          BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] +\n          BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] +\n          BASE32_ENCODE_CHAR[(v4 >>> 2) & 31] +\n          BASE32_ENCODE_CHAR[(v4 << 3) & 31] +\n          '=';\n      }\n    } while (!end);\n    return base32Str;\n  };\n\n  var encodeBytes = function (bytes) {\n    var v1, v2, v3, v4, v5, base32Str = '', length = bytes.length;\n    for (var i = 0, count = parseInt(length / 5) * 5; i < count;) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i++];\n      v4 = bytes[i++];\n      v5 = bytes[i++];\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +\n        BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] +\n        BASE32_ENCODE_CHAR[(v2 >>> 1) & 31] +\n        BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] +\n        BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] +\n        BASE32_ENCODE_CHAR[(v4 >>> 2) & 31] +\n        BASE32_ENCODE_CHAR[(v4 << 3 | v5 >>> 5) & 31] +\n        BASE32_ENCODE_CHAR[v5 & 31];\n    }\n\n    // remain char\n    var remain = length - count;\n    if (remain === 1) {\n      v1 = bytes[i];\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +\n        BASE32_ENCODE_CHAR[(v1 << 2) & 31] +\n        '======';\n    } else if (remain === 2) {\n      v1 = bytes[i++];\n      v2 = bytes[i];\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +\n        BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] +\n        BASE32_ENCODE_CHAR[(v2 >>> 1) & 31] +\n        BASE32_ENCODE_CHAR[(v2 << 4) & 31] +\n        '====';\n    } else if (remain === 3) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i];\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +\n        BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] +\n        BASE32_ENCODE_CHAR[(v2 >>> 1) & 31] +\n        BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] +\n        BASE32_ENCODE_CHAR[(v3 << 1) & 31] +\n        '===';\n    } else if (remain === 4) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i++];\n      v4 = bytes[i];\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +\n        BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] +\n        BASE32_ENCODE_CHAR[(v2 >>> 1) & 31] +\n        BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] +\n        BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] +\n        BASE32_ENCODE_CHAR[(v4 >>> 2) & 31] +\n        BASE32_ENCODE_CHAR[(v4 << 3) & 31] +\n        '=';\n    }\n    return base32Str;\n  };\n\n  var encode = function (input, asciiOnly) {\n    var notString = typeof(input) !== 'string';\n    if (notString && input.constructor === ArrayBuffer) {\n      input = new Uint8Array(input);\n    }\n    if (notString) {\n      return encodeBytes(input);\n    } else if (asciiOnly) {\n      return encodeAscii(input);\n    } else {\n      return encodeUtf8(input);\n    }\n  };\n\n  var decode = function (base32Str, asciiOnly) {\n    if (!asciiOnly) {\n      return toUtf8String(decodeAsBytes(base32Str));\n    }\n    if (base32Str === '') {\n      return '';\n    } else if (!/^[A-Z2-7=]+$/.test(base32Str)) {\n      throw new Error('Invalid base32 characters');\n    }\n    var v1, v2, v3, v4, v5, v6, v7, v8, str = '', length = base32Str.indexOf('=');\n    if (length === -1) {\n      length = base32Str.length;\n    }\n\n    // 8 char to 5 bytes\n    for (var i = 0, count = length >> 3 << 3; i < count;) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v6 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v7 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v8 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      str += String.fromCharCode((v1 << 3 | v2 >>> 2) & 255) +\n        String.fromCharCode((v2 << 6 | v3 << 1 | v4 >>> 4) & 255) +\n        String.fromCharCode((v4 << 4 | v5 >>> 1) & 255) +\n        String.fromCharCode((v5 << 7 | v6 << 2 | v7 >>> 3) & 255) +\n        String.fromCharCode((v7 << 5 | v8) & 255);\n    }\n\n    // remain bytes\n    var remain = length - count;\n    if (remain === 2) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      str += String.fromCharCode((v1 << 3 | v2 >>> 2) & 255);\n    } else if (remain === 4) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      str += String.fromCharCode((v1 << 3 | v2 >>> 2) & 255) +\n        String.fromCharCode((v2 << 6 | v3 << 1 | v4 >>> 4) & 255);\n    } else if (remain === 5) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      str += String.fromCharCode((v1 << 3 | v2 >>> 2) & 255) +\n        String.fromCharCode((v2 << 6 | v3 << 1 | v4 >>> 4) & 255) +\n        String.fromCharCode((v4 << 4 | v5 >>> 1) & 255);\n    } else if (remain === 7) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v6 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v7 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      str += String.fromCharCode((v1 << 3 | v2 >>> 2) & 255) +\n        String.fromCharCode((v2 << 6 | v3 << 1 | v4 >>> 4) & 255) +\n        String.fromCharCode((v4 << 4 | v5 >>> 1) & 255) +\n        String.fromCharCode((v5 << 7 | v6 << 2 | v7 >>> 3) & 255);\n    }\n    return str;\n  };\n\n  var exports = {\n    encode: encode,\n    decode: decode\n  };\n  decode.asBytes = decodeAsBytes;\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    root.base32 = exports;\n    if (AMD) {\n      define(function() {\n        return exports;\n      });\n    }\n  }\n})();\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}