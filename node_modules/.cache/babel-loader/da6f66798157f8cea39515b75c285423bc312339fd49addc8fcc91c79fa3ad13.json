{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport { useContext } from '@rc-component/context';\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { getCellProps } from \"../Body/BodyRow\";\nimport Cell from \"../Cell\";\nimport { GridContext } from \"./context\";\n/**\n * Return the width of the column by `colSpan`.\n * When `colSpan` is `0` will be trade as `1`.\n */\nexport function getColumnWidth(colIndex, colSpan, columnsOffset) {\n  var mergedColSpan = colSpan || 1;\n  return columnsOffset[colIndex + mergedColSpan] - (columnsOffset[colIndex] || 0);\n}\nfunction VirtualCell(props) {\n  var rowInfo = props.rowInfo,\n    column = props.column,\n    colIndex = props.colIndex,\n    indent = props.indent,\n    index = props.index,\n    renderIndex = props.renderIndex,\n    record = props.record,\n    style = props.style,\n    className = props.className,\n    inverse = props.inverse,\n    getHeight = props.getHeight;\n  var render = column.render,\n    dataIndex = column.dataIndex,\n    columnClassName = column.className,\n    colWidth = column.width;\n  var _useContext = useContext(GridContext, ['columnsOffset']),\n    columnsOffset = _useContext.columnsOffset;\n  var _getCellProps = getCellProps(rowInfo, column, colIndex, indent, index),\n    key = _getCellProps.key,\n    fixedInfo = _getCellProps.fixedInfo,\n    appendCellNode = _getCellProps.appendCellNode,\n    additionalCellProps = _getCellProps.additionalCellProps;\n  var cellStyle = additionalCellProps.style,\n    _additionalCellProps$ = additionalCellProps.colSpan,\n    colSpan = _additionalCellProps$ === void 0 ? 1 : _additionalCellProps$,\n    _additionalCellProps$2 = additionalCellProps.rowSpan,\n    rowSpan = _additionalCellProps$2 === void 0 ? 1 : _additionalCellProps$2;\n\n  // ========================= ColWidth =========================\n  // column width\n  var startColIndex = colIndex - 1;\n  var concatColWidth = getColumnWidth(startColIndex, colSpan, columnsOffset);\n\n  // margin offset\n  var marginOffset = colSpan > 1 ? colWidth - concatColWidth : 0;\n\n  // ========================== Style ===========================\n  var mergedStyle = _objectSpread(_objectSpread(_objectSpread({}, cellStyle), style), {}, {\n    flex: \"0 0 \".concat(concatColWidth, \"px\"),\n    width: \"\".concat(concatColWidth, \"px\"),\n    marginRight: marginOffset,\n    pointerEvents: 'auto'\n  });\n\n  // When `colSpan` or `rowSpan` is `0`, should skip render.\n  var needHide = React.useMemo(function () {\n    if (inverse) {\n      return rowSpan <= 1;\n    } else {\n      return colSpan === 0 || rowSpan === 0 || rowSpan > 1;\n    }\n  }, [rowSpan, colSpan, inverse]);\n\n  // 0 rowSpan or colSpan should not render\n  if (needHide) {\n    mergedStyle.visibility = 'hidden';\n  } else if (inverse) {\n    mergedStyle.height = getHeight === null || getHeight === void 0 ? void 0 : getHeight(rowSpan);\n  }\n  var mergedRender = needHide ? function () {\n    return null;\n  } : render;\n\n  // ========================== Render ==========================\n  var cellSpan = {};\n\n  // Virtual should reset `colSpan` & `rowSpan`\n  if (rowSpan === 0 || colSpan === 0) {\n    cellSpan.rowSpan = 1;\n    cellSpan.colSpan = 1;\n  }\n  return /*#__PURE__*/React.createElement(Cell, _extends({\n    className: classNames(columnClassName, className),\n    ellipsis: column.ellipsis,\n    align: column.align,\n    scope: column.rowScope,\n    component: \"div\",\n    prefixCls: rowInfo.prefixCls,\n    key: key,\n    record: record,\n    index: index,\n    renderIndex: renderIndex,\n    dataIndex: dataIndex,\n    render: mergedRender,\n    shouldCellUpdate: column.shouldCellUpdate\n  }, fixedInfo, {\n    appendNode: appendCellNode,\n    additionalProps: _objectSpread(_objectSpread({}, additionalCellProps), {}, {\n      style: mergedStyle\n    }, cellSpan)\n  }));\n}\nexport default VirtualCell;","map":{"version":3,"names":["_extends","_objectSpread","useContext","classNames","React","getCellProps","Cell","GridContext","getColumnWidth","colIndex","colSpan","columnsOffset","mergedColSpan","VirtualCell","props","rowInfo","column","indent","index","renderIndex","record","style","className","inverse","getHeight","render","dataIndex","columnClassName","colWidth","width","_useContext","_getCellProps","key","fixedInfo","appendCellNode","additionalCellProps","cellStyle","_additionalCellProps$","_additionalCellProps$2","rowSpan","startColIndex","concatColWidth","marginOffset","mergedStyle","flex","concat","marginRight","pointerEvents","needHide","useMemo","visibility","height","mergedRender","cellSpan","createElement","ellipsis","align","scope","rowScope","component","prefixCls","shouldCellUpdate","appendNode","additionalProps"],"sources":["/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/node_modules/rc-table/es/VirtualTable/VirtualCell.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport { useContext } from '@rc-component/context';\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { getCellProps } from \"../Body/BodyRow\";\nimport Cell from \"../Cell\";\nimport { GridContext } from \"./context\";\n/**\n * Return the width of the column by `colSpan`.\n * When `colSpan` is `0` will be trade as `1`.\n */\nexport function getColumnWidth(colIndex, colSpan, columnsOffset) {\n  var mergedColSpan = colSpan || 1;\n  return columnsOffset[colIndex + mergedColSpan] - (columnsOffset[colIndex] || 0);\n}\nfunction VirtualCell(props) {\n  var rowInfo = props.rowInfo,\n    column = props.column,\n    colIndex = props.colIndex,\n    indent = props.indent,\n    index = props.index,\n    renderIndex = props.renderIndex,\n    record = props.record,\n    style = props.style,\n    className = props.className,\n    inverse = props.inverse,\n    getHeight = props.getHeight;\n  var render = column.render,\n    dataIndex = column.dataIndex,\n    columnClassName = column.className,\n    colWidth = column.width;\n  var _useContext = useContext(GridContext, ['columnsOffset']),\n    columnsOffset = _useContext.columnsOffset;\n  var _getCellProps = getCellProps(rowInfo, column, colIndex, indent, index),\n    key = _getCellProps.key,\n    fixedInfo = _getCellProps.fixedInfo,\n    appendCellNode = _getCellProps.appendCellNode,\n    additionalCellProps = _getCellProps.additionalCellProps;\n  var cellStyle = additionalCellProps.style,\n    _additionalCellProps$ = additionalCellProps.colSpan,\n    colSpan = _additionalCellProps$ === void 0 ? 1 : _additionalCellProps$,\n    _additionalCellProps$2 = additionalCellProps.rowSpan,\n    rowSpan = _additionalCellProps$2 === void 0 ? 1 : _additionalCellProps$2;\n\n  // ========================= ColWidth =========================\n  // column width\n  var startColIndex = colIndex - 1;\n  var concatColWidth = getColumnWidth(startColIndex, colSpan, columnsOffset);\n\n  // margin offset\n  var marginOffset = colSpan > 1 ? colWidth - concatColWidth : 0;\n\n  // ========================== Style ===========================\n  var mergedStyle = _objectSpread(_objectSpread(_objectSpread({}, cellStyle), style), {}, {\n    flex: \"0 0 \".concat(concatColWidth, \"px\"),\n    width: \"\".concat(concatColWidth, \"px\"),\n    marginRight: marginOffset,\n    pointerEvents: 'auto'\n  });\n\n  // When `colSpan` or `rowSpan` is `0`, should skip render.\n  var needHide = React.useMemo(function () {\n    if (inverse) {\n      return rowSpan <= 1;\n    } else {\n      return colSpan === 0 || rowSpan === 0 || rowSpan > 1;\n    }\n  }, [rowSpan, colSpan, inverse]);\n\n  // 0 rowSpan or colSpan should not render\n  if (needHide) {\n    mergedStyle.visibility = 'hidden';\n  } else if (inverse) {\n    mergedStyle.height = getHeight === null || getHeight === void 0 ? void 0 : getHeight(rowSpan);\n  }\n  var mergedRender = needHide ? function () {\n    return null;\n  } : render;\n\n  // ========================== Render ==========================\n  var cellSpan = {};\n\n  // Virtual should reset `colSpan` & `rowSpan`\n  if (rowSpan === 0 || colSpan === 0) {\n    cellSpan.rowSpan = 1;\n    cellSpan.colSpan = 1;\n  }\n  return /*#__PURE__*/React.createElement(Cell, _extends({\n    className: classNames(columnClassName, className),\n    ellipsis: column.ellipsis,\n    align: column.align,\n    scope: column.rowScope,\n    component: \"div\",\n    prefixCls: rowInfo.prefixCls,\n    key: key,\n    record: record,\n    index: index,\n    renderIndex: renderIndex,\n    dataIndex: dataIndex,\n    render: mergedRender,\n    shouldCellUpdate: column.shouldCellUpdate\n  }, fixedInfo, {\n    appendNode: appendCellNode,\n    additionalProps: _objectSpread(_objectSpread({}, additionalCellProps), {}, {\n      style: mergedStyle\n    }, cellSpan)\n  }));\n}\nexport default VirtualCell;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}