{"ast":null,"code":"import _classCallCheck from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { ABIMethod, getMethodByName as _getMethodByName } from './method';\nexport var ABIInterface = /*#__PURE__*/function () {\n  function ABIInterface(params) {\n    _classCallCheck(this, ABIInterface);\n    if (typeof params.name !== 'string' || !Array.isArray(params.methods)) {\n      throw new Error('Invalid ABIInterface parameters');\n    }\n    this.name = params.name;\n    this.description = params.desc;\n    this.methods = params.methods.map(function (method) {\n      return new ABIMethod(method);\n    });\n  }\n  _createClass(ABIInterface, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        name: this.name,\n        desc: this.description,\n        methods: this.methods.map(function (method) {\n          return method.toJSON();\n        })\n      };\n    }\n  }, {\n    key: \"getMethodByName\",\n    value: function getMethodByName(name) {\n      return _getMethodByName(this.methods, name);\n    }\n  }]);\n  return ABIInterface;\n}();","map":{"version":3,"names":["ABIMethod","getMethodByName","ABIInterface","params","_classCallCheck","name","Array","isArray","methods","Error","description","desc","map","method","_createClass","key","value","toJSON"],"sources":["/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/algosdk/src/abi/interface.ts"],"sourcesContent":["import { ABIMethod, ABIMethodParams, getMethodByName } from './method';\n\nexport interface ABIInterfaceParams {\n  name: string;\n  desc?: string;\n  methods: ABIMethodParams[];\n}\n\nexport class ABIInterface {\n  public readonly name: string;\n  public readonly description?: string;\n  public readonly methods: ABIMethod[];\n\n  constructor(params: ABIInterfaceParams) {\n    if (typeof params.name !== 'string' || !Array.isArray(params.methods)) {\n      throw new Error('Invalid ABIInterface parameters');\n    }\n\n    this.name = params.name;\n    this.description = params.desc;\n    this.methods = params.methods.map((method) => new ABIMethod(method));\n  }\n\n  toJSON(): ABIInterfaceParams {\n    return {\n      name: this.name,\n      desc: this.description,\n      methods: this.methods.map((method) => method.toJSON()),\n    };\n  }\n\n  getMethodByName(name: string): ABIMethod {\n    return getMethodByName(this.methods, name);\n  }\n}\n"],"mappings":";;AAAA,SAASA,SAAS,EAAmBC,eAAe,IAAfA,gBAAe,QAAQ,UAAU;AAQtE,WAAaC,YAAY;EAKvB,SAAAA,aAAYC,MAA0B;IAAAC,eAAA,OAAAF,YAAA;IACpC,IAAI,OAAOC,MAAM,CAACE,IAAI,KAAK,QAAQ,IAAI,CAACC,KAAK,CAACC,OAAO,CAACJ,MAAM,CAACK,OAAO,CAAC,EAAE;MACrE,MAAM,IAAIC,KAAK,CAAC,iCAAiC,CAAC;;IAGpD,IAAI,CAACJ,IAAI,GAAGF,MAAM,CAACE,IAAI;IACvB,IAAI,CAACK,WAAW,GAAGP,MAAM,CAACQ,IAAI;IAC9B,IAAI,CAACH,OAAO,GAAGL,MAAM,CAACK,OAAO,CAACI,GAAG,CAAC,UAACC,MAAM;MAAA,OAAK,IAAIb,SAAS,CAACa,MAAM,CAAC;IAAA,EAAC;EACtE;EAACC,YAAA,CAAAZ,YAAA;IAAAa,GAAA;IAAAC,KAAA,EAED,SAAAC,OAAA,EAAM;MACJ,OAAO;QACLZ,IAAI,EAAE,IAAI,CAACA,IAAI;QACfM,IAAI,EAAE,IAAI,CAACD,WAAW;QACtBF,OAAO,EAAE,IAAI,CAACA,OAAO,CAACI,GAAG,CAAC,UAACC,MAAM;UAAA,OAAKA,MAAM,CAACI,MAAM,EAAE;QAAA;OACtD;IACH;EAAC;IAAAF,GAAA;IAAAC,KAAA,EAED,SAAAf,gBAAgBI,IAAY;MAC1B,OAAOJ,gBAAe,CAAC,IAAI,CAACO,OAAO,EAAEH,IAAI,CAAC;IAC5C;EAAC;EAAA,OAAAH,YAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}