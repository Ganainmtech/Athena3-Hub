{"ast":null,"code":"import _slicedToArray from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useMemo } from 'react';\nimport { devUseWarning } from '../../_util/warning';\nfunction getFilledItem(rowItem, rowRestCol, span) {\n  var clone = rowItem;\n  var exceed = false;\n  if (span === undefined || span > rowRestCol) {\n    clone = Object.assign(Object.assign({}, rowItem), {\n      span: rowRestCol\n    });\n    exceed = span !== undefined;\n  }\n  return [clone, exceed];\n}\n// Calculate the sum of span in a row\nfunction getCalcRows(rowItems, mergedColumn) {\n  var rows = [];\n  var tmpRow = [];\n  var rowRestCol = mergedColumn;\n  var exceed = false;\n  rowItems.filter(function (n) {\n    return n;\n  }).forEach(function (rowItem, index) {\n    var span = rowItem === null || rowItem === void 0 ? void 0 : rowItem.span;\n    var mergedSpan = span || 1;\n    // Additional handle last one\n    if (index === rowItems.length - 1) {\n      var _getFilledItem = getFilledItem(rowItem, rowRestCol, span),\n        _getFilledItem2 = _slicedToArray(_getFilledItem, 2),\n        item = _getFilledItem2[0],\n        itemExceed = _getFilledItem2[1];\n      exceed = exceed || itemExceed;\n      tmpRow.push(item);\n      rows.push(tmpRow);\n      return;\n    }\n    if (mergedSpan < rowRestCol) {\n      rowRestCol -= mergedSpan;\n      tmpRow.push(rowItem);\n    } else {\n      var _getFilledItem3 = getFilledItem(rowItem, rowRestCol, mergedSpan),\n        _getFilledItem4 = _slicedToArray(_getFilledItem3, 2),\n        _item = _getFilledItem4[0],\n        _itemExceed = _getFilledItem4[1];\n      exceed = exceed || _itemExceed;\n      tmpRow.push(_item);\n      rows.push(tmpRow);\n      rowRestCol = mergedColumn;\n      tmpRow = [];\n    }\n  });\n  return [rows, exceed];\n}\nvar useRow = function useRow(mergedColumn, items) {\n  var _useMemo = useMemo(function () {\n      return getCalcRows(items, mergedColumn);\n    }, [items, mergedColumn]),\n    _useMemo2 = _slicedToArray(_useMemo, 2),\n    rows = _useMemo2[0],\n    exceed = _useMemo2[1];\n  if (process.env.NODE_ENV !== 'production') {\n    var warning = devUseWarning('Descriptions');\n    process.env.NODE_ENV !== \"production\" ? warning(!exceed, 'usage', 'Sum of column `span` in a line not match `column` of Descriptions.') : void 0;\n  }\n  return rows;\n};\nexport default useRow;","map":{"version":3,"names":["useMemo","devUseWarning","getFilledItem","rowItem","rowRestCol","span","clone","exceed","undefined","Object","assign","getCalcRows","rowItems","mergedColumn","rows","tmpRow","filter","n","forEach","index","mergedSpan","length","_getFilledItem","_getFilledItem2","_slicedToArray","item","itemExceed","push","_getFilledItem3","_getFilledItem4","useRow","items","_useMemo","_useMemo2","process","env","NODE_ENV","warning"],"sources":["/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/antd/es/descriptions/hooks/useRow.js"],"sourcesContent":["import { useMemo } from 'react';\nimport { devUseWarning } from '../../_util/warning';\nfunction getFilledItem(rowItem, rowRestCol, span) {\n  let clone = rowItem;\n  let exceed = false;\n  if (span === undefined || span > rowRestCol) {\n    clone = Object.assign(Object.assign({}, rowItem), {\n      span: rowRestCol\n    });\n    exceed = span !== undefined;\n  }\n  return [clone, exceed];\n}\n// Calculate the sum of span in a row\nfunction getCalcRows(rowItems, mergedColumn) {\n  const rows = [];\n  let tmpRow = [];\n  let rowRestCol = mergedColumn;\n  let exceed = false;\n  rowItems.filter(n => n).forEach((rowItem, index) => {\n    const span = rowItem === null || rowItem === void 0 ? void 0 : rowItem.span;\n    const mergedSpan = span || 1;\n    // Additional handle last one\n    if (index === rowItems.length - 1) {\n      const [item, itemExceed] = getFilledItem(rowItem, rowRestCol, span);\n      exceed = exceed || itemExceed;\n      tmpRow.push(item);\n      rows.push(tmpRow);\n      return;\n    }\n    if (mergedSpan < rowRestCol) {\n      rowRestCol -= mergedSpan;\n      tmpRow.push(rowItem);\n    } else {\n      const [item, itemExceed] = getFilledItem(rowItem, rowRestCol, mergedSpan);\n      exceed = exceed || itemExceed;\n      tmpRow.push(item);\n      rows.push(tmpRow);\n      rowRestCol = mergedColumn;\n      tmpRow = [];\n    }\n  });\n  return [rows, exceed];\n}\nconst useRow = (mergedColumn, items) => {\n  const [rows, exceed] = useMemo(() => getCalcRows(items, mergedColumn), [items, mergedColumn]);\n  if (process.env.NODE_ENV !== 'production') {\n    const warning = devUseWarning('Descriptions');\n    process.env.NODE_ENV !== \"production\" ? warning(!exceed, 'usage', 'Sum of column `span` in a line not match `column` of Descriptions.') : void 0;\n  }\n  return rows;\n};\nexport default useRow;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}