{"ast":null,"code":"/**\n * Wait until a transaction has been confirmed or rejected by the network, or\n * until 'waitRounds' number of rounds have passed.\n * @param client - An Algodv2 client\n * @param txid - The ID of the transaction to wait for.\n * @param waitRounds - The maximum number of rounds to wait for.\n * @returns A promise that, upon success, will resolve to the output of the\n *   `pendingTransactionInformation` call for the confirmed transaction.\n */\nexport async function waitForConfirmation(client, txid, waitRounds) {\n  // Wait until the transaction is confirmed or rejected, or until 'waitRounds'\n  // number of rounds have passed.\n  const status = await client.status().do();\n  if (typeof status === 'undefined') {\n    throw new Error('Unable to get node status');\n  }\n  const startRound = status['last-round'] + 1;\n  let currentRound = startRound;\n  /* eslint-disable no-await-in-loop */\n  while (currentRound < startRound + waitRounds) {\n    let poolError = false;\n    try {\n      const pendingInfo = await client.pendingTransactionInformation(txid).do();\n      if (pendingInfo['confirmed-round']) {\n        // Got the completed Transaction\n        return pendingInfo;\n      }\n      if (pendingInfo['pool-error']) {\n        // If there was a pool error, then the transaction has been rejected\n        poolError = true;\n        throw new Error(`Transaction Rejected: ${pendingInfo['pool-error']}`);\n      }\n    } catch (err) {\n      // Ignore errors from PendingTransactionInformation, since it may return 404 if the algod\n      // instance is behind a load balancer and the request goes to a different algod than the\n      // one we submitted the transaction to\n      if (poolError) {\n        // Rethrow error only if it's because the transaction was rejected\n        throw err;\n      }\n    }\n    await client.statusAfterBlock(currentRound).do();\n    currentRound += 1;\n  }\n  /* eslint-enable no-await-in-loop */\n  throw new Error(`Transaction not confirmed after ${waitRounds} rounds`);\n}","map":{"version":3,"names":["waitForConfirmation","client","txid","waitRounds","status","do","Error","startRound","currentRound","poolError","pendingInfo","pendingTransactionInformation","err","statusAfterBlock"],"sources":["/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/algosdk/src/wait.ts"],"sourcesContent":["import Algodv2 from './client/v2/algod/algod';\n\n/**\n * Wait until a transaction has been confirmed or rejected by the network, or\n * until 'waitRounds' number of rounds have passed.\n * @param client - An Algodv2 client\n * @param txid - The ID of the transaction to wait for.\n * @param waitRounds - The maximum number of rounds to wait for.\n * @returns A promise that, upon success, will resolve to the output of the\n *   `pendingTransactionInformation` call for the confirmed transaction.\n */\nexport async function waitForConfirmation(\n  client: Algodv2,\n  txid: string,\n  waitRounds: number\n): Promise<Record<string, any>> {\n  // Wait until the transaction is confirmed or rejected, or until 'waitRounds'\n  // number of rounds have passed.\n\n  const status = await client.status().do();\n  if (typeof status === 'undefined') {\n    throw new Error('Unable to get node status');\n  }\n  const startRound = status['last-round'] + 1;\n  let currentRound = startRound;\n\n  /* eslint-disable no-await-in-loop */\n  while (currentRound < startRound + waitRounds) {\n    let poolError = false;\n    try {\n      const pendingInfo = await client.pendingTransactionInformation(txid).do();\n\n      if (pendingInfo['confirmed-round']) {\n        // Got the completed Transaction\n        return pendingInfo;\n      }\n\n      if (pendingInfo['pool-error']) {\n        // If there was a pool error, then the transaction has been rejected\n        poolError = true;\n        throw new Error(`Transaction Rejected: ${pendingInfo['pool-error']}`);\n      }\n    } catch (err) {\n      // Ignore errors from PendingTransactionInformation, since it may return 404 if the algod\n      // instance is behind a load balancer and the request goes to a different algod than the\n      // one we submitted the transaction to\n      if (poolError) {\n        // Rethrow error only if it's because the transaction was rejected\n        throw err;\n      }\n    }\n\n    await client.statusAfterBlock(currentRound).do();\n    currentRound += 1;\n  }\n  /* eslint-enable no-await-in-loop */\n  throw new Error(`Transaction not confirmed after ${waitRounds} rounds`);\n}\n"],"mappings":"AAEA;;;;;;;;;AASA,OAAO,eAAeA,mBAAmBA,CACvCC,MAAe,EACfC,IAAY,EACZC,UAAkB;EAElB;EACA;EAEA,MAAMC,MAAM,GAAG,MAAMH,MAAM,CAACG,MAAM,EAAE,CAACC,EAAE,EAAE;EACzC,IAAI,OAAOD,MAAM,KAAK,WAAW,EAAE;IACjC,MAAM,IAAIE,KAAK,CAAC,2BAA2B,CAAC;;EAE9C,MAAMC,UAAU,GAAGH,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC;EAC3C,IAAII,YAAY,GAAGD,UAAU;EAE7B;EACA,OAAOC,YAAY,GAAGD,UAAU,GAAGJ,UAAU,EAAE;IAC7C,IAAIM,SAAS,GAAG,KAAK;IACrB,IAAI;MACF,MAAMC,WAAW,GAAG,MAAMT,MAAM,CAACU,6BAA6B,CAACT,IAAI,CAAC,CAACG,EAAE,EAAE;MAEzE,IAAIK,WAAW,CAAC,iBAAiB,CAAC,EAAE;QAClC;QACA,OAAOA,WAAW;;MAGpB,IAAIA,WAAW,CAAC,YAAY,CAAC,EAAE;QAC7B;QACAD,SAAS,GAAG,IAAI;QAChB,MAAM,IAAIH,KAAK,CAAC,yBAAyBI,WAAW,CAAC,YAAY,CAAC,EAAE,CAAC;;KAExE,CAAC,OAAOE,GAAG,EAAE;MACZ;MACA;MACA;MACA,IAAIH,SAAS,EAAE;QACb;QACA,MAAMG,GAAG;;;IAIb,MAAMX,MAAM,CAACY,gBAAgB,CAACL,YAAY,CAAC,CAACH,EAAE,EAAE;IAChDG,YAAY,IAAI,CAAC;;EAEnB;EACA,MAAM,IAAIF,KAAK,CAAC,mCAAmCH,UAAU,SAAS,CAAC;AACzE"},"metadata":{},"sourceType":"module","externalDependencies":[]}