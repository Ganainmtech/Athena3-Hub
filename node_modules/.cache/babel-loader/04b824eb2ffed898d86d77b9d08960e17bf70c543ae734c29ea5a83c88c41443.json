{"ast":null,"code":"var t = function t(_t) {\n    return \"object\" == typeof _t && null != _t && 1 === _t.nodeType;\n  },\n  e = function e(t, _e) {\n    return (!_e || \"hidden\" !== t) && \"visible\" !== t && \"clip\" !== t;\n  },\n  n = function n(t, _n) {\n    if (t.clientHeight < t.scrollHeight || t.clientWidth < t.scrollWidth) {\n      var _o = getComputedStyle(t, null);\n      return e(_o.overflowY, _n) || e(_o.overflowX, _n) || function (t) {\n        var e = function (t) {\n          if (!t.ownerDocument || !t.ownerDocument.defaultView) return null;\n          try {\n            return t.ownerDocument.defaultView.frameElement;\n          } catch (t) {\n            return null;\n          }\n        }(t);\n        return !!e && (e.clientHeight < t.scrollHeight || e.clientWidth < t.scrollWidth);\n      }(t);\n    }\n    return !1;\n  },\n  o = function o(t, e, n, _o2, l, r, i, s) {\n    return r < t && i > e || r > t && i < e ? 0 : r <= t && s <= n || i >= e && s >= n ? r - t - _o2 : i > e && s < n || r < t && s > n ? i - e + l : 0;\n  },\n  l = function l(t) {\n    var e = t.parentElement;\n    return null == e ? t.getRootNode().host || null : e;\n  },\n  r = function r(e, _r2) {\n    var i, s, d, h;\n    if (\"undefined\" == typeof document) return [];\n    var c = _r2.scrollMode,\n      f = _r2.block,\n      u = _r2.inline,\n      a = _r2.boundary,\n      g = _r2.skipOverflowHiddenElements,\n      p = \"function\" == typeof a ? a : function (t) {\n        return t !== a;\n      };\n    if (!t(e)) throw new TypeError(\"Invalid target\");\n    var m = document.scrollingElement || document.documentElement,\n      w = [];\n    var W = e;\n    for (; t(W) && p(W);) {\n      if (W = l(W), W === m) {\n        w.push(W);\n        break;\n      }\n      null != W && W === document.body && n(W) && !n(document.documentElement) || null != W && n(W, g) && w.push(W);\n    }\n    var b = null != (s = null == (i = window.visualViewport) ? void 0 : i.width) ? s : innerWidth,\n      H = null != (h = null == (d = window.visualViewport) ? void 0 : d.height) ? h : innerHeight,\n      _window = window,\n      y = _window.scrollX,\n      M = _window.scrollY,\n      _e$getBoundingClientR = e.getBoundingClientRect(),\n      v = _e$getBoundingClientR.height,\n      E = _e$getBoundingClientR.width,\n      x = _e$getBoundingClientR.top,\n      C = _e$getBoundingClientR.right,\n      I = _e$getBoundingClientR.bottom,\n      R = _e$getBoundingClientR.left,\n      _ref = function (t) {\n        var e = window.getComputedStyle(t);\n        return {\n          top: parseFloat(e.scrollMarginTop) || 0,\n          right: parseFloat(e.scrollMarginRight) || 0,\n          bottom: parseFloat(e.scrollMarginBottom) || 0,\n          left: parseFloat(e.scrollMarginLeft) || 0\n        };\n      }(e),\n      T = _ref.top,\n      B = _ref.right,\n      F = _ref.bottom,\n      V = _ref.left;\n    var k = \"start\" === f || \"nearest\" === f ? x - T : \"end\" === f ? I + F : x + v / 2 - T + F,\n      D = \"center\" === u ? R + E / 2 - V + B : \"end\" === u ? C + B : R - V;\n    var L = [];\n    for (var _t2 = 0; _t2 < w.length; _t2++) {\n      var _e2 = w[_t2],\n        _e$getBoundingClientR2 = _e2.getBoundingClientRect(),\n        _n2 = _e$getBoundingClientR2.height,\n        _l = _e$getBoundingClientR2.width,\n        _r = _e$getBoundingClientR2.top,\n        _i = _e$getBoundingClientR2.right,\n        _s = _e$getBoundingClientR2.bottom,\n        _d = _e$getBoundingClientR2.left;\n      if (\"if-needed\" === c && x >= 0 && R >= 0 && I <= H && C <= b && x >= _r && I <= _s && R >= _d && C <= _i) return L;\n      var _h = getComputedStyle(_e2),\n        _a = parseInt(_h.borderLeftWidth, 10),\n        _g = parseInt(_h.borderTopWidth, 10),\n        _p = parseInt(_h.borderRightWidth, 10),\n        _W = parseInt(_h.borderBottomWidth, 10);\n      var _T = 0,\n        _B = 0;\n      var _F = \"offsetWidth\" in _e2 ? _e2.offsetWidth - _e2.clientWidth - _a - _p : 0,\n        _V = \"offsetHeight\" in _e2 ? _e2.offsetHeight - _e2.clientHeight - _g - _W : 0,\n        S = \"offsetWidth\" in _e2 ? 0 === _e2.offsetWidth ? 0 : _l / _e2.offsetWidth : 0,\n        X = \"offsetHeight\" in _e2 ? 0 === _e2.offsetHeight ? 0 : _n2 / _e2.offsetHeight : 0;\n      if (m === _e2) _T = \"start\" === f ? k : \"end\" === f ? k - H : \"nearest\" === f ? o(M, M + H, H, _g, _W, M + k, M + k + v, v) : k - H / 2, _B = \"start\" === u ? D : \"center\" === u ? D - b / 2 : \"end\" === u ? D - b : o(y, y + b, b, _a, _p, y + D, y + D + E, E), _T = Math.max(0, _T + M), _B = Math.max(0, _B + y);else {\n        _T = \"start\" === f ? k - _r - _g : \"end\" === f ? k - _s + _W + _V : \"nearest\" === f ? o(_r, _s, _n2, _g, _W + _V, k, k + v, v) : k - (_r + _n2 / 2) + _V / 2, _B = \"start\" === u ? D - _d - _a : \"center\" === u ? D - (_d + _l / 2) + _F / 2 : \"end\" === u ? D - _i + _p + _F : o(_d, _i, _l, _a, _p + _F, D, D + E, E);\n        var _t3 = _e2.scrollLeft,\n          _h2 = _e2.scrollTop;\n        _T = 0 === X ? 0 : Math.max(0, Math.min(_h2 + _T / X, _e2.scrollHeight - _n2 / X + _V)), _B = 0 === S ? 0 : Math.max(0, Math.min(_t3 + _B / S, _e2.scrollWidth - _l / S + _F)), k += _h2 - _T, D += _t3 - _B;\n      }\n      L.push({\n        el: _e2,\n        top: _T,\n        left: _B\n      });\n    }\n    return L;\n  };\nexport { r as compute };","map":{"version":3,"names":["t","nodeType","e","n","clientHeight","scrollHeight","clientWidth","scrollWidth","o","getComputedStyle","overflowY","overflowX","ownerDocument","defaultView","frameElement","l","r","i","s","parentElement","getRootNode","host","d","h","document","c","scrollMode","f","block","u","inline","a","boundary","g","skipOverflowHiddenElements","p","TypeError","m","scrollingElement","documentElement","w","W","push","body","b","window","visualViewport","width","innerWidth","H","height","innerHeight","_window","y","scrollX","M","scrollY","_e$getBoundingClientR","getBoundingClientRect","v","E","x","top","C","right","I","bottom","R","left","_ref","parseFloat","scrollMarginTop","scrollMarginRight","scrollMarginBottom","scrollMarginLeft","T","B","F","V","k","D","L","length","_e$getBoundingClientR2","parseInt","borderLeftWidth","borderTopWidth","borderRightWidth","borderBottomWidth","offsetWidth","offsetHeight","S","X","Math","max","scrollLeft","scrollTop","min","el","compute"],"sources":["/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/compute-scroll-into-view/src/index.ts"],"sourcesContent":["// Compute what scrolling needs to be done on required scrolling boxes for target to be in view\n\n// The type names here are named after the spec to make it easier to find more information around what they mean:\n// To reduce churn and reduce things that need be maintained things from the official TS DOM library is used here\n// https://drafts.csswg.org/cssom-view/\n\n// For a definition on what is \"block flow direction\" exactly, check this: https://drafts.csswg.org/css-writing-modes-4/#block-flow-direction\n\n/**\n * This new option is tracked in this PR, which is the most likely candidate at the time: https://github.com/w3c/csswg-drafts/pull/1805\n * @public\n */\nexport type ScrollMode = 'always' | 'if-needed'\n\n/** @public */\nexport interface Options {\n  /**\n   * Control the logical scroll position on the y-axis. The spec states that the `block` direction is related to the [writing-mode](https://developer.mozilla.org/en-US/docs/Web/CSS/writing-mode), but this is not implemented yet in this library.\n   * This means that `block: 'start'` aligns to the top edge and `block: 'end'` to the bottom.\n   * @defaultValue 'center'\n   */\n  block?: ScrollLogicalPosition\n  /**\n   * Like `block` this is affected by the [writing-mode](https://developer.mozilla.org/en-US/docs/Web/CSS/writing-mode). In left-to-right pages `inline: 'start'` will align to the left edge. In right-to-left it should be flipped. This will be supported in a future release.\n   * @defaultValue 'nearest'\n   */\n  inline?: ScrollLogicalPosition\n  /**\n   * This is a proposed addition to the spec that you can track here: https://github.com/w3c/csswg-drafts/pull/5677\n   *\n   * This library will be updated to reflect any changes to the spec and will provide a migration path.\n   * To be backwards compatible with `Element.scrollIntoViewIfNeeded` if something is not 100% visible it will count as \"needs scrolling\". If you need a different visibility ratio your best option would be to implement an [Intersection Observer](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API).\n   * @defaultValue 'always'\n   */\n  scrollMode?: ScrollMode\n  /**\n   * By default there is no boundary. All the parent elements of your target is checked until it reaches the viewport ([`document.scrollingElement`](https://developer.mozilla.org/en-US/docs/Web/API/document/scrollingElement)) when calculating layout and what to scroll.\n   * By passing a boundary you can short-circuit this loop depending on your needs:\n   * \n   * - Prevent the browser window from scrolling.\n   * - Scroll elements into view in a list, without scrolling container elements.\n   * \n   * You can also pass a function to do more dynamic checks to override the scroll scoping:\n   * \n   * ```js\n   * let actions = compute(target, {\n   *   boundary: (parent) => {\n   *     // By default `overflow: hidden` elements are allowed, only `overflow: visible | clip` is skipped as\n   *     // this is required by the CSSOM spec\n   *     if (getComputedStyle(parent)['overflow'] === 'hidden') {\n   *       return false\n   *     }\n\n   *     return true\n   *   },\n   * })\n   * ```\n   * @defaultValue null\n   */\n  boundary?: Element | ((parent: Element) => boolean) | null\n  /**\n   * New option that skips auto-scrolling all nodes with overflow: hidden set\n   * See FF implementation: https://hg.mozilla.org/integration/fx-team/rev/c48c3ec05012#l7.18\n   * @defaultValue false\n   * @public\n   */\n  skipOverflowHiddenElements?: boolean\n}\n\n/** @public */\nexport interface ScrollAction {\n  el: Element\n  top: number\n  left: number\n}\n\n// @TODO better shadowdom test, 11 = document fragment\nconst isElement = (el: any): el is Element =>\n  typeof el === 'object' && el != null && el.nodeType === 1\n\nconst canOverflow = (\n  overflow: string | null,\n  skipOverflowHiddenElements?: boolean\n) => {\n  if (skipOverflowHiddenElements && overflow === 'hidden') {\n    return false\n  }\n\n  return overflow !== 'visible' && overflow !== 'clip'\n}\n\nconst getFrameElement = (el: Element) => {\n  if (!el.ownerDocument || !el.ownerDocument.defaultView) {\n    return null\n  }\n\n  try {\n    return el.ownerDocument.defaultView.frameElement\n  } catch (e) {\n    return null\n  }\n}\n\nconst isHiddenByFrame = (el: Element): boolean => {\n  const frame = getFrameElement(el)\n  if (!frame) {\n    return false\n  }\n\n  return (\n    frame.clientHeight < el.scrollHeight || frame.clientWidth < el.scrollWidth\n  )\n}\n\nconst isScrollable = (el: Element, skipOverflowHiddenElements?: boolean) => {\n  if (el.clientHeight < el.scrollHeight || el.clientWidth < el.scrollWidth) {\n    const style = getComputedStyle(el, null)\n    return (\n      canOverflow(style.overflowY, skipOverflowHiddenElements) ||\n      canOverflow(style.overflowX, skipOverflowHiddenElements) ||\n      isHiddenByFrame(el)\n    )\n  }\n\n  return false\n}\n/**\n * Find out which edge to align against when logical scroll position is \"nearest\"\n * Interesting fact: \"nearest\" works similarily to \"if-needed\", if the element is fully visible it will not scroll it\n *\n * Legends:\n * ┌────────┐ ┏ ━ ━ ━ ┓\n * │ target │   frame\n * └────────┘ ┗ ━ ━ ━ ┛\n */\nconst alignNearest = (\n  scrollingEdgeStart: number,\n  scrollingEdgeEnd: number,\n  scrollingSize: number,\n  scrollingBorderStart: number,\n  scrollingBorderEnd: number,\n  elementEdgeStart: number,\n  elementEdgeEnd: number,\n  elementSize: number\n) => {\n  /**\n   * If element edge A and element edge B are both outside scrolling box edge A and scrolling box edge B\n   *\n   *          ┌──┐\n   *        ┏━│━━│━┓\n   *          │  │\n   *        ┃ │  │ ┃        do nothing\n   *          │  │\n   *        ┗━│━━│━┛\n   *          └──┘\n   *\n   *  If element edge C and element edge D are both outside scrolling box edge C and scrolling box edge D\n   *\n   *    ┏ ━ ━ ━ ━ ┓\n   *   ┌───────────┐\n   *   │┃         ┃│        do nothing\n   *   └───────────┘\n   *    ┗ ━ ━ ━ ━ ┛\n   */\n  if (\n    (elementEdgeStart < scrollingEdgeStart &&\n      elementEdgeEnd > scrollingEdgeEnd) ||\n    (elementEdgeStart > scrollingEdgeStart && elementEdgeEnd < scrollingEdgeEnd)\n  ) {\n    return 0\n  }\n\n  /**\n   * If element edge A is outside scrolling box edge A and element height is less than scrolling box height\n   *\n   *          ┌──┐\n   *        ┏━│━━│━┓         ┏━┌━━┐━┓\n   *          └──┘             │  │\n   *  from  ┃      ┃     to  ┃ └──┘ ┃\n   *\n   *        ┗━ ━━ ━┛         ┗━ ━━ ━┛\n   *\n   * If element edge B is outside scrolling box edge B and element height is greater than scrolling box height\n   *\n   *        ┏━ ━━ ━┓         ┏━┌━━┐━┓\n   *                           │  │\n   *  from  ┃ ┌──┐ ┃     to  ┃ │  │ ┃\n   *          │  │             │  │\n   *        ┗━│━━│━┛         ┗━│━━│━┛\n   *          │  │             └──┘\n   *          │  │\n   *          └──┘\n   *\n   * If element edge C is outside scrolling box edge C and element width is less than scrolling box width\n   *\n   *       from                 to\n   *    ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *  ┌───┐                 ┌───┐\n   *  │ ┃ │       ┃         ┃   │     ┃\n   *  └───┘                 └───┘\n   *    ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   * If element edge D is outside scrolling box edge D and element width is greater than scrolling box width\n   *\n   *       from                 to\n   *    ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *        ┌───────────┐   ┌───────────┐\n   *    ┃   │     ┃     │   ┃         ┃ │\n   *        └───────────┘   └───────────┘\n   *    ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   */\n  if (\n    (elementEdgeStart <= scrollingEdgeStart && elementSize <= scrollingSize) ||\n    (elementEdgeEnd >= scrollingEdgeEnd && elementSize >= scrollingSize)\n  ) {\n    return elementEdgeStart - scrollingEdgeStart - scrollingBorderStart\n  }\n\n  /**\n   * If element edge B is outside scrolling box edge B and element height is less than scrolling box height\n   *\n   *        ┏━ ━━ ━┓         ┏━ ━━ ━┓\n   *\n   *  from  ┃      ┃     to  ┃ ┌──┐ ┃\n   *          ┌──┐             │  │\n   *        ┗━│━━│━┛         ┗━└━━┘━┛\n   *          └──┘\n   *\n   * If element edge A is outside scrolling box edge A and element height is greater than scrolling box height\n   *\n   *          ┌──┐\n   *          │  │\n   *          │  │             ┌──┐\n   *        ┏━│━━│━┓         ┏━│━━│━┓\n   *          │  │             │  │\n   *  from  ┃ └──┘ ┃     to  ┃ │  │ ┃\n   *                           │  │\n   *        ┗━ ━━ ━┛         ┗━└━━┘━┛\n   *\n   * If element edge C is outside scrolling box edge C and element width is greater than scrolling box width\n   *\n   *           from                 to\n   *        ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *  ┌───────────┐           ┌───────────┐\n   *  │     ┃     │   ┃       │ ┃         ┃\n   *  └───────────┘           └───────────┘\n   *        ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   * If element edge D is outside scrolling box edge D and element width is less than scrolling box width\n   *\n   *           from                 to\n   *        ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *                ┌───┐             ┌───┐\n   *        ┃       │ ┃ │       ┃     │   ┃\n   *                └───┘             └───┘\n   *        ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   */\n  if (\n    (elementEdgeEnd > scrollingEdgeEnd && elementSize < scrollingSize) ||\n    (elementEdgeStart < scrollingEdgeStart && elementSize > scrollingSize)\n  ) {\n    return elementEdgeEnd - scrollingEdgeEnd + scrollingBorderEnd\n  }\n\n  return 0\n}\n\nconst getParentElement = (element: Node): Element | null => {\n  const parent = element.parentElement\n  if (parent == null) {\n    return (element.getRootNode() as ShadowRoot).host || null\n  }\n  return parent\n}\n\nconst getScrollMargins = (target: Element) => {\n  const computedStyle = window.getComputedStyle(target)\n  return {\n    top: parseFloat(computedStyle.scrollMarginTop) || 0,\n    right: parseFloat(computedStyle.scrollMarginRight) || 0,\n    bottom: parseFloat(computedStyle.scrollMarginBottom) || 0,\n    left: parseFloat(computedStyle.scrollMarginLeft) || 0,\n  }\n}\n\n/** @public */\nexport const compute = (target: Element, options: Options): ScrollAction[] => {\n  if (typeof document === 'undefined') {\n    // If there's no DOM we assume it's not in a browser environment\n    return []\n  }\n\n  const { scrollMode, block, inline, boundary, skipOverflowHiddenElements } =\n    options\n  // Allow using a callback to check the boundary\n  // The default behavior is to check if the current target matches the boundary element or not\n  // If undefined it'll check that target is never undefined (can happen as we recurse up the tree)\n  const checkBoundary =\n    typeof boundary === 'function' ? boundary : (node: any) => node !== boundary\n\n  if (!isElement(target)) {\n    throw new TypeError('Invalid target')\n  }\n\n  // Used to handle the top most element that can be scrolled\n  const scrollingElement = document.scrollingElement || document.documentElement\n\n  // Collect all the scrolling boxes, as defined in the spec: https://drafts.csswg.org/cssom-view/#scrolling-box\n  const frames: Element[] = []\n  let cursor: Element | null = target\n  while (isElement(cursor) && checkBoundary(cursor)) {\n    // Move cursor to parent\n    cursor = getParentElement(cursor)\n\n    // Stop when we reach the viewport\n    if (cursor === scrollingElement) {\n      frames.push(cursor)\n      break\n    }\n\n    // Skip document.body if it's not the scrollingElement and documentElement isn't independently scrollable\n    if (\n      cursor != null &&\n      cursor === document.body &&\n      isScrollable(cursor) &&\n      !isScrollable(document.documentElement)\n    ) {\n      continue\n    }\n\n    // Now we check if the element is scrollable, this code only runs if the loop haven't already hit the viewport or a custom boundary\n    if (cursor != null && isScrollable(cursor, skipOverflowHiddenElements)) {\n      frames.push(cursor)\n    }\n  }\n\n  // Support pinch-zooming properly, making sure elements scroll into the visual viewport\n  // Browsers that don't support visualViewport will report the layout viewport dimensions on document.documentElement.clientWidth/Height\n  // and viewport dimensions on window.innerWidth/Height\n  // https://www.quirksmode.org/mobile/viewports2.html\n  // https://bokand.github.io/viewport/index.html\n  const viewportWidth = window.visualViewport?.width ?? innerWidth\n  const viewportHeight = window.visualViewport?.height ?? innerHeight\n  const { scrollX, scrollY } = window\n\n  const {\n    height: targetHeight,\n    width: targetWidth,\n    top: targetTop,\n    right: targetRight,\n    bottom: targetBottom,\n    left: targetLeft,\n  } = target.getBoundingClientRect()\n  const {\n    top: marginTop,\n    right: marginRight,\n    bottom: marginBottom,\n    left: marginLeft,\n  } = getScrollMargins(target)\n\n  // These values mutate as we loop through and generate scroll coordinates\n  let targetBlock: number =\n    block === 'start' || block === 'nearest'\n      ? targetTop - marginTop\n      : block === 'end'\n      ? targetBottom + marginBottom\n      : targetTop + targetHeight / 2 - marginTop + marginBottom // block === 'center\n  let targetInline: number =\n    inline === 'center'\n      ? targetLeft + targetWidth / 2 - marginLeft + marginRight\n      : inline === 'end'\n      ? targetRight + marginRight\n      : targetLeft - marginLeft // inline === 'start || inline === 'nearest\n\n  // Collect new scroll positions\n  const computations: ScrollAction[] = []\n  // In chrome there's no longer a difference between caching the `frames.length` to a var or not, so we don't in this case (size > speed anyways)\n  for (let index = 0; index < frames.length; index++) {\n    const frame = frames[index]\n\n    // @TODO add a shouldScroll hook here that allows userland code to take control\n\n    const { height, width, top, right, bottom, left } =\n      frame.getBoundingClientRect()\n\n    // If the element is already visible we can end it here\n    // @TODO targetBlock and targetInline should be taken into account to be compliant with https://github.com/w3c/csswg-drafts/pull/1805/files#diff-3c17f0e43c20f8ecf89419d49e7ef5e0R1333\n    if (\n      scrollMode === 'if-needed' &&\n      targetTop >= 0 &&\n      targetLeft >= 0 &&\n      targetBottom <= viewportHeight &&\n      targetRight <= viewportWidth &&\n      targetTop >= top &&\n      targetBottom <= bottom &&\n      targetLeft >= left &&\n      targetRight <= right\n    ) {\n      // Break the loop and return the computations for things that are not fully visible\n      return computations\n    }\n\n    const frameStyle = getComputedStyle(frame)\n    const borderLeft = parseInt(frameStyle.borderLeftWidth as string, 10)\n    const borderTop = parseInt(frameStyle.borderTopWidth as string, 10)\n    const borderRight = parseInt(frameStyle.borderRightWidth as string, 10)\n    const borderBottom = parseInt(frameStyle.borderBottomWidth as string, 10)\n\n    let blockScroll: number = 0\n    let inlineScroll: number = 0\n\n    // The property existance checks for offfset[Width|Height] is because only HTMLElement objects have them, but any Element might pass by here\n    // @TODO find out if the \"as HTMLElement\" overrides can be dropped\n    const scrollbarWidth =\n      'offsetWidth' in frame\n        ? (frame as HTMLElement).offsetWidth -\n          (frame as HTMLElement).clientWidth -\n          borderLeft -\n          borderRight\n        : 0\n    const scrollbarHeight =\n      'offsetHeight' in frame\n        ? (frame as HTMLElement).offsetHeight -\n          (frame as HTMLElement).clientHeight -\n          borderTop -\n          borderBottom\n        : 0\n\n    const scaleX =\n      'offsetWidth' in frame\n        ? (frame as HTMLElement).offsetWidth === 0\n          ? 0\n          : width / (frame as HTMLElement).offsetWidth\n        : 0\n    const scaleY =\n      'offsetHeight' in frame\n        ? (frame as HTMLElement).offsetHeight === 0\n          ? 0\n          : height / (frame as HTMLElement).offsetHeight\n        : 0\n\n    if (scrollingElement === frame) {\n      // Handle viewport logic (document.documentElement or document.body)\n\n      if (block === 'start') {\n        blockScroll = targetBlock\n      } else if (block === 'end') {\n        blockScroll = targetBlock - viewportHeight\n      } else if (block === 'nearest') {\n        blockScroll = alignNearest(\n          scrollY,\n          scrollY + viewportHeight,\n          viewportHeight,\n          borderTop,\n          borderBottom,\n          scrollY + targetBlock,\n          scrollY + targetBlock + targetHeight,\n          targetHeight\n        )\n      } else {\n        // block === 'center' is the default\n        blockScroll = targetBlock - viewportHeight / 2\n      }\n\n      if (inline === 'start') {\n        inlineScroll = targetInline\n      } else if (inline === 'center') {\n        inlineScroll = targetInline - viewportWidth / 2\n      } else if (inline === 'end') {\n        inlineScroll = targetInline - viewportWidth\n      } else {\n        // inline === 'nearest' is the default\n        inlineScroll = alignNearest(\n          scrollX,\n          scrollX + viewportWidth,\n          viewportWidth,\n          borderLeft,\n          borderRight,\n          scrollX + targetInline,\n          scrollX + targetInline + targetWidth,\n          targetWidth\n        )\n      }\n\n      // Apply scroll position offsets and ensure they are within bounds\n      // @TODO add more test cases to cover this 100%\n      blockScroll = Math.max(0, blockScroll + scrollY)\n      inlineScroll = Math.max(0, inlineScroll + scrollX)\n    } else {\n      // Handle each scrolling frame that might exist between the target and the viewport\n      if (block === 'start') {\n        blockScroll = targetBlock - top - borderTop\n      } else if (block === 'end') {\n        blockScroll = targetBlock - bottom + borderBottom + scrollbarHeight\n      } else if (block === 'nearest') {\n        blockScroll = alignNearest(\n          top,\n          bottom,\n          height,\n          borderTop,\n          borderBottom + scrollbarHeight,\n          targetBlock,\n          targetBlock + targetHeight,\n          targetHeight\n        )\n      } else {\n        // block === 'center' is the default\n        blockScroll = targetBlock - (top + height / 2) + scrollbarHeight / 2\n      }\n\n      if (inline === 'start') {\n        inlineScroll = targetInline - left - borderLeft\n      } else if (inline === 'center') {\n        inlineScroll = targetInline - (left + width / 2) + scrollbarWidth / 2\n      } else if (inline === 'end') {\n        inlineScroll = targetInline - right + borderRight + scrollbarWidth\n      } else {\n        // inline === 'nearest' is the default\n        inlineScroll = alignNearest(\n          left,\n          right,\n          width,\n          borderLeft,\n          borderRight + scrollbarWidth,\n          targetInline,\n          targetInline + targetWidth,\n          targetWidth\n        )\n      }\n\n      const { scrollLeft, scrollTop } = frame\n      // Ensure scroll coordinates are not out of bounds while applying scroll offsets\n      blockScroll =\n        scaleY === 0\n          ? 0\n          : Math.max(\n              0,\n              Math.min(\n                scrollTop + blockScroll / scaleY,\n                frame.scrollHeight - height / scaleY + scrollbarHeight\n              )\n            )\n      inlineScroll =\n        scaleX === 0\n          ? 0\n          : Math.max(\n              0,\n              Math.min(\n                scrollLeft + inlineScroll / scaleX,\n                frame.scrollWidth - width / scaleX + scrollbarWidth\n              )\n            )\n\n      // Cache the offset so that parent frames can scroll this into view correctly\n      targetBlock += scrollTop - blockScroll\n      targetInline += scrollLeft - inlineScroll\n    }\n\n    computations.push({ el: frame, top: blockScroll, left: inlineScroll })\n  }\n\n  return computations\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}