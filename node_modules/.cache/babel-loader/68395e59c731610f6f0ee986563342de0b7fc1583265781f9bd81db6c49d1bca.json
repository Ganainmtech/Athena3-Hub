{"ast":null,"code":"import _classCallCheck from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _createForOfIteratorHelper from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { Buffer } from 'buffer';\n/**\n * Base class for models\n */\n/* eslint-disable no-underscore-dangle,camelcase */\nfunction _is_primitive(val) {\n  /* eslint-enable no-underscore-dangle,camelcase */\n  return val === undefined || val == null || typeof val !== 'object' && typeof val !== 'function';\n}\nfunction _get_obj_for_encoding(val, binary) {\n  /* eslint-enable no-underscore-dangle,camelcase,no-redeclare,no-unused-vars */\n  var targetPropValue;\n  if (val instanceof Uint8Array) {\n    targetPropValue = binary ? val : Buffer.from(val).toString('base64');\n  } else if (typeof val.get_obj_for_encoding === 'function') {\n    targetPropValue = val.get_obj_for_encoding(binary);\n  } else if (Array.isArray(val)) {\n    targetPropValue = [];\n    var _iterator = _createForOfIteratorHelper(val),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var elem = _step.value;\n        targetPropValue.push(_get_obj_for_encoding(elem, binary));\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  } else if (typeof val === 'object') {\n    var obj = {};\n    for (var _i = 0, _Object$keys = Object.keys(val); _i < _Object$keys.length; _i++) {\n      var prop = _Object$keys[_i];\n      obj[prop] = _get_obj_for_encoding(val[prop], binary);\n    }\n    targetPropValue = obj;\n  } else if (_is_primitive(val)) {\n    targetPropValue = val;\n  } else {\n    throw new Error(\"Unsupported value: \".concat(String(val)));\n  }\n  return targetPropValue;\n}\nvar BaseModel = /*#__PURE__*/function () {\n  function BaseModel() {\n    _classCallCheck(this, BaseModel);\n  }\n  _createClass(BaseModel, [{\n    key: \"get_obj_for_encoding\",\n    value:\n    /**\n     * Get an object ready for encoding to either JSON or msgpack.\n     * @param binary - Use true to indicate that the encoding can handle raw binary objects\n     *   (Uint8Arrays). Use false to indicate that raw binary objects should be converted to base64\n     *   strings. True should be used for objects that will be encoded with msgpack, and false should\n     *   be used for objects that will be encoded with JSON.\n     */\n    function get_obj_for_encoding() {\n      var binary = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      /* eslint-enable no-underscore-dangle,camelcase */\n      var obj = {};\n      for (var _i2 = 0, _Object$keys2 = Object.keys(this.attribute_map); _i2 < _Object$keys2.length; _i2++) {\n        var prop = _Object$keys2[_i2];\n        var name = this.attribute_map[prop];\n        var value = this[prop];\n        if (typeof value !== 'undefined') {\n          obj[name] = value === null ? null : _get_obj_for_encoding(value, binary);\n        }\n      }\n      return obj;\n    }\n  }]);\n  return BaseModel;\n}();\nexport { BaseModel as default };","map":{"version":3,"names":["Buffer","_is_primitive","val","undefined","_get_obj_for_encoding","binary","targetPropValue","Uint8Array","from","toString","get_obj_for_encoding","Array","isArray","_iterator","_createForOfIteratorHelper","_step","s","n","done","elem","value","push","err","e","f","obj","_i","_Object$keys","Object","keys","length","prop","Error","concat","String","BaseModel","_classCallCheck","_createClass","key","arguments","_i2","_Object$keys2","attribute_map","name","default"],"sources":["/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/algosdk/src/client/v2/basemodel.ts"],"sourcesContent":["import { Buffer } from 'buffer';\n\n/**\n * Base class for models\n */\n\n/* eslint-disable no-underscore-dangle,camelcase */\nfunction _is_primitive(val: any): val is string | boolean | number | bigint {\n  /* eslint-enable no-underscore-dangle,camelcase */\n  return (\n    val === undefined ||\n    val == null ||\n    (typeof val !== 'object' && typeof val !== 'function')\n  );\n}\n\n/* eslint-disable no-underscore-dangle,camelcase,no-redeclare,no-unused-vars */\nfunction _get_obj_for_encoding(\n  val: Function,\n  binary: boolean\n): Record<string, any>;\nfunction _get_obj_for_encoding(val: any[], binary: boolean): any[];\nfunction _get_obj_for_encoding(\n  val: Record<string, any>,\n  binary: boolean\n): Record<string, any>;\nfunction _get_obj_for_encoding(val: any, binary: boolean): any {\n  /* eslint-enable no-underscore-dangle,camelcase,no-redeclare,no-unused-vars */\n  let targetPropValue: any;\n\n  if (val instanceof Uint8Array) {\n    targetPropValue = binary ? val : Buffer.from(val).toString('base64');\n  } else if (typeof val.get_obj_for_encoding === 'function') {\n    targetPropValue = val.get_obj_for_encoding(binary);\n  } else if (Array.isArray(val)) {\n    targetPropValue = [];\n    for (const elem of val) {\n      targetPropValue.push(_get_obj_for_encoding(elem, binary));\n    }\n  } else if (typeof val === 'object') {\n    const obj = {};\n    for (const prop of Object.keys(val)) {\n      obj[prop] = _get_obj_for_encoding(val[prop], binary);\n    }\n    targetPropValue = obj;\n  } else if (_is_primitive(val)) {\n    targetPropValue = val;\n  } else {\n    throw new Error(`Unsupported value: ${String(val)}`);\n  }\n  return targetPropValue;\n}\n\nexport default class BaseModel {\n  /* eslint-disable no-underscore-dangle,camelcase */\n  attribute_map: Record<string, string>;\n\n  /**\n   * Get an object ready for encoding to either JSON or msgpack.\n   * @param binary - Use true to indicate that the encoding can handle raw binary objects\n   *   (Uint8Arrays). Use false to indicate that raw binary objects should be converted to base64\n   *   strings. True should be used for objects that will be encoded with msgpack, and false should\n   *   be used for objects that will be encoded with JSON.\n   */\n  get_obj_for_encoding(binary = false) {\n    /* eslint-enable no-underscore-dangle,camelcase */\n    const obj: Record<string, any> = {};\n\n    for (const prop of Object.keys(this.attribute_map)) {\n      const name = this.attribute_map[prop];\n      const value = this[prop];\n\n      if (typeof value !== 'undefined') {\n        obj[name] =\n          value === null ? null : _get_obj_for_encoding(value, binary);\n      }\n    }\n\n    return obj;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}