{"ast":null,"code":"import { Buffer } from 'buffer';\nimport JSONRequest from '../jsonrequest';\nimport { Box } from './models/types';\n/**\n * Given an application ID and the box name (key), return the value stored in the box.\n *\n * #### Example\n * ```typescript\n * const index = 60553466;\n * const boxName = Buffer.from(\"foo\");\n * const boxResponse = await algodClient.getApplicationBoxByName(index, boxName).do();\n * const boxValue = boxResponse.value;\n * ```\n *\n * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2applicationsapplication-idbox)\n * @param index - The application ID to look up.\n * @category GET\n */\nexport default class GetApplicationBoxByName extends JSONRequest {\n  constructor(c, intDecoding, index, name) {\n    super(c, intDecoding);\n    this.index = index;\n    this.index = index;\n    // Encode name in base64 format and append the encoding prefix.\n    const encodedName = Buffer.from(name).toString('base64');\n    this.query.name = encodeURI(`b64:${encodedName}`);\n  }\n  /**\n   * @returns `/v2/applications/${index}/box`\n   */\n  path() {\n    return `/v2/applications/${this.index}/box`;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  prepare(body) {\n    return Box.from_obj_for_encoding(body);\n  }\n}","map":{"version":3,"names":["Buffer","JSONRequest","Box","GetApplicationBoxByName","constructor","c","intDecoding","index","name","encodedName","from","toString","query","encodeURI","path","prepare","body","from_obj_for_encoding"],"sources":["/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/node_modules/algosdk/src/client/v2/algod/getApplicationBoxByName.ts"],"sourcesContent":["import { Buffer } from 'buffer';\nimport JSONRequest from '../jsonrequest';\nimport HTTPClient from '../../client';\nimport IntDecoding from '../../../types/intDecoding';\nimport { Box } from './models/types';\n\n/**\n * Given an application ID and the box name (key), return the value stored in the box.\n *\n * #### Example\n * ```typescript\n * const index = 60553466;\n * const boxName = Buffer.from(\"foo\");\n * const boxResponse = await algodClient.getApplicationBoxByName(index, boxName).do();\n * const boxValue = boxResponse.value;\n * ```\n *\n * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2applicationsapplication-idbox)\n * @param index - The application ID to look up.\n * @category GET\n */\nexport default class GetApplicationBoxByName extends JSONRequest<\n  Box,\n  Record<string, any>\n> {\n  constructor(\n    c: HTTPClient,\n    intDecoding: IntDecoding,\n    private index: number,\n    name: Uint8Array\n  ) {\n    super(c, intDecoding);\n    this.index = index;\n    // Encode name in base64 format and append the encoding prefix.\n    const encodedName = Buffer.from(name).toString('base64');\n    this.query.name = encodeURI(`b64:${encodedName}`);\n  }\n\n  /**\n   * @returns `/v2/applications/${index}/box`\n   */\n  path() {\n    return `/v2/applications/${this.index}/box`;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  prepare(body: Record<string, any>): Box {\n    return Box.from_obj_for_encoding(body);\n  }\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,QAAQ;AAC/B,OAAOC,WAAW,MAAM,gBAAgB;AAGxC,SAASC,GAAG,QAAQ,gBAAgB;AAEpC;;;;;;;;;;;;;;;AAeA,eAAc,MAAOC,uBAAwB,SAAQF,WAGpD;EACCG,YACEC,CAAa,EACbC,WAAwB,EAChBC,KAAa,EACrBC,IAAgB;IAEhB,KAAK,CAACH,CAAC,EAAEC,WAAW,CAAC;IAHb,KAAAC,KAAK,GAALA,KAAK;IAIb,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB;IACA,MAAME,WAAW,GAAGT,MAAM,CAACU,IAAI,CAACF,IAAI,CAAC,CAACG,QAAQ,CAAC,QAAQ,CAAC;IACxD,IAAI,CAACC,KAAK,CAACJ,IAAI,GAAGK,SAAS,CAAC,OAAOJ,WAAW,EAAE,CAAC;EACnD;EAEA;;;EAGAK,IAAIA,CAAA;IACF,OAAO,oBAAoB,IAAI,CAACP,KAAK,MAAM;EAC7C;EAEA;EACAQ,OAAOA,CAACC,IAAyB;IAC/B,OAAOd,GAAG,CAACe,qBAAqB,CAACD,IAAI,CAAC;EACxC"},"metadata":{},"sourceType":"module","externalDependencies":[]}