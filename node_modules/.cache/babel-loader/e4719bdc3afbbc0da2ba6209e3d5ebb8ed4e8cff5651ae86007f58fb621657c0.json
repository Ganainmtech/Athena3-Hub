{"ast":null,"code":"import HTTPClient from '../client';\nimport IntDecoding from '../../types/intDecoding';\n/**\n * Convert a token string to a token header\n * @param token - The token string\n * @param headerIdentifier - An identifier for the token header\n */\nfunction convertTokenStringToTokenHeader(token = '', headerIdentifier) {\n  const tokenHeader = {};\n  if (token === '') {\n    return tokenHeader;\n  }\n  tokenHeader[headerIdentifier] = token;\n  return tokenHeader;\n}\nfunction isBaseHTTPClient(tbc) {\n  return typeof tbc.get === 'function';\n}\n/**\n * Abstract service client to encapsulate shared AlgodClient and IndexerClient logic\n */\nexport default class ServiceClient {\n  constructor(tokenHeaderIdentifier, tokenHeaderOrStrOrBaseClient, baseServer, port, defaultHeaders = {}) {\n    if (isBaseHTTPClient(tokenHeaderOrStrOrBaseClient)) {\n      // we are using a base client\n      this.c = new HTTPClient(tokenHeaderOrStrOrBaseClient);\n    } else {\n      // Accept token header as string or object\n      // - workaround to allow backwards compatibility for multiple headers\n      let tokenHeader;\n      if (typeof tokenHeaderOrStrOrBaseClient === 'string') {\n        tokenHeader = convertTokenStringToTokenHeader(tokenHeaderOrStrOrBaseClient, tokenHeaderIdentifier);\n      } else {\n        tokenHeader = tokenHeaderOrStrOrBaseClient;\n      }\n      this.c = new HTTPClient(tokenHeader, baseServer, port, defaultHeaders);\n    }\n    this.intDecoding = IntDecoding.DEFAULT;\n  }\n  /**\n   * Set the default int decoding method for all JSON requests this client creates.\n   * @param method - \\{\"default\" | \"safe\" | \"mixed\" | \"bigint\"\\} method The method to use when parsing the\n   *   response for request. Must be one of \"default\", \"safe\", \"mixed\", or \"bigint\". See\n   *   JSONRequest.setIntDecoding for more details about what each method does.\n   */\n  setIntEncoding(method) {\n    this.intDecoding = method;\n  }\n  /**\n   * Get the default int decoding method for all JSON requests this client creates.\n   */\n  getIntEncoding() {\n    return this.intDecoding;\n  }\n}","map":{"version":3,"names":["HTTPClient","IntDecoding","convertTokenStringToTokenHeader","token","headerIdentifier","tokenHeader","isBaseHTTPClient","tbc","get","ServiceClient","constructor","tokenHeaderIdentifier","tokenHeaderOrStrOrBaseClient","baseServer","port","defaultHeaders","c","intDecoding","DEFAULT","setIntEncoding","method","getIntEncoding"],"sources":["/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/algosdk/src/client/v2/serviceClient.ts"],"sourcesContent":["import HTTPClient from '../client';\nimport IntDecoding from '../../types/intDecoding';\nimport { BaseHTTPClient } from '../baseHTTPClient';\nimport { TokenHeader } from '../urlTokenBaseHTTPClient';\n\nexport type TokenHeaderIdentifier =\n  | 'X-Indexer-API-Token'\n  | 'X-KMD-API-Token'\n  | 'X-Algo-API-Token'\n  | string;\n\n/**\n * Convert a token string to a token header\n * @param token - The token string\n * @param headerIdentifier - An identifier for the token header\n */\nfunction convertTokenStringToTokenHeader(\n  token: string = '',\n  headerIdentifier: TokenHeaderIdentifier\n): TokenHeader {\n  const tokenHeader = {};\n  if (token === '') {\n    return tokenHeader;\n  }\n  tokenHeader[headerIdentifier] = token;\n  return tokenHeader as TokenHeader;\n}\n\nfunction isBaseHTTPClient(\n  tbc: string | TokenHeader | BaseHTTPClient\n): tbc is BaseHTTPClient {\n  return typeof (tbc as BaseHTTPClient).get === 'function';\n}\n\n/**\n * Abstract service client to encapsulate shared AlgodClient and IndexerClient logic\n */\nexport default abstract class ServiceClient {\n  /** @ignore */\n  c: HTTPClient;\n  /** @ignore */\n  intDecoding: IntDecoding;\n\n  constructor(\n    tokenHeaderIdentifier: TokenHeaderIdentifier,\n    tokenHeaderOrStrOrBaseClient: string | TokenHeader | BaseHTTPClient,\n    baseServer: string,\n    port?: string | number,\n    defaultHeaders: Record<string, any> = {}\n  ) {\n    if (isBaseHTTPClient(tokenHeaderOrStrOrBaseClient)) {\n      // we are using a base client\n      this.c = new HTTPClient(tokenHeaderOrStrOrBaseClient);\n    } else {\n      // Accept token header as string or object\n      // - workaround to allow backwards compatibility for multiple headers\n      let tokenHeader: TokenHeader;\n      if (typeof tokenHeaderOrStrOrBaseClient === 'string') {\n        tokenHeader = convertTokenStringToTokenHeader(\n          tokenHeaderOrStrOrBaseClient,\n          tokenHeaderIdentifier\n        );\n      } else {\n        tokenHeader = tokenHeaderOrStrOrBaseClient;\n      }\n\n      this.c = new HTTPClient(tokenHeader, baseServer, port, defaultHeaders);\n    }\n\n    this.intDecoding = IntDecoding.DEFAULT;\n  }\n\n  /**\n   * Set the default int decoding method for all JSON requests this client creates.\n   * @param method - \\{\"default\" | \"safe\" | \"mixed\" | \"bigint\"\\} method The method to use when parsing the\n   *   response for request. Must be one of \"default\", \"safe\", \"mixed\", or \"bigint\". See\n   *   JSONRequest.setIntDecoding for more details about what each method does.\n   */\n  setIntEncoding(method: IntDecoding) {\n    this.intDecoding = method;\n  }\n\n  /**\n   * Get the default int decoding method for all JSON requests this client creates.\n   */\n  getIntEncoding() {\n    return this.intDecoding;\n  }\n}\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,WAAW;AAClC,OAAOC,WAAW,MAAM,yBAAyB;AAUjD;;;;;AAKA,SAASC,+BAA+BA,CACtCC,KAAA,GAAgB,EAAE,EAClBC,gBAAuC;EAEvC,MAAMC,WAAW,GAAG,EAAE;EACtB,IAAIF,KAAK,KAAK,EAAE,EAAE;IAChB,OAAOE,WAAW;;EAEpBA,WAAW,CAACD,gBAAgB,CAAC,GAAGD,KAAK;EACrC,OAAOE,WAA0B;AACnC;AAEA,SAASC,gBAAgBA,CACvBC,GAA0C;EAE1C,OAAO,OAAQA,GAAsB,CAACC,GAAG,KAAK,UAAU;AAC1D;AAEA;;;AAGA,eAAc,MAAgBC,aAAa;EAMzCC,YACEC,qBAA4C,EAC5CC,4BAAmE,EACnEC,UAAkB,EAClBC,IAAsB,EACtBC,cAAA,GAAsC,EAAE;IAExC,IAAIT,gBAAgB,CAACM,4BAA4B,CAAC,EAAE;MAClD;MACA,IAAI,CAACI,CAAC,GAAG,IAAIhB,UAAU,CAACY,4BAA4B,CAAC;KACtD,MAAM;MACL;MACA;MACA,IAAIP,WAAwB;MAC5B,IAAI,OAAOO,4BAA4B,KAAK,QAAQ,EAAE;QACpDP,WAAW,GAAGH,+BAA+B,CAC3CU,4BAA4B,EAC5BD,qBAAqB,CACtB;OACF,MAAM;QACLN,WAAW,GAAGO,4BAA4B;;MAG5C,IAAI,CAACI,CAAC,GAAG,IAAIhB,UAAU,CAACK,WAAW,EAAEQ,UAAU,EAAEC,IAAI,EAAEC,cAAc,CAAC;;IAGxE,IAAI,CAACE,WAAW,GAAGhB,WAAW,CAACiB,OAAO;EACxC;EAEA;;;;;;EAMAC,cAAcA,CAACC,MAAmB;IAChC,IAAI,CAACH,WAAW,GAAGG,MAAM;EAC3B;EAEA;;;EAGAC,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACJ,WAAW;EACzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}