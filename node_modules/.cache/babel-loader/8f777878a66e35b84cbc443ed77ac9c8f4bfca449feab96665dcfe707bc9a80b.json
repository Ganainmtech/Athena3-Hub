{"ast":null,"code":"import _classCallCheck from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport JSONRequest from '../jsonrequest';\nvar LookupApplicationLogs = /*#__PURE__*/function (_JSONRequest) {\n  _inherits(LookupApplicationLogs, _JSONRequest);\n  var _super = _createSuper(LookupApplicationLogs);\n  /**\n   * Returns log messages generated by the passed in application.\n   *\n   * #### Example\n   * ```typescript\n   * const appId = 60553466;\n   * const appLogs = await indexerClient.lookupApplicationLogs(appId).do();\n   * ```\n   *\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idlogs)\n   * @param appID - The ID of the application which generated the logs.\n   * @category GET\n   */\n  function LookupApplicationLogs(c, intDecoding, appID) {\n    var _this;\n    _classCallCheck(this, LookupApplicationLogs);\n    _this = _super.call(this, c, intDecoding);\n    _this.appID = appID;\n    _this.appID = appID;\n    return _this;\n  }\n  /**\n   * @returns `/v2/applications/${appID}/logs`\n   */\n  _createClass(LookupApplicationLogs, [{\n    key: \"path\",\n    value: function path() {\n      return \"/v2/applications/\".concat(this.appID, \"/logs\");\n    }\n    /**\n     * Limit results for pagination.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 20;\n     * const appLogs = await indexerClient\n     *        .lookupApplicationLogs(appId)\n     *        .limit(maxResults)\n     *        .do();\n     * ```\n     *\n     * @param limit - maximum number of results to return.\n     */\n  }, {\n    key: \"limit\",\n    value: function limit(_limit) {\n      this.query.limit = _limit;\n      return this;\n    }\n    /**\n     * Include results at or after the specified min-round.\n     *\n     * #### Example\n     * ```typescript\n     * const minRound = 18309917;\n     * const appLogs = await indexerClient\n     *        .lookupApplicationLogs(appId)\n     *        .minRound(minRound)\n     *        .do();\n     * ```\n     *\n     * @param round\n     * @category query\n     */\n  }, {\n    key: \"minRound\",\n    value: function minRound(round) {\n      this.query['min-round'] = round;\n      return this;\n    }\n    /**\n     * Include results at or before the specified max-round.\n     *\n     * #### Example\n     * ```typescript\n     * const maxRound = 18309917;\n     * const appLogs = await indexerClient\n     *        .lookupApplicationLogs(appId)\n     *        .maxRound(maxRound)\n     *        .do();\n     * ```\n     *\n     * @param round\n     * @category query\n     */\n  }, {\n    key: \"maxRound\",\n    value: function maxRound(round) {\n      this.query['max-round'] = round;\n      return this;\n    }\n    /**\n     * The next page of results.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 25;\n     *\n     * const appLogsPage1 = await indexerClient\n     *        .lookupApplicationLogs(appId)\n     *        .limit(maxResults)\n     *        .do();\n     *\n     * const appLogsPage2 = await indexerClient\n     *        .lookupApplicationLogs(appId)\n     *        .limit(maxResults)\n     *        .nextToken(appLogsPage1[\"next-token\"])\n     *        .do();\n     * ```\n     *\n     * @param nextToken - provided by the previous results.\n     * @category query\n     */\n  }, {\n    key: \"nextToken\",\n    value: function nextToken(_nextToken) {\n      this.query.next = _nextToken;\n      return this;\n    }\n    /**\n     * Only include transactions with this sender address.\n     *\n     * #### Example\n     * ```typescript\n     * const sender = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const appLogs = await indexerClient\n     *        .lookupApplicationLogs(appId)\n     *        .sender(sender)\n     *        .do();\n     * ```\n     *\n     * @param senderAddress\n     * @category query\n     */\n  }, {\n    key: \"sender\",\n    value: function sender(senderAddress) {\n      this.query['sender-address'] = senderAddress;\n      return this;\n    }\n    /**\n     * Lookup the specific transaction by ID.\n     *\n     * #### Example\n     * ```typescript\n     * const txId = \"MEUOC4RQJB23CQZRFRKYEI6WBO73VTTPST5A7B3S5OKBUY6LFUDA\";\n     * const appLogs = await indexerClient\n     *        .lookupApplicationLogs(appId)\n     *        .txid(txId)\n     *        .do();\n     * ```\n     *\n     * @param txid\n     * @category query\n     */\n  }, {\n    key: \"txid\",\n    value: function txid(_txid) {\n      this.query.txid = _txid;\n      return this;\n    }\n  }]);\n  return LookupApplicationLogs;\n}(JSONRequest);\nexport { LookupApplicationLogs as default };","map":{"version":3,"names":["JSONRequest","LookupApplicationLogs","_JSONRequest","_inherits","_super","_createSuper","c","intDecoding","appID","_this","_classCallCheck","call","_createClass","key","value","path","concat","limit","query","minRound","round","maxRound","nextToken","next","sender","senderAddress","txid","default"],"sources":["/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/algosdk/src/client/v2/indexer/lookupApplicationLogs.ts"],"sourcesContent":["import JSONRequest from '../jsonrequest';\nimport HTTPClient from '../../client';\nimport IntDecoding from '../../../types/intDecoding';\n\nexport default class LookupApplicationLogs extends JSONRequest {\n  /**\n   * Returns log messages generated by the passed in application.\n   *\n   * #### Example\n   * ```typescript\n   * const appId = 60553466;\n   * const appLogs = await indexerClient.lookupApplicationLogs(appId).do();\n   * ```\n   *\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idlogs)\n   * @param appID - The ID of the application which generated the logs.\n   * @category GET\n   */\n  constructor(c: HTTPClient, intDecoding: IntDecoding, private appID: number) {\n    super(c, intDecoding);\n    this.appID = appID;\n  }\n\n  /**\n   * @returns `/v2/applications/${appID}/logs`\n   */\n  path() {\n    return `/v2/applications/${this.appID}/logs`;\n  }\n\n  /**\n   * Limit results for pagination.\n   *\n   * #### Example\n   * ```typescript\n   * const maxResults = 20;\n   * const appLogs = await indexerClient\n   *        .lookupApplicationLogs(appId)\n   *        .limit(maxResults)\n   *        .do();\n   * ```\n   *\n   * @param limit - maximum number of results to return.\n   */\n  limit(limit: number) {\n    this.query.limit = limit;\n    return this;\n  }\n\n  /**\n   * Include results at or after the specified min-round.\n   *\n   * #### Example\n   * ```typescript\n   * const minRound = 18309917;\n   * const appLogs = await indexerClient\n   *        .lookupApplicationLogs(appId)\n   *        .minRound(minRound)\n   *        .do();\n   * ```\n   *\n   * @param round\n   * @category query\n   */\n  minRound(round: number) {\n    this.query['min-round'] = round;\n    return this;\n  }\n\n  /**\n   * Include results at or before the specified max-round.\n   *\n   * #### Example\n   * ```typescript\n   * const maxRound = 18309917;\n   * const appLogs = await indexerClient\n   *        .lookupApplicationLogs(appId)\n   *        .maxRound(maxRound)\n   *        .do();\n   * ```\n   *\n   * @param round\n   * @category query\n   */\n  maxRound(round: number) {\n    this.query['max-round'] = round;\n    return this;\n  }\n\n  /**\n   * The next page of results.\n   *\n   * #### Example\n   * ```typescript\n   * const maxResults = 25;\n   *\n   * const appLogsPage1 = await indexerClient\n   *        .lookupApplicationLogs(appId)\n   *        .limit(maxResults)\n   *        .do();\n   *\n   * const appLogsPage2 = await indexerClient\n   *        .lookupApplicationLogs(appId)\n   *        .limit(maxResults)\n   *        .nextToken(appLogsPage1[\"next-token\"])\n   *        .do();\n   * ```\n   *\n   * @param nextToken - provided by the previous results.\n   * @category query\n   */\n  nextToken(nextToken: string) {\n    this.query.next = nextToken;\n    return this;\n  }\n\n  /**\n   * Only include transactions with this sender address.\n   *\n   * #### Example\n   * ```typescript\n   * const sender = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n   * const appLogs = await indexerClient\n   *        .lookupApplicationLogs(appId)\n   *        .sender(sender)\n   *        .do();\n   * ```\n   *\n   * @param senderAddress\n   * @category query\n   */\n  sender(senderAddress: string) {\n    this.query['sender-address'] = senderAddress;\n    return this;\n  }\n\n  /**\n   * Lookup the specific transaction by ID.\n   *\n   * #### Example\n   * ```typescript\n   * const txId = \"MEUOC4RQJB23CQZRFRKYEI6WBO73VTTPST5A7B3S5OKBUY6LFUDA\";\n   * const appLogs = await indexerClient\n   *        .lookupApplicationLogs(appId)\n   *        .txid(txId)\n   *        .do();\n   * ```\n   *\n   * @param txid\n   * @category query\n   */\n  txid(txid: string) {\n    this.query.txid = txid;\n    return this;\n  }\n}\n"],"mappings":";;;;AAAA,OAAOA,WAAW,MAAM,gBAAgB;AAAC,IAIpBC,qBAAsB,0BAAAC,YAAA;EAAAC,SAAA,CAAAF,qBAAA,EAAAC,YAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,qBAAA;EACzC;;;;;;;;;;;;;EAaA,SAAAA,sBAAYK,CAAa,EAAEC,WAAwB,EAAUC,KAAa;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAT,qBAAA;IACxEQ,KAAA,GAAAL,MAAA,CAAAO,IAAA,OAAML,CAAC,EAAEC,WAAW;IADuCE,KAAA,CAAAD,KAAK,GAALA,KAAK;IAEhEC,KAAA,CAAKD,KAAK,GAAGA,KAAK;IAAC,OAAAC,KAAA;EACrB;EAEA;;;EAAAG,YAAA,CAAAX,qBAAA;IAAAY,GAAA;IAAAC,KAAA,EAGA,SAAAC,KAAA,EAAI;MACF,2BAAAC,MAAA,CAA2B,IAAI,CAACR,KAAK;IACvC;IAEA;;;;;;;;;;;;;;EAAA;IAAAK,GAAA;IAAAC,KAAA,EAcA,SAAAG,MAAMA,MAAa;MACjB,IAAI,CAACC,KAAK,CAACD,KAAK,GAAGA,MAAK;MACxB,OAAO,IAAI;IACb;IAEA;;;;;;;;;;;;;;;EAAA;IAAAJ,GAAA;IAAAC,KAAA,EAeA,SAAAK,SAASC,KAAa;MACpB,IAAI,CAACF,KAAK,CAAC,WAAW,CAAC,GAAGE,KAAK;MAC/B,OAAO,IAAI;IACb;IAEA;;;;;;;;;;;;;;;EAAA;IAAAP,GAAA;IAAAC,KAAA,EAeA,SAAAO,SAASD,KAAa;MACpB,IAAI,CAACF,KAAK,CAAC,WAAW,CAAC,GAAGE,KAAK;MAC/B,OAAO,IAAI;IACb;IAEA;;;;;;;;;;;;;;;;;;;;;;EAAA;IAAAP,GAAA;IAAAC,KAAA,EAsBA,SAAAQ,UAAUA,UAAiB;MACzB,IAAI,CAACJ,KAAK,CAACK,IAAI,GAAGD,UAAS;MAC3B,OAAO,IAAI;IACb;IAEA;;;;;;;;;;;;;;;EAAA;IAAAT,GAAA;IAAAC,KAAA,EAeA,SAAAU,OAAOC,aAAqB;MAC1B,IAAI,CAACP,KAAK,CAAC,gBAAgB,CAAC,GAAGO,aAAa;MAC5C,OAAO,IAAI;IACb;IAEA;;;;;;;;;;;;;;;EAAA;IAAAZ,GAAA;IAAAC,KAAA,EAeA,SAAAY,KAAKA,KAAY;MACf,IAAI,CAACR,KAAK,CAACQ,IAAI,GAAGA,KAAI;MACtB,OAAO,IAAI;IACb;EAAC;EAAA,OAAAzB,qBAAA;AAAA,EAtJgDD,WAAW;AAAA,SAAzCC,qBAAsB,IAAA0B,OAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}