{"ast":null,"code":"\"use client\";\n\nimport React, { useContext } from 'react';\nimport classNames from 'classnames';\nimport { ConfigContext } from '../config-provider';\nimport useMessage from '../message/useMessage';\nimport useModal from '../modal/useModal';\nimport useNotification from '../notification/useNotification';\nimport AppContext, { AppConfigContext } from './context';\nimport useStyle from './style';\nconst useApp = () => React.useContext(AppContext);\nconst App = props => {\n  const {\n    prefixCls: customizePrefixCls,\n    children,\n    className,\n    rootClassName,\n    message,\n    notification,\n    style,\n    component = 'div'\n  } = props;\n  const {\n    getPrefixCls\n  } = useContext(ConfigContext);\n  const prefixCls = getPrefixCls('app', customizePrefixCls);\n  const [wrapSSR, hashId] = useStyle(prefixCls);\n  const customClassName = classNames(hashId, prefixCls, className, rootClassName);\n  const appConfig = useContext(AppConfigContext);\n  const mergedAppConfig = React.useMemo(() => ({\n    message: Object.assign(Object.assign({}, appConfig.message), message),\n    notification: Object.assign(Object.assign({}, appConfig.notification), notification)\n  }), [message, notification, appConfig.message, appConfig.notification]);\n  const [messageApi, messageContextHolder] = useMessage(mergedAppConfig.message);\n  const [notificationApi, notificationContextHolder] = useNotification(mergedAppConfig.notification);\n  const [ModalApi, ModalContextHolder] = useModal();\n  const memoizedContextValue = React.useMemo(() => ({\n    message: messageApi,\n    notification: notificationApi,\n    modal: ModalApi\n  }), [messageApi, notificationApi, ModalApi]);\n  // ============================ Render ============================\n  const Component = component === false ? React.Fragment : component;\n  const rootProps = {\n    className: customClassName,\n    style\n  };\n  return wrapSSR( /*#__PURE__*/React.createElement(AppContext.Provider, {\n    value: memoizedContextValue\n  }, /*#__PURE__*/React.createElement(AppConfigContext.Provider, {\n    value: mergedAppConfig\n  }, /*#__PURE__*/React.createElement(Component, Object.assign({}, component === false ? undefined : rootProps), ModalContextHolder, messageContextHolder, notificationContextHolder, children))));\n};\nif (process.env.NODE_ENV !== 'production') {\n  App.displayName = 'App';\n}\nApp.useApp = useApp;\nexport default App;","map":{"version":3,"names":["React","useContext","classNames","ConfigContext","useMessage","useModal","useNotification","AppContext","AppConfigContext","useStyle","useApp","App","props","prefixCls","customizePrefixCls","children","className","rootClassName","message","notification","style","component","getPrefixCls","wrapSSR","hashId","customClassName","appConfig","mergedAppConfig","useMemo","Object","assign","messageApi","messageContextHolder","notificationApi","notificationContextHolder","ModalApi","ModalContextHolder","memoizedContextValue","modal","Component","Fragment","rootProps","createElement","Provider","value","undefined","process","env","NODE_ENV","displayName"],"sources":["/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/antd/es/app/index.js"],"sourcesContent":["\"use client\";\n\nimport React, { useContext } from 'react';\nimport classNames from 'classnames';\nimport { ConfigContext } from '../config-provider';\nimport useMessage from '../message/useMessage';\nimport useModal from '../modal/useModal';\nimport useNotification from '../notification/useNotification';\nimport AppContext, { AppConfigContext } from './context';\nimport useStyle from './style';\nconst useApp = () => React.useContext(AppContext);\nconst App = props => {\n  const {\n    prefixCls: customizePrefixCls,\n    children,\n    className,\n    rootClassName,\n    message,\n    notification,\n    style,\n    component = 'div'\n  } = props;\n  const {\n    getPrefixCls\n  } = useContext(ConfigContext);\n  const prefixCls = getPrefixCls('app', customizePrefixCls);\n  const [wrapSSR, hashId] = useStyle(prefixCls);\n  const customClassName = classNames(hashId, prefixCls, className, rootClassName);\n  const appConfig = useContext(AppConfigContext);\n  const mergedAppConfig = React.useMemo(() => ({\n    message: Object.assign(Object.assign({}, appConfig.message), message),\n    notification: Object.assign(Object.assign({}, appConfig.notification), notification)\n  }), [message, notification, appConfig.message, appConfig.notification]);\n  const [messageApi, messageContextHolder] = useMessage(mergedAppConfig.message);\n  const [notificationApi, notificationContextHolder] = useNotification(mergedAppConfig.notification);\n  const [ModalApi, ModalContextHolder] = useModal();\n  const memoizedContextValue = React.useMemo(() => ({\n    message: messageApi,\n    notification: notificationApi,\n    modal: ModalApi\n  }), [messageApi, notificationApi, ModalApi]);\n  // ============================ Render ============================\n  const Component = component === false ? React.Fragment : component;\n  const rootProps = {\n    className: customClassName,\n    style\n  };\n  return wrapSSR( /*#__PURE__*/React.createElement(AppContext.Provider, {\n    value: memoizedContextValue\n  }, /*#__PURE__*/React.createElement(AppConfigContext.Provider, {\n    value: mergedAppConfig\n  }, /*#__PURE__*/React.createElement(Component, Object.assign({}, component === false ? undefined : rootProps), ModalContextHolder, messageContextHolder, notificationContextHolder, children))));\n};\nif (process.env.NODE_ENV !== 'production') {\n  App.displayName = 'App';\n}\nApp.useApp = useApp;\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}