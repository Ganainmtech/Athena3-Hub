{"ast":null,"code":"import { ABIMethod, getMethodByName } from './method';\nexport class ABIContract {\n  constructor(params) {\n    if (typeof params.name !== 'string' || !Array.isArray(params.methods) || params.networks && typeof params.networks !== 'object') {\n      throw new Error('Invalid ABIContract parameters');\n    }\n    this.name = params.name;\n    this.description = params.desc;\n    this.networks = params.networks ? {\n      ...params.networks\n    } : {};\n    this.methods = params.methods.map(method => new ABIMethod(method));\n  }\n  toJSON() {\n    return {\n      name: this.name,\n      desc: this.description,\n      networks: this.networks,\n      methods: this.methods.map(method => method.toJSON())\n    };\n  }\n  getMethodByName(name) {\n    return getMethodByName(this.methods, name);\n  }\n}","map":{"version":3,"names":["ABIMethod","getMethodByName","ABIContract","constructor","params","name","Array","isArray","methods","networks","Error","description","desc","map","method","toJSON"],"sources":["/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/node_modules/algosdk/src/abi/contract.ts"],"sourcesContent":["import { ABIMethod, ABIMethodParams, getMethodByName } from './method';\n\nexport interface ABIContractNetworkInfo {\n  appID: number;\n}\n\nexport interface ABIContractNetworks {\n  [network: string]: ABIContractNetworkInfo;\n}\n\nexport interface ABIContractParams {\n  name: string;\n  desc?: string;\n  networks?: ABIContractNetworks;\n  methods: ABIMethodParams[];\n}\n\nexport class ABIContract {\n  public readonly name: string;\n  public readonly description?: string;\n  public readonly networks: ABIContractNetworks;\n  public readonly methods: ABIMethod[];\n\n  constructor(params: ABIContractParams) {\n    if (\n      typeof params.name !== 'string' ||\n      !Array.isArray(params.methods) ||\n      (params.networks && typeof params.networks !== 'object')\n    ) {\n      throw new Error('Invalid ABIContract parameters');\n    }\n\n    this.name = params.name;\n    this.description = params.desc;\n    this.networks = params.networks ? { ...params.networks } : {};\n    this.methods = params.methods.map((method) => new ABIMethod(method));\n  }\n\n  toJSON(): ABIContractParams {\n    return {\n      name: this.name,\n      desc: this.description,\n      networks: this.networks,\n      methods: this.methods.map((method) => method.toJSON()),\n    };\n  }\n\n  getMethodByName(name: string): ABIMethod {\n    return getMethodByName(this.methods, name);\n  }\n}\n"],"mappings":"AAAA,SAASA,SAAS,EAAmBC,eAAe,QAAQ,UAAU;AAiBtE,OAAM,MAAOC,WAAW;EAMtBC,YAAYC,MAAyB;IACnC,IACE,OAAOA,MAAM,CAACC,IAAI,KAAK,QAAQ,IAC/B,CAACC,KAAK,CAACC,OAAO,CAACH,MAAM,CAACI,OAAO,CAAC,IAC7BJ,MAAM,CAACK,QAAQ,IAAI,OAAOL,MAAM,CAACK,QAAQ,KAAK,QAAS,EACxD;MACA,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;;IAGnD,IAAI,CAACL,IAAI,GAAGD,MAAM,CAACC,IAAI;IACvB,IAAI,CAACM,WAAW,GAAGP,MAAM,CAACQ,IAAI;IAC9B,IAAI,CAACH,QAAQ,GAAGL,MAAM,CAACK,QAAQ,GAAG;MAAE,GAAGL,MAAM,CAACK;IAAQ,CAAE,GAAG,EAAE;IAC7D,IAAI,CAACD,OAAO,GAAGJ,MAAM,CAACI,OAAO,CAACK,GAAG,CAAEC,MAAM,IAAK,IAAId,SAAS,CAACc,MAAM,CAAC,CAAC;EACtE;EAEAC,MAAMA,CAAA;IACJ,OAAO;MACLV,IAAI,EAAE,IAAI,CAACA,IAAI;MACfO,IAAI,EAAE,IAAI,CAACD,WAAW;MACtBF,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBD,OAAO,EAAE,IAAI,CAACA,OAAO,CAACK,GAAG,CAAEC,MAAM,IAAKA,MAAM,CAACC,MAAM,EAAE;KACtD;EACH;EAEAd,eAAeA,CAACI,IAAY;IAC1B,OAAOJ,eAAe,CAAC,IAAI,CAACO,OAAO,EAAEH,IAAI,CAAC;EAC5C"},"metadata":{},"sourceType":"module","externalDependencies":[]}