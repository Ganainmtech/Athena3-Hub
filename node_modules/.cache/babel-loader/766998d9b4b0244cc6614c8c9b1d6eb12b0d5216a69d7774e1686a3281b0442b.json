{"ast":null,"code":"import _classCallCheck from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport JSONRequest from '../jsonrequest';\n/**\n * Returns information about indexed accounts.\n *\n * #### Example\n * ```typescript\n * const accounts = await indexerClient.searchAccounts().do();\n * ```\n *\n * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accounts)\n * @category GET\n */\nvar SearchAccounts = /*#__PURE__*/function (_JSONRequest) {\n  _inherits(SearchAccounts, _JSONRequest);\n  var _super = _createSuper(SearchAccounts);\n  function SearchAccounts() {\n    _classCallCheck(this, SearchAccounts);\n    return _super.apply(this, arguments);\n  }\n  _createClass(SearchAccounts, [{\n    key: \"path\",\n    value:\n    /**\n     * @returns `/v2/accounts`\n     */\n    // eslint-disable-next-line class-methods-use-this\n    function path() {\n      return '/v2/accounts';\n    }\n    /**\n     * Filtered results should have an amount greater than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units.\n     *\n     * #### Example 1\n     * ```typescript\n     * const minBalance = 300000;\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .currencyGreaterThan(minBalance - 1)\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const assetID = 163650;\n     * const minBalance = 300000;\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .assetID(assetID)\n     *        .currencyGreaterThan(minBalance - 1)\n     *        .do();\n     * ```\n     * @remarks\n     * If you are looking for accounts with the currency amount greater than 0, simply construct the query without `currencyGreaterThan` because it doesn't accept `-1`, and passing the `0` `currency-greater-than` value would exclude accounts with a 0 amount.\n     *\n     * @param greater\n     * @category query\n     */\n  }, {\n    key: \"currencyGreaterThan\",\n    value: function currencyGreaterThan(greater) {\n      // We convert the following to a string for now to correctly include zero values in request parameters.\n      this.query['currency-greater-than'] = greater.toString();\n      return this;\n    }\n    /**\n     * Filtered results should have an amount less than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units.\n     *\n     * #### Example 1\n     * ```typescript\n     * const maxBalance = 500000;\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .currencyLessThan(maxBalance + 1)\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const assetID = 163650;\n     * const maxBalance = 500000;\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .assetID(assetID)\n     *        .currencyLessThan(maxBalance + 1)\n     *        .do();\n     * ```\n     *\n     * @param lesser\n     * @category query\n     */\n  }, {\n    key: \"currencyLessThan\",\n    value: function currencyLessThan(lesser) {\n      this.query['currency-less-than'] = lesser;\n      return this;\n    }\n    /**\n     * Maximum number of results to return.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 25;\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .limit(maxResults)\n     *        .do();\n     * ```\n     *\n     * @param limit\n     * @category query\n     */\n  }, {\n    key: \"limit\",\n    value: function limit(_limit) {\n      this.query.limit = _limit;\n      return this;\n    }\n    /**\n     * Asset ID to filter with.\n     *\n     * #### Example\n     * ```typescript\n     * const assetID = 163650;\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .assetID(assetID)\n     *        .do();\n     * ```\n     *\n     * @param id\n     * @category query\n     */\n  }, {\n    key: \"assetID\",\n    value: function assetID(id) {\n      this.query['asset-id'] = id;\n      return this;\n    }\n    /**\n     * The next page of results.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 25;\n     *\n     * const accountsPage1 = await indexerClient\n     *        .searchAccounts()\n     *        .limit(maxResults)\n     *        .do();\n     *\n     * const accountsPage2 = await indexerClient\n     *        .searchAccounts()\n     *        .limit(maxResults)\n     *        .nextToken(accountsPage1[\"next-token\"])\n     *        .do();\n     * ```\n     *\n     * @param nextToken - provided by the previous results\n     * @category query\n     */\n  }, {\n    key: \"nextToken\",\n    value: function nextToken(_nextToken) {\n      this.query.next = _nextToken;\n      return this;\n    }\n    /**\n     * Include results for the specified round.\n     *\n     * #### Example\n     * ```typescript\n     * const targetBlock = 18309917;\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .round(targetBlock)\n     *        .do();\n     * ```\n     * @remarks For performance reasons, this parameter may be disabled on some configurations.\n     * @param round\n     * @category query\n     */\n  }, {\n    key: \"round\",\n    value: function round(_round) {\n      this.query.round = _round;\n      return this;\n    }\n    /**\n     * Include accounts that use this spending key.\n     *\n     * #### Example\n     * ```typescript\n     * const authAddr = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .authAddr(authAddr)\n     *        .do();\n     * ```\n     *\n     * @param authAddr\n     */\n  }, {\n    key: \"authAddr\",\n    value: function authAddr(_authAddr) {\n      this.query['auth-addr'] = _authAddr;\n      return this;\n    }\n    /**\n     * Filter for this application.\n     *\n     * #### Example\n     * ```typescript\n     * const appId = 60553466;\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .applicationID(appId)\n     *        .do();\n     * ```\n     *\n     * @param applicationID\n     * @category query\n     */\n  }, {\n    key: \"applicationID\",\n    value: function applicationID(_applicationID) {\n      this.query['application-id'] = _applicationID;\n      return this;\n    }\n    /**\n     * Includes all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates\n     *\n     * #### Example 1\n     * ```typescript\n     * const assetId = 163650;\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .includeAll(false)\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const assetId = 163650;\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .includeAll()\n     *        .do();\n     * ```\n     *\n     * @param value - default true when called without passing a value\n     * @category query\n     */\n  }, {\n    key: \"includeAll\",\n    value: function includeAll() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this.query['include-all'] = value;\n      return this;\n    }\n    /**\n     * Exclude additional items such as asset holdings, application local data stored for this account, asset parameters created by this account, and application parameters created by this account.\n     *\n     * #### Example 1\n     * ```typescript\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .exclude(\"all\")\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .exclude(\"assets,created-assets\")\n     *        .do();\n     * ```\n     * @remarks By default, it behaves as exclude=none\n     * @param exclude - Array of `all`, `assets`, `created-assets`, `apps-local-state`, `created-apps`, `none`\n     * @category query\n     */\n  }, {\n    key: \"exclude\",\n    value: function exclude(_exclude) {\n      this.query.exclude = _exclude;\n      return this;\n    }\n  }]);\n  return SearchAccounts;\n}(JSONRequest);\nexport { SearchAccounts as default };","map":{"version":3,"names":["JSONRequest","SearchAccounts","_JSONRequest","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","path","currencyGreaterThan","greater","query","toString","currencyLessThan","lesser","limit","assetID","id","nextToken","next","round","authAddr","applicationID","includeAll","length","undefined","exclude","default"],"sources":["/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/algosdk/src/client/v2/indexer/searchAccounts.ts"],"sourcesContent":["import JSONRequest from '../jsonrequest';\n\n/**\n * Returns information about indexed accounts.\n *\n * #### Example\n * ```typescript\n * const accounts = await indexerClient.searchAccounts().do();\n * ```\n *\n * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accounts)\n * @category GET\n */\nexport default class SearchAccounts extends JSONRequest {\n  /**\n   * @returns `/v2/accounts`\n   */\n  // eslint-disable-next-line class-methods-use-this\n  path() {\n    return '/v2/accounts';\n  }\n\n  /**\n   * Filtered results should have an amount greater than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units.\n   *\n   * #### Example 1\n   * ```typescript\n   * const minBalance = 300000;\n   * const accounts = await indexerClient\n   *        .searchAccounts()\n   *        .currencyGreaterThan(minBalance - 1)\n   *        .do();\n   * ```\n   *\n   * #### Example 2\n   * ```typescript\n   * const assetID = 163650;\n   * const minBalance = 300000;\n   * const accounts = await indexerClient\n   *        .searchAccounts()\n   *        .assetID(assetID)\n   *        .currencyGreaterThan(minBalance - 1)\n   *        .do();\n   * ```\n   * @remarks\n   * If you are looking for accounts with the currency amount greater than 0, simply construct the query without `currencyGreaterThan` because it doesn't accept `-1`, and passing the `0` `currency-greater-than` value would exclude accounts with a 0 amount.\n   *\n   * @param greater\n   * @category query\n   */\n  currencyGreaterThan(greater: number) {\n    // We convert the following to a string for now to correctly include zero values in request parameters.\n    this.query['currency-greater-than'] = greater.toString();\n    return this;\n  }\n\n  /**\n   * Filtered results should have an amount less than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units.\n   *\n   * #### Example 1\n   * ```typescript\n   * const maxBalance = 500000;\n   * const accounts = await indexerClient\n   *        .searchAccounts()\n   *        .currencyLessThan(maxBalance + 1)\n   *        .do();\n   * ```\n   *\n   * #### Example 2\n   * ```typescript\n   * const assetID = 163650;\n   * const maxBalance = 500000;\n   * const accounts = await indexerClient\n   *        .searchAccounts()\n   *        .assetID(assetID)\n   *        .currencyLessThan(maxBalance + 1)\n   *        .do();\n   * ```\n   *\n   * @param lesser\n   * @category query\n   */\n  currencyLessThan(lesser: number) {\n    this.query['currency-less-than'] = lesser;\n    return this;\n  }\n\n  /**\n   * Maximum number of results to return.\n   *\n   * #### Example\n   * ```typescript\n   * const maxResults = 25;\n   * const accounts = await indexerClient\n   *        .searchAccounts()\n   *        .limit(maxResults)\n   *        .do();\n   * ```\n   *\n   * @param limit\n   * @category query\n   */\n  limit(limit: number) {\n    this.query.limit = limit;\n    return this;\n  }\n\n  /**\n   * Asset ID to filter with.\n   *\n   * #### Example\n   * ```typescript\n   * const assetID = 163650;\n   * const accounts = await indexerClient\n   *        .searchAccounts()\n   *        .assetID(assetID)\n   *        .do();\n   * ```\n   *\n   * @param id\n   * @category query\n   */\n  assetID(id: number) {\n    this.query['asset-id'] = id;\n    return this;\n  }\n\n  /**\n   * The next page of results.\n   *\n   * #### Example\n   * ```typescript\n   * const maxResults = 25;\n   *\n   * const accountsPage1 = await indexerClient\n   *        .searchAccounts()\n   *        .limit(maxResults)\n   *        .do();\n   *\n   * const accountsPage2 = await indexerClient\n   *        .searchAccounts()\n   *        .limit(maxResults)\n   *        .nextToken(accountsPage1[\"next-token\"])\n   *        .do();\n   * ```\n   *\n   * @param nextToken - provided by the previous results\n   * @category query\n   */\n  nextToken(nextToken: string) {\n    this.query.next = nextToken;\n    return this;\n  }\n\n  /**\n   * Include results for the specified round.\n   *\n   * #### Example\n   * ```typescript\n   * const targetBlock = 18309917;\n   * const accounts = await indexerClient\n   *        .searchAccounts()\n   *        .round(targetBlock)\n   *        .do();\n   * ```\n   * @remarks For performance reasons, this parameter may be disabled on some configurations.\n   * @param round\n   * @category query\n   */\n  round(round: number) {\n    this.query.round = round;\n    return this;\n  }\n\n  /**\n   * Include accounts that use this spending key.\n   *\n   * #### Example\n   * ```typescript\n   * const authAddr = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n   * const accounts = await indexerClient\n   *        .searchAccounts()\n   *        .authAddr(authAddr)\n   *        .do();\n   * ```\n   *\n   * @param authAddr\n   */\n  authAddr(authAddr: string) {\n    this.query['auth-addr'] = authAddr;\n    return this;\n  }\n\n  /**\n   * Filter for this application.\n   *\n   * #### Example\n   * ```typescript\n   * const appId = 60553466;\n   * const accounts = await indexerClient\n   *        .searchAccounts()\n   *        .applicationID(appId)\n   *        .do();\n   * ```\n   *\n   * @param applicationID\n   * @category query\n   */\n  applicationID(applicationID: number) {\n    this.query['application-id'] = applicationID;\n    return this;\n  }\n\n  /**\n   * Includes all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates\n   *\n   * #### Example 1\n   * ```typescript\n   * const assetId = 163650;\n   * const accounts = await indexerClient\n   *        .searchAccounts()\n   *        .includeAll(false)\n   *        .do();\n   * ```\n   *\n   * #### Example 2\n   * ```typescript\n   * const assetId = 163650;\n   * const accounts = await indexerClient\n   *        .searchAccounts()\n   *        .includeAll()\n   *        .do();\n   * ```\n   *\n   * @param value - default true when called without passing a value\n   * @category query\n   */\n  includeAll(value = true) {\n    this.query['include-all'] = value;\n    return this;\n  }\n\n  /**\n   * Exclude additional items such as asset holdings, application local data stored for this account, asset parameters created by this account, and application parameters created by this account.\n   *\n   * #### Example 1\n   * ```typescript\n   * const accounts = await indexerClient\n   *        .searchAccounts()\n   *        .exclude(\"all\")\n   *        .do();\n   * ```\n   *\n   * #### Example 2\n   * ```typescript\n   * const accounts = await indexerClient\n   *        .searchAccounts()\n   *        .exclude(\"assets,created-assets\")\n   *        .do();\n   * ```\n   * @remarks By default, it behaves as exclude=none\n   * @param exclude - Array of `all`, `assets`, `created-assets`, `apps-local-state`, `created-apps`, `none`\n   * @category query\n   */\n  exclude(exclude: string) {\n    this.query.exclude = exclude;\n    return this;\n  }\n}\n"],"mappings":";;;;AAAA,OAAOA,WAAW,MAAM,gBAAgB;AAExC;;;;;;;;;;;AAAA,IAWqBC,cAAe,0BAAAC,YAAA;EAAAC,SAAA,CAAAF,cAAA,EAAAC,YAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,cAAA;EAAA,SAAAA,eAAA;IAAAK,eAAA,OAAAL,cAAA;IAAA,OAAAG,MAAA,CAAAG,KAAA,OAAAC,SAAA;EAAA;EAAAC,YAAA,CAAAR,cAAA;IAAAS,GAAA;IAAAC,KAAA;IAClC;;;IAGA;IACA,SAAAC,KAAA,EAAI;MACF,OAAO,cAAc;IACvB;IAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAA;IAAAF,GAAA;IAAAC,KAAA,EA4BA,SAAAE,oBAAoBC,OAAe;MACjC;MACA,IAAI,CAACC,KAAK,CAAC,uBAAuB,CAAC,GAAGD,OAAO,CAACE,QAAQ,EAAE;MACxD,OAAO,IAAI;IACb;IAEA;;;;;;;;;;;;;;;;;;;;;;;;;;EAAA;IAAAN,GAAA;IAAAC,KAAA,EA0BA,SAAAM,iBAAiBC,MAAc;MAC7B,IAAI,CAACH,KAAK,CAAC,oBAAoB,CAAC,GAAGG,MAAM;MACzC,OAAO,IAAI;IACb;IAEA;;;;;;;;;;;;;;;EAAA;IAAAR,GAAA;IAAAC,KAAA,EAeA,SAAAQ,MAAMA,MAAa;MACjB,IAAI,CAACJ,KAAK,CAACI,KAAK,GAAGA,MAAK;MACxB,OAAO,IAAI;IACb;IAEA;;;;;;;;;;;;;;;EAAA;IAAAT,GAAA;IAAAC,KAAA,EAeA,SAAAS,QAAQC,EAAU;MAChB,IAAI,CAACN,KAAK,CAAC,UAAU,CAAC,GAAGM,EAAE;MAC3B,OAAO,IAAI;IACb;IAEA;;;;;;;;;;;;;;;;;;;;;;EAAA;IAAAX,GAAA;IAAAC,KAAA,EAsBA,SAAAW,UAAUA,UAAiB;MACzB,IAAI,CAACP,KAAK,CAACQ,IAAI,GAAGD,UAAS;MAC3B,OAAO,IAAI;IACb;IAEA;;;;;;;;;;;;;;;EAAA;IAAAZ,GAAA;IAAAC,KAAA,EAeA,SAAAa,MAAMA,MAAa;MACjB,IAAI,CAACT,KAAK,CAACS,KAAK,GAAGA,MAAK;MACxB,OAAO,IAAI;IACb;IAEA;;;;;;;;;;;;;;EAAA;IAAAd,GAAA;IAAAC,KAAA,EAcA,SAAAc,SAASA,SAAgB;MACvB,IAAI,CAACV,KAAK,CAAC,WAAW,CAAC,GAAGU,SAAQ;MAClC,OAAO,IAAI;IACb;IAEA;;;;;;;;;;;;;;;EAAA;IAAAf,GAAA;IAAAC,KAAA,EAeA,SAAAe,cAAcA,cAAqB;MACjC,IAAI,CAACX,KAAK,CAAC,gBAAgB,CAAC,GAAGW,cAAa;MAC5C,OAAO,IAAI;IACb;IAEA;;;;;;;;;;;;;;;;;;;;;;;;EAAA;IAAAhB,GAAA;IAAAC,KAAA,EAwBA,SAAAgB,WAAA,EAAuB;MAAA,IAAZhB,KAAK,GAAAH,SAAA,CAAAoB,MAAA,QAAApB,SAAA,QAAAqB,SAAA,GAAArB,SAAA,MAAG,IAAI;MACrB,IAAI,CAACO,KAAK,CAAC,aAAa,CAAC,GAAGJ,KAAK;MACjC,OAAO,IAAI;IACb;IAEA;;;;;;;;;;;;;;;;;;;;;;EAAA;IAAAD,GAAA;IAAAC,KAAA,EAsBA,SAAAmB,QAAQA,QAAe;MACrB,IAAI,CAACf,KAAK,CAACe,OAAO,GAAGA,QAAO;MAC5B,OAAO,IAAI;IACb;EAAC;EAAA,OAAA7B,cAAA;AAAA,EA9PyCD,WAAW;AAAA,SAAlCC,cAAe,IAAA8B,OAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}