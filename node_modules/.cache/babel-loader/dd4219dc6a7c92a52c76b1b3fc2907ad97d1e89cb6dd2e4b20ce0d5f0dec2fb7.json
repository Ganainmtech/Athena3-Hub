{"ast":null,"code":"import _objectSpread from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _createForOfIteratorHelper from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _objectDestructuringEmpty from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js\";\nimport _classCallCheck from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Buffer } from 'buffer';\nimport base32 from 'hi-base32';\nimport * as address from './encoding/address';\nimport * as encoding from './encoding/encoding';\nimport * as nacl from './nacl/naclWrappers';\nimport * as utils from './utils/utils';\nimport { translateBoxReferences } from './boxStorage';\nimport { TransactionType, isTransactionType } from './types/transactions/base';\nvar ALGORAND_TRANSACTION_LENGTH = 52;\nexport var ALGORAND_MIN_TX_FEE = 1000; // version v5\nvar ALGORAND_TRANSACTION_LEASE_LENGTH = 32;\nvar ALGORAND_MAX_ASSET_DECIMALS = 19;\nvar NUM_ADDL_BYTES_AFTER_SIGNING = 75; // NUM_ADDL_BYTES_AFTER_SIGNING is the number of bytes added to a txn after signing it\nvar ALGORAND_TRANSACTION_LEASE_LABEL_LENGTH = 5;\nvar ALGORAND_TRANSACTION_ADDRESS_LENGTH = 32;\nvar ALGORAND_TRANSACTION_REKEY_LABEL_LENGTH = 5;\nvar ASSET_METADATA_HASH_LENGTH = 32;\nvar KEYREG_VOTE_KEY_LENGTH = 32;\nvar KEYREG_SELECTION_KEY_LENGTH = 32;\nvar KEYREG_STATE_PROOF_KEY_LENGTH = 64;\nfunction getKeyregKey(input, inputName, length) {\n  if (input == null) {\n    return undefined;\n  }\n  var inputAsBuffer;\n  if (typeof input === 'string') {\n    inputAsBuffer = Buffer.from(input, 'base64');\n  } else if (input.constructor === Uint8Array) {\n    inputAsBuffer = Buffer.from(input);\n  } else if (Buffer.isBuffer(input)) {\n    inputAsBuffer = input;\n  }\n  if (inputAsBuffer == null || inputAsBuffer.byteLength !== length) {\n    throw Error(\"\".concat(inputName, \" must be a \").concat(length, \" byte Uint8Array or Buffer or base64 string.\"));\n  }\n  return inputAsBuffer;\n}\n/**\n * Transaction enables construction of Algorand transactions\n * */\nexport var Transaction = /*#__PURE__*/function () {\n  function Transaction(_ref) {\n    var transaction = Object.assign({}, (_objectDestructuringEmpty(_ref), _ref));\n    _classCallCheck(this, Transaction);\n    this.name = 'Transaction';\n    this.tag = Buffer.from('TX');\n    // Populate defaults\n    /* eslint-disable no-param-reassign */\n    var defaults = {\n      type: TransactionType.pay,\n      flatFee: false,\n      nonParticipation: false\n    };\n    // Default type\n    if (typeof transaction.type === 'undefined') {\n      transaction.type = defaults.type;\n    }\n    // Default flatFee\n    if (typeof transaction.flatFee === 'undefined') {\n      transaction.flatFee = defaults.flatFee;\n    }\n    // Default nonParticipation\n    if (transaction.type === TransactionType.keyreg && typeof transaction.voteKey !== 'undefined' && typeof transaction.nonParticipation === 'undefined') {\n      transaction.nonParticipation = defaults.nonParticipation;\n    }\n    /* eslint-enable no-param-reassign */\n    // Move suggested parameters from its object to inline\n    if (transaction.suggestedParams !== undefined) {\n      // Create a temporary reference to the transaction object that has params inline and also as a suggested params object\n      //   - Helpful for moving params from named object to inline\n      var reference = transaction;\n      reference.genesisHash = reference.suggestedParams.genesisHash;\n      reference.fee = reference.suggestedParams.fee;\n      if (reference.suggestedParams.flatFee !== undefined) reference.flatFee = reference.suggestedParams.flatFee;\n      reference.firstRound = reference.suggestedParams.firstRound;\n      reference.lastRound = reference.suggestedParams.lastRound;\n      reference.genesisID = reference.suggestedParams.genesisID;\n    }\n    // At this point all suggestedParams have been moved to be inline, so we can reassign the transaction object type\n    // to one which is more useful as we prepare properties for storing\n    var txn = transaction;\n    txn.from = address.decodeAddress(txn.from);\n    if (txn.to !== undefined) txn.to = address.decodeAddress(txn.to);\n    if (txn.closeRemainderTo !== undefined) txn.closeRemainderTo = address.decodeAddress(txn.closeRemainderTo);\n    if (txn.assetManager !== undefined) txn.assetManager = address.decodeAddress(txn.assetManager);\n    if (txn.assetReserve !== undefined) txn.assetReserve = address.decodeAddress(txn.assetReserve);\n    if (txn.assetFreeze !== undefined) txn.assetFreeze = address.decodeAddress(txn.assetFreeze);\n    if (txn.assetClawback !== undefined) txn.assetClawback = address.decodeAddress(txn.assetClawback);\n    if (txn.assetRevocationTarget !== undefined) txn.assetRevocationTarget = address.decodeAddress(txn.assetRevocationTarget);\n    if (txn.freezeAccount !== undefined) txn.freezeAccount = address.decodeAddress(txn.freezeAccount);\n    if (txn.reKeyTo !== undefined) txn.reKeyTo = address.decodeAddress(txn.reKeyTo);\n    if (txn.genesisHash === undefined) throw Error('genesis hash must be specified and in a base64 string.');\n    txn.genesisHash = Buffer.from(txn.genesisHash, 'base64');\n    if (txn.amount !== undefined && (!(Number.isSafeInteger(txn.amount) || typeof txn.amount === 'bigint' && txn.amount <= BigInt('0xffffffffffffffff')) || txn.amount < 0)) throw Error('Amount must be a positive number and smaller than 2^64-1. If the number is larger than 2^53-1, use bigint.');\n    if (!Number.isSafeInteger(txn.fee) || txn.fee < 0) throw Error('fee must be a positive number and smaller than 2^53-1');\n    if (!Number.isSafeInteger(txn.firstRound) || txn.firstRound < 0) throw Error('firstRound must be a positive number');\n    if (!Number.isSafeInteger(txn.lastRound) || txn.lastRound < 0) throw Error('lastRound must be a positive number');\n    if (txn.extraPages !== undefined && (!Number.isInteger(txn.extraPages) || txn.extraPages < 0 || txn.extraPages > 3)) throw Error('extraPages must be an Integer between and including 0 to 3');\n    if (txn.assetTotal !== undefined && (!(Number.isSafeInteger(txn.assetTotal) || typeof txn.assetTotal === 'bigint' && txn.assetTotal <= BigInt('0xffffffffffffffff')) || txn.assetTotal < 0)) throw Error('Total asset issuance must be a positive number and smaller than 2^64-1. If the number is larger than 2^53-1, use bigint.');\n    if (txn.assetDecimals !== undefined && (!Number.isSafeInteger(txn.assetDecimals) || txn.assetDecimals < 0 || txn.assetDecimals > ALGORAND_MAX_ASSET_DECIMALS)) throw Error(\"assetDecimals must be a positive number and smaller than \".concat(ALGORAND_MAX_ASSET_DECIMALS.toString()));\n    if (txn.assetIndex !== undefined && (!Number.isSafeInteger(txn.assetIndex) || txn.assetIndex < 0)) throw Error('Asset index must be a positive number and smaller than 2^53-1');\n    if (txn.appIndex !== undefined && (!Number.isSafeInteger(txn.appIndex) || txn.appIndex < 0)) throw Error('Application index must be a positive number and smaller than 2^53-1');\n    if (txn.appLocalInts !== undefined && (!Number.isSafeInteger(txn.appLocalInts) || txn.appLocalInts < 0)) throw Error('Application local ints count must be a positive number and smaller than 2^53-1');\n    if (txn.appLocalByteSlices !== undefined && (!Number.isSafeInteger(txn.appLocalByteSlices) || txn.appLocalByteSlices < 0)) throw Error('Application local byte slices count must be a positive number and smaller than 2^53-1');\n    if (txn.appGlobalInts !== undefined && (!Number.isSafeInteger(txn.appGlobalInts) || txn.appGlobalInts < 0)) throw Error('Application global ints count must be a positive number and smaller than 2^53-1');\n    if (txn.appGlobalByteSlices !== undefined && (!Number.isSafeInteger(txn.appGlobalByteSlices) || txn.appGlobalByteSlices < 0)) throw Error('Application global byte slices count must be a positive number and smaller than 2^53-1');\n    if (txn.appApprovalProgram !== undefined) {\n      if (txn.appApprovalProgram.constructor !== Uint8Array) throw Error('appApprovalProgram must be a Uint8Array.');\n    }\n    if (txn.appClearProgram !== undefined) {\n      if (txn.appClearProgram.constructor !== Uint8Array) throw Error('appClearProgram must be a Uint8Array.');\n    }\n    if (txn.appArgs !== undefined) {\n      if (!Array.isArray(txn.appArgs)) throw Error('appArgs must be an Array of Uint8Array.');\n      txn.appArgs = txn.appArgs.slice();\n      txn.appArgs.forEach(function (arg) {\n        if (arg.constructor !== Uint8Array) throw Error('each element of AppArgs must be a Uint8Array.');\n      });\n    } else {\n      txn.appArgs = [];\n    }\n    if (txn.appAccounts !== undefined) {\n      if (!Array.isArray(txn.appAccounts)) throw Error('appAccounts must be an Array of addresses.');\n      txn.appAccounts = txn.appAccounts.map(function (addressAsString) {\n        return address.decodeAddress(addressAsString);\n      });\n    }\n    if (txn.appForeignApps !== undefined) {\n      if (!Array.isArray(txn.appForeignApps)) throw Error('appForeignApps must be an Array of integers.');\n      txn.appForeignApps = txn.appForeignApps.slice();\n      txn.appForeignApps.forEach(function (foreignAppIndex) {\n        if (!Number.isSafeInteger(foreignAppIndex) || foreignAppIndex < 0) throw Error('each foreign application index must be a positive number and smaller than 2^53-1');\n      });\n    }\n    if (txn.appForeignAssets !== undefined) {\n      if (!Array.isArray(txn.appForeignAssets)) throw Error('appForeignAssets must be an Array of integers.');\n      txn.appForeignAssets = txn.appForeignAssets.slice();\n      txn.appForeignAssets.forEach(function (foreignAssetIndex) {\n        if (!Number.isSafeInteger(foreignAssetIndex) || foreignAssetIndex < 0) throw Error('each foreign asset index must be a positive number and smaller than 2^53-1');\n      });\n    }\n    if (txn.boxes !== undefined) {\n      if (!Array.isArray(txn.boxes)) throw Error('boxes must be an Array of BoxReference.');\n      txn.boxes = txn.boxes.slice();\n      txn.boxes.forEach(function (box) {\n        if (!Number.isSafeInteger(box.appIndex) || box.name.constructor !== Uint8Array) throw Error('box app index must be a number and name must be an Uint8Array.');\n      });\n    }\n    if (txn.assetMetadataHash !== undefined && txn.assetMetadataHash.length !== 0) {\n      if (typeof txn.assetMetadataHash === 'string') {\n        txn.assetMetadataHash = new Uint8Array(Buffer.from(txn.assetMetadataHash));\n      }\n      if (txn.assetMetadataHash.constructor !== Uint8Array || txn.assetMetadataHash.byteLength !== ASSET_METADATA_HASH_LENGTH) {\n        throw Error(\"assetMetadataHash must be a \".concat(ASSET_METADATA_HASH_LENGTH, \" byte Uint8Array or string.\"));\n      }\n      if (txn.assetMetadataHash.every(function (value) {\n        return value === 0;\n      })) {\n        // if hash contains all 0s, omit it\n        txn.assetMetadataHash = undefined;\n      }\n    } else {\n      txn.assetMetadataHash = undefined;\n    }\n    if (txn.note !== undefined) {\n      if (txn.note.constructor !== Uint8Array) throw Error('note must be a Uint8Array.');\n    } else {\n      txn.note = new Uint8Array(0);\n    }\n    if (txn.lease !== undefined) {\n      if (txn.lease.constructor !== Uint8Array) throw Error('lease must be a Uint8Array.');\n      if (txn.lease.length !== ALGORAND_TRANSACTION_LEASE_LENGTH) throw Error(\"lease must be of length \".concat(ALGORAND_TRANSACTION_LEASE_LENGTH.toString(), \".\"));\n      if (txn.lease.every(function (value) {\n        return value === 0;\n      })) {\n        // if lease contains all 0s, omit it\n        txn.lease = new Uint8Array(0);\n      }\n    } else {\n      txn.lease = new Uint8Array(0);\n    }\n    txn.voteKey = getKeyregKey(txn.voteKey, 'voteKey', KEYREG_VOTE_KEY_LENGTH);\n    txn.selectionKey = getKeyregKey(txn.selectionKey, 'selectionKey', KEYREG_SELECTION_KEY_LENGTH);\n    txn.stateProofKey = getKeyregKey(txn.stateProofKey, 'stateProofKey', KEYREG_STATE_PROOF_KEY_LENGTH);\n    // Checking non-participation key registration\n    if (txn.nonParticipation && (txn.voteKey || txn.selectionKey || txn.voteFirst || txn.stateProofKey || txn.voteLast || txn.voteKeyDilution)) {\n      throw new Error('nonParticipation is true but participation params are present.');\n    }\n    // Checking online key registration\n    if (!txn.nonParticipation && (txn.voteKey || txn.selectionKey || txn.stateProofKey || txn.voteFirst || txn.voteLast || txn.voteKeyDilution) && !(txn.voteKey && txn.selectionKey && txn.voteFirst && txn.voteLast && txn.voteKeyDilution)\n    // stateProofKey not included here for backwards compatibility\n    ) {\n      throw new Error('online key registration missing at least one of the following fields: ' + 'voteKey, selectionKey, voteFirst, voteLast, voteKeyDilution');\n    }\n    // The last option is an offline key registration where all the fields\n    // nonParticipation, voteKey, selectionKey, voteFirst, voteLast, voteKeyDilution\n    // are all undefined/false\n    // Remove unwanted properties and store transaction on instance\n    delete txn.suggestedParams;\n    Object.assign(this, utils.removeUndefinedProperties(txn));\n    // Modify Fee\n    if (!txn.flatFee) {\n      this.fee *= this.estimateSize();\n      // If suggested fee too small and will be rejected, set to min tx fee\n      if (this.fee < ALGORAND_MIN_TX_FEE) {\n        this.fee = ALGORAND_MIN_TX_FEE;\n      }\n    }\n    // say we are aware of groups\n    this.group = undefined;\n    // stpf fields\n    if (txn.stateProofType !== undefined && (!Number.isSafeInteger(txn.stateProofType) || txn.stateProofType < 0)) throw Error('State Proof type must be a positive number and smaller than 2^53-1');\n    if (txn.stateProofMessage !== undefined) {\n      if (txn.stateProofMessage.constructor !== Uint8Array) throw Error('stateProofMessage must be a Uint8Array.');\n    } else {\n      txn.stateProofMessage = new Uint8Array(0);\n    }\n    if (txn.stateProof !== undefined) {\n      if (txn.stateProof.constructor !== Uint8Array) throw Error('stateProof must be a Uint8Array.');\n    } else {\n      txn.stateProof = new Uint8Array(0);\n    }\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(Transaction, [{\n    key: \"get_obj_for_encoding\",\n    value: function get_obj_for_encoding() {\n      if (this.type === 'pay') {\n        var txn = {\n          amt: this.amount,\n          fee: this.fee,\n          fv: this.firstRound,\n          lv: this.lastRound,\n          note: Buffer.from(this.note),\n          snd: Buffer.from(this.from.publicKey),\n          type: 'pay',\n          gen: this.genesisID,\n          gh: this.genesisHash,\n          lx: Buffer.from(this.lease),\n          grp: this.group\n        };\n        // parse close address\n        if (this.closeRemainderTo !== undefined && address.encodeAddress(this.closeRemainderTo.publicKey) !== address.ALGORAND_ZERO_ADDRESS_STRING) {\n          txn.close = Buffer.from(this.closeRemainderTo.publicKey);\n        }\n        if (this.reKeyTo !== undefined) {\n          txn.rekey = Buffer.from(this.reKeyTo.publicKey);\n        }\n        // allowed zero values\n        if (this.to !== undefined) txn.rcv = Buffer.from(this.to.publicKey);\n        if (!txn.note.length) delete txn.note;\n        if (!txn.amt) delete txn.amt;\n        if (!txn.fee) delete txn.fee;\n        if (!txn.fv) delete txn.fv;\n        if (!txn.gen) delete txn.gen;\n        if (txn.grp === undefined) delete txn.grp;\n        if (!txn.lx.length) delete txn.lx;\n        if (!txn.rekey) delete txn.rekey;\n        return txn;\n      }\n      if (this.type === 'keyreg') {\n        var _txn = {\n          fee: this.fee,\n          fv: this.firstRound,\n          lv: this.lastRound,\n          note: Buffer.from(this.note),\n          snd: Buffer.from(this.from.publicKey),\n          type: this.type,\n          gen: this.genesisID,\n          gh: this.genesisHash,\n          lx: Buffer.from(this.lease),\n          grp: this.group,\n          votekey: this.voteKey,\n          selkey: this.selectionKey,\n          sprfkey: this.stateProofKey,\n          votefst: this.voteFirst,\n          votelst: this.voteLast,\n          votekd: this.voteKeyDilution\n        };\n        // allowed zero values\n        if (!_txn.note.length) delete _txn.note;\n        if (!_txn.lx.length) delete _txn.lx;\n        if (!_txn.fee) delete _txn.fee;\n        if (!_txn.fv) delete _txn.fv;\n        if (!_txn.gen) delete _txn.gen;\n        if (_txn.grp === undefined) delete _txn.grp;\n        if (this.reKeyTo !== undefined) {\n          _txn.rekey = Buffer.from(this.reKeyTo.publicKey);\n        }\n        if (this.nonParticipation) {\n          _txn.nonpart = true;\n        }\n        if (!_txn.selkey) delete _txn.selkey;\n        if (!_txn.votekey) delete _txn.votekey;\n        if (!_txn.sprfkey) delete _txn.sprfkey;\n        if (!_txn.votefst) delete _txn.votefst;\n        if (!_txn.votelst) delete _txn.votelst;\n        if (!_txn.votekd) delete _txn.votekd;\n        return _txn;\n      }\n      if (this.type === 'acfg') {\n        // asset creation, or asset reconfigure, or asset destruction\n        var _txn2 = {\n          fee: this.fee,\n          fv: this.firstRound,\n          lv: this.lastRound,\n          note: Buffer.from(this.note),\n          snd: Buffer.from(this.from.publicKey),\n          type: this.type,\n          gen: this.genesisID,\n          gh: this.genesisHash,\n          lx: Buffer.from(this.lease),\n          grp: this.group,\n          caid: this.assetIndex,\n          apar: {\n            t: this.assetTotal,\n            df: this.assetDefaultFrozen,\n            dc: this.assetDecimals\n          }\n        };\n        if (this.assetManager !== undefined) _txn2.apar.m = Buffer.from(this.assetManager.publicKey);\n        if (this.assetReserve !== undefined) _txn2.apar.r = Buffer.from(this.assetReserve.publicKey);\n        if (this.assetFreeze !== undefined) _txn2.apar.f = Buffer.from(this.assetFreeze.publicKey);\n        if (this.assetClawback !== undefined) _txn2.apar.c = Buffer.from(this.assetClawback.publicKey);\n        if (this.assetName !== undefined) _txn2.apar.an = this.assetName;\n        if (this.assetUnitName !== undefined) _txn2.apar.un = this.assetUnitName;\n        if (this.assetURL !== undefined) _txn2.apar.au = this.assetURL;\n        if (this.assetMetadataHash !== undefined) _txn2.apar.am = Buffer.from(this.assetMetadataHash);\n        // allowed zero values\n        if (!_txn2.note.length) delete _txn2.note;\n        if (!_txn2.lx.length) delete _txn2.lx;\n        if (!_txn2.amt) delete _txn2.amt;\n        if (!_txn2.fee) delete _txn2.fee;\n        if (!_txn2.fv) delete _txn2.fv;\n        if (!_txn2.gen) delete _txn2.gen;\n        if (this.reKeyTo !== undefined) {\n          _txn2.rekey = Buffer.from(this.reKeyTo.publicKey);\n        }\n        if (!_txn2.caid) delete _txn2.caid;\n        if (!_txn2.apar.t && !_txn2.apar.un && !_txn2.apar.an && !_txn2.apar.df && !_txn2.apar.m && !_txn2.apar.r && !_txn2.apar.f && !_txn2.apar.c && !_txn2.apar.au && !_txn2.apar.am && !_txn2.apar.dc) {\n          delete _txn2.apar;\n        } else {\n          if (!_txn2.apar.t) delete _txn2.apar.t;\n          if (!_txn2.apar.dc) delete _txn2.apar.dc;\n          if (!_txn2.apar.un) delete _txn2.apar.un;\n          if (!_txn2.apar.an) delete _txn2.apar.an;\n          if (!_txn2.apar.df) delete _txn2.apar.df;\n          if (!_txn2.apar.m) delete _txn2.apar.m;\n          if (!_txn2.apar.r) delete _txn2.apar.r;\n          if (!_txn2.apar.f) delete _txn2.apar.f;\n          if (!_txn2.apar.c) delete _txn2.apar.c;\n          if (!_txn2.apar.au) delete _txn2.apar.au;\n          if (!_txn2.apar.am) delete _txn2.apar.am;\n        }\n        if (_txn2.grp === undefined) delete _txn2.grp;\n        return _txn2;\n      }\n      if (this.type === 'axfer') {\n        // asset transfer, acceptance, revocation, mint, or burn\n        var _txn3 = {\n          aamt: this.amount,\n          fee: this.fee,\n          fv: this.firstRound,\n          lv: this.lastRound,\n          note: Buffer.from(this.note),\n          snd: Buffer.from(this.from.publicKey),\n          arcv: Buffer.from(this.to.publicKey),\n          type: this.type,\n          gen: this.genesisID,\n          gh: this.genesisHash,\n          lx: Buffer.from(this.lease),\n          grp: this.group,\n          xaid: this.assetIndex\n        };\n        if (this.closeRemainderTo !== undefined) _txn3.aclose = Buffer.from(this.closeRemainderTo.publicKey);\n        if (this.assetRevocationTarget !== undefined) _txn3.asnd = Buffer.from(this.assetRevocationTarget.publicKey);\n        // allowed zero values\n        if (!_txn3.note.length) delete _txn3.note;\n        if (!_txn3.lx.length) delete _txn3.lx;\n        if (!_txn3.aamt) delete _txn3.aamt;\n        if (!_txn3.amt) delete _txn3.amt;\n        if (!_txn3.fee) delete _txn3.fee;\n        if (!_txn3.fv) delete _txn3.fv;\n        if (!_txn3.gen) delete _txn3.gen;\n        if (_txn3.grp === undefined) delete _txn3.grp;\n        if (!_txn3.aclose) delete _txn3.aclose;\n        if (!_txn3.asnd) delete _txn3.asnd;\n        if (!_txn3.rekey) delete _txn3.rekey;\n        if (this.reKeyTo !== undefined) {\n          _txn3.rekey = Buffer.from(this.reKeyTo.publicKey);\n        }\n        return _txn3;\n      }\n      if (this.type === 'afrz') {\n        // asset freeze or unfreeze\n        var _txn4 = {\n          fee: this.fee,\n          fv: this.firstRound,\n          lv: this.lastRound,\n          note: Buffer.from(this.note),\n          snd: Buffer.from(this.from.publicKey),\n          type: this.type,\n          gen: this.genesisID,\n          gh: this.genesisHash,\n          lx: Buffer.from(this.lease),\n          grp: this.group,\n          faid: this.assetIndex,\n          afrz: this.freezeState\n        };\n        if (this.freezeAccount !== undefined) _txn4.fadd = Buffer.from(this.freezeAccount.publicKey);\n        // allowed zero values\n        if (!_txn4.note.length) delete _txn4.note;\n        if (!_txn4.lx.length) delete _txn4.lx;\n        if (!_txn4.amt) delete _txn4.amt;\n        if (!_txn4.fee) delete _txn4.fee;\n        if (!_txn4.fv) delete _txn4.fv;\n        if (!_txn4.gen) delete _txn4.gen;\n        if (!_txn4.afrz) delete _txn4.afrz;\n        if (_txn4.grp === undefined) delete _txn4.grp;\n        if (this.reKeyTo !== undefined) {\n          _txn4.rekey = Buffer.from(this.reKeyTo.publicKey);\n        }\n        return _txn4;\n      }\n      if (this.type === 'appl') {\n        // application call of some kind\n        var _txn5 = {\n          fee: this.fee,\n          fv: this.firstRound,\n          lv: this.lastRound,\n          note: Buffer.from(this.note),\n          snd: Buffer.from(this.from.publicKey),\n          type: this.type,\n          gen: this.genesisID,\n          gh: this.genesisHash,\n          lx: Buffer.from(this.lease),\n          grp: this.group,\n          apid: this.appIndex,\n          apan: this.appOnComplete,\n          apls: {\n            nui: this.appLocalInts,\n            nbs: this.appLocalByteSlices\n          },\n          apgs: {\n            nui: this.appGlobalInts,\n            nbs: this.appGlobalByteSlices\n          },\n          apfa: this.appForeignApps,\n          apas: this.appForeignAssets,\n          apep: this.extraPages,\n          apbx: translateBoxReferences(this.boxes, this.appForeignApps, this.appIndex)\n        };\n        if (this.reKeyTo !== undefined) {\n          _txn5.rekey = Buffer.from(this.reKeyTo.publicKey);\n        }\n        if (this.appApprovalProgram !== undefined) {\n          _txn5.apap = Buffer.from(this.appApprovalProgram);\n        }\n        if (this.appClearProgram !== undefined) {\n          _txn5.apsu = Buffer.from(this.appClearProgram);\n        }\n        if (this.appArgs !== undefined) {\n          _txn5.apaa = this.appArgs.map(function (arg) {\n            return Buffer.from(arg);\n          });\n        }\n        if (this.appAccounts !== undefined) {\n          _txn5.apat = this.appAccounts.map(function (decodedAddress) {\n            return Buffer.from(decodedAddress.publicKey);\n          });\n        }\n        // allowed zero values\n        if (!_txn5.note.length) delete _txn5.note;\n        if (!_txn5.lx.length) delete _txn5.lx;\n        if (!_txn5.amt) delete _txn5.amt;\n        if (!_txn5.fee) delete _txn5.fee;\n        if (!_txn5.fv) delete _txn5.fv;\n        if (!_txn5.gen) delete _txn5.gen;\n        if (!_txn5.apid) delete _txn5.apid;\n        if (!_txn5.apls.nui) delete _txn5.apls.nui;\n        if (!_txn5.apls.nbs) delete _txn5.apls.nbs;\n        if (!_txn5.apls.nui && !_txn5.apls.nbs) delete _txn5.apls;\n        if (!_txn5.apgs.nui) delete _txn5.apgs.nui;\n        if (!_txn5.apgs.nbs) delete _txn5.apgs.nbs;\n        if (!_txn5.apaa || !_txn5.apaa.length) delete _txn5.apaa;\n        if (!_txn5.apgs.nui && !_txn5.apgs.nbs) delete _txn5.apgs;\n        if (!_txn5.apap) delete _txn5.apap;\n        if (!_txn5.apsu) delete _txn5.apsu;\n        if (!_txn5.apan) delete _txn5.apan;\n        if (!_txn5.apfa || !_txn5.apfa.length) delete _txn5.apfa;\n        if (!_txn5.apas || !_txn5.apas.length) delete _txn5.apas;\n        var _iterator = _createForOfIteratorHelper(_txn5.apbx),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var box = _step.value;\n            if (!box.i) delete box.i;\n            if (!box.n || !box.n.length) delete box.n;\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n        if (!_txn5.apbx || !_txn5.apbx.length) delete _txn5.apbx;\n        if (!_txn5.apat || !_txn5.apat.length) delete _txn5.apat;\n        if (!_txn5.apep) delete _txn5.apep;\n        if (_txn5.grp === undefined) delete _txn5.grp;\n        return _txn5;\n      }\n      if (this.type === 'stpf') {\n        // state proof txn\n        var _txn6 = {\n          fee: this.fee,\n          fv: this.firstRound,\n          lv: this.lastRound,\n          note: Buffer.from(this.note),\n          snd: Buffer.from(this.from.publicKey),\n          type: this.type,\n          gen: this.genesisID,\n          gh: this.genesisHash,\n          lx: Buffer.from(this.lease),\n          sptype: this.stateProofType,\n          spmsg: Buffer.from(this.stateProofMessage),\n          sp: Buffer.from(this.stateProof)\n        };\n        // allowed zero values\n        if (!_txn6.sptype) delete _txn6.sptype;\n        if (!_txn6.note.length) delete _txn6.note;\n        if (!_txn6.lx.length) delete _txn6.lx;\n        if (!_txn6.amt) delete _txn6.amt;\n        if (!_txn6.fee) delete _txn6.fee;\n        if (!_txn6.fv) delete _txn6.fv;\n        if (!_txn6.gen) delete _txn6.gen;\n        if (!_txn6.apid) delete _txn6.apid;\n        if (!_txn6.apaa || !_txn6.apaa.length) delete _txn6.apaa;\n        if (!_txn6.apap) delete _txn6.apap;\n        if (!_txn6.apsu) delete _txn6.apsu;\n        if (!_txn6.apan) delete _txn6.apan;\n        if (!_txn6.apfa || !_txn6.apfa.length) delete _txn6.apfa;\n        if (!_txn6.apas || !_txn6.apas.length) delete _txn6.apas;\n        if (!_txn6.apat || !_txn6.apat.length) delete _txn6.apat;\n        if (!_txn6.apep) delete _txn6.apep;\n        if (_txn6.grp === undefined) delete _txn6.grp;\n        return _txn6;\n      }\n      return undefined;\n    }\n    // eslint-disable-next-line camelcase\n  }, {\n    key: \"estimateSize\",\n    value: function estimateSize() {\n      return this.toByte().length + NUM_ADDL_BYTES_AFTER_SIGNING;\n    }\n  }, {\n    key: \"bytesToSign\",\n    value: function bytesToSign() {\n      var encodedMsg = this.toByte();\n      return Buffer.from(utils.concatArrays(this.tag, encodedMsg));\n    }\n  }, {\n    key: \"toByte\",\n    value: function toByte() {\n      return encoding.encode(this.get_obj_for_encoding());\n    }\n    // returns the raw signature\n  }, {\n    key: \"rawSignTxn\",\n    value: function rawSignTxn(sk) {\n      var toBeSigned = this.bytesToSign();\n      var sig = nacl.sign(toBeSigned, sk);\n      return Buffer.from(sig);\n    }\n  }, {\n    key: \"signTxn\",\n    value: function signTxn(sk) {\n      // construct signed message\n      var sTxn = {\n        sig: this.rawSignTxn(sk),\n        txn: this.get_obj_for_encoding()\n      };\n      // add AuthAddr if signing with a different key than From indicates\n      var keypair = nacl.keyPairFromSecretKey(sk);\n      var pubKeyFromSk = keypair.publicKey;\n      if (address.encodeAddress(pubKeyFromSk) !== address.encodeAddress(this.from.publicKey)) {\n        sTxn.sgnr = Buffer.from(pubKeyFromSk);\n      }\n      return new Uint8Array(encoding.encode(sTxn));\n    }\n  }, {\n    key: \"attachSignature\",\n    value: function attachSignature(signerAddr, signature) {\n      if (!nacl.isValidSignatureLength(signature.length)) {\n        throw new Error('Invalid signature length');\n      }\n      var sTxn = {\n        sig: Buffer.from(signature),\n        txn: this.get_obj_for_encoding()\n      };\n      // add AuthAddr if signing with a different key than From indicates\n      if (signerAddr !== address.encodeAddress(this.from.publicKey)) {\n        var signerPublicKey = address.decodeAddress(signerAddr).publicKey;\n        sTxn.sgnr = Buffer.from(signerPublicKey);\n      }\n      return new Uint8Array(encoding.encode(sTxn));\n    }\n  }, {\n    key: \"rawTxID\",\n    value: function rawTxID() {\n      var enMsg = this.toByte();\n      var gh = Buffer.from(utils.concatArrays(this.tag, enMsg));\n      return Buffer.from(nacl.genericHash(gh));\n    }\n  }, {\n    key: \"txID\",\n    value: function txID() {\n      var hash = this.rawTxID();\n      return base32.encode(hash).slice(0, ALGORAND_TRANSACTION_LENGTH);\n    }\n    // add a lease to a transaction not yet having\n    // supply feePerByte to increment fee accordingly\n  }, {\n    key: \"addLease\",\n    value: function addLease(lease) {\n      var feePerByte = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var mutableLease;\n      if (lease !== undefined) {\n        if (lease.constructor !== Uint8Array) throw Error('lease must be a Uint8Array.');\n        if (lease.length !== ALGORAND_TRANSACTION_LEASE_LENGTH) throw Error(\"lease must be of length \".concat(ALGORAND_TRANSACTION_LEASE_LENGTH.toString(), \".\"));\n        mutableLease = new Uint8Array(lease);\n      } else {\n        mutableLease = new Uint8Array(0);\n      }\n      this.lease = mutableLease;\n      if (feePerByte !== 0) {\n        this.fee += (ALGORAND_TRANSACTION_LEASE_LABEL_LENGTH + ALGORAND_TRANSACTION_LEASE_LENGTH) * feePerByte;\n      }\n    }\n    // add the rekey-to field to a transaction not yet having it\n    // supply feePerByte to increment fee accordingly\n  }, {\n    key: \"addRekey\",\n    value: function addRekey(reKeyTo) {\n      var feePerByte = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      if (reKeyTo !== undefined) {\n        this.reKeyTo = address.decodeAddress(reKeyTo);\n      }\n      if (feePerByte !== 0) {\n        this.fee += (ALGORAND_TRANSACTION_REKEY_LABEL_LENGTH + ALGORAND_TRANSACTION_ADDRESS_LENGTH) * feePerByte;\n      }\n    }\n    // build display dict for prettyPrint and toString\n    // eslint-disable-next-line no-underscore-dangle\n  }, {\n    key: \"_getDictForDisplay\",\n    value: function _getDictForDisplay() {\n      var forPrinting = _objectSpread({}, this);\n      forPrinting.tag = forPrinting.tag.toString();\n      forPrinting.from = address.encodeAddress(forPrinting.from.publicKey);\n      if (forPrinting.to !== undefined) forPrinting.to = address.encodeAddress(forPrinting.to.publicKey);\n      // things that need fixing:\n      if (forPrinting.freezeAccount !== undefined) forPrinting.freezeAccount = address.encodeAddress(forPrinting.freezeAccount.publicKey);\n      if (forPrinting.closeRemainderTo !== undefined) forPrinting.closeRemainderTo = address.encodeAddress(forPrinting.closeRemainderTo.publicKey);\n      if (forPrinting.assetManager !== undefined) forPrinting.assetManager = address.encodeAddress(forPrinting.assetManager.publicKey);\n      if (forPrinting.assetReserve !== undefined) forPrinting.assetReserve = address.encodeAddress(forPrinting.assetReserve.publicKey);\n      if (forPrinting.assetFreeze !== undefined) forPrinting.assetFreeze = address.encodeAddress(forPrinting.assetFreeze.publicKey);\n      if (forPrinting.assetClawback !== undefined) forPrinting.assetClawback = address.encodeAddress(forPrinting.assetClawback.publicKey);\n      if (forPrinting.assetRevocationTarget !== undefined) forPrinting.assetRevocationTarget = address.encodeAddress(forPrinting.assetRevocationTarget.publicKey);\n      if (forPrinting.reKeyTo !== undefined) forPrinting.reKeyTo = address.encodeAddress(forPrinting.reKeyTo.publicKey);\n      forPrinting.genesisHash = forPrinting.genesisHash.toString('base64');\n      return forPrinting;\n    }\n    // pretty print the transaction to console\n  }, {\n    key: \"prettyPrint\",\n    value: function prettyPrint() {\n      // eslint-disable-next-line no-underscore-dangle,no-console\n      console.log(this._getDictForDisplay());\n    }\n    // get string representation\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      // eslint-disable-next-line no-underscore-dangle\n      return JSON.stringify(this._getDictForDisplay());\n    }\n  }], [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(txnForEnc) {\n      var txn = Object.create(this.prototype);\n      txn.name = 'Transaction';\n      txn.tag = Buffer.from('TX');\n      txn.genesisID = txnForEnc.gen;\n      txn.genesisHash = Buffer.from(txnForEnc.gh);\n      if (!isTransactionType(txnForEnc.type)) {\n        throw new Error(\"Unrecognized transaction type: \".concat(txnForEnc.type));\n      }\n      txn.type = txnForEnc.type;\n      txn.fee = txnForEnc.fee;\n      txn.firstRound = txnForEnc.fv;\n      txn.lastRound = txnForEnc.lv;\n      txn.note = new Uint8Array(txnForEnc.note);\n      txn.lease = new Uint8Array(txnForEnc.lx);\n      txn.from = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.snd)));\n      if (txnForEnc.grp !== undefined) txn.group = Buffer.from(txnForEnc.grp);\n      if (txnForEnc.rekey !== undefined) txn.reKeyTo = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.rekey)));\n      if (txnForEnc.type === 'pay') {\n        txn.amount = txnForEnc.amt;\n        txn.to = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.rcv)));\n        if (txnForEnc.close !== undefined) txn.closeRemainderTo = address.decodeAddress(address.encodeAddress(txnForEnc.close));\n      } else if (txnForEnc.type === 'keyreg') {\n        if (txnForEnc.votekey !== undefined) {\n          txn.voteKey = Buffer.from(txnForEnc.votekey);\n        }\n        if (txnForEnc.selkey !== undefined) {\n          txn.selectionKey = Buffer.from(txnForEnc.selkey);\n        }\n        if (txnForEnc.sprfkey !== undefined) {\n          txn.stateProofKey = Buffer.from(txnForEnc.sprfkey);\n        }\n        if (txnForEnc.votekd !== undefined) {\n          txn.voteKeyDilution = txnForEnc.votekd;\n        }\n        if (txnForEnc.votefst !== undefined) {\n          txn.voteFirst = txnForEnc.votefst;\n        }\n        if (txnForEnc.votelst !== undefined) {\n          txn.voteLast = txnForEnc.votelst;\n        }\n        if (txnForEnc.nonpart !== undefined) {\n          txn.nonParticipation = txnForEnc.nonpart;\n        }\n      } else if (txnForEnc.type === 'acfg') {\n        // asset creation, or asset reconfigure, or asset destruction\n        if (txnForEnc.caid !== undefined) {\n          txn.assetIndex = txnForEnc.caid;\n        }\n        if (txnForEnc.apar !== undefined) {\n          txn.assetTotal = txnForEnc.apar.t;\n          txn.assetDefaultFrozen = txnForEnc.apar.df;\n          if (txnForEnc.apar.dc !== undefined) txn.assetDecimals = txnForEnc.apar.dc;\n          if (txnForEnc.apar.m !== undefined) txn.assetManager = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.apar.m)));\n          if (txnForEnc.apar.r !== undefined) txn.assetReserve = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.apar.r)));\n          if (txnForEnc.apar.f !== undefined) txn.assetFreeze = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.apar.f)));\n          if (txnForEnc.apar.c !== undefined) txn.assetClawback = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.apar.c)));\n          if (txnForEnc.apar.un !== undefined) txn.assetUnitName = txnForEnc.apar.un;\n          if (txnForEnc.apar.an !== undefined) txn.assetName = txnForEnc.apar.an;\n          if (txnForEnc.apar.au !== undefined) txn.assetURL = txnForEnc.apar.au;\n          if (txnForEnc.apar.am !== undefined) txn.assetMetadataHash = txnForEnc.apar.am;\n        }\n      } else if (txnForEnc.type === 'axfer') {\n        // asset transfer, acceptance, revocation, mint, or burn\n        if (txnForEnc.xaid !== undefined) {\n          txn.assetIndex = txnForEnc.xaid;\n        }\n        if (txnForEnc.aamt !== undefined) txn.amount = txnForEnc.aamt;\n        if (txnForEnc.aclose !== undefined) {\n          txn.closeRemainderTo = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.aclose)));\n        }\n        if (txnForEnc.asnd !== undefined) {\n          txn.assetRevocationTarget = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.asnd)));\n        }\n        txn.to = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.arcv)));\n      } else if (txnForEnc.type === 'afrz') {\n        if (txnForEnc.afrz !== undefined) {\n          txn.freezeState = txnForEnc.afrz;\n        }\n        if (txnForEnc.faid !== undefined) {\n          txn.assetIndex = txnForEnc.faid;\n        }\n        txn.freezeAccount = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.fadd)));\n      } else if (txnForEnc.type === 'appl') {\n        if (txnForEnc.apid !== undefined) {\n          txn.appIndex = txnForEnc.apid;\n        }\n        if (txnForEnc.apan !== undefined) {\n          txn.appOnComplete = txnForEnc.apan;\n        }\n        if (txnForEnc.apls !== undefined) {\n          if (txnForEnc.apls.nui !== undefined) txn.appLocalInts = txnForEnc.apls.nui;\n          if (txnForEnc.apls.nbs !== undefined) txn.appLocalByteSlices = txnForEnc.apls.nbs;\n        }\n        if (txnForEnc.apgs !== undefined) {\n          if (txnForEnc.apgs.nui !== undefined) txn.appGlobalInts = txnForEnc.apgs.nui;\n          if (txnForEnc.apgs.nbs !== undefined) txn.appGlobalByteSlices = txnForEnc.apgs.nbs;\n        }\n        if (txnForEnc.apep !== undefined) {\n          txn.extraPages = txnForEnc.apep;\n        }\n        if (txnForEnc.apap !== undefined) {\n          txn.appApprovalProgram = new Uint8Array(txnForEnc.apap);\n        }\n        if (txnForEnc.apsu !== undefined) {\n          txn.appClearProgram = new Uint8Array(txnForEnc.apsu);\n        }\n        if (txnForEnc.apaa !== undefined) {\n          txn.appArgs = txnForEnc.apaa.map(function (arg) {\n            return new Uint8Array(arg);\n          });\n        }\n        if (txnForEnc.apat !== undefined) {\n          txn.appAccounts = txnForEnc.apat.map(function (addressBytes) {\n            return address.decodeAddress(address.encodeAddress(new Uint8Array(addressBytes)));\n          });\n        }\n        if (txnForEnc.apfa !== undefined) {\n          txn.appForeignApps = txnForEnc.apfa;\n        }\n        if (txnForEnc.apas !== undefined) {\n          txn.appForeignAssets = txnForEnc.apas;\n        }\n        if (txnForEnc.apbx !== undefined) {\n          txn.boxes = txnForEnc.apbx.map(function (box) {\n            return {\n              // We return 0 for the app ID so that it's guaranteed translateBoxReferences will\n              // translate the app index back to 0. If we instead returned the called app ID,\n              // translateBoxReferences would translate the app index to a nonzero value if the called\n              // app is also in the foreign app array.\n              appIndex: box.i ? txn.appForeignApps[box.i - 1] : 0,\n              name: box.n\n            };\n          });\n        }\n      } else if (txnForEnc.type === 'stpf') {\n        if (txnForEnc.sptype !== undefined) {\n          txn.stateProofType = txnForEnc.sptype;\n        }\n        if (txnForEnc.sp !== undefined) {\n          txn.stateProof = txnForEnc.sp;\n        }\n        if (txnForEnc.spmsg !== undefined) {\n          txn.stateProofMessage = txnForEnc.spmsg;\n        }\n      }\n      return txn;\n    }\n  }]);\n  return Transaction;\n}();\n/**\n * encodeUnsignedSimulateTransaction takes a txnBuilder.Transaction object,\n * converts it into a SignedTransaction-like object, and converts it to a Buffer.\n *\n * Note: this function should only be used to simulate unsigned transactions.\n *\n * @param transactionObject - Transaction object to simulate.\n */\nexport function encodeUnsignedSimulateTransaction(transactionObject) {\n  var objToEncode = {\n    txn: transactionObject.get_obj_for_encoding()\n  };\n  return encoding.encode(objToEncode);\n}\n/**\n * encodeUnsignedTransaction takes a completed txnBuilder.Transaction object, such as from the makeFoo\n * family of transactions, and converts it to a Buffer\n * @param transactionObject - the completed Transaction object\n */\nexport function encodeUnsignedTransaction(transactionObject) {\n  var objToEncode = transactionObject.get_obj_for_encoding();\n  return encoding.encode(objToEncode);\n}\n/**\n * decodeUnsignedTransaction takes a Buffer (as if from encodeUnsignedTransaction) and converts it to a txnBuilder.Transaction object\n * @param transactionBuffer - the Uint8Array containing a transaction\n */\nexport function decodeUnsignedTransaction(transactionBuffer) {\n  var partlyDecodedObject = encoding.decode(transactionBuffer);\n  return Transaction.from_obj_for_encoding(partlyDecodedObject);\n}\n/**\n * decodeSignedTransaction takes a Buffer (from transaction.signTxn) and converts it to an object\n * containing the Transaction (txn), the signature (sig), and the auth-addr field if applicable (sgnr)\n * @param transactionBuffer - the Uint8Array containing a transaction\n * @returns containing a Transaction, the signature, and possibly an auth-addr field\n */\nexport function decodeSignedTransaction(transactionBuffer) {\n  var stxnDecoded = encoding.decode(transactionBuffer);\n  var stxn = _objectSpread(_objectSpread({}, stxnDecoded), {}, {\n    txn: Transaction.from_obj_for_encoding(stxnDecoded.txn)\n  });\n  return stxn;\n}\nexport function instantiateTxnIfNeeded(transactionLike) {\n  return transactionLike instanceof Transaction ? transactionLike : new Transaction(transactionLike);\n}\nexport default Transaction;","map":{"version":3,"names":["Buffer","base32","address","encoding","nacl","utils","translateBoxReferences","TransactionType","isTransactionType","ALGORAND_TRANSACTION_LENGTH","ALGORAND_MIN_TX_FEE","ALGORAND_TRANSACTION_LEASE_LENGTH","ALGORAND_MAX_ASSET_DECIMALS","NUM_ADDL_BYTES_AFTER_SIGNING","ALGORAND_TRANSACTION_LEASE_LABEL_LENGTH","ALGORAND_TRANSACTION_ADDRESS_LENGTH","ALGORAND_TRANSACTION_REKEY_LABEL_LENGTH","ASSET_METADATA_HASH_LENGTH","KEYREG_VOTE_KEY_LENGTH","KEYREG_SELECTION_KEY_LENGTH","KEYREG_STATE_PROOF_KEY_LENGTH","getKeyregKey","input","inputName","length","undefined","inputAsBuffer","from","constructor","Uint8Array","isBuffer","byteLength","Error","concat","Transaction","_ref","transaction","Object","assign","_objectDestructuringEmpty","_classCallCheck","name","tag","defaults","type","pay","flatFee","nonParticipation","keyreg","voteKey","suggestedParams","reference","genesisHash","fee","firstRound","lastRound","genesisID","txn","decodeAddress","to","closeRemainderTo","assetManager","assetReserve","assetFreeze","assetClawback","assetRevocationTarget","freezeAccount","reKeyTo","amount","Number","isSafeInteger","BigInt","extraPages","isInteger","assetTotal","assetDecimals","toString","assetIndex","appIndex","appLocalInts","appLocalByteSlices","appGlobalInts","appGlobalByteSlices","appApprovalProgram","appClearProgram","appArgs","Array","isArray","slice","forEach","arg","appAccounts","map","addressAsString","appForeignApps","foreignAppIndex","appForeignAssets","foreignAssetIndex","boxes","box","assetMetadataHash","every","value","note","lease","selectionKey","stateProofKey","voteFirst","voteLast","voteKeyDilution","removeUndefinedProperties","estimateSize","group","stateProofType","stateProofMessage","stateProof","_createClass","key","get_obj_for_encoding","amt","fv","lv","snd","publicKey","gen","gh","lx","grp","encodeAddress","ALGORAND_ZERO_ADDRESS_STRING","close","rekey","rcv","votekey","selkey","sprfkey","votefst","votelst","votekd","nonpart","caid","apar","t","df","assetDefaultFrozen","dc","m","r","f","c","assetName","an","assetUnitName","un","assetURL","au","am","aamt","arcv","xaid","aclose","asnd","faid","afrz","freezeState","fadd","apid","apan","appOnComplete","apls","nui","nbs","apgs","apfa","apas","apep","apbx","apap","apsu","apaa","apat","decodedAddress","_iterator","_createForOfIteratorHelper","_step","s","n","done","i","err","e","sptype","spmsg","sp","toByte","bytesToSign","encodedMsg","concatArrays","encode","rawSignTxn","sk","toBeSigned","sig","sign","signTxn","sTxn","keypair","keyPairFromSecretKey","pubKeyFromSk","sgnr","attachSignature","signerAddr","signature","isValidSignatureLength","signerPublicKey","rawTxID","enMsg","genericHash","txID","hash","addLease","feePerByte","arguments","mutableLease","addRekey","_getDictForDisplay","forPrinting","_objectSpread","prettyPrint","console","log","JSON","stringify","from_obj_for_encoding","txnForEnc","create","prototype","addressBytes","encodeUnsignedSimulateTransaction","transactionObject","objToEncode","encodeUnsignedTransaction","decodeUnsignedTransaction","transactionBuffer","partlyDecodedObject","decode","decodeSignedTransaction","stxnDecoded","stxn","instantiateTxnIfNeeded","transactionLike"],"sources":["/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/algosdk/src/transaction.ts"],"sourcesContent":["import { Buffer } from 'buffer';\nimport base32 from 'hi-base32';\nimport * as address from './encoding/address';\nimport * as encoding from './encoding/encoding';\nimport * as nacl from './nacl/naclWrappers';\nimport * as utils from './utils/utils';\nimport { translateBoxReferences } from './boxStorage';\nimport {\n  OnApplicationComplete,\n  TransactionParams,\n  TransactionType,\n  isTransactionType,\n  BoxReference,\n} from './types/transactions/base';\nimport AnyTransaction, {\n  MustHaveSuggestedParams,\n  MustHaveSuggestedParamsInline,\n  EncodedTransaction,\n  EncodedSignedTransaction,\n  EncodedMultisig,\n  EncodedLogicSig,\n} from './types/transactions';\nimport { Address } from './types/address';\n\nconst ALGORAND_TRANSACTION_LENGTH = 52;\nexport const ALGORAND_MIN_TX_FEE = 1000; // version v5\nconst ALGORAND_TRANSACTION_LEASE_LENGTH = 32;\nconst ALGORAND_MAX_ASSET_DECIMALS = 19;\nconst NUM_ADDL_BYTES_AFTER_SIGNING = 75; // NUM_ADDL_BYTES_AFTER_SIGNING is the number of bytes added to a txn after signing it\nconst ALGORAND_TRANSACTION_LEASE_LABEL_LENGTH = 5;\nconst ALGORAND_TRANSACTION_ADDRESS_LENGTH = 32;\nconst ALGORAND_TRANSACTION_REKEY_LABEL_LENGTH = 5;\nconst ASSET_METADATA_HASH_LENGTH = 32;\nconst KEYREG_VOTE_KEY_LENGTH = 32;\nconst KEYREG_SELECTION_KEY_LENGTH = 32;\nconst KEYREG_STATE_PROOF_KEY_LENGTH = 64;\n\ntype AnyTransactionWithParams = MustHaveSuggestedParams<AnyTransaction>;\ntype AnyTransactionWithParamsInline = MustHaveSuggestedParamsInline<AnyTransaction>;\n\n/**\n * A modified version of the transaction params. Represents the internal structure that the Transaction class uses\n * to store inputted transaction objects.\n */\n// Omit allows overwriting properties\ninterface TransactionStorageStructure\n  extends Omit<\n    TransactionParams,\n    | 'from'\n    | 'to'\n    | 'genesisHash'\n    | 'closeRemainderTo'\n    | 'voteKey'\n    | 'selectionKey'\n    | 'stateProofKey'\n    | 'assetManager'\n    | 'assetReserve'\n    | 'assetFreeze'\n    | 'assetClawback'\n    | 'assetRevocationTarget'\n    | 'freezeAccount'\n    | 'appAccounts'\n    | 'suggestedParams'\n    | 'reKeyTo'\n  > {\n  from: string | Address;\n  to: string | Address;\n  fee: number;\n  amount: number | bigint;\n  firstRound: number;\n  lastRound: number;\n  note?: Uint8Array;\n  genesisID: string;\n  genesisHash: string | Buffer;\n  lease?: Uint8Array;\n  closeRemainderTo?: string | Address;\n  voteKey: string | Buffer;\n  selectionKey: string | Buffer;\n  stateProofKey: string | Buffer;\n  voteFirst: number;\n  voteLast: number;\n  voteKeyDilution: number;\n  assetIndex: number;\n  assetTotal: number | bigint;\n  assetDecimals: number;\n  assetDefaultFrozen: boolean;\n  assetManager: string | Address;\n  assetReserve: string | Address;\n  assetFreeze: string | Address;\n  assetClawback: string | Address;\n  assetUnitName: string;\n  assetName: string;\n  assetURL: string;\n  assetMetadataHash?: string | Uint8Array;\n  freezeAccount: string | Address;\n  freezeState: boolean;\n  assetRevocationTarget?: string | Address;\n  appIndex: number;\n  appOnComplete: OnApplicationComplete;\n  appLocalInts: number;\n  appLocalByteSlices: number;\n  appGlobalInts: number;\n  appGlobalByteSlices: number;\n  appApprovalProgram: Uint8Array;\n  appClearProgram: Uint8Array;\n  appArgs?: Uint8Array[];\n  appAccounts?: string[] | Address[];\n  appForeignApps?: number[];\n  appForeignAssets?: number[];\n  type?: TransactionType;\n  flatFee: boolean;\n  reKeyTo?: string | Address;\n  nonParticipation?: boolean;\n  group?: Buffer;\n  extraPages?: number;\n  boxes?: BoxReference[];\n  stateProofType?: number | bigint;\n  stateProof?: Uint8Array;\n  stateProofMessage?: Uint8Array;\n}\n\nfunction getKeyregKey(\n  input: undefined | string | Uint8Array | Buffer,\n  inputName: string,\n  length: number\n): Buffer | undefined {\n  if (input == null) {\n    return undefined;\n  }\n\n  let inputAsBuffer: Buffer | undefined;\n\n  if (typeof input === 'string') {\n    inputAsBuffer = Buffer.from(input, 'base64');\n  } else if (input.constructor === Uint8Array) {\n    inputAsBuffer = Buffer.from(input);\n  } else if (Buffer.isBuffer(input)) {\n    inputAsBuffer = input;\n  }\n\n  if (inputAsBuffer == null || inputAsBuffer.byteLength !== length) {\n    throw Error(\n      `${inputName} must be a ${length} byte Uint8Array or Buffer or base64 string.`\n    );\n  }\n\n  return inputAsBuffer;\n}\n\n/**\n * Transaction enables construction of Algorand transactions\n * */\nexport class Transaction implements TransactionStorageStructure {\n  name = 'Transaction';\n  tag = Buffer.from('TX');\n\n  // Implement transaction params\n  from: Address;\n  to: Address;\n  fee: number;\n  amount: number | bigint;\n  firstRound: number;\n  lastRound: number;\n  note?: Uint8Array;\n  genesisID: string;\n  genesisHash: Buffer;\n  lease?: Uint8Array;\n  closeRemainderTo?: Address;\n  voteKey: Buffer;\n  selectionKey: Buffer;\n  stateProofKey: Buffer;\n  voteFirst: number;\n  voteLast: number;\n  voteKeyDilution: number;\n  assetIndex: number;\n  assetTotal: number | bigint;\n  assetDecimals: number;\n  assetDefaultFrozen: boolean;\n  assetManager: Address;\n  assetReserve: Address;\n  assetFreeze: Address;\n  assetClawback: Address;\n  assetUnitName: string;\n  assetName: string;\n  assetURL: string;\n  assetMetadataHash?: Uint8Array;\n  freezeAccount: Address;\n  freezeState: boolean;\n  assetRevocationTarget?: Address;\n  appIndex: number;\n  appOnComplete: OnApplicationComplete;\n  appLocalInts: number;\n  appLocalByteSlices: number;\n  appGlobalInts: number;\n  appGlobalByteSlices: number;\n  appApprovalProgram: Uint8Array;\n  appClearProgram: Uint8Array;\n  appArgs?: Uint8Array[];\n  appAccounts?: Address[];\n  appForeignApps?: number[];\n  appForeignAssets?: number[];\n  boxes?: BoxReference[];\n  type?: TransactionType;\n  flatFee: boolean;\n  reKeyTo?: Address;\n  nonParticipation?: boolean;\n  group?: Buffer;\n  extraPages?: number;\n  stateProofType?: number | bigint;\n  stateProof?: Uint8Array;\n  stateProofMessage?: Uint8Array;\n\n  constructor({ ...transaction }: AnyTransaction) {\n    // Populate defaults\n    /* eslint-disable no-param-reassign */\n    const defaults: Partial<TransactionParams> = {\n      type: TransactionType.pay,\n      flatFee: false,\n      nonParticipation: false,\n    };\n    // Default type\n    if (typeof transaction.type === 'undefined') {\n      transaction.type = defaults.type;\n    }\n    // Default flatFee\n    if (\n      typeof (transaction as AnyTransactionWithParamsInline).flatFee ===\n      'undefined'\n    ) {\n      (transaction as AnyTransactionWithParamsInline).flatFee =\n        defaults.flatFee;\n    }\n    // Default nonParticipation\n    if (\n      transaction.type === TransactionType.keyreg &&\n      typeof transaction.voteKey !== 'undefined' &&\n      typeof transaction.nonParticipation === 'undefined'\n    ) {\n      transaction.nonParticipation = defaults.nonParticipation;\n    }\n    /* eslint-enable no-param-reassign */\n\n    // Move suggested parameters from its object to inline\n    if (\n      (transaction as AnyTransactionWithParams).suggestedParams !== undefined\n    ) {\n      // Create a temporary reference to the transaction object that has params inline and also as a suggested params object\n      //   - Helpful for moving params from named object to inline\n      const reference = transaction as AnyTransactionWithParams &\n        AnyTransactionWithParamsInline;\n      reference.genesisHash = reference.suggestedParams.genesisHash;\n      reference.fee = reference.suggestedParams.fee;\n      if (reference.suggestedParams.flatFee !== undefined)\n        reference.flatFee = reference.suggestedParams.flatFee;\n      reference.firstRound = reference.suggestedParams.firstRound;\n      reference.lastRound = reference.suggestedParams.lastRound;\n      reference.genesisID = reference.suggestedParams.genesisID;\n    }\n\n    // At this point all suggestedParams have been moved to be inline, so we can reassign the transaction object type\n    // to one which is more useful as we prepare properties for storing\n    const txn = transaction as TransactionStorageStructure;\n\n    txn.from = address.decodeAddress(txn.from as string);\n    if (txn.to !== undefined) txn.to = address.decodeAddress(txn.to as string);\n    if (txn.closeRemainderTo !== undefined)\n      txn.closeRemainderTo = address.decodeAddress(\n        txn.closeRemainderTo as string\n      );\n    if (txn.assetManager !== undefined)\n      txn.assetManager = address.decodeAddress(txn.assetManager as string);\n    if (txn.assetReserve !== undefined)\n      txn.assetReserve = address.decodeAddress(txn.assetReserve as string);\n    if (txn.assetFreeze !== undefined)\n      txn.assetFreeze = address.decodeAddress(txn.assetFreeze as string);\n    if (txn.assetClawback !== undefined)\n      txn.assetClawback = address.decodeAddress(txn.assetClawback as string);\n    if (txn.assetRevocationTarget !== undefined)\n      txn.assetRevocationTarget = address.decodeAddress(\n        txn.assetRevocationTarget as string\n      );\n    if (txn.freezeAccount !== undefined)\n      txn.freezeAccount = address.decodeAddress(txn.freezeAccount as string);\n    if (txn.reKeyTo !== undefined)\n      txn.reKeyTo = address.decodeAddress(txn.reKeyTo as string);\n    if (txn.genesisHash === undefined)\n      throw Error('genesis hash must be specified and in a base64 string.');\n\n    txn.genesisHash = Buffer.from(txn.genesisHash as string, 'base64');\n\n    if (\n      txn.amount !== undefined &&\n      (!(\n        Number.isSafeInteger(txn.amount) ||\n        (typeof txn.amount === 'bigint' &&\n          txn.amount <= BigInt('0xffffffffffffffff'))\n      ) ||\n        txn.amount < 0)\n    )\n      throw Error(\n        'Amount must be a positive number and smaller than 2^64-1. If the number is larger than 2^53-1, use bigint.'\n      );\n    if (!Number.isSafeInteger(txn.fee) || txn.fee < 0)\n      throw Error('fee must be a positive number and smaller than 2^53-1');\n    if (!Number.isSafeInteger(txn.firstRound) || txn.firstRound < 0)\n      throw Error('firstRound must be a positive number');\n    if (!Number.isSafeInteger(txn.lastRound) || txn.lastRound < 0)\n      throw Error('lastRound must be a positive number');\n    if (\n      txn.extraPages !== undefined &&\n      (!Number.isInteger(txn.extraPages) ||\n        txn.extraPages < 0 ||\n        txn.extraPages > 3)\n    )\n      throw Error('extraPages must be an Integer between and including 0 to 3');\n    if (\n      txn.assetTotal !== undefined &&\n      (!(\n        Number.isSafeInteger(txn.assetTotal) ||\n        (typeof txn.assetTotal === 'bigint' &&\n          txn.assetTotal <= BigInt('0xffffffffffffffff'))\n      ) ||\n        txn.assetTotal < 0)\n    )\n      throw Error(\n        'Total asset issuance must be a positive number and smaller than 2^64-1. If the number is larger than 2^53-1, use bigint.'\n      );\n    if (\n      txn.assetDecimals !== undefined &&\n      (!Number.isSafeInteger(txn.assetDecimals) ||\n        txn.assetDecimals < 0 ||\n        txn.assetDecimals > ALGORAND_MAX_ASSET_DECIMALS)\n    )\n      throw Error(\n        `assetDecimals must be a positive number and smaller than ${ALGORAND_MAX_ASSET_DECIMALS.toString()}`\n      );\n    if (\n      txn.assetIndex !== undefined &&\n      (!Number.isSafeInteger(txn.assetIndex) || txn.assetIndex < 0)\n    )\n      throw Error(\n        'Asset index must be a positive number and smaller than 2^53-1'\n      );\n    if (\n      txn.appIndex !== undefined &&\n      (!Number.isSafeInteger(txn.appIndex) || txn.appIndex < 0)\n    )\n      throw Error(\n        'Application index must be a positive number and smaller than 2^53-1'\n      );\n    if (\n      txn.appLocalInts !== undefined &&\n      (!Number.isSafeInteger(txn.appLocalInts) || txn.appLocalInts < 0)\n    )\n      throw Error(\n        'Application local ints count must be a positive number and smaller than 2^53-1'\n      );\n    if (\n      txn.appLocalByteSlices !== undefined &&\n      (!Number.isSafeInteger(txn.appLocalByteSlices) ||\n        txn.appLocalByteSlices < 0)\n    )\n      throw Error(\n        'Application local byte slices count must be a positive number and smaller than 2^53-1'\n      );\n    if (\n      txn.appGlobalInts !== undefined &&\n      (!Number.isSafeInteger(txn.appGlobalInts) || txn.appGlobalInts < 0)\n    )\n      throw Error(\n        'Application global ints count must be a positive number and smaller than 2^53-1'\n      );\n    if (\n      txn.appGlobalByteSlices !== undefined &&\n      (!Number.isSafeInteger(txn.appGlobalByteSlices) ||\n        txn.appGlobalByteSlices < 0)\n    )\n      throw Error(\n        'Application global byte slices count must be a positive number and smaller than 2^53-1'\n      );\n    if (txn.appApprovalProgram !== undefined) {\n      if (txn.appApprovalProgram.constructor !== Uint8Array)\n        throw Error('appApprovalProgram must be a Uint8Array.');\n    }\n    if (txn.appClearProgram !== undefined) {\n      if (txn.appClearProgram.constructor !== Uint8Array)\n        throw Error('appClearProgram must be a Uint8Array.');\n    }\n    if (txn.appArgs !== undefined) {\n      if (!Array.isArray(txn.appArgs))\n        throw Error('appArgs must be an Array of Uint8Array.');\n      txn.appArgs = txn.appArgs.slice();\n      txn.appArgs.forEach((arg) => {\n        if (arg.constructor !== Uint8Array)\n          throw Error('each element of AppArgs must be a Uint8Array.');\n      });\n    } else {\n      txn.appArgs = [];\n    }\n    if (txn.appAccounts !== undefined) {\n      if (!Array.isArray(txn.appAccounts))\n        throw Error('appAccounts must be an Array of addresses.');\n      txn.appAccounts = txn.appAccounts.map((addressAsString) =>\n        address.decodeAddress(addressAsString)\n      );\n    }\n    if (txn.appForeignApps !== undefined) {\n      if (!Array.isArray(txn.appForeignApps))\n        throw Error('appForeignApps must be an Array of integers.');\n      txn.appForeignApps = txn.appForeignApps.slice();\n      txn.appForeignApps.forEach((foreignAppIndex) => {\n        if (!Number.isSafeInteger(foreignAppIndex) || foreignAppIndex < 0)\n          throw Error(\n            'each foreign application index must be a positive number and smaller than 2^53-1'\n          );\n      });\n    }\n    if (txn.appForeignAssets !== undefined) {\n      if (!Array.isArray(txn.appForeignAssets))\n        throw Error('appForeignAssets must be an Array of integers.');\n      txn.appForeignAssets = txn.appForeignAssets.slice();\n      txn.appForeignAssets.forEach((foreignAssetIndex) => {\n        if (!Number.isSafeInteger(foreignAssetIndex) || foreignAssetIndex < 0)\n          throw Error(\n            'each foreign asset index must be a positive number and smaller than 2^53-1'\n          );\n      });\n    }\n    if (txn.boxes !== undefined) {\n      if (!Array.isArray(txn.boxes))\n        throw Error('boxes must be an Array of BoxReference.');\n      txn.boxes = txn.boxes.slice();\n      txn.boxes.forEach((box) => {\n        if (\n          !Number.isSafeInteger(box.appIndex) ||\n          box.name.constructor !== Uint8Array\n        )\n          throw Error(\n            'box app index must be a number and name must be an Uint8Array.'\n          );\n      });\n    }\n    if (\n      txn.assetMetadataHash !== undefined &&\n      txn.assetMetadataHash.length !== 0\n    ) {\n      if (typeof txn.assetMetadataHash === 'string') {\n        txn.assetMetadataHash = new Uint8Array(\n          Buffer.from(txn.assetMetadataHash)\n        );\n      }\n\n      if (\n        txn.assetMetadataHash.constructor !== Uint8Array ||\n        txn.assetMetadataHash.byteLength !== ASSET_METADATA_HASH_LENGTH\n      ) {\n        throw Error(\n          `assetMetadataHash must be a ${ASSET_METADATA_HASH_LENGTH} byte Uint8Array or string.`\n        );\n      }\n\n      if (txn.assetMetadataHash.every((value) => value === 0)) {\n        // if hash contains all 0s, omit it\n        txn.assetMetadataHash = undefined;\n      }\n    } else {\n      txn.assetMetadataHash = undefined;\n    }\n    if (txn.note !== undefined) {\n      if (txn.note.constructor !== Uint8Array)\n        throw Error('note must be a Uint8Array.');\n    } else {\n      txn.note = new Uint8Array(0);\n    }\n    if (txn.lease !== undefined) {\n      if (txn.lease.constructor !== Uint8Array)\n        throw Error('lease must be a Uint8Array.');\n      if (txn.lease.length !== ALGORAND_TRANSACTION_LEASE_LENGTH)\n        throw Error(\n          `lease must be of length ${ALGORAND_TRANSACTION_LEASE_LENGTH.toString()}.`\n        );\n      if (txn.lease.every((value) => value === 0)) {\n        // if lease contains all 0s, omit it\n        txn.lease = new Uint8Array(0);\n      }\n    } else {\n      txn.lease = new Uint8Array(0);\n    }\n    txn.voteKey = getKeyregKey(txn.voteKey, 'voteKey', KEYREG_VOTE_KEY_LENGTH);\n    txn.selectionKey = getKeyregKey(\n      txn.selectionKey,\n      'selectionKey',\n      KEYREG_SELECTION_KEY_LENGTH\n    );\n    txn.stateProofKey = getKeyregKey(\n      txn.stateProofKey,\n      'stateProofKey',\n      KEYREG_STATE_PROOF_KEY_LENGTH\n    );\n    // Checking non-participation key registration\n    if (\n      txn.nonParticipation &&\n      (txn.voteKey ||\n        txn.selectionKey ||\n        txn.voteFirst ||\n        txn.stateProofKey ||\n        txn.voteLast ||\n        txn.voteKeyDilution)\n    ) {\n      throw new Error(\n        'nonParticipation is true but participation params are present.'\n      );\n    }\n    // Checking online key registration\n    if (\n      !txn.nonParticipation &&\n      (txn.voteKey ||\n        txn.selectionKey ||\n        txn.stateProofKey ||\n        txn.voteFirst ||\n        txn.voteLast ||\n        txn.voteKeyDilution) &&\n      !(\n        txn.voteKey &&\n        txn.selectionKey &&\n        txn.voteFirst &&\n        txn.voteLast &&\n        txn.voteKeyDilution\n      )\n      // stateProofKey not included here for backwards compatibility\n    ) {\n      throw new Error(\n        'online key registration missing at least one of the following fields: ' +\n          'voteKey, selectionKey, voteFirst, voteLast, voteKeyDilution'\n      );\n    }\n    // The last option is an offline key registration where all the fields\n    // nonParticipation, voteKey, selectionKey, voteFirst, voteLast, voteKeyDilution\n    // are all undefined/false\n\n    // Remove unwanted properties and store transaction on instance\n    delete ((txn as unknown) as AnyTransactionWithParams).suggestedParams;\n    Object.assign(this, utils.removeUndefinedProperties(txn));\n\n    // Modify Fee\n    if (!txn.flatFee) {\n      this.fee *= this.estimateSize();\n      // If suggested fee too small and will be rejected, set to min tx fee\n      if (this.fee < ALGORAND_MIN_TX_FEE) {\n        this.fee = ALGORAND_MIN_TX_FEE;\n      }\n    }\n\n    // say we are aware of groups\n    this.group = undefined;\n\n    // stpf fields\n    if (\n      txn.stateProofType !== undefined &&\n      (!Number.isSafeInteger(txn.stateProofType) || txn.stateProofType < 0)\n    )\n      throw Error(\n        'State Proof type must be a positive number and smaller than 2^53-1'\n      );\n    if (txn.stateProofMessage !== undefined) {\n      if (txn.stateProofMessage.constructor !== Uint8Array)\n        throw Error('stateProofMessage must be a Uint8Array.');\n    } else {\n      txn.stateProofMessage = new Uint8Array(0);\n    }\n    if (txn.stateProof !== undefined) {\n      if (txn.stateProof.constructor !== Uint8Array)\n        throw Error('stateProof must be a Uint8Array.');\n    } else {\n      txn.stateProof = new Uint8Array(0);\n    }\n  }\n\n  // eslint-disable-next-line camelcase\n  get_obj_for_encoding() {\n    if (this.type === 'pay') {\n      const txn: EncodedTransaction = {\n        amt: this.amount,\n        fee: this.fee,\n        fv: this.firstRound,\n        lv: this.lastRound,\n        note: Buffer.from(this.note),\n        snd: Buffer.from(this.from.publicKey),\n        type: 'pay',\n        gen: this.genesisID,\n        gh: this.genesisHash,\n        lx: Buffer.from(this.lease),\n        grp: this.group,\n      };\n\n      // parse close address\n      if (\n        this.closeRemainderTo !== undefined &&\n        address.encodeAddress(this.closeRemainderTo.publicKey) !==\n          address.ALGORAND_ZERO_ADDRESS_STRING\n      ) {\n        txn.close = Buffer.from(this.closeRemainderTo.publicKey);\n      }\n      if (this.reKeyTo !== undefined) {\n        txn.rekey = Buffer.from(this.reKeyTo.publicKey);\n      }\n      // allowed zero values\n      if (this.to !== undefined) txn.rcv = Buffer.from(this.to.publicKey);\n      if (!txn.note.length) delete txn.note;\n      if (!txn.amt) delete txn.amt;\n      if (!txn.fee) delete txn.fee;\n      if (!txn.fv) delete txn.fv;\n      if (!txn.gen) delete txn.gen;\n      if (txn.grp === undefined) delete txn.grp;\n      if (!txn.lx.length) delete txn.lx;\n      if (!txn.rekey) delete txn.rekey;\n      return txn;\n    }\n    if (this.type === 'keyreg') {\n      const txn: EncodedTransaction = {\n        fee: this.fee,\n        fv: this.firstRound,\n        lv: this.lastRound,\n        note: Buffer.from(this.note),\n        snd: Buffer.from(this.from.publicKey),\n        type: this.type,\n        gen: this.genesisID,\n        gh: this.genesisHash,\n        lx: Buffer.from(this.lease),\n        grp: this.group,\n        votekey: this.voteKey,\n        selkey: this.selectionKey,\n        sprfkey: this.stateProofKey,\n        votefst: this.voteFirst,\n        votelst: this.voteLast,\n        votekd: this.voteKeyDilution,\n      };\n      // allowed zero values\n      if (!txn.note.length) delete txn.note;\n      if (!txn.lx.length) delete txn.lx;\n      if (!txn.fee) delete txn.fee;\n      if (!txn.fv) delete txn.fv;\n      if (!txn.gen) delete txn.gen;\n      if (txn.grp === undefined) delete txn.grp;\n      if (this.reKeyTo !== undefined) {\n        txn.rekey = Buffer.from(this.reKeyTo.publicKey);\n      }\n      if (this.nonParticipation) {\n        txn.nonpart = true;\n      }\n      if (!txn.selkey) delete txn.selkey;\n      if (!txn.votekey) delete txn.votekey;\n      if (!txn.sprfkey) delete txn.sprfkey;\n      if (!txn.votefst) delete txn.votefst;\n      if (!txn.votelst) delete txn.votelst;\n      if (!txn.votekd) delete txn.votekd;\n      return txn;\n    }\n    if (this.type === 'acfg') {\n      // asset creation, or asset reconfigure, or asset destruction\n      const txn: EncodedTransaction = {\n        fee: this.fee,\n        fv: this.firstRound,\n        lv: this.lastRound,\n        note: Buffer.from(this.note),\n        snd: Buffer.from(this.from.publicKey),\n        type: this.type,\n        gen: this.genesisID,\n        gh: this.genesisHash,\n        lx: Buffer.from(this.lease),\n        grp: this.group,\n        caid: this.assetIndex,\n        apar: {\n          t: this.assetTotal,\n          df: this.assetDefaultFrozen,\n          dc: this.assetDecimals,\n        },\n      };\n      if (this.assetManager !== undefined)\n        txn.apar.m = Buffer.from(this.assetManager.publicKey);\n      if (this.assetReserve !== undefined)\n        txn.apar.r = Buffer.from(this.assetReserve.publicKey);\n      if (this.assetFreeze !== undefined)\n        txn.apar.f = Buffer.from(this.assetFreeze.publicKey);\n      if (this.assetClawback !== undefined)\n        txn.apar.c = Buffer.from(this.assetClawback.publicKey);\n      if (this.assetName !== undefined) txn.apar.an = this.assetName;\n      if (this.assetUnitName !== undefined) txn.apar.un = this.assetUnitName;\n      if (this.assetURL !== undefined) txn.apar.au = this.assetURL;\n      if (this.assetMetadataHash !== undefined)\n        txn.apar.am = Buffer.from(this.assetMetadataHash);\n\n      // allowed zero values\n      if (!txn.note.length) delete txn.note;\n      if (!txn.lx.length) delete txn.lx;\n      if (!txn.amt) delete txn.amt;\n      if (!txn.fee) delete txn.fee;\n      if (!txn.fv) delete txn.fv;\n      if (!txn.gen) delete txn.gen;\n      if (this.reKeyTo !== undefined) {\n        txn.rekey = Buffer.from(this.reKeyTo.publicKey);\n      }\n\n      if (!txn.caid) delete txn.caid;\n      if (\n        !txn.apar.t &&\n        !txn.apar.un &&\n        !txn.apar.an &&\n        !txn.apar.df &&\n        !txn.apar.m &&\n        !txn.apar.r &&\n        !txn.apar.f &&\n        !txn.apar.c &&\n        !txn.apar.au &&\n        !txn.apar.am &&\n        !txn.apar.dc\n      ) {\n        delete txn.apar;\n      } else {\n        if (!txn.apar.t) delete txn.apar.t;\n        if (!txn.apar.dc) delete txn.apar.dc;\n        if (!txn.apar.un) delete txn.apar.un;\n        if (!txn.apar.an) delete txn.apar.an;\n        if (!txn.apar.df) delete txn.apar.df;\n        if (!txn.apar.m) delete txn.apar.m;\n        if (!txn.apar.r) delete txn.apar.r;\n        if (!txn.apar.f) delete txn.apar.f;\n        if (!txn.apar.c) delete txn.apar.c;\n        if (!txn.apar.au) delete txn.apar.au;\n        if (!txn.apar.am) delete txn.apar.am;\n      }\n      if (txn.grp === undefined) delete txn.grp;\n\n      return txn;\n    }\n    if (this.type === 'axfer') {\n      // asset transfer, acceptance, revocation, mint, or burn\n      const txn: EncodedTransaction = {\n        aamt: this.amount,\n        fee: this.fee,\n        fv: this.firstRound,\n        lv: this.lastRound,\n        note: Buffer.from(this.note),\n        snd: Buffer.from(this.from.publicKey),\n        arcv: Buffer.from(this.to.publicKey),\n        type: this.type,\n        gen: this.genesisID,\n        gh: this.genesisHash,\n        lx: Buffer.from(this.lease),\n        grp: this.group,\n        xaid: this.assetIndex,\n      };\n      if (this.closeRemainderTo !== undefined)\n        txn.aclose = Buffer.from(this.closeRemainderTo.publicKey);\n      if (this.assetRevocationTarget !== undefined)\n        txn.asnd = Buffer.from(this.assetRevocationTarget.publicKey);\n      // allowed zero values\n      if (!txn.note.length) delete txn.note;\n      if (!txn.lx.length) delete txn.lx;\n      if (!txn.aamt) delete txn.aamt;\n      if (!txn.amt) delete txn.amt;\n      if (!txn.fee) delete txn.fee;\n      if (!txn.fv) delete txn.fv;\n      if (!txn.gen) delete txn.gen;\n      if (txn.grp === undefined) delete txn.grp;\n      if (!txn.aclose) delete txn.aclose;\n      if (!txn.asnd) delete txn.asnd;\n      if (!txn.rekey) delete txn.rekey;\n      if (this.reKeyTo !== undefined) {\n        txn.rekey = Buffer.from(this.reKeyTo.publicKey);\n      }\n      return txn;\n    }\n    if (this.type === 'afrz') {\n      // asset freeze or unfreeze\n      const txn: EncodedTransaction = {\n        fee: this.fee,\n        fv: this.firstRound,\n        lv: this.lastRound,\n        note: Buffer.from(this.note),\n        snd: Buffer.from(this.from.publicKey),\n        type: this.type,\n        gen: this.genesisID,\n        gh: this.genesisHash,\n        lx: Buffer.from(this.lease),\n        grp: this.group,\n        faid: this.assetIndex,\n        afrz: this.freezeState,\n      };\n      if (this.freezeAccount !== undefined)\n        txn.fadd = Buffer.from(this.freezeAccount.publicKey);\n      // allowed zero values\n      if (!txn.note.length) delete txn.note;\n      if (!txn.lx.length) delete txn.lx;\n      if (!txn.amt) delete txn.amt;\n      if (!txn.fee) delete txn.fee;\n      if (!txn.fv) delete txn.fv;\n      if (!txn.gen) delete txn.gen;\n      if (!txn.afrz) delete txn.afrz;\n      if (txn.grp === undefined) delete txn.grp;\n      if (this.reKeyTo !== undefined) {\n        txn.rekey = Buffer.from(this.reKeyTo.publicKey);\n      }\n      return txn;\n    }\n    if (this.type === 'appl') {\n      // application call of some kind\n      const txn: EncodedTransaction = {\n        fee: this.fee,\n        fv: this.firstRound,\n        lv: this.lastRound,\n        note: Buffer.from(this.note),\n        snd: Buffer.from(this.from.publicKey),\n        type: this.type,\n        gen: this.genesisID,\n        gh: this.genesisHash,\n        lx: Buffer.from(this.lease),\n        grp: this.group,\n        apid: this.appIndex,\n        apan: this.appOnComplete,\n        apls: {\n          nui: this.appLocalInts,\n          nbs: this.appLocalByteSlices,\n        },\n        apgs: {\n          nui: this.appGlobalInts,\n          nbs: this.appGlobalByteSlices,\n        },\n        apfa: this.appForeignApps,\n        apas: this.appForeignAssets,\n        apep: this.extraPages,\n        apbx: translateBoxReferences(\n          this.boxes,\n          this.appForeignApps,\n          this.appIndex\n        ),\n      };\n      if (this.reKeyTo !== undefined) {\n        txn.rekey = Buffer.from(this.reKeyTo.publicKey);\n      }\n      if (this.appApprovalProgram !== undefined) {\n        txn.apap = Buffer.from(this.appApprovalProgram);\n      }\n      if (this.appClearProgram !== undefined) {\n        txn.apsu = Buffer.from(this.appClearProgram);\n      }\n      if (this.appArgs !== undefined) {\n        txn.apaa = this.appArgs.map((arg) => Buffer.from(arg));\n      }\n      if (this.appAccounts !== undefined) {\n        txn.apat = this.appAccounts.map((decodedAddress) =>\n          Buffer.from(decodedAddress.publicKey)\n        );\n      }\n      // allowed zero values\n      if (!txn.note.length) delete txn.note;\n      if (!txn.lx.length) delete txn.lx;\n      if (!txn.amt) delete txn.amt;\n      if (!txn.fee) delete txn.fee;\n      if (!txn.fv) delete txn.fv;\n      if (!txn.gen) delete txn.gen;\n      if (!txn.apid) delete txn.apid;\n      if (!txn.apls.nui) delete txn.apls.nui;\n      if (!txn.apls.nbs) delete txn.apls.nbs;\n      if (!txn.apls.nui && !txn.apls.nbs) delete txn.apls;\n      if (!txn.apgs.nui) delete txn.apgs.nui;\n      if (!txn.apgs.nbs) delete txn.apgs.nbs;\n      if (!txn.apaa || !txn.apaa.length) delete txn.apaa;\n      if (!txn.apgs.nui && !txn.apgs.nbs) delete txn.apgs;\n      if (!txn.apap) delete txn.apap;\n      if (!txn.apsu) delete txn.apsu;\n      if (!txn.apan) delete txn.apan;\n      if (!txn.apfa || !txn.apfa.length) delete txn.apfa;\n      if (!txn.apas || !txn.apas.length) delete txn.apas;\n      for (const box of txn.apbx) {\n        if (!box.i) delete box.i;\n        if (!box.n || !box.n.length) delete box.n;\n      }\n      if (!txn.apbx || !txn.apbx.length) delete txn.apbx;\n      if (!txn.apat || !txn.apat.length) delete txn.apat;\n      if (!txn.apep) delete txn.apep;\n      if (txn.grp === undefined) delete txn.grp;\n      return txn;\n    }\n    if (this.type === 'stpf') {\n      // state proof txn\n      const txn: EncodedTransaction = {\n        fee: this.fee,\n        fv: this.firstRound,\n        lv: this.lastRound,\n        note: Buffer.from(this.note),\n        snd: Buffer.from(this.from.publicKey),\n        type: this.type,\n        gen: this.genesisID,\n        gh: this.genesisHash,\n        lx: Buffer.from(this.lease),\n        sptype: this.stateProofType,\n        spmsg: Buffer.from(this.stateProofMessage),\n        sp: Buffer.from(this.stateProof),\n      };\n      // allowed zero values\n      if (!txn.sptype) delete txn.sptype;\n      if (!txn.note.length) delete txn.note;\n      if (!txn.lx.length) delete txn.lx;\n      if (!txn.amt) delete txn.amt;\n      if (!txn.fee) delete txn.fee;\n      if (!txn.fv) delete txn.fv;\n      if (!txn.gen) delete txn.gen;\n      if (!txn.apid) delete txn.apid;\n      if (!txn.apaa || !txn.apaa.length) delete txn.apaa;\n      if (!txn.apap) delete txn.apap;\n      if (!txn.apsu) delete txn.apsu;\n      if (!txn.apan) delete txn.apan;\n      if (!txn.apfa || !txn.apfa.length) delete txn.apfa;\n      if (!txn.apas || !txn.apas.length) delete txn.apas;\n      if (!txn.apat || !txn.apat.length) delete txn.apat;\n      if (!txn.apep) delete txn.apep;\n      if (txn.grp === undefined) delete txn.grp;\n      return txn;\n    }\n\n    return undefined;\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(txnForEnc: EncodedTransaction): Transaction {\n    const txn = Object.create(this.prototype) as Transaction;\n    txn.name = 'Transaction';\n    txn.tag = Buffer.from('TX');\n\n    txn.genesisID = txnForEnc.gen;\n    txn.genesisHash = Buffer.from(txnForEnc.gh);\n    if (!isTransactionType(txnForEnc.type)) {\n      throw new Error(`Unrecognized transaction type: ${txnForEnc.type}`);\n    }\n    txn.type = txnForEnc.type;\n    txn.fee = txnForEnc.fee;\n    txn.firstRound = txnForEnc.fv;\n    txn.lastRound = txnForEnc.lv;\n    txn.note = new Uint8Array(txnForEnc.note);\n    txn.lease = new Uint8Array(txnForEnc.lx);\n    txn.from = address.decodeAddress(\n      address.encodeAddress(new Uint8Array(txnForEnc.snd))\n    );\n    if (txnForEnc.grp !== undefined) txn.group = Buffer.from(txnForEnc.grp);\n    if (txnForEnc.rekey !== undefined)\n      txn.reKeyTo = address.decodeAddress(\n        address.encodeAddress(new Uint8Array(txnForEnc.rekey))\n      );\n\n    if (txnForEnc.type === 'pay') {\n      txn.amount = txnForEnc.amt;\n      txn.to = address.decodeAddress(\n        address.encodeAddress(new Uint8Array(txnForEnc.rcv))\n      );\n      if (txnForEnc.close !== undefined)\n        txn.closeRemainderTo = address.decodeAddress(\n          address.encodeAddress(txnForEnc.close)\n        );\n    } else if (txnForEnc.type === 'keyreg') {\n      if (txnForEnc.votekey !== undefined) {\n        txn.voteKey = Buffer.from(txnForEnc.votekey);\n      }\n      if (txnForEnc.selkey !== undefined) {\n        txn.selectionKey = Buffer.from(txnForEnc.selkey);\n      }\n      if (txnForEnc.sprfkey !== undefined) {\n        txn.stateProofKey = Buffer.from(txnForEnc.sprfkey);\n      }\n      if (txnForEnc.votekd !== undefined) {\n        txn.voteKeyDilution = txnForEnc.votekd;\n      }\n      if (txnForEnc.votefst !== undefined) {\n        txn.voteFirst = txnForEnc.votefst;\n      }\n      if (txnForEnc.votelst !== undefined) {\n        txn.voteLast = txnForEnc.votelst;\n      }\n      if (txnForEnc.nonpart !== undefined) {\n        txn.nonParticipation = txnForEnc.nonpart;\n      }\n    } else if (txnForEnc.type === 'acfg') {\n      // asset creation, or asset reconfigure, or asset destruction\n      if (txnForEnc.caid !== undefined) {\n        txn.assetIndex = txnForEnc.caid;\n      }\n      if (txnForEnc.apar !== undefined) {\n        txn.assetTotal = txnForEnc.apar.t;\n        txn.assetDefaultFrozen = txnForEnc.apar.df;\n        if (txnForEnc.apar.dc !== undefined)\n          txn.assetDecimals = txnForEnc.apar.dc;\n        if (txnForEnc.apar.m !== undefined)\n          txn.assetManager = address.decodeAddress(\n            address.encodeAddress(new Uint8Array(txnForEnc.apar.m))\n          );\n        if (txnForEnc.apar.r !== undefined)\n          txn.assetReserve = address.decodeAddress(\n            address.encodeAddress(new Uint8Array(txnForEnc.apar.r))\n          );\n        if (txnForEnc.apar.f !== undefined)\n          txn.assetFreeze = address.decodeAddress(\n            address.encodeAddress(new Uint8Array(txnForEnc.apar.f))\n          );\n        if (txnForEnc.apar.c !== undefined)\n          txn.assetClawback = address.decodeAddress(\n            address.encodeAddress(new Uint8Array(txnForEnc.apar.c))\n          );\n        if (txnForEnc.apar.un !== undefined)\n          txn.assetUnitName = txnForEnc.apar.un;\n        if (txnForEnc.apar.an !== undefined) txn.assetName = txnForEnc.apar.an;\n        if (txnForEnc.apar.au !== undefined) txn.assetURL = txnForEnc.apar.au;\n        if (txnForEnc.apar.am !== undefined)\n          txn.assetMetadataHash = txnForEnc.apar.am;\n      }\n    } else if (txnForEnc.type === 'axfer') {\n      // asset transfer, acceptance, revocation, mint, or burn\n      if (txnForEnc.xaid !== undefined) {\n        txn.assetIndex = txnForEnc.xaid;\n      }\n      if (txnForEnc.aamt !== undefined) txn.amount = txnForEnc.aamt;\n      if (txnForEnc.aclose !== undefined) {\n        txn.closeRemainderTo = address.decodeAddress(\n          address.encodeAddress(new Uint8Array(txnForEnc.aclose))\n        );\n      }\n      if (txnForEnc.asnd !== undefined) {\n        txn.assetRevocationTarget = address.decodeAddress(\n          address.encodeAddress(new Uint8Array(txnForEnc.asnd))\n        );\n      }\n      txn.to = address.decodeAddress(\n        address.encodeAddress(new Uint8Array(txnForEnc.arcv))\n      );\n    } else if (txnForEnc.type === 'afrz') {\n      if (txnForEnc.afrz !== undefined) {\n        txn.freezeState = txnForEnc.afrz;\n      }\n      if (txnForEnc.faid !== undefined) {\n        txn.assetIndex = txnForEnc.faid;\n      }\n      txn.freezeAccount = address.decodeAddress(\n        address.encodeAddress(new Uint8Array(txnForEnc.fadd))\n      );\n    } else if (txnForEnc.type === 'appl') {\n      if (txnForEnc.apid !== undefined) {\n        txn.appIndex = txnForEnc.apid;\n      }\n      if (txnForEnc.apan !== undefined) {\n        txn.appOnComplete = txnForEnc.apan;\n      }\n      if (txnForEnc.apls !== undefined) {\n        if (txnForEnc.apls.nui !== undefined)\n          txn.appLocalInts = txnForEnc.apls.nui;\n        if (txnForEnc.apls.nbs !== undefined)\n          txn.appLocalByteSlices = txnForEnc.apls.nbs;\n      }\n      if (txnForEnc.apgs !== undefined) {\n        if (txnForEnc.apgs.nui !== undefined)\n          txn.appGlobalInts = txnForEnc.apgs.nui;\n        if (txnForEnc.apgs.nbs !== undefined)\n          txn.appGlobalByteSlices = txnForEnc.apgs.nbs;\n      }\n      if (txnForEnc.apep !== undefined) {\n        txn.extraPages = txnForEnc.apep;\n      }\n      if (txnForEnc.apap !== undefined) {\n        txn.appApprovalProgram = new Uint8Array(txnForEnc.apap);\n      }\n      if (txnForEnc.apsu !== undefined) {\n        txn.appClearProgram = new Uint8Array(txnForEnc.apsu);\n      }\n      if (txnForEnc.apaa !== undefined) {\n        txn.appArgs = txnForEnc.apaa.map((arg) => new Uint8Array(arg));\n      }\n      if (txnForEnc.apat !== undefined) {\n        txn.appAccounts = txnForEnc.apat.map((addressBytes) =>\n          address.decodeAddress(\n            address.encodeAddress(new Uint8Array(addressBytes))\n          )\n        );\n      }\n      if (txnForEnc.apfa !== undefined) {\n        txn.appForeignApps = txnForEnc.apfa;\n      }\n      if (txnForEnc.apas !== undefined) {\n        txn.appForeignAssets = txnForEnc.apas;\n      }\n      if (txnForEnc.apbx !== undefined) {\n        txn.boxes = txnForEnc.apbx.map((box) => ({\n          // We return 0 for the app ID so that it's guaranteed translateBoxReferences will\n          // translate the app index back to 0. If we instead returned the called app ID,\n          // translateBoxReferences would translate the app index to a nonzero value if the called\n          // app is also in the foreign app array.\n          appIndex: box.i ? txn.appForeignApps[box.i - 1] : 0,\n          name: box.n,\n        }));\n      }\n    } else if (txnForEnc.type === 'stpf') {\n      if (txnForEnc.sptype !== undefined) {\n        txn.stateProofType = txnForEnc.sptype;\n      }\n      if (txnForEnc.sp !== undefined) {\n        txn.stateProof = txnForEnc.sp;\n      }\n      if (txnForEnc.spmsg !== undefined) {\n        txn.stateProofMessage = txnForEnc.spmsg;\n      }\n    }\n    return txn;\n  }\n\n  estimateSize() {\n    return this.toByte().length + NUM_ADDL_BYTES_AFTER_SIGNING;\n  }\n\n  bytesToSign() {\n    const encodedMsg = this.toByte();\n    return Buffer.from(utils.concatArrays(this.tag, encodedMsg));\n  }\n\n  toByte() {\n    return encoding.encode(this.get_obj_for_encoding());\n  }\n\n  // returns the raw signature\n  rawSignTxn(sk: Uint8Array) {\n    const toBeSigned = this.bytesToSign();\n    const sig = nacl.sign(toBeSigned, sk);\n    return Buffer.from(sig);\n  }\n\n  signTxn(sk: Uint8Array) {\n    // construct signed message\n    const sTxn: EncodedSignedTransaction = {\n      sig: this.rawSignTxn(sk),\n      txn: this.get_obj_for_encoding(),\n    };\n    // add AuthAddr if signing with a different key than From indicates\n    const keypair = nacl.keyPairFromSecretKey(sk);\n    const pubKeyFromSk = keypair.publicKey;\n    if (\n      address.encodeAddress(pubKeyFromSk) !==\n      address.encodeAddress(this.from.publicKey)\n    ) {\n      sTxn.sgnr = Buffer.from(pubKeyFromSk);\n    }\n    return new Uint8Array(encoding.encode(sTxn));\n  }\n\n  attachSignature(signerAddr: string, signature: Uint8Array) {\n    if (!nacl.isValidSignatureLength(signature.length)) {\n      throw new Error('Invalid signature length');\n    }\n    const sTxn: EncodedSignedTransaction = {\n      sig: Buffer.from(signature),\n      txn: this.get_obj_for_encoding(),\n    };\n    // add AuthAddr if signing with a different key than From indicates\n    if (signerAddr !== address.encodeAddress(this.from.publicKey)) {\n      const signerPublicKey = address.decodeAddress(signerAddr).publicKey;\n      sTxn.sgnr = Buffer.from(signerPublicKey);\n    }\n    return new Uint8Array(encoding.encode(sTxn));\n  }\n\n  rawTxID() {\n    const enMsg = this.toByte();\n    const gh = Buffer.from(utils.concatArrays(this.tag, enMsg));\n    return Buffer.from(nacl.genericHash(gh));\n  }\n\n  txID() {\n    const hash = this.rawTxID();\n    return base32.encode(hash).slice(0, ALGORAND_TRANSACTION_LENGTH);\n  }\n\n  // add a lease to a transaction not yet having\n  // supply feePerByte to increment fee accordingly\n  addLease(lease: Uint8Array, feePerByte = 0) {\n    let mutableLease: Uint8Array;\n\n    if (lease !== undefined) {\n      if (lease.constructor !== Uint8Array)\n        throw Error('lease must be a Uint8Array.');\n      if (lease.length !== ALGORAND_TRANSACTION_LEASE_LENGTH)\n        throw Error(\n          `lease must be of length ${ALGORAND_TRANSACTION_LEASE_LENGTH.toString()}.`\n        );\n\n      mutableLease = new Uint8Array(lease);\n    } else {\n      mutableLease = new Uint8Array(0);\n    }\n    this.lease = mutableLease;\n    if (feePerByte !== 0) {\n      this.fee +=\n        (ALGORAND_TRANSACTION_LEASE_LABEL_LENGTH +\n          ALGORAND_TRANSACTION_LEASE_LENGTH) *\n        feePerByte;\n    }\n  }\n\n  // add the rekey-to field to a transaction not yet having it\n  // supply feePerByte to increment fee accordingly\n  addRekey(reKeyTo: string, feePerByte = 0) {\n    if (reKeyTo !== undefined) {\n      this.reKeyTo = address.decodeAddress(reKeyTo);\n    }\n    if (feePerByte !== 0) {\n      this.fee +=\n        (ALGORAND_TRANSACTION_REKEY_LABEL_LENGTH +\n          ALGORAND_TRANSACTION_ADDRESS_LENGTH) *\n        feePerByte;\n    }\n  }\n\n  // build display dict for prettyPrint and toString\n  // eslint-disable-next-line no-underscore-dangle\n  _getDictForDisplay() {\n    const forPrinting: TransactionStorageStructure & Record<string, any> = {\n      ...this,\n    };\n    forPrinting.tag = forPrinting.tag.toString();\n    forPrinting.from = address.encodeAddress(\n      (forPrinting.from as Address).publicKey\n    );\n    if (forPrinting.to !== undefined)\n      forPrinting.to = address.encodeAddress(\n        (forPrinting.to as Address).publicKey\n      );\n    // things that need fixing:\n    if (forPrinting.freezeAccount !== undefined)\n      forPrinting.freezeAccount = address.encodeAddress(\n        (forPrinting.freezeAccount as Address).publicKey\n      );\n    if (forPrinting.closeRemainderTo !== undefined)\n      forPrinting.closeRemainderTo = address.encodeAddress(\n        (forPrinting.closeRemainderTo as Address).publicKey\n      );\n    if (forPrinting.assetManager !== undefined)\n      forPrinting.assetManager = address.encodeAddress(\n        (forPrinting.assetManager as Address).publicKey\n      );\n    if (forPrinting.assetReserve !== undefined)\n      forPrinting.assetReserve = address.encodeAddress(\n        (forPrinting.assetReserve as Address).publicKey\n      );\n    if (forPrinting.assetFreeze !== undefined)\n      forPrinting.assetFreeze = address.encodeAddress(\n        (forPrinting.assetFreeze as Address).publicKey\n      );\n    if (forPrinting.assetClawback !== undefined)\n      forPrinting.assetClawback = address.encodeAddress(\n        (forPrinting.assetClawback as Address).publicKey\n      );\n    if (forPrinting.assetRevocationTarget !== undefined)\n      forPrinting.assetRevocationTarget = address.encodeAddress(\n        (forPrinting.assetRevocationTarget as Address).publicKey\n      );\n    if (forPrinting.reKeyTo !== undefined)\n      forPrinting.reKeyTo = address.encodeAddress(\n        (forPrinting.reKeyTo as Address).publicKey\n      );\n    forPrinting.genesisHash = forPrinting.genesisHash.toString('base64');\n    return forPrinting;\n  }\n\n  // pretty print the transaction to console\n  prettyPrint() {\n    // eslint-disable-next-line no-underscore-dangle,no-console\n    console.log(this._getDictForDisplay());\n  }\n\n  // get string representation\n  toString() {\n    // eslint-disable-next-line no-underscore-dangle\n    return JSON.stringify(this._getDictForDisplay());\n  }\n}\n\n/**\n * encodeUnsignedSimulateTransaction takes a txnBuilder.Transaction object,\n * converts it into a SignedTransaction-like object, and converts it to a Buffer.\n *\n * Note: this function should only be used to simulate unsigned transactions.\n *\n * @param transactionObject - Transaction object to simulate.\n */\nexport function encodeUnsignedSimulateTransaction(\n  transactionObject: Transaction\n) {\n  const objToEncode: EncodedSignedTransaction = {\n    txn: transactionObject.get_obj_for_encoding(),\n  };\n  return encoding.encode(objToEncode);\n}\n\n/**\n * encodeUnsignedTransaction takes a completed txnBuilder.Transaction object, such as from the makeFoo\n * family of transactions, and converts it to a Buffer\n * @param transactionObject - the completed Transaction object\n */\nexport function encodeUnsignedTransaction(transactionObject: Transaction) {\n  const objToEncode = transactionObject.get_obj_for_encoding();\n  return encoding.encode(objToEncode);\n}\n\n/**\n * decodeUnsignedTransaction takes a Buffer (as if from encodeUnsignedTransaction) and converts it to a txnBuilder.Transaction object\n * @param transactionBuffer - the Uint8Array containing a transaction\n */\nexport function decodeUnsignedTransaction(\n  transactionBuffer: ArrayLike<number>\n) {\n  const partlyDecodedObject = encoding.decode(\n    transactionBuffer\n  ) as EncodedTransaction;\n  return Transaction.from_obj_for_encoding(partlyDecodedObject);\n}\n\n/**\n * Object representing a transaction with a signature\n */\nexport interface SignedTransaction {\n  /**\n   * Transaction signature\n   */\n  sig?: Buffer;\n\n  /**\n   * The transaction that was signed\n   */\n  txn: Transaction;\n\n  /**\n   * Multisig structure\n   */\n  msig?: EncodedMultisig;\n\n  /**\n   * Logic signature\n   */\n  lsig?: EncodedLogicSig;\n\n  /**\n   * The signer, if signing with a different key than the Transaction type `from` property indicates\n   */\n  sgnr?: Buffer;\n}\n\n/**\n * decodeSignedTransaction takes a Buffer (from transaction.signTxn) and converts it to an object\n * containing the Transaction (txn), the signature (sig), and the auth-addr field if applicable (sgnr)\n * @param transactionBuffer - the Uint8Array containing a transaction\n * @returns containing a Transaction, the signature, and possibly an auth-addr field\n */\nexport function decodeSignedTransaction(\n  transactionBuffer: Uint8Array\n): SignedTransaction {\n  const stxnDecoded = encoding.decode(\n    transactionBuffer\n  ) as EncodedSignedTransaction;\n  const stxn: SignedTransaction = {\n    ...stxnDecoded,\n    txn: Transaction.from_obj_for_encoding(stxnDecoded.txn),\n  };\n  return stxn;\n}\n\n/**\n * Either a valid transaction object or an instance of the Transaction class\n */\nexport type TransactionLike = AnyTransaction | Transaction;\n\nexport function instantiateTxnIfNeeded(transactionLike: TransactionLike) {\n  return transactionLike instanceof Transaction\n    ? transactionLike\n    : new Transaction(transactionLike);\n}\n\nexport default Transaction;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}