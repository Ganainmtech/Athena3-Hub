{"ast":null,"code":"import _classCallCheck from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/**\n * NOTICE: This file was generated. Editing this file manually is not recommended.\n */\n/* eslint-disable no-use-before-define */\nimport { Buffer } from 'buffer';\nimport BaseModel from '../../basemodel';\n/**\n * Account information at a given round.\n * Definition:\n * data/basics/userBalance.go : AccountData\n */\nexport var Account = /*#__PURE__*/function (_BaseModel) {\n  _inherits(Account, _BaseModel);\n  var _super = _createSuper(Account);\n  /**\n   * Creates a new `Account` object.\n   * @param address - the account public key\n   * @param amount - (algo) total number of MicroAlgos in the account\n   * @param amountWithoutPendingRewards - specifies the amount of MicroAlgos in the account, without the pending rewards.\n   * @param minBalance - MicroAlgo balance required by the account.\n   * The requirement grows based on asset and application usage.\n   * @param pendingRewards - amount of MicroAlgos of pending rewards in this account.\n   * @param rewards - (ern) total rewards of MicroAlgos the account has received, including pending\n   * rewards.\n   * @param round - The round for which this information is relevant.\n   * @param status - (onl) delegation status of the account's MicroAlgos\n   * * Offline - indicates that the associated account is delegated.\n   * * Online - indicates that the associated account used as part of the delegation\n   * pool.\n   * * NotParticipating - indicates that the associated account is neither a\n   * delegator nor a delegate.\n   * @param totalAppsOptedIn - The count of all applications that have been opted in, equivalent to the count\n   * of application local data (AppLocalState objects) stored in this account.\n   * @param totalAssetsOptedIn - The count of all assets that have been opted in, equivalent to the count of\n   * AssetHolding objects held by this account.\n   * @param totalCreatedApps - The count of all apps (AppParams objects) created by this account.\n   * @param totalCreatedAssets - The count of all assets (AssetParams objects) created by this account.\n   * @param appsLocalState - (appl) applications local data stored in this account.\n   * Note the raw object uses `map[int] -> AppLocalState` for this type.\n   * @param appsTotalExtraPages - (teap) the sum of all extra application program pages for this account.\n   * @param appsTotalSchema - (tsch) stores the sum of all of the local schemas and global schemas in this\n   * account.\n   * Note: the raw account uses `StateSchema` for this type.\n   * @param assets - (asset) assets held by this account.\n   * Note the raw object uses `map[int] -> AssetHolding` for this type.\n   * @param authAddr - (spend) the address against which signing should be checked. If empty, the\n   * address of the current account is used. This field can be updated in any\n   * transaction by setting the RekeyTo field.\n   * @param createdApps - (appp) parameters of applications created by this account including app global\n   * data.\n   * Note: the raw account uses `map[int] -> AppParams` for this type.\n   * @param createdAssets - (apar) parameters of assets created by this account.\n   * Note: the raw account uses `map[int] -> Asset` for this type.\n   * @param participation - AccountParticipation describes the parameters used by this account in consensus\n   * protocol.\n   * @param rewardBase - (ebase) used as part of the rewards computation. Only applicable to accounts\n   * which are participating.\n   * @param sigType - Indicates what type of signature is used by this account, must be one of:\n   * * sig\n   * * msig\n   * * lsig\n   * @param totalBoxBytes - (tbxb) The total number of bytes used by this account's app's box keys and\n   * values.\n   * @param totalBoxes - (tbx) The number of existing boxes created by this account's app.\n   */\n  function Account(_ref) {\n    var _this;\n    var address = _ref.address,\n      amount = _ref.amount,\n      amountWithoutPendingRewards = _ref.amountWithoutPendingRewards,\n      minBalance = _ref.minBalance,\n      pendingRewards = _ref.pendingRewards,\n      rewards = _ref.rewards,\n      round = _ref.round,\n      status = _ref.status,\n      totalAppsOptedIn = _ref.totalAppsOptedIn,\n      totalAssetsOptedIn = _ref.totalAssetsOptedIn,\n      totalCreatedApps = _ref.totalCreatedApps,\n      totalCreatedAssets = _ref.totalCreatedAssets,\n      appsLocalState = _ref.appsLocalState,\n      appsTotalExtraPages = _ref.appsTotalExtraPages,\n      appsTotalSchema = _ref.appsTotalSchema,\n      assets = _ref.assets,\n      authAddr = _ref.authAddr,\n      createdApps = _ref.createdApps,\n      createdAssets = _ref.createdAssets,\n      participation = _ref.participation,\n      rewardBase = _ref.rewardBase,\n      sigType = _ref.sigType,\n      totalBoxBytes = _ref.totalBoxBytes,\n      totalBoxes = _ref.totalBoxes;\n    _classCallCheck(this, Account);\n    _this = _super.call(this);\n    _this.address = address;\n    _this.amount = amount;\n    _this.amountWithoutPendingRewards = amountWithoutPendingRewards;\n    _this.minBalance = minBalance;\n    _this.pendingRewards = pendingRewards;\n    _this.rewards = rewards;\n    _this.round = round;\n    _this.status = status;\n    _this.totalAppsOptedIn = totalAppsOptedIn;\n    _this.totalAssetsOptedIn = totalAssetsOptedIn;\n    _this.totalCreatedApps = totalCreatedApps;\n    _this.totalCreatedAssets = totalCreatedAssets;\n    _this.appsLocalState = appsLocalState;\n    _this.appsTotalExtraPages = appsTotalExtraPages;\n    _this.appsTotalSchema = appsTotalSchema;\n    _this.assets = assets;\n    _this.authAddr = authAddr;\n    _this.createdApps = createdApps;\n    _this.createdAssets = createdAssets;\n    _this.participation = participation;\n    _this.rewardBase = rewardBase;\n    _this.sigType = sigType;\n    _this.totalBoxBytes = totalBoxBytes;\n    _this.totalBoxes = totalBoxes;\n    _this.attribute_map = {\n      address: 'address',\n      amount: 'amount',\n      amountWithoutPendingRewards: 'amount-without-pending-rewards',\n      minBalance: 'min-balance',\n      pendingRewards: 'pending-rewards',\n      rewards: 'rewards',\n      round: 'round',\n      status: 'status',\n      totalAppsOptedIn: 'total-apps-opted-in',\n      totalAssetsOptedIn: 'total-assets-opted-in',\n      totalCreatedApps: 'total-created-apps',\n      totalCreatedAssets: 'total-created-assets',\n      appsLocalState: 'apps-local-state',\n      appsTotalExtraPages: 'apps-total-extra-pages',\n      appsTotalSchema: 'apps-total-schema',\n      assets: 'assets',\n      authAddr: 'auth-addr',\n      createdApps: 'created-apps',\n      createdAssets: 'created-assets',\n      participation: 'participation',\n      rewardBase: 'reward-base',\n      sigType: 'sig-type',\n      totalBoxBytes: 'total-box-bytes',\n      totalBoxes: 'total-boxes'\n    };\n    return _this;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(Account, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['address'] === 'undefined') throw new Error(\"Response is missing required field 'address': \".concat(data));\n      if (typeof data['amount'] === 'undefined') throw new Error(\"Response is missing required field 'amount': \".concat(data));\n      if (typeof data['amount-without-pending-rewards'] === 'undefined') throw new Error(\"Response is missing required field 'amount-without-pending-rewards': \".concat(data));\n      if (typeof data['min-balance'] === 'undefined') throw new Error(\"Response is missing required field 'min-balance': \".concat(data));\n      if (typeof data['pending-rewards'] === 'undefined') throw new Error(\"Response is missing required field 'pending-rewards': \".concat(data));\n      if (typeof data['rewards'] === 'undefined') throw new Error(\"Response is missing required field 'rewards': \".concat(data));\n      if (typeof data['round'] === 'undefined') throw new Error(\"Response is missing required field 'round': \".concat(data));\n      if (typeof data['status'] === 'undefined') throw new Error(\"Response is missing required field 'status': \".concat(data));\n      if (typeof data['total-apps-opted-in'] === 'undefined') throw new Error(\"Response is missing required field 'total-apps-opted-in': \".concat(data));\n      if (typeof data['total-assets-opted-in'] === 'undefined') throw new Error(\"Response is missing required field 'total-assets-opted-in': \".concat(data));\n      if (typeof data['total-created-apps'] === 'undefined') throw new Error(\"Response is missing required field 'total-created-apps': \".concat(data));\n      if (typeof data['total-created-assets'] === 'undefined') throw new Error(\"Response is missing required field 'total-created-assets': \".concat(data));\n      return new Account({\n        address: data['address'],\n        amount: data['amount'],\n        amountWithoutPendingRewards: data['amount-without-pending-rewards'],\n        minBalance: data['min-balance'],\n        pendingRewards: data['pending-rewards'],\n        rewards: data['rewards'],\n        round: data['round'],\n        status: data['status'],\n        totalAppsOptedIn: data['total-apps-opted-in'],\n        totalAssetsOptedIn: data['total-assets-opted-in'],\n        totalCreatedApps: data['total-created-apps'],\n        totalCreatedAssets: data['total-created-assets'],\n        appsLocalState: typeof data['apps-local-state'] !== 'undefined' ? data['apps-local-state'].map(ApplicationLocalState.from_obj_for_encoding) : undefined,\n        appsTotalExtraPages: data['apps-total-extra-pages'],\n        appsTotalSchema: typeof data['apps-total-schema'] !== 'undefined' ? ApplicationStateSchema.from_obj_for_encoding(data['apps-total-schema']) : undefined,\n        assets: typeof data['assets'] !== 'undefined' ? data['assets'].map(AssetHolding.from_obj_for_encoding) : undefined,\n        authAddr: data['auth-addr'],\n        createdApps: typeof data['created-apps'] !== 'undefined' ? data['created-apps'].map(Application.from_obj_for_encoding) : undefined,\n        createdAssets: typeof data['created-assets'] !== 'undefined' ? data['created-assets'].map(Asset.from_obj_for_encoding) : undefined,\n        participation: typeof data['participation'] !== 'undefined' ? AccountParticipation.from_obj_for_encoding(data['participation']) : undefined,\n        rewardBase: data['reward-base'],\n        sigType: data['sig-type'],\n        totalBoxBytes: data['total-box-bytes'],\n        totalBoxes: data['total-boxes']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return Account;\n}(BaseModel);\n/**\n * AccountApplicationResponse describes the account's application local state and\n * global state (AppLocalState and AppParams, if either exists) for a specific\n * application ID. Global state will only be returned if the provided address is\n * the application's creator.\n */\nexport var AccountApplicationResponse = /*#__PURE__*/function (_BaseModel2) {\n  _inherits(AccountApplicationResponse, _BaseModel2);\n  var _super2 = _createSuper(AccountApplicationResponse);\n  /**\n   * Creates a new `AccountApplicationResponse` object.\n   * @param round - The round for which this information is relevant.\n   * @param appLocalState - (appl) the application local data stored in this account.\n   * The raw account uses `AppLocalState` for this type.\n   * @param createdApp - (appp) parameters of the application created by this account including app\n   * global data.\n   * The raw account uses `AppParams` for this type.\n   */\n  function AccountApplicationResponse(_ref2) {\n    var _this2;\n    var round = _ref2.round,\n      appLocalState = _ref2.appLocalState,\n      createdApp = _ref2.createdApp;\n    _classCallCheck(this, AccountApplicationResponse);\n    _this2 = _super2.call(this);\n    _this2.round = round;\n    _this2.appLocalState = appLocalState;\n    _this2.createdApp = createdApp;\n    _this2.attribute_map = {\n      round: 'round',\n      appLocalState: 'app-local-state',\n      createdApp: 'created-app'\n    };\n    return _this2;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(AccountApplicationResponse, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['round'] === 'undefined') throw new Error(\"Response is missing required field 'round': \".concat(data));\n      return new AccountApplicationResponse({\n        round: data['round'],\n        appLocalState: typeof data['app-local-state'] !== 'undefined' ? ApplicationLocalState.from_obj_for_encoding(data['app-local-state']) : undefined,\n        createdApp: typeof data['created-app'] !== 'undefined' ? ApplicationParams.from_obj_for_encoding(data['created-app']) : undefined\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return AccountApplicationResponse;\n}(BaseModel);\n/**\n * AccountAssetResponse describes the account's asset holding and asset parameters\n * (if either exist) for a specific asset ID. Asset parameters will only be\n * returned if the provided address is the asset's creator.\n */\nexport var AccountAssetResponse = /*#__PURE__*/function (_BaseModel3) {\n  _inherits(AccountAssetResponse, _BaseModel3);\n  var _super3 = _createSuper(AccountAssetResponse);\n  /**\n   * Creates a new `AccountAssetResponse` object.\n   * @param round - The round for which this information is relevant.\n   * @param assetHolding - (asset) Details about the asset held by this account.\n   * The raw account uses `AssetHolding` for this type.\n   * @param createdAsset - (apar) parameters of the asset created by this account.\n   * The raw account uses `AssetParams` for this type.\n   */\n  function AccountAssetResponse(_ref3) {\n    var _this3;\n    var round = _ref3.round,\n      assetHolding = _ref3.assetHolding,\n      createdAsset = _ref3.createdAsset;\n    _classCallCheck(this, AccountAssetResponse);\n    _this3 = _super3.call(this);\n    _this3.round = round;\n    _this3.assetHolding = assetHolding;\n    _this3.createdAsset = createdAsset;\n    _this3.attribute_map = {\n      round: 'round',\n      assetHolding: 'asset-holding',\n      createdAsset: 'created-asset'\n    };\n    return _this3;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(AccountAssetResponse, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['round'] === 'undefined') throw new Error(\"Response is missing required field 'round': \".concat(data));\n      return new AccountAssetResponse({\n        round: data['round'],\n        assetHolding: typeof data['asset-holding'] !== 'undefined' ? AssetHolding.from_obj_for_encoding(data['asset-holding']) : undefined,\n        createdAsset: typeof data['created-asset'] !== 'undefined' ? AssetParams.from_obj_for_encoding(data['created-asset']) : undefined\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return AccountAssetResponse;\n}(BaseModel);\n/**\n * AccountParticipation describes the parameters used by this account in consensus\n * protocol.\n */\nexport var AccountParticipation = /*#__PURE__*/function (_BaseModel4) {\n  _inherits(AccountParticipation, _BaseModel4);\n  var _super4 = _createSuper(AccountParticipation);\n  /**\n   * Creates a new `AccountParticipation` object.\n   * @param selectionParticipationKey - (sel) Selection public key (if any) currently registered for this round.\n   * @param voteFirstValid - (voteFst) First round for which this participation is valid.\n   * @param voteKeyDilution - (voteKD) Number of subkeys in each batch of participation keys.\n   * @param voteLastValid - (voteLst) Last round for which this participation is valid.\n   * @param voteParticipationKey - (vote) root participation public key (if any) currently registered for this\n   * round.\n   * @param stateProofKey - (stprf) Root of the state proof key (if any)\n   */\n  function AccountParticipation(_ref4) {\n    var _this4;\n    var selectionParticipationKey = _ref4.selectionParticipationKey,\n      voteFirstValid = _ref4.voteFirstValid,\n      voteKeyDilution = _ref4.voteKeyDilution,\n      voteLastValid = _ref4.voteLastValid,\n      voteParticipationKey = _ref4.voteParticipationKey,\n      stateProofKey = _ref4.stateProofKey;\n    _classCallCheck(this, AccountParticipation);\n    _this4 = _super4.call(this);\n    _this4.selectionParticipationKey = typeof selectionParticipationKey === 'string' ? new Uint8Array(Buffer.from(selectionParticipationKey, 'base64')) : selectionParticipationKey;\n    _this4.voteFirstValid = voteFirstValid;\n    _this4.voteKeyDilution = voteKeyDilution;\n    _this4.voteLastValid = voteLastValid;\n    _this4.voteParticipationKey = typeof voteParticipationKey === 'string' ? new Uint8Array(Buffer.from(voteParticipationKey, 'base64')) : voteParticipationKey;\n    _this4.stateProofKey = typeof stateProofKey === 'string' ? new Uint8Array(Buffer.from(stateProofKey, 'base64')) : stateProofKey;\n    _this4.attribute_map = {\n      selectionParticipationKey: 'selection-participation-key',\n      voteFirstValid: 'vote-first-valid',\n      voteKeyDilution: 'vote-key-dilution',\n      voteLastValid: 'vote-last-valid',\n      voteParticipationKey: 'vote-participation-key',\n      stateProofKey: 'state-proof-key'\n    };\n    return _this4;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(AccountParticipation, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['selection-participation-key'] === 'undefined') throw new Error(\"Response is missing required field 'selection-participation-key': \".concat(data));\n      if (typeof data['vote-first-valid'] === 'undefined') throw new Error(\"Response is missing required field 'vote-first-valid': \".concat(data));\n      if (typeof data['vote-key-dilution'] === 'undefined') throw new Error(\"Response is missing required field 'vote-key-dilution': \".concat(data));\n      if (typeof data['vote-last-valid'] === 'undefined') throw new Error(\"Response is missing required field 'vote-last-valid': \".concat(data));\n      if (typeof data['vote-participation-key'] === 'undefined') throw new Error(\"Response is missing required field 'vote-participation-key': \".concat(data));\n      return new AccountParticipation({\n        selectionParticipationKey: data['selection-participation-key'],\n        voteFirstValid: data['vote-first-valid'],\n        voteKeyDilution: data['vote-key-dilution'],\n        voteLastValid: data['vote-last-valid'],\n        voteParticipationKey: data['vote-participation-key'],\n        stateProofKey: data['state-proof-key']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return AccountParticipation;\n}(BaseModel);\n/**\n * Application state delta.\n */\nexport var AccountStateDelta = /*#__PURE__*/function (_BaseModel5) {\n  _inherits(AccountStateDelta, _BaseModel5);\n  var _super5 = _createSuper(AccountStateDelta);\n  /**\n   * Creates a new `AccountStateDelta` object.\n   * @param address -\n   * @param delta - Application state delta.\n   */\n  function AccountStateDelta(_ref5) {\n    var _this5;\n    var address = _ref5.address,\n      delta = _ref5.delta;\n    _classCallCheck(this, AccountStateDelta);\n    _this5 = _super5.call(this);\n    _this5.address = address;\n    _this5.delta = delta;\n    _this5.attribute_map = {\n      address: 'address',\n      delta: 'delta'\n    };\n    return _this5;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(AccountStateDelta, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['address'] === 'undefined') throw new Error(\"Response is missing required field 'address': \".concat(data));\n      if (!Array.isArray(data['delta'])) throw new Error(\"Response is missing required array field 'delta': \".concat(data));\n      return new AccountStateDelta({\n        address: data['address'],\n        delta: data['delta'].map(EvalDeltaKeyValue.from_obj_for_encoding)\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return AccountStateDelta;\n}(BaseModel);\n/**\n * Application index and its parameters\n */\nexport var Application = /*#__PURE__*/function (_BaseModel6) {\n  _inherits(Application, _BaseModel6);\n  var _super6 = _createSuper(Application);\n  /**\n   * Creates a new `Application` object.\n   * @param id - (appidx) application index.\n   * @param params - (appparams) application parameters.\n   */\n  function Application(_ref6) {\n    var _this6;\n    var id = _ref6.id,\n      params = _ref6.params;\n    _classCallCheck(this, Application);\n    _this6 = _super6.call(this);\n    _this6.id = id;\n    _this6.params = params;\n    _this6.attribute_map = {\n      id: 'id',\n      params: 'params'\n    };\n    return _this6;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(Application, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['id'] === 'undefined') throw new Error(\"Response is missing required field 'id': \".concat(data));\n      if (typeof data['params'] === 'undefined') throw new Error(\"Response is missing required field 'params': \".concat(data));\n      return new Application({\n        id: data['id'],\n        params: ApplicationParams.from_obj_for_encoding(data['params'])\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return Application;\n}(BaseModel);\n/**\n * An application's initial global/local/box states that were accessed during\n * simulation.\n */\nexport var ApplicationInitialStates = /*#__PURE__*/function (_BaseModel7) {\n  _inherits(ApplicationInitialStates, _BaseModel7);\n  var _super7 = _createSuper(ApplicationInitialStates);\n  /**\n   * Creates a new `ApplicationInitialStates` object.\n   * @param id - Application index.\n   * @param appBoxes - An application's global/local/box state.\n   * @param appGlobals - An application's global/local/box state.\n   * @param appLocals - An application's initial local states tied to different accounts.\n   */\n  function ApplicationInitialStates(_ref7) {\n    var _this7;\n    var id = _ref7.id,\n      appBoxes = _ref7.appBoxes,\n      appGlobals = _ref7.appGlobals,\n      appLocals = _ref7.appLocals;\n    _classCallCheck(this, ApplicationInitialStates);\n    _this7 = _super7.call(this);\n    _this7.id = id;\n    _this7.appBoxes = appBoxes;\n    _this7.appGlobals = appGlobals;\n    _this7.appLocals = appLocals;\n    _this7.attribute_map = {\n      id: 'id',\n      appBoxes: 'app-boxes',\n      appGlobals: 'app-globals',\n      appLocals: 'app-locals'\n    };\n    return _this7;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(ApplicationInitialStates, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['id'] === 'undefined') throw new Error(\"Response is missing required field 'id': \".concat(data));\n      return new ApplicationInitialStates({\n        id: data['id'],\n        appBoxes: typeof data['app-boxes'] !== 'undefined' ? ApplicationKVStorage.from_obj_for_encoding(data['app-boxes']) : undefined,\n        appGlobals: typeof data['app-globals'] !== 'undefined' ? ApplicationKVStorage.from_obj_for_encoding(data['app-globals']) : undefined,\n        appLocals: typeof data['app-locals'] !== 'undefined' ? data['app-locals'].map(ApplicationKVStorage.from_obj_for_encoding) : undefined\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return ApplicationInitialStates;\n}(BaseModel);\n/**\n * An application's global/local/box state.\n */\nexport var ApplicationKVStorage = /*#__PURE__*/function (_BaseModel8) {\n  _inherits(ApplicationKVStorage, _BaseModel8);\n  var _super8 = _createSuper(ApplicationKVStorage);\n  /**\n   * Creates a new `ApplicationKVStorage` object.\n   * @param kvs - Key-Value pairs representing application states.\n   * @param account - The address of the account associated with the local state.\n   */\n  function ApplicationKVStorage(_ref8) {\n    var _this8;\n    var kvs = _ref8.kvs,\n      account = _ref8.account;\n    _classCallCheck(this, ApplicationKVStorage);\n    _this8 = _super8.call(this);\n    _this8.kvs = kvs;\n    _this8.account = account;\n    _this8.attribute_map = {\n      kvs: 'kvs',\n      account: 'account'\n    };\n    return _this8;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(ApplicationKVStorage, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (!Array.isArray(data['kvs'])) throw new Error(\"Response is missing required array field 'kvs': \".concat(data));\n      return new ApplicationKVStorage({\n        kvs: data['kvs'].map(AvmKeyValue.from_obj_for_encoding),\n        account: data['account']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return ApplicationKVStorage;\n}(BaseModel);\n/**\n * References an account's local state for an application.\n */\nexport var ApplicationLocalReference = /*#__PURE__*/function (_BaseModel9) {\n  _inherits(ApplicationLocalReference, _BaseModel9);\n  var _super9 = _createSuper(ApplicationLocalReference);\n  /**\n   * Creates a new `ApplicationLocalReference` object.\n   * @param account - Address of the account with the local state.\n   * @param app - Application ID of the local state application.\n   */\n  function ApplicationLocalReference(_ref9) {\n    var _this9;\n    var account = _ref9.account,\n      app = _ref9.app;\n    _classCallCheck(this, ApplicationLocalReference);\n    _this9 = _super9.call(this);\n    _this9.account = account;\n    _this9.app = app;\n    _this9.attribute_map = {\n      account: 'account',\n      app: 'app'\n    };\n    return _this9;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(ApplicationLocalReference, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['account'] === 'undefined') throw new Error(\"Response is missing required field 'account': \".concat(data));\n      if (typeof data['app'] === 'undefined') throw new Error(\"Response is missing required field 'app': \".concat(data));\n      return new ApplicationLocalReference({\n        account: data['account'],\n        app: data['app']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return ApplicationLocalReference;\n}(BaseModel);\n/**\n * Stores local state associated with an application.\n */\nexport var ApplicationLocalState = /*#__PURE__*/function (_BaseModel10) {\n  _inherits(ApplicationLocalState, _BaseModel10);\n  var _super10 = _createSuper(ApplicationLocalState);\n  /**\n   * Creates a new `ApplicationLocalState` object.\n   * @param id - The application which this local state is for.\n   * @param schema - (hsch) schema.\n   * @param keyValue - (tkv) storage.\n   */\n  function ApplicationLocalState(_ref10) {\n    var _this10;\n    var id = _ref10.id,\n      schema = _ref10.schema,\n      keyValue = _ref10.keyValue;\n    _classCallCheck(this, ApplicationLocalState);\n    _this10 = _super10.call(this);\n    _this10.id = id;\n    _this10.schema = schema;\n    _this10.keyValue = keyValue;\n    _this10.attribute_map = {\n      id: 'id',\n      schema: 'schema',\n      keyValue: 'key-value'\n    };\n    return _this10;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(ApplicationLocalState, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['id'] === 'undefined') throw new Error(\"Response is missing required field 'id': \".concat(data));\n      if (typeof data['schema'] === 'undefined') throw new Error(\"Response is missing required field 'schema': \".concat(data));\n      return new ApplicationLocalState({\n        id: data['id'],\n        schema: ApplicationStateSchema.from_obj_for_encoding(data['schema']),\n        keyValue: typeof data['key-value'] !== 'undefined' ? data['key-value'].map(TealKeyValue.from_obj_for_encoding) : undefined\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return ApplicationLocalState;\n}(BaseModel);\n/**\n * Stores the global information associated with an application.\n */\nexport var ApplicationParams = /*#__PURE__*/function (_BaseModel11) {\n  _inherits(ApplicationParams, _BaseModel11);\n  var _super11 = _createSuper(ApplicationParams);\n  /**\n   * Creates a new `ApplicationParams` object.\n   * @param approvalProgram - (approv) approval program.\n   * @param clearStateProgram - (clearp) approval program.\n   * @param creator - The address that created this application. This is the address where the\n   * parameters and global state for this application can be found.\n   * @param extraProgramPages - (epp) the amount of extra program pages available to this app.\n   * @param globalState - (gs) global state\n   * @param globalStateSchema - (gsch) global schema\n   * @param localStateSchema - (lsch) local schema\n   */\n  function ApplicationParams(_ref11) {\n    var _this11;\n    var approvalProgram = _ref11.approvalProgram,\n      clearStateProgram = _ref11.clearStateProgram,\n      creator = _ref11.creator,\n      extraProgramPages = _ref11.extraProgramPages,\n      globalState = _ref11.globalState,\n      globalStateSchema = _ref11.globalStateSchema,\n      localStateSchema = _ref11.localStateSchema;\n    _classCallCheck(this, ApplicationParams);\n    _this11 = _super11.call(this);\n    _this11.approvalProgram = typeof approvalProgram === 'string' ? new Uint8Array(Buffer.from(approvalProgram, 'base64')) : approvalProgram;\n    _this11.clearStateProgram = typeof clearStateProgram === 'string' ? new Uint8Array(Buffer.from(clearStateProgram, 'base64')) : clearStateProgram;\n    _this11.creator = creator;\n    _this11.extraProgramPages = extraProgramPages;\n    _this11.globalState = globalState;\n    _this11.globalStateSchema = globalStateSchema;\n    _this11.localStateSchema = localStateSchema;\n    _this11.attribute_map = {\n      approvalProgram: 'approval-program',\n      clearStateProgram: 'clear-state-program',\n      creator: 'creator',\n      extraProgramPages: 'extra-program-pages',\n      globalState: 'global-state',\n      globalStateSchema: 'global-state-schema',\n      localStateSchema: 'local-state-schema'\n    };\n    return _this11;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(ApplicationParams, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['approval-program'] === 'undefined') throw new Error(\"Response is missing required field 'approval-program': \".concat(data));\n      if (typeof data['clear-state-program'] === 'undefined') throw new Error(\"Response is missing required field 'clear-state-program': \".concat(data));\n      if (typeof data['creator'] === 'undefined') throw new Error(\"Response is missing required field 'creator': \".concat(data));\n      return new ApplicationParams({\n        approvalProgram: data['approval-program'],\n        clearStateProgram: data['clear-state-program'],\n        creator: data['creator'],\n        extraProgramPages: data['extra-program-pages'],\n        globalState: typeof data['global-state'] !== 'undefined' ? data['global-state'].map(TealKeyValue.from_obj_for_encoding) : undefined,\n        globalStateSchema: typeof data['global-state-schema'] !== 'undefined' ? ApplicationStateSchema.from_obj_for_encoding(data['global-state-schema']) : undefined,\n        localStateSchema: typeof data['local-state-schema'] !== 'undefined' ? ApplicationStateSchema.from_obj_for_encoding(data['local-state-schema']) : undefined\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return ApplicationParams;\n}(BaseModel);\n/**\n * An operation against an application's global/local/box state.\n */\nexport var ApplicationStateOperation = /*#__PURE__*/function (_BaseModel12) {\n  _inherits(ApplicationStateOperation, _BaseModel12);\n  var _super12 = _createSuper(ApplicationStateOperation);\n  /**\n   * Creates a new `ApplicationStateOperation` object.\n   * @param appStateType - Type of application state. Value `g` is **global state**, `l` is **local\n   * state**, `b` is **boxes**.\n   * @param key - The key (name) of the global/local/box state.\n   * @param operation - Operation type. Value `w` is **write**, `d` is **delete**.\n   * @param account - For local state changes, the address of the account associated with the local\n   * state.\n   * @param newValue - Represents an AVM value.\n   */\n  function ApplicationStateOperation(_ref12) {\n    var _this12;\n    var appStateType = _ref12.appStateType,\n      key = _ref12.key,\n      operation = _ref12.operation,\n      account = _ref12.account,\n      newValue = _ref12.newValue;\n    _classCallCheck(this, ApplicationStateOperation);\n    _this12 = _super12.call(this);\n    _this12.appStateType = appStateType;\n    _this12.key = typeof key === 'string' ? new Uint8Array(Buffer.from(key, 'base64')) : key;\n    _this12.operation = operation;\n    _this12.account = account;\n    _this12.newValue = newValue;\n    _this12.attribute_map = {\n      appStateType: 'app-state-type',\n      key: 'key',\n      operation: 'operation',\n      account: 'account',\n      newValue: 'new-value'\n    };\n    return _this12;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(ApplicationStateOperation, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['app-state-type'] === 'undefined') throw new Error(\"Response is missing required field 'app-state-type': \".concat(data));\n      if (typeof data['key'] === 'undefined') throw new Error(\"Response is missing required field 'key': \".concat(data));\n      if (typeof data['operation'] === 'undefined') throw new Error(\"Response is missing required field 'operation': \".concat(data));\n      return new ApplicationStateOperation({\n        appStateType: data['app-state-type'],\n        key: data['key'],\n        operation: data['operation'],\n        account: data['account'],\n        newValue: typeof data['new-value'] !== 'undefined' ? AvmValue.from_obj_for_encoding(data['new-value']) : undefined\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return ApplicationStateOperation;\n}(BaseModel);\n/**\n * Specifies maximums on the number of each type that may be stored.\n */\nexport var ApplicationStateSchema = /*#__PURE__*/function (_BaseModel13) {\n  _inherits(ApplicationStateSchema, _BaseModel13);\n  var _super13 = _createSuper(ApplicationStateSchema);\n  /**\n   * Creates a new `ApplicationStateSchema` object.\n   * @param numUint - (nui) num of uints.\n   * @param numByteSlice - (nbs) num of byte slices.\n   */\n  function ApplicationStateSchema(_ref13) {\n    var _this13;\n    var numUint = _ref13.numUint,\n      numByteSlice = _ref13.numByteSlice;\n    _classCallCheck(this, ApplicationStateSchema);\n    _this13 = _super13.call(this);\n    _this13.numUint = numUint;\n    _this13.numByteSlice = numByteSlice;\n    _this13.attribute_map = {\n      numUint: 'num-uint',\n      numByteSlice: 'num-byte-slice'\n    };\n    return _this13;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(ApplicationStateSchema, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['num-uint'] === 'undefined') throw new Error(\"Response is missing required field 'num-uint': \".concat(data));\n      if (typeof data['num-byte-slice'] === 'undefined') throw new Error(\"Response is missing required field 'num-byte-slice': \".concat(data));\n      return new ApplicationStateSchema({\n        numUint: data['num-uint'],\n        numByteSlice: data['num-byte-slice']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return ApplicationStateSchema;\n}(BaseModel);\n/**\n * Specifies both the unique identifier and the parameters for an asset\n */\nexport var Asset = /*#__PURE__*/function (_BaseModel14) {\n  _inherits(Asset, _BaseModel14);\n  var _super14 = _createSuper(Asset);\n  /**\n   * Creates a new `Asset` object.\n   * @param index - unique asset identifier\n   * @param params - AssetParams specifies the parameters for an asset.\n   * (apar) when part of an AssetConfig transaction.\n   * Definition:\n   * data/transactions/asset.go : AssetParams\n   */\n  function Asset(_ref14) {\n    var _this14;\n    var index = _ref14.index,\n      params = _ref14.params;\n    _classCallCheck(this, Asset);\n    _this14 = _super14.call(this);\n    _this14.index = index;\n    _this14.params = params;\n    _this14.attribute_map = {\n      index: 'index',\n      params: 'params'\n    };\n    return _this14;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(Asset, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['index'] === 'undefined') throw new Error(\"Response is missing required field 'index': \".concat(data));\n      if (typeof data['params'] === 'undefined') throw new Error(\"Response is missing required field 'params': \".concat(data));\n      return new Asset({\n        index: data['index'],\n        params: AssetParams.from_obj_for_encoding(data['params'])\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return Asset;\n}(BaseModel);\n/**\n * Describes an asset held by an account.\n * Definition:\n * data/basics/userBalance.go : AssetHolding\n */\nexport var AssetHolding = /*#__PURE__*/function (_BaseModel15) {\n  _inherits(AssetHolding, _BaseModel15);\n  var _super15 = _createSuper(AssetHolding);\n  /**\n   * Creates a new `AssetHolding` object.\n   * @param amount - (a) number of units held.\n   * @param assetId - Asset ID of the holding.\n   * @param isFrozen - (f) whether or not the holding is frozen.\n   */\n  function AssetHolding(_ref15) {\n    var _this15;\n    var amount = _ref15.amount,\n      assetId = _ref15.assetId,\n      isFrozen = _ref15.isFrozen;\n    _classCallCheck(this, AssetHolding);\n    _this15 = _super15.call(this);\n    _this15.amount = amount;\n    _this15.assetId = assetId;\n    _this15.isFrozen = isFrozen;\n    _this15.attribute_map = {\n      amount: 'amount',\n      assetId: 'asset-id',\n      isFrozen: 'is-frozen'\n    };\n    return _this15;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(AssetHolding, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['amount'] === 'undefined') throw new Error(\"Response is missing required field 'amount': \".concat(data));\n      if (typeof data['asset-id'] === 'undefined') throw new Error(\"Response is missing required field 'asset-id': \".concat(data));\n      if (typeof data['is-frozen'] === 'undefined') throw new Error(\"Response is missing required field 'is-frozen': \".concat(data));\n      return new AssetHolding({\n        amount: data['amount'],\n        assetId: data['asset-id'],\n        isFrozen: data['is-frozen']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return AssetHolding;\n}(BaseModel);\n/**\n * References an asset held by an account.\n */\nexport var AssetHoldingReference = /*#__PURE__*/function (_BaseModel16) {\n  _inherits(AssetHoldingReference, _BaseModel16);\n  var _super16 = _createSuper(AssetHoldingReference);\n  /**\n   * Creates a new `AssetHoldingReference` object.\n   * @param account - Address of the account holding the asset.\n   * @param asset - Asset ID of the holding.\n   */\n  function AssetHoldingReference(_ref16) {\n    var _this16;\n    var account = _ref16.account,\n      asset = _ref16.asset;\n    _classCallCheck(this, AssetHoldingReference);\n    _this16 = _super16.call(this);\n    _this16.account = account;\n    _this16.asset = asset;\n    _this16.attribute_map = {\n      account: 'account',\n      asset: 'asset'\n    };\n    return _this16;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(AssetHoldingReference, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['account'] === 'undefined') throw new Error(\"Response is missing required field 'account': \".concat(data));\n      if (typeof data['asset'] === 'undefined') throw new Error(\"Response is missing required field 'asset': \".concat(data));\n      return new AssetHoldingReference({\n        account: data['account'],\n        asset: data['asset']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return AssetHoldingReference;\n}(BaseModel);\n/**\n * AssetParams specifies the parameters for an asset.\n * (apar) when part of an AssetConfig transaction.\n * Definition:\n * data/transactions/asset.go : AssetParams\n */\nexport var AssetParams = /*#__PURE__*/function (_BaseModel17) {\n  _inherits(AssetParams, _BaseModel17);\n  var _super17 = _createSuper(AssetParams);\n  /**\n   * Creates a new `AssetParams` object.\n   * @param creator - The address that created this asset. This is the address where the parameters\n   * for this asset can be found, and also the address where unwanted asset units can\n   * be sent in the worst case.\n   * @param decimals - (dc) The number of digits to use after the decimal point when displaying this\n   * asset. If 0, the asset is not divisible. If 1, the base unit of the asset is in\n   * tenths. If 2, the base unit of the asset is in hundredths, and so on. This value\n   * must be between 0 and 19 (inclusive).\n   * @param total - (t) The total number of units of this asset.\n   * @param clawback - (c) Address of account used to clawback holdings of this asset. If empty,\n   * clawback is not permitted.\n   * @param defaultFrozen - (df) Whether holdings of this asset are frozen by default.\n   * @param freeze - (f) Address of account used to freeze holdings of this asset. If empty, freezing\n   * is not permitted.\n   * @param manager - (m) Address of account used to manage the keys of this asset and to destroy it.\n   * @param metadataHash - (am) A commitment to some unspecified asset metadata. The format of this\n   * metadata is up to the application.\n   * @param name - (an) Name of this asset, as supplied by the creator. Included only when the\n   * asset name is composed of printable utf-8 characters.\n   * @param nameB64 - Base64 encoded name of this asset, as supplied by the creator.\n   * @param reserve - (r) Address of account holding reserve (non-minted) units of this asset.\n   * @param unitName - (un) Name of a unit of this asset, as supplied by the creator. Included only\n   * when the name of a unit of this asset is composed of printable utf-8 characters.\n   * @param unitNameB64 - Base64 encoded name of a unit of this asset, as supplied by the creator.\n   * @param url - (au) URL where more information about the asset can be retrieved. Included only\n   * when the URL is composed of printable utf-8 characters.\n   * @param urlB64 - Base64 encoded URL where more information about the asset can be retrieved.\n   */\n  function AssetParams(_ref17) {\n    var _this17;\n    var creator = _ref17.creator,\n      decimals = _ref17.decimals,\n      total = _ref17.total,\n      clawback = _ref17.clawback,\n      defaultFrozen = _ref17.defaultFrozen,\n      freeze = _ref17.freeze,\n      manager = _ref17.manager,\n      metadataHash = _ref17.metadataHash,\n      name = _ref17.name,\n      nameB64 = _ref17.nameB64,\n      reserve = _ref17.reserve,\n      unitName = _ref17.unitName,\n      unitNameB64 = _ref17.unitNameB64,\n      url = _ref17.url,\n      urlB64 = _ref17.urlB64;\n    _classCallCheck(this, AssetParams);\n    _this17 = _super17.call(this);\n    _this17.creator = creator;\n    _this17.decimals = decimals;\n    _this17.total = total;\n    _this17.clawback = clawback;\n    _this17.defaultFrozen = defaultFrozen;\n    _this17.freeze = freeze;\n    _this17.manager = manager;\n    _this17.metadataHash = typeof metadataHash === 'string' ? new Uint8Array(Buffer.from(metadataHash, 'base64')) : metadataHash;\n    _this17.name = name;\n    _this17.nameB64 = typeof nameB64 === 'string' ? new Uint8Array(Buffer.from(nameB64, 'base64')) : nameB64;\n    _this17.reserve = reserve;\n    _this17.unitName = unitName;\n    _this17.unitNameB64 = typeof unitNameB64 === 'string' ? new Uint8Array(Buffer.from(unitNameB64, 'base64')) : unitNameB64;\n    _this17.url = url;\n    _this17.urlB64 = typeof urlB64 === 'string' ? new Uint8Array(Buffer.from(urlB64, 'base64')) : urlB64;\n    _this17.attribute_map = {\n      creator: 'creator',\n      decimals: 'decimals',\n      total: 'total',\n      clawback: 'clawback',\n      defaultFrozen: 'default-frozen',\n      freeze: 'freeze',\n      manager: 'manager',\n      metadataHash: 'metadata-hash',\n      name: 'name',\n      nameB64: 'name-b64',\n      reserve: 'reserve',\n      unitName: 'unit-name',\n      unitNameB64: 'unit-name-b64',\n      url: 'url',\n      urlB64: 'url-b64'\n    };\n    return _this17;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(AssetParams, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['creator'] === 'undefined') throw new Error(\"Response is missing required field 'creator': \".concat(data));\n      if (typeof data['decimals'] === 'undefined') throw new Error(\"Response is missing required field 'decimals': \".concat(data));\n      if (typeof data['total'] === 'undefined') throw new Error(\"Response is missing required field 'total': \".concat(data));\n      return new AssetParams({\n        creator: data['creator'],\n        decimals: data['decimals'],\n        total: data['total'],\n        clawback: data['clawback'],\n        defaultFrozen: data['default-frozen'],\n        freeze: data['freeze'],\n        manager: data['manager'],\n        metadataHash: data['metadata-hash'],\n        name: data['name'],\n        nameB64: data['name-b64'],\n        reserve: data['reserve'],\n        unitName: data['unit-name'],\n        unitNameB64: data['unit-name-b64'],\n        url: data['url'],\n        urlB64: data['url-b64']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return AssetParams;\n}(BaseModel);\n/**\n * Represents an AVM key-value pair in an application store.\n */\nexport var AvmKeyValue = /*#__PURE__*/function (_BaseModel18) {\n  _inherits(AvmKeyValue, _BaseModel18);\n  var _super18 = _createSuper(AvmKeyValue);\n  /**\n   * Creates a new `AvmKeyValue` object.\n   * @param key -\n   * @param value - Represents an AVM value.\n   */\n  function AvmKeyValue(_ref18) {\n    var _this18;\n    var key = _ref18.key,\n      value = _ref18.value;\n    _classCallCheck(this, AvmKeyValue);\n    _this18 = _super18.call(this);\n    _this18.key = typeof key === 'string' ? new Uint8Array(Buffer.from(key, 'base64')) : key;\n    _this18.value = value;\n    _this18.attribute_map = {\n      key: 'key',\n      value: 'value'\n    };\n    return _this18;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(AvmKeyValue, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['key'] === 'undefined') throw new Error(\"Response is missing required field 'key': \".concat(data));\n      if (typeof data['value'] === 'undefined') throw new Error(\"Response is missing required field 'value': \".concat(data));\n      return new AvmKeyValue({\n        key: data['key'],\n        value: AvmValue.from_obj_for_encoding(data['value'])\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return AvmKeyValue;\n}(BaseModel);\n/**\n * Represents an AVM value.\n */\nexport var AvmValue = /*#__PURE__*/function (_BaseModel19) {\n  _inherits(AvmValue, _BaseModel19);\n  var _super19 = _createSuper(AvmValue);\n  /**\n   * Creates a new `AvmValue` object.\n   * @param type - value type. Value `1` refers to **bytes**, value `2` refers to **uint64**\n   * @param bytes - bytes value.\n   * @param uint - uint value.\n   */\n  function AvmValue(_ref19) {\n    var _this19;\n    var type = _ref19.type,\n      bytes = _ref19.bytes,\n      uint = _ref19.uint;\n    _classCallCheck(this, AvmValue);\n    _this19 = _super19.call(this);\n    _this19.type = type;\n    _this19.bytes = typeof bytes === 'string' ? new Uint8Array(Buffer.from(bytes, 'base64')) : bytes;\n    _this19.uint = uint;\n    _this19.attribute_map = {\n      type: 'type',\n      bytes: 'bytes',\n      uint: 'uint'\n    };\n    return _this19;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(AvmValue, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['type'] === 'undefined') throw new Error(\"Response is missing required field 'type': \".concat(data));\n      return new AvmValue({\n        type: data['type'],\n        bytes: data['bytes'],\n        uint: data['uint']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return AvmValue;\n}(BaseModel);\n/**\n * Hash of a block header.\n */\nexport var BlockHashResponse = /*#__PURE__*/function (_BaseModel20) {\n  _inherits(BlockHashResponse, _BaseModel20);\n  var _super20 = _createSuper(BlockHashResponse);\n  /**\n   * Creates a new `BlockHashResponse` object.\n   * @param blockhash - Block header hash.\n   */\n  function BlockHashResponse(_ref20) {\n    var _this20;\n    var blockhash = _ref20.blockhash;\n    _classCallCheck(this, BlockHashResponse);\n    _this20 = _super20.call(this);\n    _this20.blockhash = blockhash;\n    _this20.attribute_map = {\n      blockhash: 'blockHash'\n    };\n    return _this20;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(BlockHashResponse, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['blockHash'] === 'undefined') throw new Error(\"Response is missing required field 'blockHash': \".concat(data));\n      return new BlockHashResponse({\n        blockhash: data['blockHash']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return BlockHashResponse;\n}(BaseModel);\n/**\n * Encoded block object.\n */\nexport var BlockResponse = /*#__PURE__*/function (_BaseModel21) {\n  _inherits(BlockResponse, _BaseModel21);\n  var _super21 = _createSuper(BlockResponse);\n  /**\n   * Creates a new `BlockResponse` object.\n   * @param block - Block header data.\n   * @param cert - Optional certificate object. This is only included when the format is set to\n   * message pack.\n   */\n  function BlockResponse(_ref21) {\n    var _this21;\n    var block = _ref21.block,\n      cert = _ref21.cert;\n    _classCallCheck(this, BlockResponse);\n    _this21 = _super21.call(this);\n    _this21.block = block;\n    _this21.cert = cert;\n    _this21.attribute_map = {\n      block: 'block',\n      cert: 'cert'\n    };\n    return _this21;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(BlockResponse, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['block'] === 'undefined') throw new Error(\"Response is missing required field 'block': \".concat(data));\n      return new BlockResponse({\n        block: data['block'],\n        cert: data['cert']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return BlockResponse;\n}(BaseModel);\n/**\n * Top level transaction IDs in a block.\n */\nexport var BlockTxidsResponse = /*#__PURE__*/function (_BaseModel22) {\n  _inherits(BlockTxidsResponse, _BaseModel22);\n  var _super22 = _createSuper(BlockTxidsResponse);\n  /**\n   * Creates a new `BlockTxidsResponse` object.\n   * @param blocktxids - Block transaction IDs.\n   */\n  function BlockTxidsResponse(_ref22) {\n    var _this22;\n    var blocktxids = _ref22.blocktxids;\n    _classCallCheck(this, BlockTxidsResponse);\n    _this22 = _super22.call(this);\n    _this22.blocktxids = blocktxids;\n    _this22.attribute_map = {\n      blocktxids: 'blockTxids'\n    };\n    return _this22;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(BlockTxidsResponse, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (!Array.isArray(data['blockTxids'])) throw new Error(\"Response is missing required array field 'blockTxids': \".concat(data));\n      return new BlockTxidsResponse({\n        blocktxids: data['blockTxids']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return BlockTxidsResponse;\n}(BaseModel);\n/**\n * Box name and its content.\n */\nexport var Box = /*#__PURE__*/function (_BaseModel23) {\n  _inherits(Box, _BaseModel23);\n  var _super23 = _createSuper(Box);\n  /**\n   * Creates a new `Box` object.\n   * @param name - (name) box name, base64 encoded\n   * @param round - The round for which this information is relevant\n   * @param value - (value) box value, base64 encoded.\n   */\n  function Box(_ref23) {\n    var _this23;\n    var name = _ref23.name,\n      round = _ref23.round,\n      value = _ref23.value;\n    _classCallCheck(this, Box);\n    _this23 = _super23.call(this);\n    _this23.name = typeof name === 'string' ? new Uint8Array(Buffer.from(name, 'base64')) : name;\n    _this23.round = round;\n    _this23.value = typeof value === 'string' ? new Uint8Array(Buffer.from(value, 'base64')) : value;\n    _this23.attribute_map = {\n      name: 'name',\n      round: 'round',\n      value: 'value'\n    };\n    return _this23;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(Box, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['name'] === 'undefined') throw new Error(\"Response is missing required field 'name': \".concat(data));\n      if (typeof data['round'] === 'undefined') throw new Error(\"Response is missing required field 'round': \".concat(data));\n      if (typeof data['value'] === 'undefined') throw new Error(\"Response is missing required field 'value': \".concat(data));\n      return new Box({\n        name: data['name'],\n        round: data['round'],\n        value: data['value']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return Box;\n}(BaseModel);\n/**\n * Box descriptor describes a Box.\n */\nexport var BoxDescriptor = /*#__PURE__*/function (_BaseModel24) {\n  _inherits(BoxDescriptor, _BaseModel24);\n  var _super24 = _createSuper(BoxDescriptor);\n  /**\n   * Creates a new `BoxDescriptor` object.\n   * @param name - Base64 encoded box name\n   */\n  function BoxDescriptor(_ref24) {\n    var _this24;\n    var name = _ref24.name;\n    _classCallCheck(this, BoxDescriptor);\n    _this24 = _super24.call(this);\n    _this24.name = typeof name === 'string' ? new Uint8Array(Buffer.from(name, 'base64')) : name;\n    _this24.attribute_map = {\n      name: 'name'\n    };\n    return _this24;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(BoxDescriptor, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['name'] === 'undefined') throw new Error(\"Response is missing required field 'name': \".concat(data));\n      return new BoxDescriptor({\n        name: data['name']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return BoxDescriptor;\n}(BaseModel);\n/**\n * References a box of an application.\n */\nexport var BoxReference = /*#__PURE__*/function (_BaseModel25) {\n  _inherits(BoxReference, _BaseModel25);\n  var _super25 = _createSuper(BoxReference);\n  /**\n   * Creates a new `BoxReference` object.\n   * @param app - Application ID which this box belongs to\n   * @param name - Base64 encoded box name\n   */\n  function BoxReference(_ref25) {\n    var _this25;\n    var app = _ref25.app,\n      name = _ref25.name;\n    _classCallCheck(this, BoxReference);\n    _this25 = _super25.call(this);\n    _this25.app = app;\n    _this25.name = typeof name === 'string' ? new Uint8Array(Buffer.from(name, 'base64')) : name;\n    _this25.attribute_map = {\n      app: 'app',\n      name: 'name'\n    };\n    return _this25;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(BoxReference, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['app'] === 'undefined') throw new Error(\"Response is missing required field 'app': \".concat(data));\n      if (typeof data['name'] === 'undefined') throw new Error(\"Response is missing required field 'name': \".concat(data));\n      return new BoxReference({\n        app: data['app'],\n        name: data['name']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return BoxReference;\n}(BaseModel);\n/**\n * Box names of an application\n */\nexport var BoxesResponse = /*#__PURE__*/function (_BaseModel26) {\n  _inherits(BoxesResponse, _BaseModel26);\n  var _super26 = _createSuper(BoxesResponse);\n  /**\n   * Creates a new `BoxesResponse` object.\n   * @param boxes -\n   */\n  function BoxesResponse(_ref26) {\n    var _this26;\n    var boxes = _ref26.boxes;\n    _classCallCheck(this, BoxesResponse);\n    _this26 = _super26.call(this);\n    _this26.boxes = boxes;\n    _this26.attribute_map = {\n      boxes: 'boxes'\n    };\n    return _this26;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(BoxesResponse, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (!Array.isArray(data['boxes'])) throw new Error(\"Response is missing required array field 'boxes': \".concat(data));\n      return new BoxesResponse({\n        boxes: data['boxes'].map(BoxDescriptor.from_obj_for_encoding)\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return BoxesResponse;\n}(BaseModel);\nexport var BuildVersion = /*#__PURE__*/function (_BaseModel27) {\n  _inherits(BuildVersion, _BaseModel27);\n  var _super27 = _createSuper(BuildVersion);\n  /**\n   * Creates a new `BuildVersion` object.\n   * @param branch -\n   * @param buildNumber -\n   * @param channel -\n   * @param commitHash -\n   * @param major -\n   * @param minor -\n   */\n  function BuildVersion(_ref27) {\n    var _this27;\n    var branch = _ref27.branch,\n      buildNumber = _ref27.buildNumber,\n      channel = _ref27.channel,\n      commitHash = _ref27.commitHash,\n      major = _ref27.major,\n      minor = _ref27.minor;\n    _classCallCheck(this, BuildVersion);\n    _this27 = _super27.call(this);\n    _this27.branch = branch;\n    _this27.buildNumber = buildNumber;\n    _this27.channel = channel;\n    _this27.commitHash = commitHash;\n    _this27.major = major;\n    _this27.minor = minor;\n    _this27.attribute_map = {\n      branch: 'branch',\n      buildNumber: 'build_number',\n      channel: 'channel',\n      commitHash: 'commit_hash',\n      major: 'major',\n      minor: 'minor'\n    };\n    return _this27;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(BuildVersion, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['branch'] === 'undefined') throw new Error(\"Response is missing required field 'branch': \".concat(data));\n      if (typeof data['build_number'] === 'undefined') throw new Error(\"Response is missing required field 'build_number': \".concat(data));\n      if (typeof data['channel'] === 'undefined') throw new Error(\"Response is missing required field 'channel': \".concat(data));\n      if (typeof data['commit_hash'] === 'undefined') throw new Error(\"Response is missing required field 'commit_hash': \".concat(data));\n      if (typeof data['major'] === 'undefined') throw new Error(\"Response is missing required field 'major': \".concat(data));\n      if (typeof data['minor'] === 'undefined') throw new Error(\"Response is missing required field 'minor': \".concat(data));\n      return new BuildVersion({\n        branch: data['branch'],\n        buildNumber: data['build_number'],\n        channel: data['channel'],\n        commitHash: data['commit_hash'],\n        major: data['major'],\n        minor: data['minor']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return BuildVersion;\n}(BaseModel);\n/**\n * Teal compile Result\n */\nexport var CompileResponse = /*#__PURE__*/function (_BaseModel28) {\n  _inherits(CompileResponse, _BaseModel28);\n  var _super28 = _createSuper(CompileResponse);\n  /**\n   * Creates a new `CompileResponse` object.\n   * @param hash - base32 SHA512_256 of program bytes (Address style)\n   * @param result - base64 encoded program bytes\n   * @param sourcemap - JSON of the source map\n   */\n  function CompileResponse(_ref28) {\n    var _this28;\n    var hash = _ref28.hash,\n      result = _ref28.result,\n      sourcemap = _ref28.sourcemap;\n    _classCallCheck(this, CompileResponse);\n    _this28 = _super28.call(this);\n    _this28.hash = hash;\n    _this28.result = result;\n    _this28.sourcemap = sourcemap;\n    _this28.attribute_map = {\n      hash: 'hash',\n      result: 'result',\n      sourcemap: 'sourcemap'\n    };\n    return _this28;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(CompileResponse, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['hash'] === 'undefined') throw new Error(\"Response is missing required field 'hash': \".concat(data));\n      if (typeof data['result'] === 'undefined') throw new Error(\"Response is missing required field 'result': \".concat(data));\n      return new CompileResponse({\n        hash: data['hash'],\n        result: data['result'],\n        sourcemap: data['sourcemap']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return CompileResponse;\n}(BaseModel);\n/**\n * Teal disassembly Result\n */\nexport var DisassembleResponse = /*#__PURE__*/function (_BaseModel29) {\n  _inherits(DisassembleResponse, _BaseModel29);\n  var _super29 = _createSuper(DisassembleResponse);\n  /**\n   * Creates a new `DisassembleResponse` object.\n   * @param result - disassembled Teal code\n   */\n  function DisassembleResponse(_ref29) {\n    var _this29;\n    var result = _ref29.result;\n    _classCallCheck(this, DisassembleResponse);\n    _this29 = _super29.call(this);\n    _this29.result = result;\n    _this29.attribute_map = {\n      result: 'result'\n    };\n    return _this29;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(DisassembleResponse, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['result'] === 'undefined') throw new Error(\"Response is missing required field 'result': \".concat(data));\n      return new DisassembleResponse({\n        result: data['result']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return DisassembleResponse;\n}(BaseModel);\n/**\n * Request data type for dryrun endpoint. Given the Transactions and simulated\n * ledger state upload, run TEAL scripts and return debugging information.\n */\nexport var DryrunRequest = /*#__PURE__*/function (_BaseModel30) {\n  _inherits(DryrunRequest, _BaseModel30);\n  var _super30 = _createSuper(DryrunRequest);\n  /**\n   * Creates a new `DryrunRequest` object.\n   * @param accounts -\n   * @param apps -\n   * @param latestTimestamp - LatestTimestamp is available to some TEAL scripts. Defaults to the latest\n   * confirmed timestamp this algod is attached to.\n   * @param protocolVersion - ProtocolVersion specifies a specific version string to operate under, otherwise\n   * whatever the current protocol of the network this algod is running in.\n   * @param round - Round is available to some TEAL scripts. Defaults to the current round on the\n   * network this algod is attached to.\n   * @param sources -\n   * @param txns -\n   */\n  function DryrunRequest(_ref30) {\n    var _this30;\n    var accounts = _ref30.accounts,\n      apps = _ref30.apps,\n      latestTimestamp = _ref30.latestTimestamp,\n      protocolVersion = _ref30.protocolVersion,\n      round = _ref30.round,\n      sources = _ref30.sources,\n      txns = _ref30.txns;\n    _classCallCheck(this, DryrunRequest);\n    _this30 = _super30.call(this);\n    _this30.accounts = accounts;\n    _this30.apps = apps;\n    _this30.latestTimestamp = latestTimestamp;\n    _this30.protocolVersion = protocolVersion;\n    _this30.round = round;\n    _this30.sources = sources;\n    _this30.txns = txns;\n    _this30.attribute_map = {\n      accounts: 'accounts',\n      apps: 'apps',\n      latestTimestamp: 'latest-timestamp',\n      protocolVersion: 'protocol-version',\n      round: 'round',\n      sources: 'sources',\n      txns: 'txns'\n    };\n    return _this30;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(DryrunRequest, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (!Array.isArray(data['accounts'])) throw new Error(\"Response is missing required array field 'accounts': \".concat(data));\n      if (!Array.isArray(data['apps'])) throw new Error(\"Response is missing required array field 'apps': \".concat(data));\n      if (typeof data['latest-timestamp'] === 'undefined') throw new Error(\"Response is missing required field 'latest-timestamp': \".concat(data));\n      if (typeof data['protocol-version'] === 'undefined') throw new Error(\"Response is missing required field 'protocol-version': \".concat(data));\n      if (typeof data['round'] === 'undefined') throw new Error(\"Response is missing required field 'round': \".concat(data));\n      if (!Array.isArray(data['sources'])) throw new Error(\"Response is missing required array field 'sources': \".concat(data));\n      if (!Array.isArray(data['txns'])) throw new Error(\"Response is missing required array field 'txns': \".concat(data));\n      return new DryrunRequest({\n        accounts: data['accounts'].map(Account.from_obj_for_encoding),\n        apps: data['apps'].map(Application.from_obj_for_encoding),\n        latestTimestamp: data['latest-timestamp'],\n        protocolVersion: data['protocol-version'],\n        round: data['round'],\n        sources: data['sources'].map(DryrunSource.from_obj_for_encoding),\n        txns: data['txns']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return DryrunRequest;\n}(BaseModel);\n/**\n * DryrunResponse contains per-txn debug information from a dryrun.\n */\nexport var DryrunResponse = /*#__PURE__*/function (_BaseModel31) {\n  _inherits(DryrunResponse, _BaseModel31);\n  var _super31 = _createSuper(DryrunResponse);\n  /**\n   * Creates a new `DryrunResponse` object.\n   * @param error -\n   * @param protocolVersion - Protocol version is the protocol version Dryrun was operated under.\n   * @param txns -\n   */\n  function DryrunResponse(_ref31) {\n    var _this31;\n    var error = _ref31.error,\n      protocolVersion = _ref31.protocolVersion,\n      txns = _ref31.txns;\n    _classCallCheck(this, DryrunResponse);\n    _this31 = _super31.call(this);\n    _this31.error = error;\n    _this31.protocolVersion = protocolVersion;\n    _this31.txns = txns;\n    _this31.attribute_map = {\n      error: 'error',\n      protocolVersion: 'protocol-version',\n      txns: 'txns'\n    };\n    return _this31;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(DryrunResponse, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['error'] === 'undefined') throw new Error(\"Response is missing required field 'error': \".concat(data));\n      if (typeof data['protocol-version'] === 'undefined') throw new Error(\"Response is missing required field 'protocol-version': \".concat(data));\n      if (!Array.isArray(data['txns'])) throw new Error(\"Response is missing required array field 'txns': \".concat(data));\n      return new DryrunResponse({\n        error: data['error'],\n        protocolVersion: data['protocol-version'],\n        txns: data['txns'].map(DryrunTxnResult.from_obj_for_encoding)\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return DryrunResponse;\n}(BaseModel);\n/**\n * DryrunSource is TEAL source text that gets uploaded, compiled, and inserted into\n * transactions or application state.\n */\nexport var DryrunSource = /*#__PURE__*/function (_BaseModel32) {\n  _inherits(DryrunSource, _BaseModel32);\n  var _super32 = _createSuper(DryrunSource);\n  /**\n   * Creates a new `DryrunSource` object.\n   * @param fieldName - FieldName is what kind of sources this is. If lsig then it goes into the\n   * transactions[this.TxnIndex].LogicSig. If approv or clearp it goes into the\n   * Approval Program or Clear State Program of application[this.AppIndex].\n   * @param source -\n   * @param txnIndex -\n   * @param appIndex -\n   */\n  function DryrunSource(_ref32) {\n    var _this32;\n    var fieldName = _ref32.fieldName,\n      source = _ref32.source,\n      txnIndex = _ref32.txnIndex,\n      appIndex = _ref32.appIndex;\n    _classCallCheck(this, DryrunSource);\n    _this32 = _super32.call(this);\n    _this32.fieldName = fieldName;\n    _this32.source = source;\n    _this32.txnIndex = txnIndex;\n    _this32.appIndex = appIndex;\n    _this32.attribute_map = {\n      fieldName: 'field-name',\n      source: 'source',\n      txnIndex: 'txn-index',\n      appIndex: 'app-index'\n    };\n    return _this32;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(DryrunSource, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['field-name'] === 'undefined') throw new Error(\"Response is missing required field 'field-name': \".concat(data));\n      if (typeof data['source'] === 'undefined') throw new Error(\"Response is missing required field 'source': \".concat(data));\n      if (typeof data['txn-index'] === 'undefined') throw new Error(\"Response is missing required field 'txn-index': \".concat(data));\n      if (typeof data['app-index'] === 'undefined') throw new Error(\"Response is missing required field 'app-index': \".concat(data));\n      return new DryrunSource({\n        fieldName: data['field-name'],\n        source: data['source'],\n        txnIndex: data['txn-index'],\n        appIndex: data['app-index']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return DryrunSource;\n}(BaseModel);\n/**\n * Stores the TEAL eval step data\n */\nexport var DryrunState = /*#__PURE__*/function (_BaseModel33) {\n  _inherits(DryrunState, _BaseModel33);\n  var _super33 = _createSuper(DryrunState);\n  /**\n   * Creates a new `DryrunState` object.\n   * @param line - Line number\n   * @param pc - Program counter\n   * @param stack -\n   * @param error - Evaluation error if any\n   * @param scratch -\n   */\n  function DryrunState(_ref33) {\n    var _this33;\n    var line = _ref33.line,\n      pc = _ref33.pc,\n      stack = _ref33.stack,\n      error = _ref33.error,\n      scratch = _ref33.scratch;\n    _classCallCheck(this, DryrunState);\n    _this33 = _super33.call(this);\n    _this33.line = line;\n    _this33.pc = pc;\n    _this33.stack = stack;\n    _this33.error = error;\n    _this33.scratch = scratch;\n    _this33.attribute_map = {\n      line: 'line',\n      pc: 'pc',\n      stack: 'stack',\n      error: 'error',\n      scratch: 'scratch'\n    };\n    return _this33;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(DryrunState, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['line'] === 'undefined') throw new Error(\"Response is missing required field 'line': \".concat(data));\n      if (typeof data['pc'] === 'undefined') throw new Error(\"Response is missing required field 'pc': \".concat(data));\n      if (!Array.isArray(data['stack'])) throw new Error(\"Response is missing required array field 'stack': \".concat(data));\n      return new DryrunState({\n        line: data['line'],\n        pc: data['pc'],\n        stack: data['stack'].map(TealValue.from_obj_for_encoding),\n        error: data['error'],\n        scratch: typeof data['scratch'] !== 'undefined' ? data['scratch'].map(TealValue.from_obj_for_encoding) : undefined\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return DryrunState;\n}(BaseModel);\n/**\n * DryrunTxnResult contains any LogicSig or ApplicationCall program debug\n * information and state updates from a dryrun.\n */\nexport var DryrunTxnResult = /*#__PURE__*/function (_BaseModel34) {\n  _inherits(DryrunTxnResult, _BaseModel34);\n  var _super34 = _createSuper(DryrunTxnResult);\n  /**\n   * Creates a new `DryrunTxnResult` object.\n   * @param disassembly - Disassembled program line by line.\n   * @param appCallMessages -\n   * @param appCallTrace -\n   * @param budgetAdded - Budget added during execution of app call transaction.\n   * @param budgetConsumed - Budget consumed during execution of app call transaction.\n   * @param globalDelta - Application state delta.\n   * @param localDeltas -\n   * @param logicSigDisassembly - Disassembled lsig program line by line.\n   * @param logicSigMessages -\n   * @param logicSigTrace -\n   * @param logs -\n   */\n  function DryrunTxnResult(_ref34) {\n    var _this34;\n    var disassembly = _ref34.disassembly,\n      appCallMessages = _ref34.appCallMessages,\n      appCallTrace = _ref34.appCallTrace,\n      budgetAdded = _ref34.budgetAdded,\n      budgetConsumed = _ref34.budgetConsumed,\n      globalDelta = _ref34.globalDelta,\n      localDeltas = _ref34.localDeltas,\n      logicSigDisassembly = _ref34.logicSigDisassembly,\n      logicSigMessages = _ref34.logicSigMessages,\n      logicSigTrace = _ref34.logicSigTrace,\n      logs = _ref34.logs;\n    _classCallCheck(this, DryrunTxnResult);\n    _this34 = _super34.call(this);\n    _this34.disassembly = disassembly;\n    _this34.appCallMessages = appCallMessages;\n    _this34.appCallTrace = appCallTrace;\n    _this34.budgetAdded = budgetAdded;\n    _this34.budgetConsumed = budgetConsumed;\n    _this34.globalDelta = globalDelta;\n    _this34.localDeltas = localDeltas;\n    _this34.logicSigDisassembly = logicSigDisassembly;\n    _this34.logicSigMessages = logicSigMessages;\n    _this34.logicSigTrace = logicSigTrace;\n    _this34.logs = logs;\n    _this34.attribute_map = {\n      disassembly: 'disassembly',\n      appCallMessages: 'app-call-messages',\n      appCallTrace: 'app-call-trace',\n      budgetAdded: 'budget-added',\n      budgetConsumed: 'budget-consumed',\n      globalDelta: 'global-delta',\n      localDeltas: 'local-deltas',\n      logicSigDisassembly: 'logic-sig-disassembly',\n      logicSigMessages: 'logic-sig-messages',\n      logicSigTrace: 'logic-sig-trace',\n      logs: 'logs'\n    };\n    return _this34;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(DryrunTxnResult, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (!Array.isArray(data['disassembly'])) throw new Error(\"Response is missing required array field 'disassembly': \".concat(data));\n      return new DryrunTxnResult({\n        disassembly: data['disassembly'],\n        appCallMessages: data['app-call-messages'],\n        appCallTrace: typeof data['app-call-trace'] !== 'undefined' ? data['app-call-trace'].map(DryrunState.from_obj_for_encoding) : undefined,\n        budgetAdded: data['budget-added'],\n        budgetConsumed: data['budget-consumed'],\n        globalDelta: typeof data['global-delta'] !== 'undefined' ? data['global-delta'].map(EvalDeltaKeyValue.from_obj_for_encoding) : undefined,\n        localDeltas: typeof data['local-deltas'] !== 'undefined' ? data['local-deltas'].map(AccountStateDelta.from_obj_for_encoding) : undefined,\n        logicSigDisassembly: data['logic-sig-disassembly'],\n        logicSigMessages: data['logic-sig-messages'],\n        logicSigTrace: typeof data['logic-sig-trace'] !== 'undefined' ? data['logic-sig-trace'].map(DryrunState.from_obj_for_encoding) : undefined,\n        logs: data['logs']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return DryrunTxnResult;\n}(BaseModel);\n/**\n * An error response with optional data field.\n */\nexport var ErrorResponse = /*#__PURE__*/function (_BaseModel35) {\n  _inherits(ErrorResponse, _BaseModel35);\n  var _super35 = _createSuper(ErrorResponse);\n  /**\n   * Creates a new `ErrorResponse` object.\n   * @param message -\n   * @param data -\n   */\n  function ErrorResponse(_ref35) {\n    var _this35;\n    var message = _ref35.message,\n      data = _ref35.data;\n    _classCallCheck(this, ErrorResponse);\n    _this35 = _super35.call(this);\n    _this35.message = message;\n    _this35.data = data;\n    _this35.attribute_map = {\n      message: 'message',\n      data: 'data'\n    };\n    return _this35;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(ErrorResponse, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['message'] === 'undefined') throw new Error(\"Response is missing required field 'message': \".concat(data));\n      return new ErrorResponse({\n        message: data['message'],\n        data: data['data']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return ErrorResponse;\n}(BaseModel);\n/**\n * Represents a TEAL value delta.\n */\nexport var EvalDelta = /*#__PURE__*/function (_BaseModel36) {\n  _inherits(EvalDelta, _BaseModel36);\n  var _super36 = _createSuper(EvalDelta);\n  /**\n   * Creates a new `EvalDelta` object.\n   * @param action - (at) delta action.\n   * @param bytes - (bs) bytes value.\n   * @param uint - (ui) uint value.\n   */\n  function EvalDelta(_ref36) {\n    var _this36;\n    var action = _ref36.action,\n      bytes = _ref36.bytes,\n      uint = _ref36.uint;\n    _classCallCheck(this, EvalDelta);\n    _this36 = _super36.call(this);\n    _this36.action = action;\n    _this36.bytes = bytes;\n    _this36.uint = uint;\n    _this36.attribute_map = {\n      action: 'action',\n      bytes: 'bytes',\n      uint: 'uint'\n    };\n    return _this36;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(EvalDelta, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['action'] === 'undefined') throw new Error(\"Response is missing required field 'action': \".concat(data));\n      return new EvalDelta({\n        action: data['action'],\n        bytes: data['bytes'],\n        uint: data['uint']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return EvalDelta;\n}(BaseModel);\n/**\n * Key-value pairs for StateDelta.\n */\nexport var EvalDeltaKeyValue = /*#__PURE__*/function (_BaseModel37) {\n  _inherits(EvalDeltaKeyValue, _BaseModel37);\n  var _super37 = _createSuper(EvalDeltaKeyValue);\n  /**\n   * Creates a new `EvalDeltaKeyValue` object.\n   * @param key -\n   * @param value - Represents a TEAL value delta.\n   */\n  function EvalDeltaKeyValue(_ref37) {\n    var _this37;\n    var key = _ref37.key,\n      value = _ref37.value;\n    _classCallCheck(this, EvalDeltaKeyValue);\n    _this37 = _super37.call(this);\n    _this37.key = key;\n    _this37.value = value;\n    _this37.attribute_map = {\n      key: 'key',\n      value: 'value'\n    };\n    return _this37;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(EvalDeltaKeyValue, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['key'] === 'undefined') throw new Error(\"Response is missing required field 'key': \".concat(data));\n      if (typeof data['value'] === 'undefined') throw new Error(\"Response is missing required field 'value': \".concat(data));\n      return new EvalDeltaKeyValue({\n        key: data['key'],\n        value: EvalDelta.from_obj_for_encoding(data['value'])\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return EvalDeltaKeyValue;\n}(BaseModel);\n/**\n * Response containing the timestamp offset in seconds\n */\nexport var GetBlockTimeStampOffsetResponse = /*#__PURE__*/function (_BaseModel38) {\n  _inherits(GetBlockTimeStampOffsetResponse, _BaseModel38);\n  var _super38 = _createSuper(GetBlockTimeStampOffsetResponse);\n  /**\n   * Creates a new `GetBlockTimeStampOffsetResponse` object.\n   * @param offset - Timestamp offset in seconds.\n   */\n  function GetBlockTimeStampOffsetResponse(_ref38) {\n    var _this38;\n    var offset = _ref38.offset;\n    _classCallCheck(this, GetBlockTimeStampOffsetResponse);\n    _this38 = _super38.call(this);\n    _this38.offset = offset;\n    _this38.attribute_map = {\n      offset: 'offset'\n    };\n    return _this38;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(GetBlockTimeStampOffsetResponse, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['offset'] === 'undefined') throw new Error(\"Response is missing required field 'offset': \".concat(data));\n      return new GetBlockTimeStampOffsetResponse({\n        offset: data['offset']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return GetBlockTimeStampOffsetResponse;\n}(BaseModel);\n/**\n * Response containing the ledger's minimum sync round\n */\nexport var GetSyncRoundResponse = /*#__PURE__*/function (_BaseModel39) {\n  _inherits(GetSyncRoundResponse, _BaseModel39);\n  var _super39 = _createSuper(GetSyncRoundResponse);\n  /**\n   * Creates a new `GetSyncRoundResponse` object.\n   * @param round - The minimum sync round for the ledger.\n   */\n  function GetSyncRoundResponse(_ref39) {\n    var _this39;\n    var round = _ref39.round;\n    _classCallCheck(this, GetSyncRoundResponse);\n    _this39 = _super39.call(this);\n    _this39.round = round;\n    _this39.attribute_map = {\n      round: 'round'\n    };\n    return _this39;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(GetSyncRoundResponse, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['round'] === 'undefined') throw new Error(\"Response is missing required field 'round': \".concat(data));\n      return new GetSyncRoundResponse({\n        round: data['round']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return GetSyncRoundResponse;\n}(BaseModel);\n/**\n * A single Delta containing the key, the previous value and the current value for\n * a single round.\n */\nexport var KvDelta = /*#__PURE__*/function (_BaseModel40) {\n  _inherits(KvDelta, _BaseModel40);\n  var _super40 = _createSuper(KvDelta);\n  /**\n   * Creates a new `KvDelta` object.\n   * @param key - The key, base64 encoded.\n   * @param value - The new value of the KV store entry, base64 encoded.\n   */\n  function KvDelta(_ref40) {\n    var _this40;\n    var key = _ref40.key,\n      value = _ref40.value;\n    _classCallCheck(this, KvDelta);\n    _this40 = _super40.call(this);\n    _this40.key = typeof key === 'string' ? new Uint8Array(Buffer.from(key, 'base64')) : key;\n    _this40.value = typeof value === 'string' ? new Uint8Array(Buffer.from(value, 'base64')) : value;\n    _this40.attribute_map = {\n      key: 'key',\n      value: 'value'\n    };\n    return _this40;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(KvDelta, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      return new KvDelta({\n        key: data['key'],\n        value: data['value']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return KvDelta;\n}(BaseModel);\n/**\n * Contains a ledger delta for a single transaction group\n */\nexport var LedgerStateDeltaForTransactionGroup = /*#__PURE__*/function (_BaseModel41) {\n  _inherits(LedgerStateDeltaForTransactionGroup, _BaseModel41);\n  var _super41 = _createSuper(LedgerStateDeltaForTransactionGroup);\n  /**\n   * Creates a new `LedgerStateDeltaForTransactionGroup` object.\n   * @param delta - Ledger StateDelta object\n   * @param ids -\n   */\n  function LedgerStateDeltaForTransactionGroup(_ref41) {\n    var _this41;\n    var delta = _ref41.delta,\n      ids = _ref41.ids;\n    _classCallCheck(this, LedgerStateDeltaForTransactionGroup);\n    _this41 = _super41.call(this);\n    _this41.delta = delta;\n    _this41.ids = ids;\n    _this41.attribute_map = {\n      delta: 'Delta',\n      ids: 'Ids'\n    };\n    return _this41;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(LedgerStateDeltaForTransactionGroup, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['Delta'] === 'undefined') throw new Error(\"Response is missing required field 'Delta': \".concat(data));\n      if (!Array.isArray(data['Ids'])) throw new Error(\"Response is missing required array field 'Ids': \".concat(data));\n      return new LedgerStateDeltaForTransactionGroup({\n        delta: data['Delta'],\n        ids: data['Ids']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return LedgerStateDeltaForTransactionGroup;\n}(BaseModel);\n/**\n * Proof of membership and position of a light block header.\n */\nexport var LightBlockHeaderProof = /*#__PURE__*/function (_BaseModel42) {\n  _inherits(LightBlockHeaderProof, _BaseModel42);\n  var _super42 = _createSuper(LightBlockHeaderProof);\n  /**\n   * Creates a new `LightBlockHeaderProof` object.\n   * @param index - The index of the light block header in the vector commitment tree\n   * @param proof - The encoded proof.\n   * @param treedepth - Represents the depth of the tree that is being proven, i.e. the number of edges\n   * from a leaf to the root.\n   */\n  function LightBlockHeaderProof(_ref42) {\n    var _this42;\n    var index = _ref42.index,\n      proof = _ref42.proof,\n      treedepth = _ref42.treedepth;\n    _classCallCheck(this, LightBlockHeaderProof);\n    _this42 = _super42.call(this);\n    _this42.index = index;\n    _this42.proof = typeof proof === 'string' ? new Uint8Array(Buffer.from(proof, 'base64')) : proof;\n    _this42.treedepth = treedepth;\n    _this42.attribute_map = {\n      index: 'index',\n      proof: 'proof',\n      treedepth: 'treedepth'\n    };\n    return _this42;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(LightBlockHeaderProof, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['index'] === 'undefined') throw new Error(\"Response is missing required field 'index': \".concat(data));\n      if (typeof data['proof'] === 'undefined') throw new Error(\"Response is missing required field 'proof': \".concat(data));\n      if (typeof data['treedepth'] === 'undefined') throw new Error(\"Response is missing required field 'treedepth': \".concat(data));\n      return new LightBlockHeaderProof({\n        index: data['index'],\n        proof: data['proof'],\n        treedepth: data['treedepth']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return LightBlockHeaderProof;\n}(BaseModel);\n/**\n *\n */\nexport var NodeStatusResponse = /*#__PURE__*/function (_BaseModel43) {\n  _inherits(NodeStatusResponse, _BaseModel43);\n  var _super43 = _createSuper(NodeStatusResponse);\n  /**\n   * Creates a new `NodeStatusResponse` object.\n   * @param catchupTime - CatchupTime in nanoseconds\n   * @param lastRound - LastRound indicates the last round seen\n   * @param lastVersion - LastVersion indicates the last consensus version supported\n   * @param nextVersion - NextVersion of consensus protocol to use\n   * @param nextVersionRound - NextVersionRound is the round at which the next consensus version will apply\n   * @param nextVersionSupported - NextVersionSupported indicates whether the next consensus version is supported\n   * by this node\n   * @param stoppedAtUnsupportedRound - StoppedAtUnsupportedRound indicates that the node does not support the new\n   * rounds and has stopped making progress\n   * @param timeSinceLastRound - TimeSinceLastRound in nanoseconds\n   * @param catchpoint - The current catchpoint that is being caught up to\n   * @param catchpointAcquiredBlocks - The number of blocks that have already been obtained by the node as part of the\n   * catchup\n   * @param catchpointProcessedAccounts - The number of accounts from the current catchpoint that have been processed so\n   * far as part of the catchup\n   * @param catchpointProcessedKvs - The number of key-values (KVs) from the current catchpoint that have been\n   * processed so far as part of the catchup\n   * @param catchpointTotalAccounts - The total number of accounts included in the current catchpoint\n   * @param catchpointTotalBlocks - The total number of blocks that are required to complete the current catchpoint\n   * catchup\n   * @param catchpointTotalKvs - The total number of key-values (KVs) included in the current catchpoint\n   * @param catchpointVerifiedAccounts - The number of accounts from the current catchpoint that have been verified so\n   * far as part of the catchup\n   * @param catchpointVerifiedKvs - The number of key-values (KVs) from the current catchpoint that have been\n   * verified so far as part of the catchup\n   * @param lastCatchpoint - The last catchpoint seen by the node\n   * @param upgradeDelay - Upgrade delay\n   * @param upgradeNextProtocolVoteBefore - Next protocol round\n   * @param upgradeNoVotes - No votes cast for consensus upgrade\n   * @param upgradeNodeVote - This node's upgrade vote\n   * @param upgradeVoteRounds - Total voting rounds for current upgrade\n   * @param upgradeVotes - Total votes cast for consensus upgrade\n   * @param upgradeVotesRequired - Yes votes required for consensus upgrade\n   * @param upgradeYesVotes - Yes votes cast for consensus upgrade\n   */\n  function NodeStatusResponse(_ref43) {\n    var _this43;\n    var catchupTime = _ref43.catchupTime,\n      lastRound = _ref43.lastRound,\n      lastVersion = _ref43.lastVersion,\n      nextVersion = _ref43.nextVersion,\n      nextVersionRound = _ref43.nextVersionRound,\n      nextVersionSupported = _ref43.nextVersionSupported,\n      stoppedAtUnsupportedRound = _ref43.stoppedAtUnsupportedRound,\n      timeSinceLastRound = _ref43.timeSinceLastRound,\n      catchpoint = _ref43.catchpoint,\n      catchpointAcquiredBlocks = _ref43.catchpointAcquiredBlocks,\n      catchpointProcessedAccounts = _ref43.catchpointProcessedAccounts,\n      catchpointProcessedKvs = _ref43.catchpointProcessedKvs,\n      catchpointTotalAccounts = _ref43.catchpointTotalAccounts,\n      catchpointTotalBlocks = _ref43.catchpointTotalBlocks,\n      catchpointTotalKvs = _ref43.catchpointTotalKvs,\n      catchpointVerifiedAccounts = _ref43.catchpointVerifiedAccounts,\n      catchpointVerifiedKvs = _ref43.catchpointVerifiedKvs,\n      lastCatchpoint = _ref43.lastCatchpoint,\n      upgradeDelay = _ref43.upgradeDelay,\n      upgradeNextProtocolVoteBefore = _ref43.upgradeNextProtocolVoteBefore,\n      upgradeNoVotes = _ref43.upgradeNoVotes,\n      upgradeNodeVote = _ref43.upgradeNodeVote,\n      upgradeVoteRounds = _ref43.upgradeVoteRounds,\n      upgradeVotes = _ref43.upgradeVotes,\n      upgradeVotesRequired = _ref43.upgradeVotesRequired,\n      upgradeYesVotes = _ref43.upgradeYesVotes;\n    _classCallCheck(this, NodeStatusResponse);\n    _this43 = _super43.call(this);\n    _this43.catchupTime = catchupTime;\n    _this43.lastRound = lastRound;\n    _this43.lastVersion = lastVersion;\n    _this43.nextVersion = nextVersion;\n    _this43.nextVersionRound = nextVersionRound;\n    _this43.nextVersionSupported = nextVersionSupported;\n    _this43.stoppedAtUnsupportedRound = stoppedAtUnsupportedRound;\n    _this43.timeSinceLastRound = timeSinceLastRound;\n    _this43.catchpoint = catchpoint;\n    _this43.catchpointAcquiredBlocks = catchpointAcquiredBlocks;\n    _this43.catchpointProcessedAccounts = catchpointProcessedAccounts;\n    _this43.catchpointProcessedKvs = catchpointProcessedKvs;\n    _this43.catchpointTotalAccounts = catchpointTotalAccounts;\n    _this43.catchpointTotalBlocks = catchpointTotalBlocks;\n    _this43.catchpointTotalKvs = catchpointTotalKvs;\n    _this43.catchpointVerifiedAccounts = catchpointVerifiedAccounts;\n    _this43.catchpointVerifiedKvs = catchpointVerifiedKvs;\n    _this43.lastCatchpoint = lastCatchpoint;\n    _this43.upgradeDelay = upgradeDelay;\n    _this43.upgradeNextProtocolVoteBefore = upgradeNextProtocolVoteBefore;\n    _this43.upgradeNoVotes = upgradeNoVotes;\n    _this43.upgradeNodeVote = upgradeNodeVote;\n    _this43.upgradeVoteRounds = upgradeVoteRounds;\n    _this43.upgradeVotes = upgradeVotes;\n    _this43.upgradeVotesRequired = upgradeVotesRequired;\n    _this43.upgradeYesVotes = upgradeYesVotes;\n    _this43.attribute_map = {\n      catchupTime: 'catchup-time',\n      lastRound: 'last-round',\n      lastVersion: 'last-version',\n      nextVersion: 'next-version',\n      nextVersionRound: 'next-version-round',\n      nextVersionSupported: 'next-version-supported',\n      stoppedAtUnsupportedRound: 'stopped-at-unsupported-round',\n      timeSinceLastRound: 'time-since-last-round',\n      catchpoint: 'catchpoint',\n      catchpointAcquiredBlocks: 'catchpoint-acquired-blocks',\n      catchpointProcessedAccounts: 'catchpoint-processed-accounts',\n      catchpointProcessedKvs: 'catchpoint-processed-kvs',\n      catchpointTotalAccounts: 'catchpoint-total-accounts',\n      catchpointTotalBlocks: 'catchpoint-total-blocks',\n      catchpointTotalKvs: 'catchpoint-total-kvs',\n      catchpointVerifiedAccounts: 'catchpoint-verified-accounts',\n      catchpointVerifiedKvs: 'catchpoint-verified-kvs',\n      lastCatchpoint: 'last-catchpoint',\n      upgradeDelay: 'upgrade-delay',\n      upgradeNextProtocolVoteBefore: 'upgrade-next-protocol-vote-before',\n      upgradeNoVotes: 'upgrade-no-votes',\n      upgradeNodeVote: 'upgrade-node-vote',\n      upgradeVoteRounds: 'upgrade-vote-rounds',\n      upgradeVotes: 'upgrade-votes',\n      upgradeVotesRequired: 'upgrade-votes-required',\n      upgradeYesVotes: 'upgrade-yes-votes'\n    };\n    return _this43;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(NodeStatusResponse, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['catchup-time'] === 'undefined') throw new Error(\"Response is missing required field 'catchup-time': \".concat(data));\n      if (typeof data['last-round'] === 'undefined') throw new Error(\"Response is missing required field 'last-round': \".concat(data));\n      if (typeof data['last-version'] === 'undefined') throw new Error(\"Response is missing required field 'last-version': \".concat(data));\n      if (typeof data['next-version'] === 'undefined') throw new Error(\"Response is missing required field 'next-version': \".concat(data));\n      if (typeof data['next-version-round'] === 'undefined') throw new Error(\"Response is missing required field 'next-version-round': \".concat(data));\n      if (typeof data['next-version-supported'] === 'undefined') throw new Error(\"Response is missing required field 'next-version-supported': \".concat(data));\n      if (typeof data['stopped-at-unsupported-round'] === 'undefined') throw new Error(\"Response is missing required field 'stopped-at-unsupported-round': \".concat(data));\n      if (typeof data['time-since-last-round'] === 'undefined') throw new Error(\"Response is missing required field 'time-since-last-round': \".concat(data));\n      return new NodeStatusResponse({\n        catchupTime: data['catchup-time'],\n        lastRound: data['last-round'],\n        lastVersion: data['last-version'],\n        nextVersion: data['next-version'],\n        nextVersionRound: data['next-version-round'],\n        nextVersionSupported: data['next-version-supported'],\n        stoppedAtUnsupportedRound: data['stopped-at-unsupported-round'],\n        timeSinceLastRound: data['time-since-last-round'],\n        catchpoint: data['catchpoint'],\n        catchpointAcquiredBlocks: data['catchpoint-acquired-blocks'],\n        catchpointProcessedAccounts: data['catchpoint-processed-accounts'],\n        catchpointProcessedKvs: data['catchpoint-processed-kvs'],\n        catchpointTotalAccounts: data['catchpoint-total-accounts'],\n        catchpointTotalBlocks: data['catchpoint-total-blocks'],\n        catchpointTotalKvs: data['catchpoint-total-kvs'],\n        catchpointVerifiedAccounts: data['catchpoint-verified-accounts'],\n        catchpointVerifiedKvs: data['catchpoint-verified-kvs'],\n        lastCatchpoint: data['last-catchpoint'],\n        upgradeDelay: data['upgrade-delay'],\n        upgradeNextProtocolVoteBefore: data['upgrade-next-protocol-vote-before'],\n        upgradeNoVotes: data['upgrade-no-votes'],\n        upgradeNodeVote: data['upgrade-node-vote'],\n        upgradeVoteRounds: data['upgrade-vote-rounds'],\n        upgradeVotes: data['upgrade-votes'],\n        upgradeVotesRequired: data['upgrade-votes-required'],\n        upgradeYesVotes: data['upgrade-yes-votes']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return NodeStatusResponse;\n}(BaseModel);\n/**\n * Details about a pending transaction. If the transaction was recently confirmed,\n * includes confirmation details like the round and reward details.\n */\nexport var PendingTransactionResponse = /*#__PURE__*/function (_BaseModel44) {\n  _inherits(PendingTransactionResponse, _BaseModel44);\n  var _super44 = _createSuper(PendingTransactionResponse);\n  /**\n   * Creates a new `PendingTransactionResponse` object.\n   * @param poolError - Indicates that the transaction was kicked out of this node's transaction pool\n   * (and specifies why that happened). An empty string indicates the transaction\n   * wasn't kicked out of this node's txpool due to an error.\n   * @param txn - The raw signed transaction.\n   * @param applicationIndex - The application index if the transaction was found and it created an\n   * application.\n   * @param assetClosingAmount - The number of the asset's unit that were transferred to the close-to address.\n   * @param assetIndex - The asset index if the transaction was found and it created an asset.\n   * @param closeRewards - Rewards in microalgos applied to the close remainder to account.\n   * @param closingAmount - Closing amount for the transaction.\n   * @param confirmedRound - The round where this transaction was confirmed, if present.\n   * @param globalStateDelta - Global state key/value changes for the application being executed by this\n   * transaction.\n   * @param innerTxns - Inner transactions produced by application execution.\n   * @param localStateDelta - Local state key/value changes for the application being executed by this\n   * transaction.\n   * @param logs - Logs for the application being executed by this transaction.\n   * @param receiverRewards - Rewards in microalgos applied to the receiver account.\n   * @param senderRewards - Rewards in microalgos applied to the sender account.\n   */\n  function PendingTransactionResponse(_ref44) {\n    var _this44;\n    var poolError = _ref44.poolError,\n      txn = _ref44.txn,\n      applicationIndex = _ref44.applicationIndex,\n      assetClosingAmount = _ref44.assetClosingAmount,\n      assetIndex = _ref44.assetIndex,\n      closeRewards = _ref44.closeRewards,\n      closingAmount = _ref44.closingAmount,\n      confirmedRound = _ref44.confirmedRound,\n      globalStateDelta = _ref44.globalStateDelta,\n      innerTxns = _ref44.innerTxns,\n      localStateDelta = _ref44.localStateDelta,\n      logs = _ref44.logs,\n      receiverRewards = _ref44.receiverRewards,\n      senderRewards = _ref44.senderRewards;\n    _classCallCheck(this, PendingTransactionResponse);\n    _this44 = _super44.call(this);\n    _this44.poolError = poolError;\n    _this44.txn = txn;\n    _this44.applicationIndex = applicationIndex;\n    _this44.assetClosingAmount = assetClosingAmount;\n    _this44.assetIndex = assetIndex;\n    _this44.closeRewards = closeRewards;\n    _this44.closingAmount = closingAmount;\n    _this44.confirmedRound = confirmedRound;\n    _this44.globalStateDelta = globalStateDelta;\n    _this44.innerTxns = innerTxns;\n    _this44.localStateDelta = localStateDelta;\n    _this44.logs = logs;\n    _this44.receiverRewards = receiverRewards;\n    _this44.senderRewards = senderRewards;\n    _this44.attribute_map = {\n      poolError: 'pool-error',\n      txn: 'txn',\n      applicationIndex: 'application-index',\n      assetClosingAmount: 'asset-closing-amount',\n      assetIndex: 'asset-index',\n      closeRewards: 'close-rewards',\n      closingAmount: 'closing-amount',\n      confirmedRound: 'confirmed-round',\n      globalStateDelta: 'global-state-delta',\n      innerTxns: 'inner-txns',\n      localStateDelta: 'local-state-delta',\n      logs: 'logs',\n      receiverRewards: 'receiver-rewards',\n      senderRewards: 'sender-rewards'\n    };\n    return _this44;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(PendingTransactionResponse, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['pool-error'] === 'undefined') throw new Error(\"Response is missing required field 'pool-error': \".concat(data));\n      if (typeof data['txn'] === 'undefined') throw new Error(\"Response is missing required field 'txn': \".concat(data));\n      return new PendingTransactionResponse({\n        poolError: data['pool-error'],\n        txn: data['txn'],\n        applicationIndex: data['application-index'],\n        assetClosingAmount: data['asset-closing-amount'],\n        assetIndex: data['asset-index'],\n        closeRewards: data['close-rewards'],\n        closingAmount: data['closing-amount'],\n        confirmedRound: data['confirmed-round'],\n        globalStateDelta: typeof data['global-state-delta'] !== 'undefined' ? data['global-state-delta'].map(EvalDeltaKeyValue.from_obj_for_encoding) : undefined,\n        innerTxns: typeof data['inner-txns'] !== 'undefined' ? data['inner-txns'].map(PendingTransactionResponse.from_obj_for_encoding) : undefined,\n        localStateDelta: typeof data['local-state-delta'] !== 'undefined' ? data['local-state-delta'].map(AccountStateDelta.from_obj_for_encoding) : undefined,\n        logs: data['logs'],\n        receiverRewards: data['receiver-rewards'],\n        senderRewards: data['sender-rewards']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return PendingTransactionResponse;\n}(BaseModel);\n/**\n * A potentially truncated list of transactions currently in the node's transaction\n * pool. You can compute whether or not the list is truncated if the number of\n * elements in the **top-transactions** array is fewer than **total-transactions**.\n */\nexport var PendingTransactionsResponse = /*#__PURE__*/function (_BaseModel45) {\n  _inherits(PendingTransactionsResponse, _BaseModel45);\n  var _super45 = _createSuper(PendingTransactionsResponse);\n  /**\n   * Creates a new `PendingTransactionsResponse` object.\n   * @param topTransactions - An array of signed transaction objects.\n   * @param totalTransactions - Total number of transactions in the pool.\n   */\n  function PendingTransactionsResponse(_ref45) {\n    var _this45;\n    var topTransactions = _ref45.topTransactions,\n      totalTransactions = _ref45.totalTransactions;\n    _classCallCheck(this, PendingTransactionsResponse);\n    _this45 = _super45.call(this);\n    _this45.topTransactions = topTransactions;\n    _this45.totalTransactions = totalTransactions;\n    _this45.attribute_map = {\n      topTransactions: 'top-transactions',\n      totalTransactions: 'total-transactions'\n    };\n    return _this45;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(PendingTransactionsResponse, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (!Array.isArray(data['top-transactions'])) throw new Error(\"Response is missing required array field 'top-transactions': \".concat(data));\n      if (typeof data['total-transactions'] === 'undefined') throw new Error(\"Response is missing required field 'total-transactions': \".concat(data));\n      return new PendingTransactionsResponse({\n        topTransactions: data['top-transactions'],\n        totalTransactions: data['total-transactions']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return PendingTransactionsResponse;\n}(BaseModel);\n/**\n * Transaction ID of the submission.\n */\nexport var PostTransactionsResponse = /*#__PURE__*/function (_BaseModel46) {\n  _inherits(PostTransactionsResponse, _BaseModel46);\n  var _super46 = _createSuper(PostTransactionsResponse);\n  /**\n   * Creates a new `PostTransactionsResponse` object.\n   * @param txid - encoding of the transaction hash.\n   */\n  function PostTransactionsResponse(_ref46) {\n    var _this46;\n    var txid = _ref46.txid;\n    _classCallCheck(this, PostTransactionsResponse);\n    _this46 = _super46.call(this);\n    _this46.txid = txid;\n    _this46.attribute_map = {\n      txid: 'txId'\n    };\n    return _this46;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(PostTransactionsResponse, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['txId'] === 'undefined') throw new Error(\"Response is missing required field 'txId': \".concat(data));\n      return new PostTransactionsResponse({\n        txid: data['txId']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return PostTransactionsResponse;\n}(BaseModel);\n/**\n * A write operation into a scratch slot.\n */\nexport var ScratchChange = /*#__PURE__*/function (_BaseModel47) {\n  _inherits(ScratchChange, _BaseModel47);\n  var _super47 = _createSuper(ScratchChange);\n  /**\n   * Creates a new `ScratchChange` object.\n   * @param newValue - Represents an AVM value.\n   * @param slot - The scratch slot written.\n   */\n  function ScratchChange(_ref47) {\n    var _this47;\n    var newValue = _ref47.newValue,\n      slot = _ref47.slot;\n    _classCallCheck(this, ScratchChange);\n    _this47 = _super47.call(this);\n    _this47.newValue = newValue;\n    _this47.slot = slot;\n    _this47.attribute_map = {\n      newValue: 'new-value',\n      slot: 'slot'\n    };\n    return _this47;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(ScratchChange, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['new-value'] === 'undefined') throw new Error(\"Response is missing required field 'new-value': \".concat(data));\n      if (typeof data['slot'] === 'undefined') throw new Error(\"Response is missing required field 'slot': \".concat(data));\n      return new ScratchChange({\n        newValue: AvmValue.from_obj_for_encoding(data['new-value']),\n        slot: data['slot']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return ScratchChange;\n}(BaseModel);\n/**\n * Initial states of resources that were accessed during simulation.\n */\nexport var SimulateInitialStates = /*#__PURE__*/function (_BaseModel48) {\n  _inherits(SimulateInitialStates, _BaseModel48);\n  var _super48 = _createSuper(SimulateInitialStates);\n  /**\n   * Creates a new `SimulateInitialStates` object.\n   * @param appInitialStates - The initial states of accessed application before simulation. The order of this\n   * array is arbitrary.\n   */\n  function SimulateInitialStates(_ref48) {\n    var _this48;\n    var appInitialStates = _ref48.appInitialStates;\n    _classCallCheck(this, SimulateInitialStates);\n    _this48 = _super48.call(this);\n    _this48.appInitialStates = appInitialStates;\n    _this48.attribute_map = {\n      appInitialStates: 'app-initial-states'\n    };\n    return _this48;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(SimulateInitialStates, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      return new SimulateInitialStates({\n        appInitialStates: typeof data['app-initial-states'] !== 'undefined' ? data['app-initial-states'].map(ApplicationInitialStates.from_obj_for_encoding) : undefined\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return SimulateInitialStates;\n}(BaseModel);\n/**\n * Request type for simulation endpoint.\n */\nexport var SimulateRequest = /*#__PURE__*/function (_BaseModel49) {\n  _inherits(SimulateRequest, _BaseModel49);\n  var _super49 = _createSuper(SimulateRequest);\n  /**\n   * Creates a new `SimulateRequest` object.\n   * @param txnGroups - The transaction groups to simulate.\n   * @param allowEmptySignatures - Allows transactions without signatures to be simulated as if they had correct\n   * signatures.\n   * @param allowMoreLogging - Lifts limits on log opcode usage during simulation.\n   * @param allowUnnamedResources - Allows access to unnamed resources during simulation.\n   * @param execTraceConfig - An object that configures simulation execution trace.\n   * @param extraOpcodeBudget - Applies extra opcode budget during simulation for each transaction group.\n   * @param round - If provided, specifies the round preceding the simulation. State changes through\n   * this round will be used to run this simulation. Usually only the 4 most recent\n   * rounds will be available (controlled by the node config value MaxAcctLookback).\n   * If not specified, defaults to the latest available round.\n   */\n  function SimulateRequest(_ref49) {\n    var _this49;\n    var txnGroups = _ref49.txnGroups,\n      allowEmptySignatures = _ref49.allowEmptySignatures,\n      allowMoreLogging = _ref49.allowMoreLogging,\n      allowUnnamedResources = _ref49.allowUnnamedResources,\n      execTraceConfig = _ref49.execTraceConfig,\n      extraOpcodeBudget = _ref49.extraOpcodeBudget,\n      round = _ref49.round;\n    _classCallCheck(this, SimulateRequest);\n    _this49 = _super49.call(this);\n    _this49.txnGroups = txnGroups;\n    _this49.allowEmptySignatures = allowEmptySignatures;\n    _this49.allowMoreLogging = allowMoreLogging;\n    _this49.allowUnnamedResources = allowUnnamedResources;\n    _this49.execTraceConfig = execTraceConfig;\n    _this49.extraOpcodeBudget = extraOpcodeBudget;\n    _this49.round = round;\n    _this49.attribute_map = {\n      txnGroups: 'txn-groups',\n      allowEmptySignatures: 'allow-empty-signatures',\n      allowMoreLogging: 'allow-more-logging',\n      allowUnnamedResources: 'allow-unnamed-resources',\n      execTraceConfig: 'exec-trace-config',\n      extraOpcodeBudget: 'extra-opcode-budget',\n      round: 'round'\n    };\n    return _this49;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(SimulateRequest, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (!Array.isArray(data['txn-groups'])) throw new Error(\"Response is missing required array field 'txn-groups': \".concat(data));\n      return new SimulateRequest({\n        txnGroups: data['txn-groups'].map(SimulateRequestTransactionGroup.from_obj_for_encoding),\n        allowEmptySignatures: data['allow-empty-signatures'],\n        allowMoreLogging: data['allow-more-logging'],\n        allowUnnamedResources: data['allow-unnamed-resources'],\n        execTraceConfig: typeof data['exec-trace-config'] !== 'undefined' ? SimulateTraceConfig.from_obj_for_encoding(data['exec-trace-config']) : undefined,\n        extraOpcodeBudget: data['extra-opcode-budget'],\n        round: data['round']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return SimulateRequest;\n}(BaseModel);\n/**\n * A transaction group to simulate.\n */\nexport var SimulateRequestTransactionGroup = /*#__PURE__*/function (_BaseModel50) {\n  _inherits(SimulateRequestTransactionGroup, _BaseModel50);\n  var _super50 = _createSuper(SimulateRequestTransactionGroup);\n  /**\n   * Creates a new `SimulateRequestTransactionGroup` object.\n   * @param txns - An atomic transaction group.\n   */\n  function SimulateRequestTransactionGroup(_ref50) {\n    var _this50;\n    var txns = _ref50.txns;\n    _classCallCheck(this, SimulateRequestTransactionGroup);\n    _this50 = _super50.call(this);\n    _this50.txns = txns;\n    _this50.attribute_map = {\n      txns: 'txns'\n    };\n    return _this50;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(SimulateRequestTransactionGroup, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (!Array.isArray(data['txns'])) throw new Error(\"Response is missing required array field 'txns': \".concat(data));\n      return new SimulateRequestTransactionGroup({\n        txns: data['txns']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return SimulateRequestTransactionGroup;\n}(BaseModel);\n/**\n * Result of a transaction group simulation.\n */\nexport var SimulateResponse = /*#__PURE__*/function (_BaseModel51) {\n  _inherits(SimulateResponse, _BaseModel51);\n  var _super51 = _createSuper(SimulateResponse);\n  /**\n   * Creates a new `SimulateResponse` object.\n   * @param lastRound - The round immediately preceding this simulation. State changes through this\n   * round were used to run this simulation.\n   * @param txnGroups - A result object for each transaction group that was simulated.\n   * @param version - The version of this response object.\n   * @param evalOverrides - The set of parameters and limits override during simulation. If this set of\n   * parameters is present, then evaluation parameters may differ from standard\n   * evaluation in certain ways.\n   * @param execTraceConfig - An object that configures simulation execution trace.\n   * @param initialStates - Initial states of resources that were accessed during simulation.\n   */\n  function SimulateResponse(_ref51) {\n    var _this51;\n    var lastRound = _ref51.lastRound,\n      txnGroups = _ref51.txnGroups,\n      version = _ref51.version,\n      evalOverrides = _ref51.evalOverrides,\n      execTraceConfig = _ref51.execTraceConfig,\n      initialStates = _ref51.initialStates;\n    _classCallCheck(this, SimulateResponse);\n    _this51 = _super51.call(this);\n    _this51.lastRound = lastRound;\n    _this51.txnGroups = txnGroups;\n    _this51.version = version;\n    _this51.evalOverrides = evalOverrides;\n    _this51.execTraceConfig = execTraceConfig;\n    _this51.initialStates = initialStates;\n    _this51.attribute_map = {\n      lastRound: 'last-round',\n      txnGroups: 'txn-groups',\n      version: 'version',\n      evalOverrides: 'eval-overrides',\n      execTraceConfig: 'exec-trace-config',\n      initialStates: 'initial-states'\n    };\n    return _this51;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(SimulateResponse, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['last-round'] === 'undefined') throw new Error(\"Response is missing required field 'last-round': \".concat(data));\n      if (!Array.isArray(data['txn-groups'])) throw new Error(\"Response is missing required array field 'txn-groups': \".concat(data));\n      if (typeof data['version'] === 'undefined') throw new Error(\"Response is missing required field 'version': \".concat(data));\n      return new SimulateResponse({\n        lastRound: data['last-round'],\n        txnGroups: data['txn-groups'].map(SimulateTransactionGroupResult.from_obj_for_encoding),\n        version: data['version'],\n        evalOverrides: typeof data['eval-overrides'] !== 'undefined' ? SimulationEvalOverrides.from_obj_for_encoding(data['eval-overrides']) : undefined,\n        execTraceConfig: typeof data['exec-trace-config'] !== 'undefined' ? SimulateTraceConfig.from_obj_for_encoding(data['exec-trace-config']) : undefined,\n        initialStates: typeof data['initial-states'] !== 'undefined' ? SimulateInitialStates.from_obj_for_encoding(data['initial-states']) : undefined\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return SimulateResponse;\n}(BaseModel);\n/**\n * An object that configures simulation execution trace.\n */\nexport var SimulateTraceConfig = /*#__PURE__*/function (_BaseModel52) {\n  _inherits(SimulateTraceConfig, _BaseModel52);\n  var _super52 = _createSuper(SimulateTraceConfig);\n  /**\n   * Creates a new `SimulateTraceConfig` object.\n   * @param enable - A boolean option for opting in execution trace features simulation endpoint.\n   * @param scratchChange - A boolean option enabling returning scratch slot changes together with execution\n   * trace during simulation.\n   * @param stackChange - A boolean option enabling returning stack changes together with execution trace\n   * during simulation.\n   * @param stateChange - A boolean option enabling returning application state changes (global, local,\n   * and box changes) with the execution trace during simulation.\n   */\n  function SimulateTraceConfig(_ref52) {\n    var _this52;\n    var enable = _ref52.enable,\n      scratchChange = _ref52.scratchChange,\n      stackChange = _ref52.stackChange,\n      stateChange = _ref52.stateChange;\n    _classCallCheck(this, SimulateTraceConfig);\n    _this52 = _super52.call(this);\n    _this52.enable = enable;\n    _this52.scratchChange = scratchChange;\n    _this52.stackChange = stackChange;\n    _this52.stateChange = stateChange;\n    _this52.attribute_map = {\n      enable: 'enable',\n      scratchChange: 'scratch-change',\n      stackChange: 'stack-change',\n      stateChange: 'state-change'\n    };\n    return _this52;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(SimulateTraceConfig, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      return new SimulateTraceConfig({\n        enable: data['enable'],\n        scratchChange: data['scratch-change'],\n        stackChange: data['stack-change'],\n        stateChange: data['state-change']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return SimulateTraceConfig;\n}(BaseModel);\n/**\n * Simulation result for an atomic transaction group\n */\nexport var SimulateTransactionGroupResult = /*#__PURE__*/function (_BaseModel53) {\n  _inherits(SimulateTransactionGroupResult, _BaseModel53);\n  var _super53 = _createSuper(SimulateTransactionGroupResult);\n  /**\n   * Creates a new `SimulateTransactionGroupResult` object.\n   * @param txnResults - Simulation result for individual transactions\n   * @param appBudgetAdded - Total budget added during execution of app calls in the transaction group.\n   * @param appBudgetConsumed - Total budget consumed during execution of app calls in the transaction group.\n   * @param failedAt - If present, indicates which transaction in this group caused the failure. This\n   * array represents the path to the failing transaction. Indexes are zero based,\n   * the first element indicates the top-level transaction, and successive elements\n   * indicate deeper inner transactions.\n   * @param failureMessage - If present, indicates that the transaction group failed and specifies why that\n   * happened\n   * @param unnamedResourcesAccessed - These are resources that were accessed by this group that would normally have\n   * caused failure, but were allowed in simulation. Depending on where this object\n   * is in the response, the unnamed resources it contains may or may not qualify for\n   * group resource sharing. If this is a field in SimulateTransactionGroupResult,\n   * the resources do qualify, but if this is a field in SimulateTransactionResult,\n   * they do not qualify. In order to make this group valid for actual submission,\n   * resources that qualify for group sharing can be made available by any\n   * transaction of the group; otherwise, resources must be placed in the same\n   * transaction which accessed them.\n   */\n  function SimulateTransactionGroupResult(_ref53) {\n    var _this53;\n    var txnResults = _ref53.txnResults,\n      appBudgetAdded = _ref53.appBudgetAdded,\n      appBudgetConsumed = _ref53.appBudgetConsumed,\n      failedAt = _ref53.failedAt,\n      failureMessage = _ref53.failureMessage,\n      unnamedResourcesAccessed = _ref53.unnamedResourcesAccessed;\n    _classCallCheck(this, SimulateTransactionGroupResult);\n    _this53 = _super53.call(this);\n    _this53.txnResults = txnResults;\n    _this53.appBudgetAdded = appBudgetAdded;\n    _this53.appBudgetConsumed = appBudgetConsumed;\n    _this53.failedAt = failedAt;\n    _this53.failureMessage = failureMessage;\n    _this53.unnamedResourcesAccessed = unnamedResourcesAccessed;\n    _this53.attribute_map = {\n      txnResults: 'txn-results',\n      appBudgetAdded: 'app-budget-added',\n      appBudgetConsumed: 'app-budget-consumed',\n      failedAt: 'failed-at',\n      failureMessage: 'failure-message',\n      unnamedResourcesAccessed: 'unnamed-resources-accessed'\n    };\n    return _this53;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(SimulateTransactionGroupResult, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (!Array.isArray(data['txn-results'])) throw new Error(\"Response is missing required array field 'txn-results': \".concat(data));\n      return new SimulateTransactionGroupResult({\n        txnResults: data['txn-results'].map(SimulateTransactionResult.from_obj_for_encoding),\n        appBudgetAdded: data['app-budget-added'],\n        appBudgetConsumed: data['app-budget-consumed'],\n        failedAt: data['failed-at'],\n        failureMessage: data['failure-message'],\n        unnamedResourcesAccessed: typeof data['unnamed-resources-accessed'] !== 'undefined' ? SimulateUnnamedResourcesAccessed.from_obj_for_encoding(data['unnamed-resources-accessed']) : undefined\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return SimulateTransactionGroupResult;\n}(BaseModel);\n/**\n * Simulation result for an individual transaction\n */\nexport var SimulateTransactionResult = /*#__PURE__*/function (_BaseModel54) {\n  _inherits(SimulateTransactionResult, _BaseModel54);\n  var _super54 = _createSuper(SimulateTransactionResult);\n  /**\n   * Creates a new `SimulateTransactionResult` object.\n   * @param txnResult - Details about a pending transaction. If the transaction was recently confirmed,\n   * includes confirmation details like the round and reward details.\n   * @param appBudgetConsumed - Budget used during execution of an app call transaction. This value includes\n   * budged used by inner app calls spawned by this transaction.\n   * @param execTrace - The execution trace of calling an app or a logic sig, containing the inner app\n   * call trace in a recursive way.\n   * @param logicSigBudgetConsumed - Budget used during execution of a logic sig transaction.\n   * @param unnamedResourcesAccessed - These are resources that were accessed by this group that would normally have\n   * caused failure, but were allowed in simulation. Depending on where this object\n   * is in the response, the unnamed resources it contains may or may not qualify for\n   * group resource sharing. If this is a field in SimulateTransactionGroupResult,\n   * the resources do qualify, but if this is a field in SimulateTransactionResult,\n   * they do not qualify. In order to make this group valid for actual submission,\n   * resources that qualify for group sharing can be made available by any\n   * transaction of the group; otherwise, resources must be placed in the same\n   * transaction which accessed them.\n   */\n  function SimulateTransactionResult(_ref54) {\n    var _this54;\n    var txnResult = _ref54.txnResult,\n      appBudgetConsumed = _ref54.appBudgetConsumed,\n      execTrace = _ref54.execTrace,\n      logicSigBudgetConsumed = _ref54.logicSigBudgetConsumed,\n      unnamedResourcesAccessed = _ref54.unnamedResourcesAccessed;\n    _classCallCheck(this, SimulateTransactionResult);\n    _this54 = _super54.call(this);\n    _this54.txnResult = txnResult;\n    _this54.appBudgetConsumed = appBudgetConsumed;\n    _this54.execTrace = execTrace;\n    _this54.logicSigBudgetConsumed = logicSigBudgetConsumed;\n    _this54.unnamedResourcesAccessed = unnamedResourcesAccessed;\n    _this54.attribute_map = {\n      txnResult: 'txn-result',\n      appBudgetConsumed: 'app-budget-consumed',\n      execTrace: 'exec-trace',\n      logicSigBudgetConsumed: 'logic-sig-budget-consumed',\n      unnamedResourcesAccessed: 'unnamed-resources-accessed'\n    };\n    return _this54;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(SimulateTransactionResult, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['txn-result'] === 'undefined') throw new Error(\"Response is missing required field 'txn-result': \".concat(data));\n      return new SimulateTransactionResult({\n        txnResult: PendingTransactionResponse.from_obj_for_encoding(data['txn-result']),\n        appBudgetConsumed: data['app-budget-consumed'],\n        execTrace: typeof data['exec-trace'] !== 'undefined' ? SimulationTransactionExecTrace.from_obj_for_encoding(data['exec-trace']) : undefined,\n        logicSigBudgetConsumed: data['logic-sig-budget-consumed'],\n        unnamedResourcesAccessed: typeof data['unnamed-resources-accessed'] !== 'undefined' ? SimulateUnnamedResourcesAccessed.from_obj_for_encoding(data['unnamed-resources-accessed']) : undefined\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return SimulateTransactionResult;\n}(BaseModel);\n/**\n * These are resources that were accessed by this group that would normally have\n * caused failure, but were allowed in simulation. Depending on where this object\n * is in the response, the unnamed resources it contains may or may not qualify for\n * group resource sharing. If this is a field in SimulateTransactionGroupResult,\n * the resources do qualify, but if this is a field in SimulateTransactionResult,\n * they do not qualify. In order to make this group valid for actual submission,\n * resources that qualify for group sharing can be made available by any\n * transaction of the group; otherwise, resources must be placed in the same\n * transaction which accessed them.\n */\nexport var SimulateUnnamedResourcesAccessed = /*#__PURE__*/function (_BaseModel55) {\n  _inherits(SimulateUnnamedResourcesAccessed, _BaseModel55);\n  var _super55 = _createSuper(SimulateUnnamedResourcesAccessed);\n  /**\n   * Creates a new `SimulateUnnamedResourcesAccessed` object.\n   * @param accounts - The unnamed accounts that were referenced. The order of this array is arbitrary.\n   * @param appLocals - The unnamed application local states that were referenced. The order of this\n   * array is arbitrary.\n   * @param apps - The unnamed applications that were referenced. The order of this array is\n   * arbitrary.\n   * @param assetHoldings - The unnamed asset holdings that were referenced. The order of this array is\n   * arbitrary.\n   * @param assets - The unnamed assets that were referenced. The order of this array is arbitrary.\n   * @param boxes - The unnamed boxes that were referenced. The order of this array is arbitrary.\n   * @param extraBoxRefs - The number of extra box references used to increase the IO budget. This is in\n   * addition to the references defined in the input transaction group and any\n   * referenced to unnamed boxes.\n   */\n  function SimulateUnnamedResourcesAccessed(_ref55) {\n    var _this55;\n    var accounts = _ref55.accounts,\n      appLocals = _ref55.appLocals,\n      apps = _ref55.apps,\n      assetHoldings = _ref55.assetHoldings,\n      assets = _ref55.assets,\n      boxes = _ref55.boxes,\n      extraBoxRefs = _ref55.extraBoxRefs;\n    _classCallCheck(this, SimulateUnnamedResourcesAccessed);\n    _this55 = _super55.call(this);\n    _this55.accounts = accounts;\n    _this55.appLocals = appLocals;\n    _this55.apps = apps;\n    _this55.assetHoldings = assetHoldings;\n    _this55.assets = assets;\n    _this55.boxes = boxes;\n    _this55.extraBoxRefs = extraBoxRefs;\n    _this55.attribute_map = {\n      accounts: 'accounts',\n      appLocals: 'app-locals',\n      apps: 'apps',\n      assetHoldings: 'asset-holdings',\n      assets: 'assets',\n      boxes: 'boxes',\n      extraBoxRefs: 'extra-box-refs'\n    };\n    return _this55;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(SimulateUnnamedResourcesAccessed, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      return new SimulateUnnamedResourcesAccessed({\n        accounts: data['accounts'],\n        appLocals: typeof data['app-locals'] !== 'undefined' ? data['app-locals'].map(ApplicationLocalReference.from_obj_for_encoding) : undefined,\n        apps: data['apps'],\n        assetHoldings: typeof data['asset-holdings'] !== 'undefined' ? data['asset-holdings'].map(AssetHoldingReference.from_obj_for_encoding) : undefined,\n        assets: data['assets'],\n        boxes: typeof data['boxes'] !== 'undefined' ? data['boxes'].map(BoxReference.from_obj_for_encoding) : undefined,\n        extraBoxRefs: data['extra-box-refs']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return SimulateUnnamedResourcesAccessed;\n}(BaseModel);\n/**\n * The set of parameters and limits override during simulation. If this set of\n * parameters is present, then evaluation parameters may differ from standard\n * evaluation in certain ways.\n */\nexport var SimulationEvalOverrides = /*#__PURE__*/function (_BaseModel56) {\n  _inherits(SimulationEvalOverrides, _BaseModel56);\n  var _super56 = _createSuper(SimulationEvalOverrides);\n  /**\n   * Creates a new `SimulationEvalOverrides` object.\n   * @param allowEmptySignatures - If true, transactions without signatures are allowed and simulated as if they\n   * were properly signed.\n   * @param allowUnnamedResources - If true, allows access to unnamed resources during simulation.\n   * @param extraOpcodeBudget - The extra opcode budget added to each transaction group during simulation\n   * @param maxLogCalls - The maximum log calls one can make during simulation\n   * @param maxLogSize - The maximum byte number to log during simulation\n   */\n  function SimulationEvalOverrides(_ref56) {\n    var _this56;\n    var allowEmptySignatures = _ref56.allowEmptySignatures,\n      allowUnnamedResources = _ref56.allowUnnamedResources,\n      extraOpcodeBudget = _ref56.extraOpcodeBudget,\n      maxLogCalls = _ref56.maxLogCalls,\n      maxLogSize = _ref56.maxLogSize;\n    _classCallCheck(this, SimulationEvalOverrides);\n    _this56 = _super56.call(this);\n    _this56.allowEmptySignatures = allowEmptySignatures;\n    _this56.allowUnnamedResources = allowUnnamedResources;\n    _this56.extraOpcodeBudget = extraOpcodeBudget;\n    _this56.maxLogCalls = maxLogCalls;\n    _this56.maxLogSize = maxLogSize;\n    _this56.attribute_map = {\n      allowEmptySignatures: 'allow-empty-signatures',\n      allowUnnamedResources: 'allow-unnamed-resources',\n      extraOpcodeBudget: 'extra-opcode-budget',\n      maxLogCalls: 'max-log-calls',\n      maxLogSize: 'max-log-size'\n    };\n    return _this56;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(SimulationEvalOverrides, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      return new SimulationEvalOverrides({\n        allowEmptySignatures: data['allow-empty-signatures'],\n        allowUnnamedResources: data['allow-unnamed-resources'],\n        extraOpcodeBudget: data['extra-opcode-budget'],\n        maxLogCalls: data['max-log-calls'],\n        maxLogSize: data['max-log-size']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return SimulationEvalOverrides;\n}(BaseModel);\n/**\n * The set of trace information and effect from evaluating a single opcode.\n */\nexport var SimulationOpcodeTraceUnit = /*#__PURE__*/function (_BaseModel57) {\n  _inherits(SimulationOpcodeTraceUnit, _BaseModel57);\n  var _super57 = _createSuper(SimulationOpcodeTraceUnit);\n  /**\n   * Creates a new `SimulationOpcodeTraceUnit` object.\n   * @param pc - The program counter of the current opcode being evaluated.\n   * @param scratchChanges - The writes into scratch slots.\n   * @param spawnedInners - The indexes of the traces for inner transactions spawned by this opcode, if any.\n   * @param stackAdditions - The values added by this opcode to the stack.\n   * @param stackPopCount - The number of deleted stack values by this opcode.\n   * @param stateChanges - The operations against the current application's states.\n   */\n  function SimulationOpcodeTraceUnit(_ref57) {\n    var _this57;\n    var pc = _ref57.pc,\n      scratchChanges = _ref57.scratchChanges,\n      spawnedInners = _ref57.spawnedInners,\n      stackAdditions = _ref57.stackAdditions,\n      stackPopCount = _ref57.stackPopCount,\n      stateChanges = _ref57.stateChanges;\n    _classCallCheck(this, SimulationOpcodeTraceUnit);\n    _this57 = _super57.call(this);\n    _this57.pc = pc;\n    _this57.scratchChanges = scratchChanges;\n    _this57.spawnedInners = spawnedInners;\n    _this57.stackAdditions = stackAdditions;\n    _this57.stackPopCount = stackPopCount;\n    _this57.stateChanges = stateChanges;\n    _this57.attribute_map = {\n      pc: 'pc',\n      scratchChanges: 'scratch-changes',\n      spawnedInners: 'spawned-inners',\n      stackAdditions: 'stack-additions',\n      stackPopCount: 'stack-pop-count',\n      stateChanges: 'state-changes'\n    };\n    return _this57;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(SimulationOpcodeTraceUnit, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['pc'] === 'undefined') throw new Error(\"Response is missing required field 'pc': \".concat(data));\n      return new SimulationOpcodeTraceUnit({\n        pc: data['pc'],\n        scratchChanges: typeof data['scratch-changes'] !== 'undefined' ? data['scratch-changes'].map(ScratchChange.from_obj_for_encoding) : undefined,\n        spawnedInners: data['spawned-inners'],\n        stackAdditions: typeof data['stack-additions'] !== 'undefined' ? data['stack-additions'].map(AvmValue.from_obj_for_encoding) : undefined,\n        stackPopCount: data['stack-pop-count'],\n        stateChanges: typeof data['state-changes'] !== 'undefined' ? data['state-changes'].map(ApplicationStateOperation.from_obj_for_encoding) : undefined\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return SimulationOpcodeTraceUnit;\n}(BaseModel);\n/**\n * The execution trace of calling an app or a logic sig, containing the inner app\n * call trace in a recursive way.\n */\nexport var SimulationTransactionExecTrace = /*#__PURE__*/function (_BaseModel58) {\n  _inherits(SimulationTransactionExecTrace, _BaseModel58);\n  var _super58 = _createSuper(SimulationTransactionExecTrace);\n  /**\n   * Creates a new `SimulationTransactionExecTrace` object.\n   * @param approvalProgramHash - SHA512_256 hash digest of the approval program executed in transaction.\n   * @param approvalProgramTrace - Program trace that contains a trace of opcode effects in an approval program.\n   * @param clearStateProgramHash - SHA512_256 hash digest of the clear state program executed in transaction.\n   * @param clearStateProgramTrace - Program trace that contains a trace of opcode effects in a clear state program.\n   * @param innerTrace - An array of SimulationTransactionExecTrace representing the execution trace of\n   * any inner transactions executed.\n   * @param logicSigHash - SHA512_256 hash digest of the logic sig executed in transaction.\n   * @param logicSigTrace - Program trace that contains a trace of opcode effects in a logic sig.\n   */\n  function SimulationTransactionExecTrace(_ref58) {\n    var _this58;\n    var approvalProgramHash = _ref58.approvalProgramHash,\n      approvalProgramTrace = _ref58.approvalProgramTrace,\n      clearStateProgramHash = _ref58.clearStateProgramHash,\n      clearStateProgramTrace = _ref58.clearStateProgramTrace,\n      innerTrace = _ref58.innerTrace,\n      logicSigHash = _ref58.logicSigHash,\n      logicSigTrace = _ref58.logicSigTrace;\n    _classCallCheck(this, SimulationTransactionExecTrace);\n    _this58 = _super58.call(this);\n    _this58.approvalProgramHash = typeof approvalProgramHash === 'string' ? new Uint8Array(Buffer.from(approvalProgramHash, 'base64')) : approvalProgramHash;\n    _this58.approvalProgramTrace = approvalProgramTrace;\n    _this58.clearStateProgramHash = typeof clearStateProgramHash === 'string' ? new Uint8Array(Buffer.from(clearStateProgramHash, 'base64')) : clearStateProgramHash;\n    _this58.clearStateProgramTrace = clearStateProgramTrace;\n    _this58.innerTrace = innerTrace;\n    _this58.logicSigHash = typeof logicSigHash === 'string' ? new Uint8Array(Buffer.from(logicSigHash, 'base64')) : logicSigHash;\n    _this58.logicSigTrace = logicSigTrace;\n    _this58.attribute_map = {\n      approvalProgramHash: 'approval-program-hash',\n      approvalProgramTrace: 'approval-program-trace',\n      clearStateProgramHash: 'clear-state-program-hash',\n      clearStateProgramTrace: 'clear-state-program-trace',\n      innerTrace: 'inner-trace',\n      logicSigHash: 'logic-sig-hash',\n      logicSigTrace: 'logic-sig-trace'\n    };\n    return _this58;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(SimulationTransactionExecTrace, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      return new SimulationTransactionExecTrace({\n        approvalProgramHash: data['approval-program-hash'],\n        approvalProgramTrace: typeof data['approval-program-trace'] !== 'undefined' ? data['approval-program-trace'].map(SimulationOpcodeTraceUnit.from_obj_for_encoding) : undefined,\n        clearStateProgramHash: data['clear-state-program-hash'],\n        clearStateProgramTrace: typeof data['clear-state-program-trace'] !== 'undefined' ? data['clear-state-program-trace'].map(SimulationOpcodeTraceUnit.from_obj_for_encoding) : undefined,\n        innerTrace: typeof data['inner-trace'] !== 'undefined' ? data['inner-trace'].map(SimulationTransactionExecTrace.from_obj_for_encoding) : undefined,\n        logicSigHash: data['logic-sig-hash'],\n        logicSigTrace: typeof data['logic-sig-trace'] !== 'undefined' ? data['logic-sig-trace'].map(SimulationOpcodeTraceUnit.from_obj_for_encoding) : undefined\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return SimulationTransactionExecTrace;\n}(BaseModel);\n/**\n * Represents a state proof and its corresponding message\n */\nexport var StateProof = /*#__PURE__*/function (_BaseModel59) {\n  _inherits(StateProof, _BaseModel59);\n  var _super59 = _createSuper(StateProof);\n  /**\n   * Creates a new `StateProof` object.\n   * @param message - Represents the message that the state proofs are attesting to.\n   * @param stateproof - The encoded StateProof for the message.\n   */\n  function StateProof(_ref59) {\n    var _this59;\n    var message = _ref59.message,\n      stateproof = _ref59.stateproof;\n    _classCallCheck(this, StateProof);\n    _this59 = _super59.call(this);\n    _this59.message = message;\n    _this59.stateproof = typeof stateproof === 'string' ? new Uint8Array(Buffer.from(stateproof, 'base64')) : stateproof;\n    _this59.attribute_map = {\n      message: 'Message',\n      stateproof: 'StateProof'\n    };\n    return _this59;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(StateProof, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['Message'] === 'undefined') throw new Error(\"Response is missing required field 'Message': \".concat(data));\n      if (typeof data['StateProof'] === 'undefined') throw new Error(\"Response is missing required field 'StateProof': \".concat(data));\n      return new StateProof({\n        message: StateProofMessage.from_obj_for_encoding(data['Message']),\n        stateproof: data['StateProof']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return StateProof;\n}(BaseModel);\n/**\n * Represents the message that the state proofs are attesting to.\n */\nexport var StateProofMessage = /*#__PURE__*/function (_BaseModel60) {\n  _inherits(StateProofMessage, _BaseModel60);\n  var _super60 = _createSuper(StateProofMessage);\n  /**\n   * Creates a new `StateProofMessage` object.\n   * @param blockheaderscommitment - The vector commitment root on all light block headers within a state proof\n   * interval.\n   * @param firstattestedround - The first round the message attests to.\n   * @param lastattestedround - The last round the message attests to.\n   * @param lnprovenweight - An integer value representing the natural log of the proven weight with 16 bits\n   * of precision. This value would be used to verify the next state proof.\n   * @param voterscommitment - The vector commitment root of the top N accounts to sign the next StateProof.\n   */\n  function StateProofMessage(_ref60) {\n    var _this60;\n    var blockheaderscommitment = _ref60.blockheaderscommitment,\n      firstattestedround = _ref60.firstattestedround,\n      lastattestedround = _ref60.lastattestedround,\n      lnprovenweight = _ref60.lnprovenweight,\n      voterscommitment = _ref60.voterscommitment;\n    _classCallCheck(this, StateProofMessage);\n    _this60 = _super60.call(this);\n    _this60.blockheaderscommitment = typeof blockheaderscommitment === 'string' ? new Uint8Array(Buffer.from(blockheaderscommitment, 'base64')) : blockheaderscommitment;\n    _this60.firstattestedround = firstattestedround;\n    _this60.lastattestedround = lastattestedround;\n    _this60.lnprovenweight = lnprovenweight;\n    _this60.voterscommitment = typeof voterscommitment === 'string' ? new Uint8Array(Buffer.from(voterscommitment, 'base64')) : voterscommitment;\n    _this60.attribute_map = {\n      blockheaderscommitment: 'BlockHeadersCommitment',\n      firstattestedround: 'FirstAttestedRound',\n      lastattestedround: 'LastAttestedRound',\n      lnprovenweight: 'LnProvenWeight',\n      voterscommitment: 'VotersCommitment'\n    };\n    return _this60;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(StateProofMessage, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['BlockHeadersCommitment'] === 'undefined') throw new Error(\"Response is missing required field 'BlockHeadersCommitment': \".concat(data));\n      if (typeof data['FirstAttestedRound'] === 'undefined') throw new Error(\"Response is missing required field 'FirstAttestedRound': \".concat(data));\n      if (typeof data['LastAttestedRound'] === 'undefined') throw new Error(\"Response is missing required field 'LastAttestedRound': \".concat(data));\n      if (typeof data['LnProvenWeight'] === 'undefined') throw new Error(\"Response is missing required field 'LnProvenWeight': \".concat(data));\n      if (typeof data['VotersCommitment'] === 'undefined') throw new Error(\"Response is missing required field 'VotersCommitment': \".concat(data));\n      return new StateProofMessage({\n        blockheaderscommitment: data['BlockHeadersCommitment'],\n        firstattestedround: data['FirstAttestedRound'],\n        lastattestedround: data['LastAttestedRound'],\n        lnprovenweight: data['LnProvenWeight'],\n        voterscommitment: data['VotersCommitment']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return StateProofMessage;\n}(BaseModel);\n/**\n * Supply represents the current supply of MicroAlgos in the system.\n */\nexport var SupplyResponse = /*#__PURE__*/function (_BaseModel61) {\n  _inherits(SupplyResponse, _BaseModel61);\n  var _super61 = _createSuper(SupplyResponse);\n  /**\n   * Creates a new `SupplyResponse` object.\n   * @param currentRound - Round\n   * @param onlineMoney - OnlineMoney\n   * @param totalMoney - TotalMoney\n   */\n  function SupplyResponse(_ref61) {\n    var _this61;\n    var currentRound = _ref61.currentRound,\n      onlineMoney = _ref61.onlineMoney,\n      totalMoney = _ref61.totalMoney;\n    _classCallCheck(this, SupplyResponse);\n    _this61 = _super61.call(this);\n    _this61.currentRound = currentRound;\n    _this61.onlineMoney = onlineMoney;\n    _this61.totalMoney = totalMoney;\n    _this61.attribute_map = {\n      currentRound: 'current_round',\n      onlineMoney: 'online-money',\n      totalMoney: 'total-money'\n    };\n    return _this61;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(SupplyResponse, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['current_round'] === 'undefined') throw new Error(\"Response is missing required field 'current_round': \".concat(data));\n      if (typeof data['online-money'] === 'undefined') throw new Error(\"Response is missing required field 'online-money': \".concat(data));\n      if (typeof data['total-money'] === 'undefined') throw new Error(\"Response is missing required field 'total-money': \".concat(data));\n      return new SupplyResponse({\n        currentRound: data['current_round'],\n        onlineMoney: data['online-money'],\n        totalMoney: data['total-money']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return SupplyResponse;\n}(BaseModel);\n/**\n * Represents a key-value pair in an application store.\n */\nexport var TealKeyValue = /*#__PURE__*/function (_BaseModel62) {\n  _inherits(TealKeyValue, _BaseModel62);\n  var _super62 = _createSuper(TealKeyValue);\n  /**\n   * Creates a new `TealKeyValue` object.\n   * @param key -\n   * @param value - Represents a TEAL value.\n   */\n  function TealKeyValue(_ref62) {\n    var _this62;\n    var key = _ref62.key,\n      value = _ref62.value;\n    _classCallCheck(this, TealKeyValue);\n    _this62 = _super62.call(this);\n    _this62.key = key;\n    _this62.value = value;\n    _this62.attribute_map = {\n      key: 'key',\n      value: 'value'\n    };\n    return _this62;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(TealKeyValue, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['key'] === 'undefined') throw new Error(\"Response is missing required field 'key': \".concat(data));\n      if (typeof data['value'] === 'undefined') throw new Error(\"Response is missing required field 'value': \".concat(data));\n      return new TealKeyValue({\n        key: data['key'],\n        value: TealValue.from_obj_for_encoding(data['value'])\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return TealKeyValue;\n}(BaseModel);\n/**\n * Represents a TEAL value.\n */\nexport var TealValue = /*#__PURE__*/function (_BaseModel63) {\n  _inherits(TealValue, _BaseModel63);\n  var _super63 = _createSuper(TealValue);\n  /**\n   * Creates a new `TealValue` object.\n   * @param type - (tt) value type. Value `1` refers to **bytes**, value `2` refers to **uint**\n   * @param bytes - (tb) bytes value.\n   * @param uint - (ui) uint value.\n   */\n  function TealValue(_ref63) {\n    var _this63;\n    var type = _ref63.type,\n      bytes = _ref63.bytes,\n      uint = _ref63.uint;\n    _classCallCheck(this, TealValue);\n    _this63 = _super63.call(this);\n    _this63.type = type;\n    _this63.bytes = bytes;\n    _this63.uint = uint;\n    _this63.attribute_map = {\n      type: 'type',\n      bytes: 'bytes',\n      uint: 'uint'\n    };\n    return _this63;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(TealValue, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['type'] === 'undefined') throw new Error(\"Response is missing required field 'type': \".concat(data));\n      if (typeof data['bytes'] === 'undefined') throw new Error(\"Response is missing required field 'bytes': \".concat(data));\n      if (typeof data['uint'] === 'undefined') throw new Error(\"Response is missing required field 'uint': \".concat(data));\n      return new TealValue({\n        type: data['type'],\n        bytes: data['bytes'],\n        uint: data['uint']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return TealValue;\n}(BaseModel);\n/**\n * Response containing all ledger state deltas for transaction groups, with their\n * associated Ids, in a single round.\n */\nexport var TransactionGroupLedgerStateDeltasForRoundResponse = /*#__PURE__*/function (_BaseModel64) {\n  _inherits(TransactionGroupLedgerStateDeltasForRoundResponse, _BaseModel64);\n  var _super64 = _createSuper(TransactionGroupLedgerStateDeltasForRoundResponse);\n  /**\n   * Creates a new `TransactionGroupLedgerStateDeltasForRoundResponse` object.\n   * @param deltas -\n   */\n  function TransactionGroupLedgerStateDeltasForRoundResponse(_ref64) {\n    var _this64;\n    var deltas = _ref64.deltas;\n    _classCallCheck(this, TransactionGroupLedgerStateDeltasForRoundResponse);\n    _this64 = _super64.call(this);\n    _this64.deltas = deltas;\n    _this64.attribute_map = {\n      deltas: 'Deltas'\n    };\n    return _this64;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(TransactionGroupLedgerStateDeltasForRoundResponse, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (!Array.isArray(data['Deltas'])) throw new Error(\"Response is missing required array field 'Deltas': \".concat(data));\n      return new TransactionGroupLedgerStateDeltasForRoundResponse({\n        deltas: data['Deltas'].map(LedgerStateDeltaForTransactionGroup.from_obj_for_encoding)\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return TransactionGroupLedgerStateDeltasForRoundResponse;\n}(BaseModel);\n/**\n * TransactionParams contains the parameters that help a client construct a new\n * transaction.\n */\nexport var TransactionParametersResponse = /*#__PURE__*/function (_BaseModel65) {\n  _inherits(TransactionParametersResponse, _BaseModel65);\n  var _super65 = _createSuper(TransactionParametersResponse);\n  /**\n   * Creates a new `TransactionParametersResponse` object.\n   * @param consensusVersion - ConsensusVersion indicates the consensus protocol version\n   * as of LastRound.\n   * @param fee - Fee is the suggested transaction fee\n   * Fee is in units of micro-Algos per byte.\n   * Fee may fall to zero but transactions must still have a fee of\n   * at least MinTxnFee for the current network protocol.\n   * @param genesisHash - GenesisHash is the hash of the genesis block.\n   * @param genesisId - GenesisID is an ID listed in the genesis block.\n   * @param lastRound - LastRound indicates the last round seen\n   * @param minFee - The minimum transaction fee (not per byte) required for the\n   * txn to validate for the current network protocol.\n   */\n  function TransactionParametersResponse(_ref65) {\n    var _this65;\n    var consensusVersion = _ref65.consensusVersion,\n      fee = _ref65.fee,\n      genesisHash = _ref65.genesisHash,\n      genesisId = _ref65.genesisId,\n      lastRound = _ref65.lastRound,\n      minFee = _ref65.minFee;\n    _classCallCheck(this, TransactionParametersResponse);\n    _this65 = _super65.call(this);\n    _this65.consensusVersion = consensusVersion;\n    _this65.fee = fee;\n    _this65.genesisHash = typeof genesisHash === 'string' ? new Uint8Array(Buffer.from(genesisHash, 'base64')) : genesisHash;\n    _this65.genesisId = genesisId;\n    _this65.lastRound = lastRound;\n    _this65.minFee = minFee;\n    _this65.attribute_map = {\n      consensusVersion: 'consensus-version',\n      fee: 'fee',\n      genesisHash: 'genesis-hash',\n      genesisId: 'genesis-id',\n      lastRound: 'last-round',\n      minFee: 'min-fee'\n    };\n    return _this65;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(TransactionParametersResponse, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['consensus-version'] === 'undefined') throw new Error(\"Response is missing required field 'consensus-version': \".concat(data));\n      if (typeof data['fee'] === 'undefined') throw new Error(\"Response is missing required field 'fee': \".concat(data));\n      if (typeof data['genesis-hash'] === 'undefined') throw new Error(\"Response is missing required field 'genesis-hash': \".concat(data));\n      if (typeof data['genesis-id'] === 'undefined') throw new Error(\"Response is missing required field 'genesis-id': \".concat(data));\n      if (typeof data['last-round'] === 'undefined') throw new Error(\"Response is missing required field 'last-round': \".concat(data));\n      if (typeof data['min-fee'] === 'undefined') throw new Error(\"Response is missing required field 'min-fee': \".concat(data));\n      return new TransactionParametersResponse({\n        consensusVersion: data['consensus-version'],\n        fee: data['fee'],\n        genesisHash: data['genesis-hash'],\n        genesisId: data['genesis-id'],\n        lastRound: data['last-round'],\n        minFee: data['min-fee']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return TransactionParametersResponse;\n}(BaseModel);\n/**\n * Proof of transaction in a block.\n */\nexport var TransactionProofResponse = /*#__PURE__*/function (_BaseModel66) {\n  _inherits(TransactionProofResponse, _BaseModel66);\n  var _super66 = _createSuper(TransactionProofResponse);\n  /**\n   * Creates a new `TransactionProofResponse` object.\n   * @param idx - Index of the transaction in the block's payset.\n   * @param proof - Proof of transaction membership.\n   * @param stibhash - Hash of SignedTxnInBlock for verifying proof.\n   * @param treedepth - Represents the depth of the tree that is being proven, i.e. the number of edges\n   * from a leaf to the root.\n   * @param hashtype - The type of hash function used to create the proof, must be one of:\n   * * sha512_256\n   * * sha256\n   */\n  function TransactionProofResponse(_ref66) {\n    var _this66;\n    var idx = _ref66.idx,\n      proof = _ref66.proof,\n      stibhash = _ref66.stibhash,\n      treedepth = _ref66.treedepth,\n      hashtype = _ref66.hashtype;\n    _classCallCheck(this, TransactionProofResponse);\n    _this66 = _super66.call(this);\n    _this66.idx = idx;\n    _this66.proof = typeof proof === 'string' ? new Uint8Array(Buffer.from(proof, 'base64')) : proof;\n    _this66.stibhash = typeof stibhash === 'string' ? new Uint8Array(Buffer.from(stibhash, 'base64')) : stibhash;\n    _this66.treedepth = treedepth;\n    _this66.hashtype = hashtype;\n    _this66.attribute_map = {\n      idx: 'idx',\n      proof: 'proof',\n      stibhash: 'stibhash',\n      treedepth: 'treedepth',\n      hashtype: 'hashtype'\n    };\n    return _this66;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(TransactionProofResponse, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['idx'] === 'undefined') throw new Error(\"Response is missing required field 'idx': \".concat(data));\n      if (typeof data['proof'] === 'undefined') throw new Error(\"Response is missing required field 'proof': \".concat(data));\n      if (typeof data['stibhash'] === 'undefined') throw new Error(\"Response is missing required field 'stibhash': \".concat(data));\n      if (typeof data['treedepth'] === 'undefined') throw new Error(\"Response is missing required field 'treedepth': \".concat(data));\n      return new TransactionProofResponse({\n        idx: data['idx'],\n        proof: data['proof'],\n        stibhash: data['stibhash'],\n        treedepth: data['treedepth'],\n        hashtype: data['hashtype']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return TransactionProofResponse;\n}(BaseModel);\n/**\n * algod version information.\n */\nexport var Version = /*#__PURE__*/function (_BaseModel67) {\n  _inherits(Version, _BaseModel67);\n  var _super67 = _createSuper(Version);\n  /**\n   * Creates a new `Version` object.\n   * @param build -\n   * @param genesisHashB64 -\n   * @param genesisId -\n   * @param versions -\n   */\n  function Version(_ref67) {\n    var _this67;\n    var build = _ref67.build,\n      genesisHashB64 = _ref67.genesisHashB64,\n      genesisId = _ref67.genesisId,\n      versions = _ref67.versions;\n    _classCallCheck(this, Version);\n    _this67 = _super67.call(this);\n    _this67.build = build;\n    _this67.genesisHashB64 = typeof genesisHashB64 === 'string' ? new Uint8Array(Buffer.from(genesisHashB64, 'base64')) : genesisHashB64;\n    _this67.genesisId = genesisId;\n    _this67.versions = versions;\n    _this67.attribute_map = {\n      build: 'build',\n      genesisHashB64: 'genesis_hash_b64',\n      genesisId: 'genesis_id',\n      versions: 'versions'\n    };\n    return _this67;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(Version, null, [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(data) {\n      /* eslint-disable dot-notation */\n      if (typeof data['build'] === 'undefined') throw new Error(\"Response is missing required field 'build': \".concat(data));\n      if (typeof data['genesis_hash_b64'] === 'undefined') throw new Error(\"Response is missing required field 'genesis_hash_b64': \".concat(data));\n      if (typeof data['genesis_id'] === 'undefined') throw new Error(\"Response is missing required field 'genesis_id': \".concat(data));\n      if (!Array.isArray(data['versions'])) throw new Error(\"Response is missing required array field 'versions': \".concat(data));\n      return new Version({\n        build: BuildVersion.from_obj_for_encoding(data['build']),\n        genesisHashB64: data['genesis_hash_b64'],\n        genesisId: data['genesis_id'],\n        versions: data['versions']\n      });\n      /* eslint-enable dot-notation */\n    }\n  }]);\n  return Version;\n}(BaseModel);","map":{"version":3,"names":["Buffer","BaseModel","Account","_BaseModel","_inherits","_super","_createSuper","_ref","_this","address","amount","amountWithoutPendingRewards","minBalance","pendingRewards","rewards","round","status","totalAppsOptedIn","totalAssetsOptedIn","totalCreatedApps","totalCreatedAssets","appsLocalState","appsTotalExtraPages","appsTotalSchema","assets","authAddr","createdApps","createdAssets","participation","rewardBase","sigType","totalBoxBytes","totalBoxes","_classCallCheck","call","attribute_map","_createClass","key","value","from_obj_for_encoding","data","Error","concat","map","ApplicationLocalState","undefined","ApplicationStateSchema","AssetHolding","Application","Asset","AccountParticipation","AccountApplicationResponse","_BaseModel2","_super2","_ref2","_this2","appLocalState","createdApp","ApplicationParams","AccountAssetResponse","_BaseModel3","_super3","_ref3","_this3","assetHolding","createdAsset","AssetParams","_BaseModel4","_super4","_ref4","_this4","selectionParticipationKey","voteFirstValid","voteKeyDilution","voteLastValid","voteParticipationKey","stateProofKey","Uint8Array","from","AccountStateDelta","_BaseModel5","_super5","_ref5","_this5","delta","Array","isArray","EvalDeltaKeyValue","_BaseModel6","_super6","_ref6","_this6","id","params","ApplicationInitialStates","_BaseModel7","_super7","_ref7","_this7","appBoxes","appGlobals","appLocals","ApplicationKVStorage","_BaseModel8","_super8","_ref8","_this8","kvs","account","AvmKeyValue","ApplicationLocalReference","_BaseModel9","_super9","_ref9","_this9","app","_BaseModel10","_super10","_ref10","_this10","schema","keyValue","TealKeyValue","_BaseModel11","_super11","_ref11","_this11","approvalProgram","clearStateProgram","creator","extraProgramPages","globalState","globalStateSchema","localStateSchema","ApplicationStateOperation","_BaseModel12","_super12","_ref12","_this12","appStateType","operation","newValue","AvmValue","_BaseModel13","_super13","_ref13","_this13","numUint","numByteSlice","_BaseModel14","_super14","_ref14","_this14","index","_BaseModel15","_super15","_ref15","_this15","assetId","isFrozen","AssetHoldingReference","_BaseModel16","_super16","_ref16","_this16","asset","_BaseModel17","_super17","_ref17","_this17","decimals","total","clawback","defaultFrozen","freeze","manager","metadataHash","name","nameB64","reserve","unitName","unitNameB64","url","urlB64","_BaseModel18","_super18","_ref18","_this18","_BaseModel19","_super19","_ref19","_this19","type","bytes","uint","BlockHashResponse","_BaseModel20","_super20","_ref20","_this20","blockhash","BlockResponse","_BaseModel21","_super21","_ref21","_this21","block","cert","BlockTxidsResponse","_BaseModel22","_super22","_ref22","_this22","blocktxids","Box","_BaseModel23","_super23","_ref23","_this23","BoxDescriptor","_BaseModel24","_super24","_ref24","_this24","BoxReference","_BaseModel25","_super25","_ref25","_this25","BoxesResponse","_BaseModel26","_super26","_ref26","_this26","boxes","BuildVersion","_BaseModel27","_super27","_ref27","_this27","branch","buildNumber","channel","commitHash","major","minor","CompileResponse","_BaseModel28","_super28","_ref28","_this28","hash","result","sourcemap","DisassembleResponse","_BaseModel29","_super29","_ref29","_this29","DryrunRequest","_BaseModel30","_super30","_ref30","_this30","accounts","apps","latestTimestamp","protocolVersion","sources","txns","DryrunSource","DryrunResponse","_BaseModel31","_super31","_ref31","_this31","error","DryrunTxnResult","_BaseModel32","_super32","_ref32","_this32","fieldName","source","txnIndex","appIndex","DryrunState","_BaseModel33","_super33","_ref33","_this33","line","pc","stack","scratch","TealValue","_BaseModel34","_super34","_ref34","_this34","disassembly","appCallMessages","appCallTrace","budgetAdded","budgetConsumed","globalDelta","localDeltas","logicSigDisassembly","logicSigMessages","logicSigTrace","logs","ErrorResponse","_BaseModel35","_super35","_ref35","_this35","message","EvalDelta","_BaseModel36","_super36","_ref36","_this36","action","_BaseModel37","_super37","_ref37","_this37","GetBlockTimeStampOffsetResponse","_BaseModel38","_super38","_ref38","_this38","offset","GetSyncRoundResponse","_BaseModel39","_super39","_ref39","_this39","KvDelta","_BaseModel40","_super40","_ref40","_this40","LedgerStateDeltaForTransactionGroup","_BaseModel41","_super41","_ref41","_this41","ids","LightBlockHeaderProof","_BaseModel42","_super42","_ref42","_this42","proof","treedepth","NodeStatusResponse","_BaseModel43","_super43","_ref43","_this43","catchupTime","lastRound","lastVersion","nextVersion","nextVersionRound","nextVersionSupported","stoppedAtUnsupportedRound","timeSinceLastRound","catchpoint","catchpointAcquiredBlocks","catchpointProcessedAccounts","catchpointProcessedKvs","catchpointTotalAccounts","catchpointTotalBlocks","catchpointTotalKvs","catchpointVerifiedAccounts","catchpointVerifiedKvs","lastCatchpoint","upgradeDelay","upgradeNextProtocolVoteBefore","upgradeNoVotes","upgradeNodeVote","upgradeVoteRounds","upgradeVotes","upgradeVotesRequired","upgradeYesVotes","PendingTransactionResponse","_BaseModel44","_super44","_ref44","_this44","poolError","txn","applicationIndex","assetClosingAmount","assetIndex","closeRewards","closingAmount","confirmedRound","globalStateDelta","innerTxns","localStateDelta","receiverRewards","senderRewards","PendingTransactionsResponse","_BaseModel45","_super45","_ref45","_this45","topTransactions","totalTransactions","PostTransactionsResponse","_BaseModel46","_super46","_ref46","_this46","txid","ScratchChange","_BaseModel47","_super47","_ref47","_this47","slot","SimulateInitialStates","_BaseModel48","_super48","_ref48","_this48","appInitialStates","SimulateRequest","_BaseModel49","_super49","_ref49","_this49","txnGroups","allowEmptySignatures","allowMoreLogging","allowUnnamedResources","execTraceConfig","extraOpcodeBudget","SimulateRequestTransactionGroup","SimulateTraceConfig","_BaseModel50","_super50","_ref50","_this50","SimulateResponse","_BaseModel51","_super51","_ref51","_this51","version","evalOverrides","initialStates","SimulateTransactionGroupResult","SimulationEvalOverrides","_BaseModel52","_super52","_ref52","_this52","enable","scratchChange","stackChange","stateChange","_BaseModel53","_super53","_ref53","_this53","txnResults","appBudgetAdded","appBudgetConsumed","failedAt","failureMessage","unnamedResourcesAccessed","SimulateTransactionResult","SimulateUnnamedResourcesAccessed","_BaseModel54","_super54","_ref54","_this54","txnResult","execTrace","logicSigBudgetConsumed","SimulationTransactionExecTrace","_BaseModel55","_super55","_ref55","_this55","assetHoldings","extraBoxRefs","_BaseModel56","_super56","_ref56","_this56","maxLogCalls","maxLogSize","SimulationOpcodeTraceUnit","_BaseModel57","_super57","_ref57","_this57","scratchChanges","spawnedInners","stackAdditions","stackPopCount","stateChanges","_BaseModel58","_super58","_ref58","_this58","approvalProgramHash","approvalProgramTrace","clearStateProgramHash","clearStateProgramTrace","innerTrace","logicSigHash","StateProof","_BaseModel59","_super59","_ref59","_this59","stateproof","StateProofMessage","_BaseModel60","_super60","_ref60","_this60","blockheaderscommitment","firstattestedround","lastattestedround","lnprovenweight","voterscommitment","SupplyResponse","_BaseModel61","_super61","_ref61","_this61","currentRound","onlineMoney","totalMoney","_BaseModel62","_super62","_ref62","_this62","_BaseModel63","_super63","_ref63","_this63","TransactionGroupLedgerStateDeltasForRoundResponse","_BaseModel64","_super64","_ref64","_this64","deltas","TransactionParametersResponse","_BaseModel65","_super65","_ref65","_this65","consensusVersion","fee","genesisHash","genesisId","minFee","TransactionProofResponse","_BaseModel66","_super66","_ref66","_this66","idx","stibhash","hashtype","Version","_BaseModel67","_super67","_ref67","_this67","build","genesisHashB64","versions"],"sources":["/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/algosdk/src/client/v2/algod/models/types.ts"],"sourcesContent":["/**\n * NOTICE: This file was generated. Editing this file manually is not recommended.\n */\n\n/* eslint-disable no-use-before-define */\nimport { Buffer } from 'buffer';\nimport BaseModel from '../../basemodel';\nimport { EncodedSignedTransaction } from '../../../../types/transactions/encoded';\nimport BlockHeader from '../../../../types/blockHeader';\n\n/**\n * Account information at a given round.\n * Definition:\n * data/basics/userBalance.go : AccountData\n */\nexport class Account extends BaseModel {\n  /**\n   * the account public key\n   */\n  public address: string;\n\n  /**\n   * (algo) total number of MicroAlgos in the account\n   */\n  public amount: number | bigint;\n\n  /**\n   * specifies the amount of MicroAlgos in the account, without the pending rewards.\n   */\n  public amountWithoutPendingRewards: number | bigint;\n\n  /**\n   * MicroAlgo balance required by the account.\n   * The requirement grows based on asset and application usage.\n   */\n  public minBalance: number | bigint;\n\n  /**\n   * amount of MicroAlgos of pending rewards in this account.\n   */\n  public pendingRewards: number | bigint;\n\n  /**\n   * (ern) total rewards of MicroAlgos the account has received, including pending\n   * rewards.\n   */\n  public rewards: number | bigint;\n\n  /**\n   * The round for which this information is relevant.\n   */\n  public round: number | bigint;\n\n  /**\n   * (onl) delegation status of the account's MicroAlgos\n   * * Offline - indicates that the associated account is delegated.\n   * * Online - indicates that the associated account used as part of the delegation\n   * pool.\n   * * NotParticipating - indicates that the associated account is neither a\n   * delegator nor a delegate.\n   */\n  public status: string;\n\n  /**\n   * The count of all applications that have been opted in, equivalent to the count\n   * of application local data (AppLocalState objects) stored in this account.\n   */\n  public totalAppsOptedIn: number | bigint;\n\n  /**\n   * The count of all assets that have been opted in, equivalent to the count of\n   * AssetHolding objects held by this account.\n   */\n  public totalAssetsOptedIn: number | bigint;\n\n  /**\n   * The count of all apps (AppParams objects) created by this account.\n   */\n  public totalCreatedApps: number | bigint;\n\n  /**\n   * The count of all assets (AssetParams objects) created by this account.\n   */\n  public totalCreatedAssets: number | bigint;\n\n  /**\n   * (appl) applications local data stored in this account.\n   * Note the raw object uses `map[int] -> AppLocalState` for this type.\n   */\n  public appsLocalState?: ApplicationLocalState[];\n\n  /**\n   * (teap) the sum of all extra application program pages for this account.\n   */\n  public appsTotalExtraPages?: number | bigint;\n\n  /**\n   * (tsch) stores the sum of all of the local schemas and global schemas in this\n   * account.\n   * Note: the raw account uses `StateSchema` for this type.\n   */\n  public appsTotalSchema?: ApplicationStateSchema;\n\n  /**\n   * (asset) assets held by this account.\n   * Note the raw object uses `map[int] -> AssetHolding` for this type.\n   */\n  public assets?: AssetHolding[];\n\n  /**\n   * (spend) the address against which signing should be checked. If empty, the\n   * address of the current account is used. This field can be updated in any\n   * transaction by setting the RekeyTo field.\n   */\n  public authAddr?: string;\n\n  /**\n   * (appp) parameters of applications created by this account including app global\n   * data.\n   * Note: the raw account uses `map[int] -> AppParams` for this type.\n   */\n  public createdApps?: Application[];\n\n  /**\n   * (apar) parameters of assets created by this account.\n   * Note: the raw account uses `map[int] -> Asset` for this type.\n   */\n  public createdAssets?: Asset[];\n\n  /**\n   * AccountParticipation describes the parameters used by this account in consensus\n   * protocol.\n   */\n  public participation?: AccountParticipation;\n\n  /**\n   * (ebase) used as part of the rewards computation. Only applicable to accounts\n   * which are participating.\n   */\n  public rewardBase?: number | bigint;\n\n  /**\n   * Indicates what type of signature is used by this account, must be one of:\n   * * sig\n   * * msig\n   * * lsig\n   */\n  public sigType?: string;\n\n  /**\n   * (tbxb) The total number of bytes used by this account's app's box keys and\n   * values.\n   */\n  public totalBoxBytes?: number | bigint;\n\n  /**\n   * (tbx) The number of existing boxes created by this account's app.\n   */\n  public totalBoxes?: number | bigint;\n\n  /**\n   * Creates a new `Account` object.\n   * @param address - the account public key\n   * @param amount - (algo) total number of MicroAlgos in the account\n   * @param amountWithoutPendingRewards - specifies the amount of MicroAlgos in the account, without the pending rewards.\n   * @param minBalance - MicroAlgo balance required by the account.\n   * The requirement grows based on asset and application usage.\n   * @param pendingRewards - amount of MicroAlgos of pending rewards in this account.\n   * @param rewards - (ern) total rewards of MicroAlgos the account has received, including pending\n   * rewards.\n   * @param round - The round for which this information is relevant.\n   * @param status - (onl) delegation status of the account's MicroAlgos\n   * * Offline - indicates that the associated account is delegated.\n   * * Online - indicates that the associated account used as part of the delegation\n   * pool.\n   * * NotParticipating - indicates that the associated account is neither a\n   * delegator nor a delegate.\n   * @param totalAppsOptedIn - The count of all applications that have been opted in, equivalent to the count\n   * of application local data (AppLocalState objects) stored in this account.\n   * @param totalAssetsOptedIn - The count of all assets that have been opted in, equivalent to the count of\n   * AssetHolding objects held by this account.\n   * @param totalCreatedApps - The count of all apps (AppParams objects) created by this account.\n   * @param totalCreatedAssets - The count of all assets (AssetParams objects) created by this account.\n   * @param appsLocalState - (appl) applications local data stored in this account.\n   * Note the raw object uses `map[int] -> AppLocalState` for this type.\n   * @param appsTotalExtraPages - (teap) the sum of all extra application program pages for this account.\n   * @param appsTotalSchema - (tsch) stores the sum of all of the local schemas and global schemas in this\n   * account.\n   * Note: the raw account uses `StateSchema` for this type.\n   * @param assets - (asset) assets held by this account.\n   * Note the raw object uses `map[int] -> AssetHolding` for this type.\n   * @param authAddr - (spend) the address against which signing should be checked. If empty, the\n   * address of the current account is used. This field can be updated in any\n   * transaction by setting the RekeyTo field.\n   * @param createdApps - (appp) parameters of applications created by this account including app global\n   * data.\n   * Note: the raw account uses `map[int] -> AppParams` for this type.\n   * @param createdAssets - (apar) parameters of assets created by this account.\n   * Note: the raw account uses `map[int] -> Asset` for this type.\n   * @param participation - AccountParticipation describes the parameters used by this account in consensus\n   * protocol.\n   * @param rewardBase - (ebase) used as part of the rewards computation. Only applicable to accounts\n   * which are participating.\n   * @param sigType - Indicates what type of signature is used by this account, must be one of:\n   * * sig\n   * * msig\n   * * lsig\n   * @param totalBoxBytes - (tbxb) The total number of bytes used by this account's app's box keys and\n   * values.\n   * @param totalBoxes - (tbx) The number of existing boxes created by this account's app.\n   */\n  constructor({\n    address,\n    amount,\n    amountWithoutPendingRewards,\n    minBalance,\n    pendingRewards,\n    rewards,\n    round,\n    status,\n    totalAppsOptedIn,\n    totalAssetsOptedIn,\n    totalCreatedApps,\n    totalCreatedAssets,\n    appsLocalState,\n    appsTotalExtraPages,\n    appsTotalSchema,\n    assets,\n    authAddr,\n    createdApps,\n    createdAssets,\n    participation,\n    rewardBase,\n    sigType,\n    totalBoxBytes,\n    totalBoxes,\n  }: {\n    address: string;\n    amount: number | bigint;\n    amountWithoutPendingRewards: number | bigint;\n    minBalance: number | bigint;\n    pendingRewards: number | bigint;\n    rewards: number | bigint;\n    round: number | bigint;\n    status: string;\n    totalAppsOptedIn: number | bigint;\n    totalAssetsOptedIn: number | bigint;\n    totalCreatedApps: number | bigint;\n    totalCreatedAssets: number | bigint;\n    appsLocalState?: ApplicationLocalState[];\n    appsTotalExtraPages?: number | bigint;\n    appsTotalSchema?: ApplicationStateSchema;\n    assets?: AssetHolding[];\n    authAddr?: string;\n    createdApps?: Application[];\n    createdAssets?: Asset[];\n    participation?: AccountParticipation;\n    rewardBase?: number | bigint;\n    sigType?: string;\n    totalBoxBytes?: number | bigint;\n    totalBoxes?: number | bigint;\n  }) {\n    super();\n    this.address = address;\n    this.amount = amount;\n    this.amountWithoutPendingRewards = amountWithoutPendingRewards;\n    this.minBalance = minBalance;\n    this.pendingRewards = pendingRewards;\n    this.rewards = rewards;\n    this.round = round;\n    this.status = status;\n    this.totalAppsOptedIn = totalAppsOptedIn;\n    this.totalAssetsOptedIn = totalAssetsOptedIn;\n    this.totalCreatedApps = totalCreatedApps;\n    this.totalCreatedAssets = totalCreatedAssets;\n    this.appsLocalState = appsLocalState;\n    this.appsTotalExtraPages = appsTotalExtraPages;\n    this.appsTotalSchema = appsTotalSchema;\n    this.assets = assets;\n    this.authAddr = authAddr;\n    this.createdApps = createdApps;\n    this.createdAssets = createdAssets;\n    this.participation = participation;\n    this.rewardBase = rewardBase;\n    this.sigType = sigType;\n    this.totalBoxBytes = totalBoxBytes;\n    this.totalBoxes = totalBoxes;\n\n    this.attribute_map = {\n      address: 'address',\n      amount: 'amount',\n      amountWithoutPendingRewards: 'amount-without-pending-rewards',\n      minBalance: 'min-balance',\n      pendingRewards: 'pending-rewards',\n      rewards: 'rewards',\n      round: 'round',\n      status: 'status',\n      totalAppsOptedIn: 'total-apps-opted-in',\n      totalAssetsOptedIn: 'total-assets-opted-in',\n      totalCreatedApps: 'total-created-apps',\n      totalCreatedAssets: 'total-created-assets',\n      appsLocalState: 'apps-local-state',\n      appsTotalExtraPages: 'apps-total-extra-pages',\n      appsTotalSchema: 'apps-total-schema',\n      assets: 'assets',\n      authAddr: 'auth-addr',\n      createdApps: 'created-apps',\n      createdAssets: 'created-assets',\n      participation: 'participation',\n      rewardBase: 'reward-base',\n      sigType: 'sig-type',\n      totalBoxBytes: 'total-box-bytes',\n      totalBoxes: 'total-boxes',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): Account {\n    /* eslint-disable dot-notation */\n    if (typeof data['address'] === 'undefined')\n      throw new Error(`Response is missing required field 'address': ${data}`);\n    if (typeof data['amount'] === 'undefined')\n      throw new Error(`Response is missing required field 'amount': ${data}`);\n    if (typeof data['amount-without-pending-rewards'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'amount-without-pending-rewards': ${data}`\n      );\n    if (typeof data['min-balance'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'min-balance': ${data}`\n      );\n    if (typeof data['pending-rewards'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'pending-rewards': ${data}`\n      );\n    if (typeof data['rewards'] === 'undefined')\n      throw new Error(`Response is missing required field 'rewards': ${data}`);\n    if (typeof data['round'] === 'undefined')\n      throw new Error(`Response is missing required field 'round': ${data}`);\n    if (typeof data['status'] === 'undefined')\n      throw new Error(`Response is missing required field 'status': ${data}`);\n    if (typeof data['total-apps-opted-in'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'total-apps-opted-in': ${data}`\n      );\n    if (typeof data['total-assets-opted-in'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'total-assets-opted-in': ${data}`\n      );\n    if (typeof data['total-created-apps'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'total-created-apps': ${data}`\n      );\n    if (typeof data['total-created-assets'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'total-created-assets': ${data}`\n      );\n    return new Account({\n      address: data['address'],\n      amount: data['amount'],\n      amountWithoutPendingRewards: data['amount-without-pending-rewards'],\n      minBalance: data['min-balance'],\n      pendingRewards: data['pending-rewards'],\n      rewards: data['rewards'],\n      round: data['round'],\n      status: data['status'],\n      totalAppsOptedIn: data['total-apps-opted-in'],\n      totalAssetsOptedIn: data['total-assets-opted-in'],\n      totalCreatedApps: data['total-created-apps'],\n      totalCreatedAssets: data['total-created-assets'],\n      appsLocalState:\n        typeof data['apps-local-state'] !== 'undefined'\n          ? data['apps-local-state'].map(\n              ApplicationLocalState.from_obj_for_encoding\n            )\n          : undefined,\n      appsTotalExtraPages: data['apps-total-extra-pages'],\n      appsTotalSchema:\n        typeof data['apps-total-schema'] !== 'undefined'\n          ? ApplicationStateSchema.from_obj_for_encoding(\n              data['apps-total-schema']\n            )\n          : undefined,\n      assets:\n        typeof data['assets'] !== 'undefined'\n          ? data['assets'].map(AssetHolding.from_obj_for_encoding)\n          : undefined,\n      authAddr: data['auth-addr'],\n      createdApps:\n        typeof data['created-apps'] !== 'undefined'\n          ? data['created-apps'].map(Application.from_obj_for_encoding)\n          : undefined,\n      createdAssets:\n        typeof data['created-assets'] !== 'undefined'\n          ? data['created-assets'].map(Asset.from_obj_for_encoding)\n          : undefined,\n      participation:\n        typeof data['participation'] !== 'undefined'\n          ? AccountParticipation.from_obj_for_encoding(data['participation'])\n          : undefined,\n      rewardBase: data['reward-base'],\n      sigType: data['sig-type'],\n      totalBoxBytes: data['total-box-bytes'],\n      totalBoxes: data['total-boxes'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * AccountApplicationResponse describes the account's application local state and\n * global state (AppLocalState and AppParams, if either exists) for a specific\n * application ID. Global state will only be returned if the provided address is\n * the application's creator.\n */\nexport class AccountApplicationResponse extends BaseModel {\n  /**\n   * The round for which this information is relevant.\n   */\n  public round: number | bigint;\n\n  /**\n   * (appl) the application local data stored in this account.\n   * The raw account uses `AppLocalState` for this type.\n   */\n  public appLocalState?: ApplicationLocalState;\n\n  /**\n   * (appp) parameters of the application created by this account including app\n   * global data.\n   * The raw account uses `AppParams` for this type.\n   */\n  public createdApp?: ApplicationParams;\n\n  /**\n   * Creates a new `AccountApplicationResponse` object.\n   * @param round - The round for which this information is relevant.\n   * @param appLocalState - (appl) the application local data stored in this account.\n   * The raw account uses `AppLocalState` for this type.\n   * @param createdApp - (appp) parameters of the application created by this account including app\n   * global data.\n   * The raw account uses `AppParams` for this type.\n   */\n  constructor({\n    round,\n    appLocalState,\n    createdApp,\n  }: {\n    round: number | bigint;\n    appLocalState?: ApplicationLocalState;\n    createdApp?: ApplicationParams;\n  }) {\n    super();\n    this.round = round;\n    this.appLocalState = appLocalState;\n    this.createdApp = createdApp;\n\n    this.attribute_map = {\n      round: 'round',\n      appLocalState: 'app-local-state',\n      createdApp: 'created-app',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): AccountApplicationResponse {\n    /* eslint-disable dot-notation */\n    if (typeof data['round'] === 'undefined')\n      throw new Error(`Response is missing required field 'round': ${data}`);\n    return new AccountApplicationResponse({\n      round: data['round'],\n      appLocalState:\n        typeof data['app-local-state'] !== 'undefined'\n          ? ApplicationLocalState.from_obj_for_encoding(data['app-local-state'])\n          : undefined,\n      createdApp:\n        typeof data['created-app'] !== 'undefined'\n          ? ApplicationParams.from_obj_for_encoding(data['created-app'])\n          : undefined,\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * AccountAssetResponse describes the account's asset holding and asset parameters\n * (if either exist) for a specific asset ID. Asset parameters will only be\n * returned if the provided address is the asset's creator.\n */\nexport class AccountAssetResponse extends BaseModel {\n  /**\n   * The round for which this information is relevant.\n   */\n  public round: number | bigint;\n\n  /**\n   * (asset) Details about the asset held by this account.\n   * The raw account uses `AssetHolding` for this type.\n   */\n  public assetHolding?: AssetHolding;\n\n  /**\n   * (apar) parameters of the asset created by this account.\n   * The raw account uses `AssetParams` for this type.\n   */\n  public createdAsset?: AssetParams;\n\n  /**\n   * Creates a new `AccountAssetResponse` object.\n   * @param round - The round for which this information is relevant.\n   * @param assetHolding - (asset) Details about the asset held by this account.\n   * The raw account uses `AssetHolding` for this type.\n   * @param createdAsset - (apar) parameters of the asset created by this account.\n   * The raw account uses `AssetParams` for this type.\n   */\n  constructor({\n    round,\n    assetHolding,\n    createdAsset,\n  }: {\n    round: number | bigint;\n    assetHolding?: AssetHolding;\n    createdAsset?: AssetParams;\n  }) {\n    super();\n    this.round = round;\n    this.assetHolding = assetHolding;\n    this.createdAsset = createdAsset;\n\n    this.attribute_map = {\n      round: 'round',\n      assetHolding: 'asset-holding',\n      createdAsset: 'created-asset',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): AccountAssetResponse {\n    /* eslint-disable dot-notation */\n    if (typeof data['round'] === 'undefined')\n      throw new Error(`Response is missing required field 'round': ${data}`);\n    return new AccountAssetResponse({\n      round: data['round'],\n      assetHolding:\n        typeof data['asset-holding'] !== 'undefined'\n          ? AssetHolding.from_obj_for_encoding(data['asset-holding'])\n          : undefined,\n      createdAsset:\n        typeof data['created-asset'] !== 'undefined'\n          ? AssetParams.from_obj_for_encoding(data['created-asset'])\n          : undefined,\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * AccountParticipation describes the parameters used by this account in consensus\n * protocol.\n */\nexport class AccountParticipation extends BaseModel {\n  /**\n   * (sel) Selection public key (if any) currently registered for this round.\n   */\n  public selectionParticipationKey: Uint8Array;\n\n  /**\n   * (voteFst) First round for which this participation is valid.\n   */\n  public voteFirstValid: number | bigint;\n\n  /**\n   * (voteKD) Number of subkeys in each batch of participation keys.\n   */\n  public voteKeyDilution: number | bigint;\n\n  /**\n   * (voteLst) Last round for which this participation is valid.\n   */\n  public voteLastValid: number | bigint;\n\n  /**\n   * (vote) root participation public key (if any) currently registered for this\n   * round.\n   */\n  public voteParticipationKey: Uint8Array;\n\n  /**\n   * (stprf) Root of the state proof key (if any)\n   */\n  public stateProofKey?: Uint8Array;\n\n  /**\n   * Creates a new `AccountParticipation` object.\n   * @param selectionParticipationKey - (sel) Selection public key (if any) currently registered for this round.\n   * @param voteFirstValid - (voteFst) First round for which this participation is valid.\n   * @param voteKeyDilution - (voteKD) Number of subkeys in each batch of participation keys.\n   * @param voteLastValid - (voteLst) Last round for which this participation is valid.\n   * @param voteParticipationKey - (vote) root participation public key (if any) currently registered for this\n   * round.\n   * @param stateProofKey - (stprf) Root of the state proof key (if any)\n   */\n  constructor({\n    selectionParticipationKey,\n    voteFirstValid,\n    voteKeyDilution,\n    voteLastValid,\n    voteParticipationKey,\n    stateProofKey,\n  }: {\n    selectionParticipationKey: string | Uint8Array;\n    voteFirstValid: number | bigint;\n    voteKeyDilution: number | bigint;\n    voteLastValid: number | bigint;\n    voteParticipationKey: string | Uint8Array;\n    stateProofKey?: string | Uint8Array;\n  }) {\n    super();\n    this.selectionParticipationKey =\n      typeof selectionParticipationKey === 'string'\n        ? new Uint8Array(Buffer.from(selectionParticipationKey, 'base64'))\n        : selectionParticipationKey;\n    this.voteFirstValid = voteFirstValid;\n    this.voteKeyDilution = voteKeyDilution;\n    this.voteLastValid = voteLastValid;\n    this.voteParticipationKey =\n      typeof voteParticipationKey === 'string'\n        ? new Uint8Array(Buffer.from(voteParticipationKey, 'base64'))\n        : voteParticipationKey;\n    this.stateProofKey =\n      typeof stateProofKey === 'string'\n        ? new Uint8Array(Buffer.from(stateProofKey, 'base64'))\n        : stateProofKey;\n\n    this.attribute_map = {\n      selectionParticipationKey: 'selection-participation-key',\n      voteFirstValid: 'vote-first-valid',\n      voteKeyDilution: 'vote-key-dilution',\n      voteLastValid: 'vote-last-valid',\n      voteParticipationKey: 'vote-participation-key',\n      stateProofKey: 'state-proof-key',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): AccountParticipation {\n    /* eslint-disable dot-notation */\n    if (typeof data['selection-participation-key'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'selection-participation-key': ${data}`\n      );\n    if (typeof data['vote-first-valid'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'vote-first-valid': ${data}`\n      );\n    if (typeof data['vote-key-dilution'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'vote-key-dilution': ${data}`\n      );\n    if (typeof data['vote-last-valid'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'vote-last-valid': ${data}`\n      );\n    if (typeof data['vote-participation-key'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'vote-participation-key': ${data}`\n      );\n    return new AccountParticipation({\n      selectionParticipationKey: data['selection-participation-key'],\n      voteFirstValid: data['vote-first-valid'],\n      voteKeyDilution: data['vote-key-dilution'],\n      voteLastValid: data['vote-last-valid'],\n      voteParticipationKey: data['vote-participation-key'],\n      stateProofKey: data['state-proof-key'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Application state delta.\n */\nexport class AccountStateDelta extends BaseModel {\n  public address: string;\n\n  /**\n   * Application state delta.\n   */\n  public delta: EvalDeltaKeyValue[];\n\n  /**\n   * Creates a new `AccountStateDelta` object.\n   * @param address -\n   * @param delta - Application state delta.\n   */\n  constructor({\n    address,\n    delta,\n  }: {\n    address: string;\n    delta: EvalDeltaKeyValue[];\n  }) {\n    super();\n    this.address = address;\n    this.delta = delta;\n\n    this.attribute_map = {\n      address: 'address',\n      delta: 'delta',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): AccountStateDelta {\n    /* eslint-disable dot-notation */\n    if (typeof data['address'] === 'undefined')\n      throw new Error(`Response is missing required field 'address': ${data}`);\n    if (!Array.isArray(data['delta']))\n      throw new Error(\n        `Response is missing required array field 'delta': ${data}`\n      );\n    return new AccountStateDelta({\n      address: data['address'],\n      delta: data['delta'].map(EvalDeltaKeyValue.from_obj_for_encoding),\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Application index and its parameters\n */\nexport class Application extends BaseModel {\n  /**\n   * (appidx) application index.\n   */\n  public id: number | bigint;\n\n  /**\n   * (appparams) application parameters.\n   */\n  public params: ApplicationParams;\n\n  /**\n   * Creates a new `Application` object.\n   * @param id - (appidx) application index.\n   * @param params - (appparams) application parameters.\n   */\n  constructor({\n    id,\n    params,\n  }: {\n    id: number | bigint;\n    params: ApplicationParams;\n  }) {\n    super();\n    this.id = id;\n    this.params = params;\n\n    this.attribute_map = {\n      id: 'id',\n      params: 'params',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): Application {\n    /* eslint-disable dot-notation */\n    if (typeof data['id'] === 'undefined')\n      throw new Error(`Response is missing required field 'id': ${data}`);\n    if (typeof data['params'] === 'undefined')\n      throw new Error(`Response is missing required field 'params': ${data}`);\n    return new Application({\n      id: data['id'],\n      params: ApplicationParams.from_obj_for_encoding(data['params']),\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * An application's initial global/local/box states that were accessed during\n * simulation.\n */\nexport class ApplicationInitialStates extends BaseModel {\n  /**\n   * Application index.\n   */\n  public id: number | bigint;\n\n  /**\n   * An application's global/local/box state.\n   */\n  public appBoxes?: ApplicationKVStorage;\n\n  /**\n   * An application's global/local/box state.\n   */\n  public appGlobals?: ApplicationKVStorage;\n\n  /**\n   * An application's initial local states tied to different accounts.\n   */\n  public appLocals?: ApplicationKVStorage[];\n\n  /**\n   * Creates a new `ApplicationInitialStates` object.\n   * @param id - Application index.\n   * @param appBoxes - An application's global/local/box state.\n   * @param appGlobals - An application's global/local/box state.\n   * @param appLocals - An application's initial local states tied to different accounts.\n   */\n  constructor({\n    id,\n    appBoxes,\n    appGlobals,\n    appLocals,\n  }: {\n    id: number | bigint;\n    appBoxes?: ApplicationKVStorage;\n    appGlobals?: ApplicationKVStorage;\n    appLocals?: ApplicationKVStorage[];\n  }) {\n    super();\n    this.id = id;\n    this.appBoxes = appBoxes;\n    this.appGlobals = appGlobals;\n    this.appLocals = appLocals;\n\n    this.attribute_map = {\n      id: 'id',\n      appBoxes: 'app-boxes',\n      appGlobals: 'app-globals',\n      appLocals: 'app-locals',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): ApplicationInitialStates {\n    /* eslint-disable dot-notation */\n    if (typeof data['id'] === 'undefined')\n      throw new Error(`Response is missing required field 'id': ${data}`);\n    return new ApplicationInitialStates({\n      id: data['id'],\n      appBoxes:\n        typeof data['app-boxes'] !== 'undefined'\n          ? ApplicationKVStorage.from_obj_for_encoding(data['app-boxes'])\n          : undefined,\n      appGlobals:\n        typeof data['app-globals'] !== 'undefined'\n          ? ApplicationKVStorage.from_obj_for_encoding(data['app-globals'])\n          : undefined,\n      appLocals:\n        typeof data['app-locals'] !== 'undefined'\n          ? data['app-locals'].map(ApplicationKVStorage.from_obj_for_encoding)\n          : undefined,\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * An application's global/local/box state.\n */\nexport class ApplicationKVStorage extends BaseModel {\n  /**\n   * Key-Value pairs representing application states.\n   */\n  public kvs: AvmKeyValue[];\n\n  /**\n   * The address of the account associated with the local state.\n   */\n  public account?: string;\n\n  /**\n   * Creates a new `ApplicationKVStorage` object.\n   * @param kvs - Key-Value pairs representing application states.\n   * @param account - The address of the account associated with the local state.\n   */\n  constructor({ kvs, account }: { kvs: AvmKeyValue[]; account?: string }) {\n    super();\n    this.kvs = kvs;\n    this.account = account;\n\n    this.attribute_map = {\n      kvs: 'kvs',\n      account: 'account',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): ApplicationKVStorage {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['kvs']))\n      throw new Error(\n        `Response is missing required array field 'kvs': ${data}`\n      );\n    return new ApplicationKVStorage({\n      kvs: data['kvs'].map(AvmKeyValue.from_obj_for_encoding),\n      account: data['account'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * References an account's local state for an application.\n */\nexport class ApplicationLocalReference extends BaseModel {\n  /**\n   * Address of the account with the local state.\n   */\n  public account: string;\n\n  /**\n   * Application ID of the local state application.\n   */\n  public app: number | bigint;\n\n  /**\n   * Creates a new `ApplicationLocalReference` object.\n   * @param account - Address of the account with the local state.\n   * @param app - Application ID of the local state application.\n   */\n  constructor({ account, app }: { account: string; app: number | bigint }) {\n    super();\n    this.account = account;\n    this.app = app;\n\n    this.attribute_map = {\n      account: 'account',\n      app: 'app',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): ApplicationLocalReference {\n    /* eslint-disable dot-notation */\n    if (typeof data['account'] === 'undefined')\n      throw new Error(`Response is missing required field 'account': ${data}`);\n    if (typeof data['app'] === 'undefined')\n      throw new Error(`Response is missing required field 'app': ${data}`);\n    return new ApplicationLocalReference({\n      account: data['account'],\n      app: data['app'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Stores local state associated with an application.\n */\nexport class ApplicationLocalState extends BaseModel {\n  /**\n   * The application which this local state is for.\n   */\n  public id: number | bigint;\n\n  /**\n   * (hsch) schema.\n   */\n  public schema: ApplicationStateSchema;\n\n  /**\n   * (tkv) storage.\n   */\n  public keyValue?: TealKeyValue[];\n\n  /**\n   * Creates a new `ApplicationLocalState` object.\n   * @param id - The application which this local state is for.\n   * @param schema - (hsch) schema.\n   * @param keyValue - (tkv) storage.\n   */\n  constructor({\n    id,\n    schema,\n    keyValue,\n  }: {\n    id: number | bigint;\n    schema: ApplicationStateSchema;\n    keyValue?: TealKeyValue[];\n  }) {\n    super();\n    this.id = id;\n    this.schema = schema;\n    this.keyValue = keyValue;\n\n    this.attribute_map = {\n      id: 'id',\n      schema: 'schema',\n      keyValue: 'key-value',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): ApplicationLocalState {\n    /* eslint-disable dot-notation */\n    if (typeof data['id'] === 'undefined')\n      throw new Error(`Response is missing required field 'id': ${data}`);\n    if (typeof data['schema'] === 'undefined')\n      throw new Error(`Response is missing required field 'schema': ${data}`);\n    return new ApplicationLocalState({\n      id: data['id'],\n      schema: ApplicationStateSchema.from_obj_for_encoding(data['schema']),\n      keyValue:\n        typeof data['key-value'] !== 'undefined'\n          ? data['key-value'].map(TealKeyValue.from_obj_for_encoding)\n          : undefined,\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Stores the global information associated with an application.\n */\nexport class ApplicationParams extends BaseModel {\n  /**\n   * (approv) approval program.\n   */\n  public approvalProgram: Uint8Array;\n\n  /**\n   * (clearp) approval program.\n   */\n  public clearStateProgram: Uint8Array;\n\n  /**\n   * The address that created this application. This is the address where the\n   * parameters and global state for this application can be found.\n   */\n  public creator: string;\n\n  /**\n   * (epp) the amount of extra program pages available to this app.\n   */\n  public extraProgramPages?: number | bigint;\n\n  /**\n   * (gs) global state\n   */\n  public globalState?: TealKeyValue[];\n\n  /**\n   * (gsch) global schema\n   */\n  public globalStateSchema?: ApplicationStateSchema;\n\n  /**\n   * (lsch) local schema\n   */\n  public localStateSchema?: ApplicationStateSchema;\n\n  /**\n   * Creates a new `ApplicationParams` object.\n   * @param approvalProgram - (approv) approval program.\n   * @param clearStateProgram - (clearp) approval program.\n   * @param creator - The address that created this application. This is the address where the\n   * parameters and global state for this application can be found.\n   * @param extraProgramPages - (epp) the amount of extra program pages available to this app.\n   * @param globalState - (gs) global state\n   * @param globalStateSchema - (gsch) global schema\n   * @param localStateSchema - (lsch) local schema\n   */\n  constructor({\n    approvalProgram,\n    clearStateProgram,\n    creator,\n    extraProgramPages,\n    globalState,\n    globalStateSchema,\n    localStateSchema,\n  }: {\n    approvalProgram: string | Uint8Array;\n    clearStateProgram: string | Uint8Array;\n    creator: string;\n    extraProgramPages?: number | bigint;\n    globalState?: TealKeyValue[];\n    globalStateSchema?: ApplicationStateSchema;\n    localStateSchema?: ApplicationStateSchema;\n  }) {\n    super();\n    this.approvalProgram =\n      typeof approvalProgram === 'string'\n        ? new Uint8Array(Buffer.from(approvalProgram, 'base64'))\n        : approvalProgram;\n    this.clearStateProgram =\n      typeof clearStateProgram === 'string'\n        ? new Uint8Array(Buffer.from(clearStateProgram, 'base64'))\n        : clearStateProgram;\n    this.creator = creator;\n    this.extraProgramPages = extraProgramPages;\n    this.globalState = globalState;\n    this.globalStateSchema = globalStateSchema;\n    this.localStateSchema = localStateSchema;\n\n    this.attribute_map = {\n      approvalProgram: 'approval-program',\n      clearStateProgram: 'clear-state-program',\n      creator: 'creator',\n      extraProgramPages: 'extra-program-pages',\n      globalState: 'global-state',\n      globalStateSchema: 'global-state-schema',\n      localStateSchema: 'local-state-schema',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): ApplicationParams {\n    /* eslint-disable dot-notation */\n    if (typeof data['approval-program'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'approval-program': ${data}`\n      );\n    if (typeof data['clear-state-program'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'clear-state-program': ${data}`\n      );\n    if (typeof data['creator'] === 'undefined')\n      throw new Error(`Response is missing required field 'creator': ${data}`);\n    return new ApplicationParams({\n      approvalProgram: data['approval-program'],\n      clearStateProgram: data['clear-state-program'],\n      creator: data['creator'],\n      extraProgramPages: data['extra-program-pages'],\n      globalState:\n        typeof data['global-state'] !== 'undefined'\n          ? data['global-state'].map(TealKeyValue.from_obj_for_encoding)\n          : undefined,\n      globalStateSchema:\n        typeof data['global-state-schema'] !== 'undefined'\n          ? ApplicationStateSchema.from_obj_for_encoding(\n              data['global-state-schema']\n            )\n          : undefined,\n      localStateSchema:\n        typeof data['local-state-schema'] !== 'undefined'\n          ? ApplicationStateSchema.from_obj_for_encoding(\n              data['local-state-schema']\n            )\n          : undefined,\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * An operation against an application's global/local/box state.\n */\nexport class ApplicationStateOperation extends BaseModel {\n  /**\n   * Type of application state. Value `g` is **global state**, `l` is **local\n   * state**, `b` is **boxes**.\n   */\n  public appStateType: string;\n\n  /**\n   * The key (name) of the global/local/box state.\n   */\n  public key: Uint8Array;\n\n  /**\n   * Operation type. Value `w` is **write**, `d` is **delete**.\n   */\n  public operation: string;\n\n  /**\n   * For local state changes, the address of the account associated with the local\n   * state.\n   */\n  public account?: string;\n\n  /**\n   * Represents an AVM value.\n   */\n  public newValue?: AvmValue;\n\n  /**\n   * Creates a new `ApplicationStateOperation` object.\n   * @param appStateType - Type of application state. Value `g` is **global state**, `l` is **local\n   * state**, `b` is **boxes**.\n   * @param key - The key (name) of the global/local/box state.\n   * @param operation - Operation type. Value `w` is **write**, `d` is **delete**.\n   * @param account - For local state changes, the address of the account associated with the local\n   * state.\n   * @param newValue - Represents an AVM value.\n   */\n  constructor({\n    appStateType,\n    key,\n    operation,\n    account,\n    newValue,\n  }: {\n    appStateType: string;\n    key: string | Uint8Array;\n    operation: string;\n    account?: string;\n    newValue?: AvmValue;\n  }) {\n    super();\n    this.appStateType = appStateType;\n    this.key =\n      typeof key === 'string'\n        ? new Uint8Array(Buffer.from(key, 'base64'))\n        : key;\n    this.operation = operation;\n    this.account = account;\n    this.newValue = newValue;\n\n    this.attribute_map = {\n      appStateType: 'app-state-type',\n      key: 'key',\n      operation: 'operation',\n      account: 'account',\n      newValue: 'new-value',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): ApplicationStateOperation {\n    /* eslint-disable dot-notation */\n    if (typeof data['app-state-type'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'app-state-type': ${data}`\n      );\n    if (typeof data['key'] === 'undefined')\n      throw new Error(`Response is missing required field 'key': ${data}`);\n    if (typeof data['operation'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'operation': ${data}`\n      );\n    return new ApplicationStateOperation({\n      appStateType: data['app-state-type'],\n      key: data['key'],\n      operation: data['operation'],\n      account: data['account'],\n      newValue:\n        typeof data['new-value'] !== 'undefined'\n          ? AvmValue.from_obj_for_encoding(data['new-value'])\n          : undefined,\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Specifies maximums on the number of each type that may be stored.\n */\nexport class ApplicationStateSchema extends BaseModel {\n  /**\n   * (nui) num of uints.\n   */\n  public numUint: number | bigint;\n\n  /**\n   * (nbs) num of byte slices.\n   */\n  public numByteSlice: number | bigint;\n\n  /**\n   * Creates a new `ApplicationStateSchema` object.\n   * @param numUint - (nui) num of uints.\n   * @param numByteSlice - (nbs) num of byte slices.\n   */\n  constructor({\n    numUint,\n    numByteSlice,\n  }: {\n    numUint: number | bigint;\n    numByteSlice: number | bigint;\n  }) {\n    super();\n    this.numUint = numUint;\n    this.numByteSlice = numByteSlice;\n\n    this.attribute_map = {\n      numUint: 'num-uint',\n      numByteSlice: 'num-byte-slice',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): ApplicationStateSchema {\n    /* eslint-disable dot-notation */\n    if (typeof data['num-uint'] === 'undefined')\n      throw new Error(`Response is missing required field 'num-uint': ${data}`);\n    if (typeof data['num-byte-slice'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'num-byte-slice': ${data}`\n      );\n    return new ApplicationStateSchema({\n      numUint: data['num-uint'],\n      numByteSlice: data['num-byte-slice'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Specifies both the unique identifier and the parameters for an asset\n */\nexport class Asset extends BaseModel {\n  /**\n   * unique asset identifier\n   */\n  public index: number | bigint;\n\n  /**\n   * AssetParams specifies the parameters for an asset.\n   * (apar) when part of an AssetConfig transaction.\n   * Definition:\n   * data/transactions/asset.go : AssetParams\n   */\n  public params: AssetParams;\n\n  /**\n   * Creates a new `Asset` object.\n   * @param index - unique asset identifier\n   * @param params - AssetParams specifies the parameters for an asset.\n   * (apar) when part of an AssetConfig transaction.\n   * Definition:\n   * data/transactions/asset.go : AssetParams\n   */\n  constructor({\n    index,\n    params,\n  }: {\n    index: number | bigint;\n    params: AssetParams;\n  }) {\n    super();\n    this.index = index;\n    this.params = params;\n\n    this.attribute_map = {\n      index: 'index',\n      params: 'params',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): Asset {\n    /* eslint-disable dot-notation */\n    if (typeof data['index'] === 'undefined')\n      throw new Error(`Response is missing required field 'index': ${data}`);\n    if (typeof data['params'] === 'undefined')\n      throw new Error(`Response is missing required field 'params': ${data}`);\n    return new Asset({\n      index: data['index'],\n      params: AssetParams.from_obj_for_encoding(data['params']),\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Describes an asset held by an account.\n * Definition:\n * data/basics/userBalance.go : AssetHolding\n */\nexport class AssetHolding extends BaseModel {\n  /**\n   * (a) number of units held.\n   */\n  public amount: number | bigint;\n\n  /**\n   * Asset ID of the holding.\n   */\n  public assetId: number | bigint;\n\n  /**\n   * (f) whether or not the holding is frozen.\n   */\n  public isFrozen: boolean;\n\n  /**\n   * Creates a new `AssetHolding` object.\n   * @param amount - (a) number of units held.\n   * @param assetId - Asset ID of the holding.\n   * @param isFrozen - (f) whether or not the holding is frozen.\n   */\n  constructor({\n    amount,\n    assetId,\n    isFrozen,\n  }: {\n    amount: number | bigint;\n    assetId: number | bigint;\n    isFrozen: boolean;\n  }) {\n    super();\n    this.amount = amount;\n    this.assetId = assetId;\n    this.isFrozen = isFrozen;\n\n    this.attribute_map = {\n      amount: 'amount',\n      assetId: 'asset-id',\n      isFrozen: 'is-frozen',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): AssetHolding {\n    /* eslint-disable dot-notation */\n    if (typeof data['amount'] === 'undefined')\n      throw new Error(`Response is missing required field 'amount': ${data}`);\n    if (typeof data['asset-id'] === 'undefined')\n      throw new Error(`Response is missing required field 'asset-id': ${data}`);\n    if (typeof data['is-frozen'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'is-frozen': ${data}`\n      );\n    return new AssetHolding({\n      amount: data['amount'],\n      assetId: data['asset-id'],\n      isFrozen: data['is-frozen'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * References an asset held by an account.\n */\nexport class AssetHoldingReference extends BaseModel {\n  /**\n   * Address of the account holding the asset.\n   */\n  public account: string;\n\n  /**\n   * Asset ID of the holding.\n   */\n  public asset: number | bigint;\n\n  /**\n   * Creates a new `AssetHoldingReference` object.\n   * @param account - Address of the account holding the asset.\n   * @param asset - Asset ID of the holding.\n   */\n  constructor({ account, asset }: { account: string; asset: number | bigint }) {\n    super();\n    this.account = account;\n    this.asset = asset;\n\n    this.attribute_map = {\n      account: 'account',\n      asset: 'asset',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): AssetHoldingReference {\n    /* eslint-disable dot-notation */\n    if (typeof data['account'] === 'undefined')\n      throw new Error(`Response is missing required field 'account': ${data}`);\n    if (typeof data['asset'] === 'undefined')\n      throw new Error(`Response is missing required field 'asset': ${data}`);\n    return new AssetHoldingReference({\n      account: data['account'],\n      asset: data['asset'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * AssetParams specifies the parameters for an asset.\n * (apar) when part of an AssetConfig transaction.\n * Definition:\n * data/transactions/asset.go : AssetParams\n */\nexport class AssetParams extends BaseModel {\n  /**\n   * The address that created this asset. This is the address where the parameters\n   * for this asset can be found, and also the address where unwanted asset units can\n   * be sent in the worst case.\n   */\n  public creator: string;\n\n  /**\n   * (dc) The number of digits to use after the decimal point when displaying this\n   * asset. If 0, the asset is not divisible. If 1, the base unit of the asset is in\n   * tenths. If 2, the base unit of the asset is in hundredths, and so on. This value\n   * must be between 0 and 19 (inclusive).\n   */\n  public decimals: number | bigint;\n\n  /**\n   * (t) The total number of units of this asset.\n   */\n  public total: number | bigint;\n\n  /**\n   * (c) Address of account used to clawback holdings of this asset. If empty,\n   * clawback is not permitted.\n   */\n  public clawback?: string;\n\n  /**\n   * (df) Whether holdings of this asset are frozen by default.\n   */\n  public defaultFrozen?: boolean;\n\n  /**\n   * (f) Address of account used to freeze holdings of this asset. If empty, freezing\n   * is not permitted.\n   */\n  public freeze?: string;\n\n  /**\n   * (m) Address of account used to manage the keys of this asset and to destroy it.\n   */\n  public manager?: string;\n\n  /**\n   * (am) A commitment to some unspecified asset metadata. The format of this\n   * metadata is up to the application.\n   */\n  public metadataHash?: Uint8Array;\n\n  /**\n   * (an) Name of this asset, as supplied by the creator. Included only when the\n   * asset name is composed of printable utf-8 characters.\n   */\n  public name?: string;\n\n  /**\n   * Base64 encoded name of this asset, as supplied by the creator.\n   */\n  public nameB64?: Uint8Array;\n\n  /**\n   * (r) Address of account holding reserve (non-minted) units of this asset.\n   */\n  public reserve?: string;\n\n  /**\n   * (un) Name of a unit of this asset, as supplied by the creator. Included only\n   * when the name of a unit of this asset is composed of printable utf-8 characters.\n   */\n  public unitName?: string;\n\n  /**\n   * Base64 encoded name of a unit of this asset, as supplied by the creator.\n   */\n  public unitNameB64?: Uint8Array;\n\n  /**\n   * (au) URL where more information about the asset can be retrieved. Included only\n   * when the URL is composed of printable utf-8 characters.\n   */\n  public url?: string;\n\n  /**\n   * Base64 encoded URL where more information about the asset can be retrieved.\n   */\n  public urlB64?: Uint8Array;\n\n  /**\n   * Creates a new `AssetParams` object.\n   * @param creator - The address that created this asset. This is the address where the parameters\n   * for this asset can be found, and also the address where unwanted asset units can\n   * be sent in the worst case.\n   * @param decimals - (dc) The number of digits to use after the decimal point when displaying this\n   * asset. If 0, the asset is not divisible. If 1, the base unit of the asset is in\n   * tenths. If 2, the base unit of the asset is in hundredths, and so on. This value\n   * must be between 0 and 19 (inclusive).\n   * @param total - (t) The total number of units of this asset.\n   * @param clawback - (c) Address of account used to clawback holdings of this asset. If empty,\n   * clawback is not permitted.\n   * @param defaultFrozen - (df) Whether holdings of this asset are frozen by default.\n   * @param freeze - (f) Address of account used to freeze holdings of this asset. If empty, freezing\n   * is not permitted.\n   * @param manager - (m) Address of account used to manage the keys of this asset and to destroy it.\n   * @param metadataHash - (am) A commitment to some unspecified asset metadata. The format of this\n   * metadata is up to the application.\n   * @param name - (an) Name of this asset, as supplied by the creator. Included only when the\n   * asset name is composed of printable utf-8 characters.\n   * @param nameB64 - Base64 encoded name of this asset, as supplied by the creator.\n   * @param reserve - (r) Address of account holding reserve (non-minted) units of this asset.\n   * @param unitName - (un) Name of a unit of this asset, as supplied by the creator. Included only\n   * when the name of a unit of this asset is composed of printable utf-8 characters.\n   * @param unitNameB64 - Base64 encoded name of a unit of this asset, as supplied by the creator.\n   * @param url - (au) URL where more information about the asset can be retrieved. Included only\n   * when the URL is composed of printable utf-8 characters.\n   * @param urlB64 - Base64 encoded URL where more information about the asset can be retrieved.\n   */\n  constructor({\n    creator,\n    decimals,\n    total,\n    clawback,\n    defaultFrozen,\n    freeze,\n    manager,\n    metadataHash,\n    name,\n    nameB64,\n    reserve,\n    unitName,\n    unitNameB64,\n    url,\n    urlB64,\n  }: {\n    creator: string;\n    decimals: number | bigint;\n    total: number | bigint;\n    clawback?: string;\n    defaultFrozen?: boolean;\n    freeze?: string;\n    manager?: string;\n    metadataHash?: string | Uint8Array;\n    name?: string;\n    nameB64?: string | Uint8Array;\n    reserve?: string;\n    unitName?: string;\n    unitNameB64?: string | Uint8Array;\n    url?: string;\n    urlB64?: string | Uint8Array;\n  }) {\n    super();\n    this.creator = creator;\n    this.decimals = decimals;\n    this.total = total;\n    this.clawback = clawback;\n    this.defaultFrozen = defaultFrozen;\n    this.freeze = freeze;\n    this.manager = manager;\n    this.metadataHash =\n      typeof metadataHash === 'string'\n        ? new Uint8Array(Buffer.from(metadataHash, 'base64'))\n        : metadataHash;\n    this.name = name;\n    this.nameB64 =\n      typeof nameB64 === 'string'\n        ? new Uint8Array(Buffer.from(nameB64, 'base64'))\n        : nameB64;\n    this.reserve = reserve;\n    this.unitName = unitName;\n    this.unitNameB64 =\n      typeof unitNameB64 === 'string'\n        ? new Uint8Array(Buffer.from(unitNameB64, 'base64'))\n        : unitNameB64;\n    this.url = url;\n    this.urlB64 =\n      typeof urlB64 === 'string'\n        ? new Uint8Array(Buffer.from(urlB64, 'base64'))\n        : urlB64;\n\n    this.attribute_map = {\n      creator: 'creator',\n      decimals: 'decimals',\n      total: 'total',\n      clawback: 'clawback',\n      defaultFrozen: 'default-frozen',\n      freeze: 'freeze',\n      manager: 'manager',\n      metadataHash: 'metadata-hash',\n      name: 'name',\n      nameB64: 'name-b64',\n      reserve: 'reserve',\n      unitName: 'unit-name',\n      unitNameB64: 'unit-name-b64',\n      url: 'url',\n      urlB64: 'url-b64',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): AssetParams {\n    /* eslint-disable dot-notation */\n    if (typeof data['creator'] === 'undefined')\n      throw new Error(`Response is missing required field 'creator': ${data}`);\n    if (typeof data['decimals'] === 'undefined')\n      throw new Error(`Response is missing required field 'decimals': ${data}`);\n    if (typeof data['total'] === 'undefined')\n      throw new Error(`Response is missing required field 'total': ${data}`);\n    return new AssetParams({\n      creator: data['creator'],\n      decimals: data['decimals'],\n      total: data['total'],\n      clawback: data['clawback'],\n      defaultFrozen: data['default-frozen'],\n      freeze: data['freeze'],\n      manager: data['manager'],\n      metadataHash: data['metadata-hash'],\n      name: data['name'],\n      nameB64: data['name-b64'],\n      reserve: data['reserve'],\n      unitName: data['unit-name'],\n      unitNameB64: data['unit-name-b64'],\n      url: data['url'],\n      urlB64: data['url-b64'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Represents an AVM key-value pair in an application store.\n */\nexport class AvmKeyValue extends BaseModel {\n  public key: Uint8Array;\n\n  /**\n   * Represents an AVM value.\n   */\n  public value: AvmValue;\n\n  /**\n   * Creates a new `AvmKeyValue` object.\n   * @param key -\n   * @param value - Represents an AVM value.\n   */\n  constructor({ key, value }: { key: string | Uint8Array; value: AvmValue }) {\n    super();\n    this.key =\n      typeof key === 'string'\n        ? new Uint8Array(Buffer.from(key, 'base64'))\n        : key;\n    this.value = value;\n\n    this.attribute_map = {\n      key: 'key',\n      value: 'value',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): AvmKeyValue {\n    /* eslint-disable dot-notation */\n    if (typeof data['key'] === 'undefined')\n      throw new Error(`Response is missing required field 'key': ${data}`);\n    if (typeof data['value'] === 'undefined')\n      throw new Error(`Response is missing required field 'value': ${data}`);\n    return new AvmKeyValue({\n      key: data['key'],\n      value: AvmValue.from_obj_for_encoding(data['value']),\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Represents an AVM value.\n */\nexport class AvmValue extends BaseModel {\n  /**\n   * value type. Value `1` refers to **bytes**, value `2` refers to **uint64**\n   */\n  public type: number | bigint;\n\n  /**\n   * bytes value.\n   */\n  public bytes?: Uint8Array;\n\n  /**\n   * uint value.\n   */\n  public uint?: number | bigint;\n\n  /**\n   * Creates a new `AvmValue` object.\n   * @param type - value type. Value `1` refers to **bytes**, value `2` refers to **uint64**\n   * @param bytes - bytes value.\n   * @param uint - uint value.\n   */\n  constructor({\n    type,\n    bytes,\n    uint,\n  }: {\n    type: number | bigint;\n    bytes?: string | Uint8Array;\n    uint?: number | bigint;\n  }) {\n    super();\n    this.type = type;\n    this.bytes =\n      typeof bytes === 'string'\n        ? new Uint8Array(Buffer.from(bytes, 'base64'))\n        : bytes;\n    this.uint = uint;\n\n    this.attribute_map = {\n      type: 'type',\n      bytes: 'bytes',\n      uint: 'uint',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): AvmValue {\n    /* eslint-disable dot-notation */\n    if (typeof data['type'] === 'undefined')\n      throw new Error(`Response is missing required field 'type': ${data}`);\n    return new AvmValue({\n      type: data['type'],\n      bytes: data['bytes'],\n      uint: data['uint'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Hash of a block header.\n */\nexport class BlockHashResponse extends BaseModel {\n  /**\n   * Block header hash.\n   */\n  public blockhash: string;\n\n  /**\n   * Creates a new `BlockHashResponse` object.\n   * @param blockhash - Block header hash.\n   */\n  constructor({ blockhash }: { blockhash: string }) {\n    super();\n    this.blockhash = blockhash;\n\n    this.attribute_map = {\n      blockhash: 'blockHash',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): BlockHashResponse {\n    /* eslint-disable dot-notation */\n    if (typeof data['blockHash'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'blockHash': ${data}`\n      );\n    return new BlockHashResponse({\n      blockhash: data['blockHash'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Encoded block object.\n */\nexport class BlockResponse extends BaseModel {\n  /**\n   * Block header data.\n   */\n  public block: BlockHeader;\n\n  /**\n   * Optional certificate object. This is only included when the format is set to\n   * message pack.\n   */\n  public cert?: Record<string, any>;\n\n  /**\n   * Creates a new `BlockResponse` object.\n   * @param block - Block header data.\n   * @param cert - Optional certificate object. This is only included when the format is set to\n   * message pack.\n   */\n  constructor({\n    block,\n    cert,\n  }: {\n    block: BlockHeader;\n    cert?: Record<string, any>;\n  }) {\n    super();\n    this.block = block;\n    this.cert = cert;\n\n    this.attribute_map = {\n      block: 'block',\n      cert: 'cert',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): BlockResponse {\n    /* eslint-disable dot-notation */\n    if (typeof data['block'] === 'undefined')\n      throw new Error(`Response is missing required field 'block': ${data}`);\n    return new BlockResponse({\n      block: data['block'],\n      cert: data['cert'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Top level transaction IDs in a block.\n */\nexport class BlockTxidsResponse extends BaseModel {\n  /**\n   * Block transaction IDs.\n   */\n  public blocktxids: string[];\n\n  /**\n   * Creates a new `BlockTxidsResponse` object.\n   * @param blocktxids - Block transaction IDs.\n   */\n  constructor({ blocktxids }: { blocktxids: string[] }) {\n    super();\n    this.blocktxids = blocktxids;\n\n    this.attribute_map = {\n      blocktxids: 'blockTxids',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): BlockTxidsResponse {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['blockTxids']))\n      throw new Error(\n        `Response is missing required array field 'blockTxids': ${data}`\n      );\n    return new BlockTxidsResponse({\n      blocktxids: data['blockTxids'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Box name and its content.\n */\nexport class Box extends BaseModel {\n  /**\n   * (name) box name, base64 encoded\n   */\n  public name: Uint8Array;\n\n  /**\n   * The round for which this information is relevant\n   */\n  public round: number | bigint;\n\n  /**\n   * (value) box value, base64 encoded.\n   */\n  public value: Uint8Array;\n\n  /**\n   * Creates a new `Box` object.\n   * @param name - (name) box name, base64 encoded\n   * @param round - The round for which this information is relevant\n   * @param value - (value) box value, base64 encoded.\n   */\n  constructor({\n    name,\n    round,\n    value,\n  }: {\n    name: string | Uint8Array;\n    round: number | bigint;\n    value: string | Uint8Array;\n  }) {\n    super();\n    this.name =\n      typeof name === 'string'\n        ? new Uint8Array(Buffer.from(name, 'base64'))\n        : name;\n    this.round = round;\n    this.value =\n      typeof value === 'string'\n        ? new Uint8Array(Buffer.from(value, 'base64'))\n        : value;\n\n    this.attribute_map = {\n      name: 'name',\n      round: 'round',\n      value: 'value',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): Box {\n    /* eslint-disable dot-notation */\n    if (typeof data['name'] === 'undefined')\n      throw new Error(`Response is missing required field 'name': ${data}`);\n    if (typeof data['round'] === 'undefined')\n      throw new Error(`Response is missing required field 'round': ${data}`);\n    if (typeof data['value'] === 'undefined')\n      throw new Error(`Response is missing required field 'value': ${data}`);\n    return new Box({\n      name: data['name'],\n      round: data['round'],\n      value: data['value'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Box descriptor describes a Box.\n */\nexport class BoxDescriptor extends BaseModel {\n  /**\n   * Base64 encoded box name\n   */\n  public name: Uint8Array;\n\n  /**\n   * Creates a new `BoxDescriptor` object.\n   * @param name - Base64 encoded box name\n   */\n  constructor({ name }: { name: string | Uint8Array }) {\n    super();\n    this.name =\n      typeof name === 'string'\n        ? new Uint8Array(Buffer.from(name, 'base64'))\n        : name;\n\n    this.attribute_map = {\n      name: 'name',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): BoxDescriptor {\n    /* eslint-disable dot-notation */\n    if (typeof data['name'] === 'undefined')\n      throw new Error(`Response is missing required field 'name': ${data}`);\n    return new BoxDescriptor({\n      name: data['name'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * References a box of an application.\n */\nexport class BoxReference extends BaseModel {\n  /**\n   * Application ID which this box belongs to\n   */\n  public app: number | bigint;\n\n  /**\n   * Base64 encoded box name\n   */\n  public name: Uint8Array;\n\n  /**\n   * Creates a new `BoxReference` object.\n   * @param app - Application ID which this box belongs to\n   * @param name - Base64 encoded box name\n   */\n  constructor({\n    app,\n    name,\n  }: {\n    app: number | bigint;\n    name: string | Uint8Array;\n  }) {\n    super();\n    this.app = app;\n    this.name =\n      typeof name === 'string'\n        ? new Uint8Array(Buffer.from(name, 'base64'))\n        : name;\n\n    this.attribute_map = {\n      app: 'app',\n      name: 'name',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): BoxReference {\n    /* eslint-disable dot-notation */\n    if (typeof data['app'] === 'undefined')\n      throw new Error(`Response is missing required field 'app': ${data}`);\n    if (typeof data['name'] === 'undefined')\n      throw new Error(`Response is missing required field 'name': ${data}`);\n    return new BoxReference({\n      app: data['app'],\n      name: data['name'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Box names of an application\n */\nexport class BoxesResponse extends BaseModel {\n  public boxes: BoxDescriptor[];\n\n  /**\n   * Creates a new `BoxesResponse` object.\n   * @param boxes -\n   */\n  constructor({ boxes }: { boxes: BoxDescriptor[] }) {\n    super();\n    this.boxes = boxes;\n\n    this.attribute_map = {\n      boxes: 'boxes',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): BoxesResponse {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['boxes']))\n      throw new Error(\n        `Response is missing required array field 'boxes': ${data}`\n      );\n    return new BoxesResponse({\n      boxes: data['boxes'].map(BoxDescriptor.from_obj_for_encoding),\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\nexport class BuildVersion extends BaseModel {\n  public branch: string;\n\n  public buildNumber: number | bigint;\n\n  public channel: string;\n\n  public commitHash: string;\n\n  public major: number | bigint;\n\n  public minor: number | bigint;\n\n  /**\n   * Creates a new `BuildVersion` object.\n   * @param branch -\n   * @param buildNumber -\n   * @param channel -\n   * @param commitHash -\n   * @param major -\n   * @param minor -\n   */\n  constructor({\n    branch,\n    buildNumber,\n    channel,\n    commitHash,\n    major,\n    minor,\n  }: {\n    branch: string;\n    buildNumber: number | bigint;\n    channel: string;\n    commitHash: string;\n    major: number | bigint;\n    minor: number | bigint;\n  }) {\n    super();\n    this.branch = branch;\n    this.buildNumber = buildNumber;\n    this.channel = channel;\n    this.commitHash = commitHash;\n    this.major = major;\n    this.minor = minor;\n\n    this.attribute_map = {\n      branch: 'branch',\n      buildNumber: 'build_number',\n      channel: 'channel',\n      commitHash: 'commit_hash',\n      major: 'major',\n      minor: 'minor',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): BuildVersion {\n    /* eslint-disable dot-notation */\n    if (typeof data['branch'] === 'undefined')\n      throw new Error(`Response is missing required field 'branch': ${data}`);\n    if (typeof data['build_number'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'build_number': ${data}`\n      );\n    if (typeof data['channel'] === 'undefined')\n      throw new Error(`Response is missing required field 'channel': ${data}`);\n    if (typeof data['commit_hash'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'commit_hash': ${data}`\n      );\n    if (typeof data['major'] === 'undefined')\n      throw new Error(`Response is missing required field 'major': ${data}`);\n    if (typeof data['minor'] === 'undefined')\n      throw new Error(`Response is missing required field 'minor': ${data}`);\n    return new BuildVersion({\n      branch: data['branch'],\n      buildNumber: data['build_number'],\n      channel: data['channel'],\n      commitHash: data['commit_hash'],\n      major: data['major'],\n      minor: data['minor'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Teal compile Result\n */\nexport class CompileResponse extends BaseModel {\n  /**\n   * base32 SHA512_256 of program bytes (Address style)\n   */\n  public hash: string;\n\n  /**\n   * base64 encoded program bytes\n   */\n  public result: string;\n\n  /**\n   * JSON of the source map\n   */\n  public sourcemap?: Record<string, any>;\n\n  /**\n   * Creates a new `CompileResponse` object.\n   * @param hash - base32 SHA512_256 of program bytes (Address style)\n   * @param result - base64 encoded program bytes\n   * @param sourcemap - JSON of the source map\n   */\n  constructor({\n    hash,\n    result,\n    sourcemap,\n  }: {\n    hash: string;\n    result: string;\n    sourcemap?: Record<string, any>;\n  }) {\n    super();\n    this.hash = hash;\n    this.result = result;\n    this.sourcemap = sourcemap;\n\n    this.attribute_map = {\n      hash: 'hash',\n      result: 'result',\n      sourcemap: 'sourcemap',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): CompileResponse {\n    /* eslint-disable dot-notation */\n    if (typeof data['hash'] === 'undefined')\n      throw new Error(`Response is missing required field 'hash': ${data}`);\n    if (typeof data['result'] === 'undefined')\n      throw new Error(`Response is missing required field 'result': ${data}`);\n    return new CompileResponse({\n      hash: data['hash'],\n      result: data['result'],\n      sourcemap: data['sourcemap'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Teal disassembly Result\n */\nexport class DisassembleResponse extends BaseModel {\n  /**\n   * disassembled Teal code\n   */\n  public result: string;\n\n  /**\n   * Creates a new `DisassembleResponse` object.\n   * @param result - disassembled Teal code\n   */\n  constructor({ result }: { result: string }) {\n    super();\n    this.result = result;\n\n    this.attribute_map = {\n      result: 'result',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): DisassembleResponse {\n    /* eslint-disable dot-notation */\n    if (typeof data['result'] === 'undefined')\n      throw new Error(`Response is missing required field 'result': ${data}`);\n    return new DisassembleResponse({\n      result: data['result'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Request data type for dryrun endpoint. Given the Transactions and simulated\n * ledger state upload, run TEAL scripts and return debugging information.\n */\nexport class DryrunRequest extends BaseModel {\n  public accounts: Account[];\n\n  public apps: Application[];\n\n  /**\n   * LatestTimestamp is available to some TEAL scripts. Defaults to the latest\n   * confirmed timestamp this algod is attached to.\n   */\n  public latestTimestamp: number | bigint;\n\n  /**\n   * ProtocolVersion specifies a specific version string to operate under, otherwise\n   * whatever the current protocol of the network this algod is running in.\n   */\n  public protocolVersion: string;\n\n  /**\n   * Round is available to some TEAL scripts. Defaults to the current round on the\n   * network this algod is attached to.\n   */\n  public round: number | bigint;\n\n  public sources: DryrunSource[];\n\n  public txns: EncodedSignedTransaction[];\n\n  /**\n   * Creates a new `DryrunRequest` object.\n   * @param accounts -\n   * @param apps -\n   * @param latestTimestamp - LatestTimestamp is available to some TEAL scripts. Defaults to the latest\n   * confirmed timestamp this algod is attached to.\n   * @param protocolVersion - ProtocolVersion specifies a specific version string to operate under, otherwise\n   * whatever the current protocol of the network this algod is running in.\n   * @param round - Round is available to some TEAL scripts. Defaults to the current round on the\n   * network this algod is attached to.\n   * @param sources -\n   * @param txns -\n   */\n  constructor({\n    accounts,\n    apps,\n    latestTimestamp,\n    protocolVersion,\n    round,\n    sources,\n    txns,\n  }: {\n    accounts: Account[];\n    apps: Application[];\n    latestTimestamp: number | bigint;\n    protocolVersion: string;\n    round: number | bigint;\n    sources: DryrunSource[];\n    txns: EncodedSignedTransaction[];\n  }) {\n    super();\n    this.accounts = accounts;\n    this.apps = apps;\n    this.latestTimestamp = latestTimestamp;\n    this.protocolVersion = protocolVersion;\n    this.round = round;\n    this.sources = sources;\n    this.txns = txns;\n\n    this.attribute_map = {\n      accounts: 'accounts',\n      apps: 'apps',\n      latestTimestamp: 'latest-timestamp',\n      protocolVersion: 'protocol-version',\n      round: 'round',\n      sources: 'sources',\n      txns: 'txns',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): DryrunRequest {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['accounts']))\n      throw new Error(\n        `Response is missing required array field 'accounts': ${data}`\n      );\n    if (!Array.isArray(data['apps']))\n      throw new Error(\n        `Response is missing required array field 'apps': ${data}`\n      );\n    if (typeof data['latest-timestamp'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'latest-timestamp': ${data}`\n      );\n    if (typeof data['protocol-version'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'protocol-version': ${data}`\n      );\n    if (typeof data['round'] === 'undefined')\n      throw new Error(`Response is missing required field 'round': ${data}`);\n    if (!Array.isArray(data['sources']))\n      throw new Error(\n        `Response is missing required array field 'sources': ${data}`\n      );\n    if (!Array.isArray(data['txns']))\n      throw new Error(\n        `Response is missing required array field 'txns': ${data}`\n      );\n    return new DryrunRequest({\n      accounts: data['accounts'].map(Account.from_obj_for_encoding),\n      apps: data['apps'].map(Application.from_obj_for_encoding),\n      latestTimestamp: data['latest-timestamp'],\n      protocolVersion: data['protocol-version'],\n      round: data['round'],\n      sources: data['sources'].map(DryrunSource.from_obj_for_encoding),\n      txns: data['txns'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * DryrunResponse contains per-txn debug information from a dryrun.\n */\nexport class DryrunResponse extends BaseModel {\n  public error: string;\n\n  /**\n   * Protocol version is the protocol version Dryrun was operated under.\n   */\n  public protocolVersion: string;\n\n  public txns: DryrunTxnResult[];\n\n  /**\n   * Creates a new `DryrunResponse` object.\n   * @param error -\n   * @param protocolVersion - Protocol version is the protocol version Dryrun was operated under.\n   * @param txns -\n   */\n  constructor({\n    error,\n    protocolVersion,\n    txns,\n  }: {\n    error: string;\n    protocolVersion: string;\n    txns: DryrunTxnResult[];\n  }) {\n    super();\n    this.error = error;\n    this.protocolVersion = protocolVersion;\n    this.txns = txns;\n\n    this.attribute_map = {\n      error: 'error',\n      protocolVersion: 'protocol-version',\n      txns: 'txns',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): DryrunResponse {\n    /* eslint-disable dot-notation */\n    if (typeof data['error'] === 'undefined')\n      throw new Error(`Response is missing required field 'error': ${data}`);\n    if (typeof data['protocol-version'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'protocol-version': ${data}`\n      );\n    if (!Array.isArray(data['txns']))\n      throw new Error(\n        `Response is missing required array field 'txns': ${data}`\n      );\n    return new DryrunResponse({\n      error: data['error'],\n      protocolVersion: data['protocol-version'],\n      txns: data['txns'].map(DryrunTxnResult.from_obj_for_encoding),\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * DryrunSource is TEAL source text that gets uploaded, compiled, and inserted into\n * transactions or application state.\n */\nexport class DryrunSource extends BaseModel {\n  /**\n   * FieldName is what kind of sources this is. If lsig then it goes into the\n   * transactions[this.TxnIndex].LogicSig. If approv or clearp it goes into the\n   * Approval Program or Clear State Program of application[this.AppIndex].\n   */\n  public fieldName: string;\n\n  public source: string;\n\n  public txnIndex: number | bigint;\n\n  public appIndex: number | bigint;\n\n  /**\n   * Creates a new `DryrunSource` object.\n   * @param fieldName - FieldName is what kind of sources this is. If lsig then it goes into the\n   * transactions[this.TxnIndex].LogicSig. If approv or clearp it goes into the\n   * Approval Program or Clear State Program of application[this.AppIndex].\n   * @param source -\n   * @param txnIndex -\n   * @param appIndex -\n   */\n  constructor({\n    fieldName,\n    source,\n    txnIndex,\n    appIndex,\n  }: {\n    fieldName: string;\n    source: string;\n    txnIndex: number | bigint;\n    appIndex: number | bigint;\n  }) {\n    super();\n    this.fieldName = fieldName;\n    this.source = source;\n    this.txnIndex = txnIndex;\n    this.appIndex = appIndex;\n\n    this.attribute_map = {\n      fieldName: 'field-name',\n      source: 'source',\n      txnIndex: 'txn-index',\n      appIndex: 'app-index',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): DryrunSource {\n    /* eslint-disable dot-notation */\n    if (typeof data['field-name'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'field-name': ${data}`\n      );\n    if (typeof data['source'] === 'undefined')\n      throw new Error(`Response is missing required field 'source': ${data}`);\n    if (typeof data['txn-index'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'txn-index': ${data}`\n      );\n    if (typeof data['app-index'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'app-index': ${data}`\n      );\n    return new DryrunSource({\n      fieldName: data['field-name'],\n      source: data['source'],\n      txnIndex: data['txn-index'],\n      appIndex: data['app-index'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Stores the TEAL eval step data\n */\nexport class DryrunState extends BaseModel {\n  /**\n   * Line number\n   */\n  public line: number | bigint;\n\n  /**\n   * Program counter\n   */\n  public pc: number | bigint;\n\n  public stack: TealValue[];\n\n  /**\n   * Evaluation error if any\n   */\n  public error?: string;\n\n  public scratch?: TealValue[];\n\n  /**\n   * Creates a new `DryrunState` object.\n   * @param line - Line number\n   * @param pc - Program counter\n   * @param stack -\n   * @param error - Evaluation error if any\n   * @param scratch -\n   */\n  constructor({\n    line,\n    pc,\n    stack,\n    error,\n    scratch,\n  }: {\n    line: number | bigint;\n    pc: number | bigint;\n    stack: TealValue[];\n    error?: string;\n    scratch?: TealValue[];\n  }) {\n    super();\n    this.line = line;\n    this.pc = pc;\n    this.stack = stack;\n    this.error = error;\n    this.scratch = scratch;\n\n    this.attribute_map = {\n      line: 'line',\n      pc: 'pc',\n      stack: 'stack',\n      error: 'error',\n      scratch: 'scratch',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): DryrunState {\n    /* eslint-disable dot-notation */\n    if (typeof data['line'] === 'undefined')\n      throw new Error(`Response is missing required field 'line': ${data}`);\n    if (typeof data['pc'] === 'undefined')\n      throw new Error(`Response is missing required field 'pc': ${data}`);\n    if (!Array.isArray(data['stack']))\n      throw new Error(\n        `Response is missing required array field 'stack': ${data}`\n      );\n    return new DryrunState({\n      line: data['line'],\n      pc: data['pc'],\n      stack: data['stack'].map(TealValue.from_obj_for_encoding),\n      error: data['error'],\n      scratch:\n        typeof data['scratch'] !== 'undefined'\n          ? data['scratch'].map(TealValue.from_obj_for_encoding)\n          : undefined,\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * DryrunTxnResult contains any LogicSig or ApplicationCall program debug\n * information and state updates from a dryrun.\n */\nexport class DryrunTxnResult extends BaseModel {\n  /**\n   * Disassembled program line by line.\n   */\n  public disassembly: string[];\n\n  public appCallMessages?: string[];\n\n  public appCallTrace?: DryrunState[];\n\n  /**\n   * Budget added during execution of app call transaction.\n   */\n  public budgetAdded?: number | bigint;\n\n  /**\n   * Budget consumed during execution of app call transaction.\n   */\n  public budgetConsumed?: number | bigint;\n\n  /**\n   * Application state delta.\n   */\n  public globalDelta?: EvalDeltaKeyValue[];\n\n  public localDeltas?: AccountStateDelta[];\n\n  /**\n   * Disassembled lsig program line by line.\n   */\n  public logicSigDisassembly?: string[];\n\n  public logicSigMessages?: string[];\n\n  public logicSigTrace?: DryrunState[];\n\n  public logs?: Uint8Array[];\n\n  /**\n   * Creates a new `DryrunTxnResult` object.\n   * @param disassembly - Disassembled program line by line.\n   * @param appCallMessages -\n   * @param appCallTrace -\n   * @param budgetAdded - Budget added during execution of app call transaction.\n   * @param budgetConsumed - Budget consumed during execution of app call transaction.\n   * @param globalDelta - Application state delta.\n   * @param localDeltas -\n   * @param logicSigDisassembly - Disassembled lsig program line by line.\n   * @param logicSigMessages -\n   * @param logicSigTrace -\n   * @param logs -\n   */\n  constructor({\n    disassembly,\n    appCallMessages,\n    appCallTrace,\n    budgetAdded,\n    budgetConsumed,\n    globalDelta,\n    localDeltas,\n    logicSigDisassembly,\n    logicSigMessages,\n    logicSigTrace,\n    logs,\n  }: {\n    disassembly: string[];\n    appCallMessages?: string[];\n    appCallTrace?: DryrunState[];\n    budgetAdded?: number | bigint;\n    budgetConsumed?: number | bigint;\n    globalDelta?: EvalDeltaKeyValue[];\n    localDeltas?: AccountStateDelta[];\n    logicSigDisassembly?: string[];\n    logicSigMessages?: string[];\n    logicSigTrace?: DryrunState[];\n    logs?: Uint8Array[];\n  }) {\n    super();\n    this.disassembly = disassembly;\n    this.appCallMessages = appCallMessages;\n    this.appCallTrace = appCallTrace;\n    this.budgetAdded = budgetAdded;\n    this.budgetConsumed = budgetConsumed;\n    this.globalDelta = globalDelta;\n    this.localDeltas = localDeltas;\n    this.logicSigDisassembly = logicSigDisassembly;\n    this.logicSigMessages = logicSigMessages;\n    this.logicSigTrace = logicSigTrace;\n    this.logs = logs;\n\n    this.attribute_map = {\n      disassembly: 'disassembly',\n      appCallMessages: 'app-call-messages',\n      appCallTrace: 'app-call-trace',\n      budgetAdded: 'budget-added',\n      budgetConsumed: 'budget-consumed',\n      globalDelta: 'global-delta',\n      localDeltas: 'local-deltas',\n      logicSigDisassembly: 'logic-sig-disassembly',\n      logicSigMessages: 'logic-sig-messages',\n      logicSigTrace: 'logic-sig-trace',\n      logs: 'logs',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): DryrunTxnResult {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['disassembly']))\n      throw new Error(\n        `Response is missing required array field 'disassembly': ${data}`\n      );\n    return new DryrunTxnResult({\n      disassembly: data['disassembly'],\n      appCallMessages: data['app-call-messages'],\n      appCallTrace:\n        typeof data['app-call-trace'] !== 'undefined'\n          ? data['app-call-trace'].map(DryrunState.from_obj_for_encoding)\n          : undefined,\n      budgetAdded: data['budget-added'],\n      budgetConsumed: data['budget-consumed'],\n      globalDelta:\n        typeof data['global-delta'] !== 'undefined'\n          ? data['global-delta'].map(EvalDeltaKeyValue.from_obj_for_encoding)\n          : undefined,\n      localDeltas:\n        typeof data['local-deltas'] !== 'undefined'\n          ? data['local-deltas'].map(AccountStateDelta.from_obj_for_encoding)\n          : undefined,\n      logicSigDisassembly: data['logic-sig-disassembly'],\n      logicSigMessages: data['logic-sig-messages'],\n      logicSigTrace:\n        typeof data['logic-sig-trace'] !== 'undefined'\n          ? data['logic-sig-trace'].map(DryrunState.from_obj_for_encoding)\n          : undefined,\n      logs: data['logs'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * An error response with optional data field.\n */\nexport class ErrorResponse extends BaseModel {\n  public message: string;\n\n  public data?: Record<string, any>;\n\n  /**\n   * Creates a new `ErrorResponse` object.\n   * @param message -\n   * @param data -\n   */\n  constructor({\n    message,\n    data,\n  }: {\n    message: string;\n    data?: Record<string, any>;\n  }) {\n    super();\n    this.message = message;\n    this.data = data;\n\n    this.attribute_map = {\n      message: 'message',\n      data: 'data',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): ErrorResponse {\n    /* eslint-disable dot-notation */\n    if (typeof data['message'] === 'undefined')\n      throw new Error(`Response is missing required field 'message': ${data}`);\n    return new ErrorResponse({\n      message: data['message'],\n      data: data['data'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Represents a TEAL value delta.\n */\nexport class EvalDelta extends BaseModel {\n  /**\n   * (at) delta action.\n   */\n  public action: number | bigint;\n\n  /**\n   * (bs) bytes value.\n   */\n  public bytes?: string;\n\n  /**\n   * (ui) uint value.\n   */\n  public uint?: number | bigint;\n\n  /**\n   * Creates a new `EvalDelta` object.\n   * @param action - (at) delta action.\n   * @param bytes - (bs) bytes value.\n   * @param uint - (ui) uint value.\n   */\n  constructor({\n    action,\n    bytes,\n    uint,\n  }: {\n    action: number | bigint;\n    bytes?: string;\n    uint?: number | bigint;\n  }) {\n    super();\n    this.action = action;\n    this.bytes = bytes;\n    this.uint = uint;\n\n    this.attribute_map = {\n      action: 'action',\n      bytes: 'bytes',\n      uint: 'uint',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): EvalDelta {\n    /* eslint-disable dot-notation */\n    if (typeof data['action'] === 'undefined')\n      throw new Error(`Response is missing required field 'action': ${data}`);\n    return new EvalDelta({\n      action: data['action'],\n      bytes: data['bytes'],\n      uint: data['uint'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Key-value pairs for StateDelta.\n */\nexport class EvalDeltaKeyValue extends BaseModel {\n  public key: string;\n\n  /**\n   * Represents a TEAL value delta.\n   */\n  public value: EvalDelta;\n\n  /**\n   * Creates a new `EvalDeltaKeyValue` object.\n   * @param key -\n   * @param value - Represents a TEAL value delta.\n   */\n  constructor({ key, value }: { key: string; value: EvalDelta }) {\n    super();\n    this.key = key;\n    this.value = value;\n\n    this.attribute_map = {\n      key: 'key',\n      value: 'value',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): EvalDeltaKeyValue {\n    /* eslint-disable dot-notation */\n    if (typeof data['key'] === 'undefined')\n      throw new Error(`Response is missing required field 'key': ${data}`);\n    if (typeof data['value'] === 'undefined')\n      throw new Error(`Response is missing required field 'value': ${data}`);\n    return new EvalDeltaKeyValue({\n      key: data['key'],\n      value: EvalDelta.from_obj_for_encoding(data['value']),\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Response containing the timestamp offset in seconds\n */\nexport class GetBlockTimeStampOffsetResponse extends BaseModel {\n  /**\n   * Timestamp offset in seconds.\n   */\n  public offset: number | bigint;\n\n  /**\n   * Creates a new `GetBlockTimeStampOffsetResponse` object.\n   * @param offset - Timestamp offset in seconds.\n   */\n  constructor({ offset }: { offset: number | bigint }) {\n    super();\n    this.offset = offset;\n\n    this.attribute_map = {\n      offset: 'offset',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): GetBlockTimeStampOffsetResponse {\n    /* eslint-disable dot-notation */\n    if (typeof data['offset'] === 'undefined')\n      throw new Error(`Response is missing required field 'offset': ${data}`);\n    return new GetBlockTimeStampOffsetResponse({\n      offset: data['offset'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Response containing the ledger's minimum sync round\n */\nexport class GetSyncRoundResponse extends BaseModel {\n  /**\n   * The minimum sync round for the ledger.\n   */\n  public round: number | bigint;\n\n  /**\n   * Creates a new `GetSyncRoundResponse` object.\n   * @param round - The minimum sync round for the ledger.\n   */\n  constructor({ round }: { round: number | bigint }) {\n    super();\n    this.round = round;\n\n    this.attribute_map = {\n      round: 'round',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): GetSyncRoundResponse {\n    /* eslint-disable dot-notation */\n    if (typeof data['round'] === 'undefined')\n      throw new Error(`Response is missing required field 'round': ${data}`);\n    return new GetSyncRoundResponse({\n      round: data['round'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * A single Delta containing the key, the previous value and the current value for\n * a single round.\n */\nexport class KvDelta extends BaseModel {\n  /**\n   * The key, base64 encoded.\n   */\n  public key?: Uint8Array;\n\n  /**\n   * The new value of the KV store entry, base64 encoded.\n   */\n  public value?: Uint8Array;\n\n  /**\n   * Creates a new `KvDelta` object.\n   * @param key - The key, base64 encoded.\n   * @param value - The new value of the KV store entry, base64 encoded.\n   */\n  constructor({\n    key,\n    value,\n  }: {\n    key?: string | Uint8Array;\n    value?: string | Uint8Array;\n  }) {\n    super();\n    this.key =\n      typeof key === 'string'\n        ? new Uint8Array(Buffer.from(key, 'base64'))\n        : key;\n    this.value =\n      typeof value === 'string'\n        ? new Uint8Array(Buffer.from(value, 'base64'))\n        : value;\n\n    this.attribute_map = {\n      key: 'key',\n      value: 'value',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): KvDelta {\n    /* eslint-disable dot-notation */\n    return new KvDelta({\n      key: data['key'],\n      value: data['value'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Contains a ledger delta for a single transaction group\n */\nexport class LedgerStateDeltaForTransactionGroup extends BaseModel {\n  /**\n   * Ledger StateDelta object\n   */\n  public delta: Record<string, any>;\n\n  public ids: string[];\n\n  /**\n   * Creates a new `LedgerStateDeltaForTransactionGroup` object.\n   * @param delta - Ledger StateDelta object\n   * @param ids -\n   */\n  constructor({ delta, ids }: { delta: Record<string, any>; ids: string[] }) {\n    super();\n    this.delta = delta;\n    this.ids = ids;\n\n    this.attribute_map = {\n      delta: 'Delta',\n      ids: 'Ids',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): LedgerStateDeltaForTransactionGroup {\n    /* eslint-disable dot-notation */\n    if (typeof data['Delta'] === 'undefined')\n      throw new Error(`Response is missing required field 'Delta': ${data}`);\n    if (!Array.isArray(data['Ids']))\n      throw new Error(\n        `Response is missing required array field 'Ids': ${data}`\n      );\n    return new LedgerStateDeltaForTransactionGroup({\n      delta: data['Delta'],\n      ids: data['Ids'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Proof of membership and position of a light block header.\n */\nexport class LightBlockHeaderProof extends BaseModel {\n  /**\n   * The index of the light block header in the vector commitment tree\n   */\n  public index: number | bigint;\n\n  /**\n   * The encoded proof.\n   */\n  public proof: Uint8Array;\n\n  /**\n   * Represents the depth of the tree that is being proven, i.e. the number of edges\n   * from a leaf to the root.\n   */\n  public treedepth: number | bigint;\n\n  /**\n   * Creates a new `LightBlockHeaderProof` object.\n   * @param index - The index of the light block header in the vector commitment tree\n   * @param proof - The encoded proof.\n   * @param treedepth - Represents the depth of the tree that is being proven, i.e. the number of edges\n   * from a leaf to the root.\n   */\n  constructor({\n    index,\n    proof,\n    treedepth,\n  }: {\n    index: number | bigint;\n    proof: string | Uint8Array;\n    treedepth: number | bigint;\n  }) {\n    super();\n    this.index = index;\n    this.proof =\n      typeof proof === 'string'\n        ? new Uint8Array(Buffer.from(proof, 'base64'))\n        : proof;\n    this.treedepth = treedepth;\n\n    this.attribute_map = {\n      index: 'index',\n      proof: 'proof',\n      treedepth: 'treedepth',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): LightBlockHeaderProof {\n    /* eslint-disable dot-notation */\n    if (typeof data['index'] === 'undefined')\n      throw new Error(`Response is missing required field 'index': ${data}`);\n    if (typeof data['proof'] === 'undefined')\n      throw new Error(`Response is missing required field 'proof': ${data}`);\n    if (typeof data['treedepth'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'treedepth': ${data}`\n      );\n    return new LightBlockHeaderProof({\n      index: data['index'],\n      proof: data['proof'],\n      treedepth: data['treedepth'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n *\n */\nexport class NodeStatusResponse extends BaseModel {\n  /**\n   * CatchupTime in nanoseconds\n   */\n  public catchupTime: number | bigint;\n\n  /**\n   * LastRound indicates the last round seen\n   */\n  public lastRound: number | bigint;\n\n  /**\n   * LastVersion indicates the last consensus version supported\n   */\n  public lastVersion: string;\n\n  /**\n   * NextVersion of consensus protocol to use\n   */\n  public nextVersion: string;\n\n  /**\n   * NextVersionRound is the round at which the next consensus version will apply\n   */\n  public nextVersionRound: number | bigint;\n\n  /**\n   * NextVersionSupported indicates whether the next consensus version is supported\n   * by this node\n   */\n  public nextVersionSupported: boolean;\n\n  /**\n   * StoppedAtUnsupportedRound indicates that the node does not support the new\n   * rounds and has stopped making progress\n   */\n  public stoppedAtUnsupportedRound: boolean;\n\n  /**\n   * TimeSinceLastRound in nanoseconds\n   */\n  public timeSinceLastRound: number | bigint;\n\n  /**\n   * The current catchpoint that is being caught up to\n   */\n  public catchpoint?: string;\n\n  /**\n   * The number of blocks that have already been obtained by the node as part of the\n   * catchup\n   */\n  public catchpointAcquiredBlocks?: number | bigint;\n\n  /**\n   * The number of accounts from the current catchpoint that have been processed so\n   * far as part of the catchup\n   */\n  public catchpointProcessedAccounts?: number | bigint;\n\n  /**\n   * The number of key-values (KVs) from the current catchpoint that have been\n   * processed so far as part of the catchup\n   */\n  public catchpointProcessedKvs?: number | bigint;\n\n  /**\n   * The total number of accounts included in the current catchpoint\n   */\n  public catchpointTotalAccounts?: number | bigint;\n\n  /**\n   * The total number of blocks that are required to complete the current catchpoint\n   * catchup\n   */\n  public catchpointTotalBlocks?: number | bigint;\n\n  /**\n   * The total number of key-values (KVs) included in the current catchpoint\n   */\n  public catchpointTotalKvs?: number | bigint;\n\n  /**\n   * The number of accounts from the current catchpoint that have been verified so\n   * far as part of the catchup\n   */\n  public catchpointVerifiedAccounts?: number | bigint;\n\n  /**\n   * The number of key-values (KVs) from the current catchpoint that have been\n   * verified so far as part of the catchup\n   */\n  public catchpointVerifiedKvs?: number | bigint;\n\n  /**\n   * The last catchpoint seen by the node\n   */\n  public lastCatchpoint?: string;\n\n  /**\n   * Upgrade delay\n   */\n  public upgradeDelay?: number | bigint;\n\n  /**\n   * Next protocol round\n   */\n  public upgradeNextProtocolVoteBefore?: number | bigint;\n\n  /**\n   * No votes cast for consensus upgrade\n   */\n  public upgradeNoVotes?: number | bigint;\n\n  /**\n   * This node's upgrade vote\n   */\n  public upgradeNodeVote?: boolean;\n\n  /**\n   * Total voting rounds for current upgrade\n   */\n  public upgradeVoteRounds?: number | bigint;\n\n  /**\n   * Total votes cast for consensus upgrade\n   */\n  public upgradeVotes?: number | bigint;\n\n  /**\n   * Yes votes required for consensus upgrade\n   */\n  public upgradeVotesRequired?: number | bigint;\n\n  /**\n   * Yes votes cast for consensus upgrade\n   */\n  public upgradeYesVotes?: number | bigint;\n\n  /**\n   * Creates a new `NodeStatusResponse` object.\n   * @param catchupTime - CatchupTime in nanoseconds\n   * @param lastRound - LastRound indicates the last round seen\n   * @param lastVersion - LastVersion indicates the last consensus version supported\n   * @param nextVersion - NextVersion of consensus protocol to use\n   * @param nextVersionRound - NextVersionRound is the round at which the next consensus version will apply\n   * @param nextVersionSupported - NextVersionSupported indicates whether the next consensus version is supported\n   * by this node\n   * @param stoppedAtUnsupportedRound - StoppedAtUnsupportedRound indicates that the node does not support the new\n   * rounds and has stopped making progress\n   * @param timeSinceLastRound - TimeSinceLastRound in nanoseconds\n   * @param catchpoint - The current catchpoint that is being caught up to\n   * @param catchpointAcquiredBlocks - The number of blocks that have already been obtained by the node as part of the\n   * catchup\n   * @param catchpointProcessedAccounts - The number of accounts from the current catchpoint that have been processed so\n   * far as part of the catchup\n   * @param catchpointProcessedKvs - The number of key-values (KVs) from the current catchpoint that have been\n   * processed so far as part of the catchup\n   * @param catchpointTotalAccounts - The total number of accounts included in the current catchpoint\n   * @param catchpointTotalBlocks - The total number of blocks that are required to complete the current catchpoint\n   * catchup\n   * @param catchpointTotalKvs - The total number of key-values (KVs) included in the current catchpoint\n   * @param catchpointVerifiedAccounts - The number of accounts from the current catchpoint that have been verified so\n   * far as part of the catchup\n   * @param catchpointVerifiedKvs - The number of key-values (KVs) from the current catchpoint that have been\n   * verified so far as part of the catchup\n   * @param lastCatchpoint - The last catchpoint seen by the node\n   * @param upgradeDelay - Upgrade delay\n   * @param upgradeNextProtocolVoteBefore - Next protocol round\n   * @param upgradeNoVotes - No votes cast for consensus upgrade\n   * @param upgradeNodeVote - This node's upgrade vote\n   * @param upgradeVoteRounds - Total voting rounds for current upgrade\n   * @param upgradeVotes - Total votes cast for consensus upgrade\n   * @param upgradeVotesRequired - Yes votes required for consensus upgrade\n   * @param upgradeYesVotes - Yes votes cast for consensus upgrade\n   */\n  constructor({\n    catchupTime,\n    lastRound,\n    lastVersion,\n    nextVersion,\n    nextVersionRound,\n    nextVersionSupported,\n    stoppedAtUnsupportedRound,\n    timeSinceLastRound,\n    catchpoint,\n    catchpointAcquiredBlocks,\n    catchpointProcessedAccounts,\n    catchpointProcessedKvs,\n    catchpointTotalAccounts,\n    catchpointTotalBlocks,\n    catchpointTotalKvs,\n    catchpointVerifiedAccounts,\n    catchpointVerifiedKvs,\n    lastCatchpoint,\n    upgradeDelay,\n    upgradeNextProtocolVoteBefore,\n    upgradeNoVotes,\n    upgradeNodeVote,\n    upgradeVoteRounds,\n    upgradeVotes,\n    upgradeVotesRequired,\n    upgradeYesVotes,\n  }: {\n    catchupTime: number | bigint;\n    lastRound: number | bigint;\n    lastVersion: string;\n    nextVersion: string;\n    nextVersionRound: number | bigint;\n    nextVersionSupported: boolean;\n    stoppedAtUnsupportedRound: boolean;\n    timeSinceLastRound: number | bigint;\n    catchpoint?: string;\n    catchpointAcquiredBlocks?: number | bigint;\n    catchpointProcessedAccounts?: number | bigint;\n    catchpointProcessedKvs?: number | bigint;\n    catchpointTotalAccounts?: number | bigint;\n    catchpointTotalBlocks?: number | bigint;\n    catchpointTotalKvs?: number | bigint;\n    catchpointVerifiedAccounts?: number | bigint;\n    catchpointVerifiedKvs?: number | bigint;\n    lastCatchpoint?: string;\n    upgradeDelay?: number | bigint;\n    upgradeNextProtocolVoteBefore?: number | bigint;\n    upgradeNoVotes?: number | bigint;\n    upgradeNodeVote?: boolean;\n    upgradeVoteRounds?: number | bigint;\n    upgradeVotes?: number | bigint;\n    upgradeVotesRequired?: number | bigint;\n    upgradeYesVotes?: number | bigint;\n  }) {\n    super();\n    this.catchupTime = catchupTime;\n    this.lastRound = lastRound;\n    this.lastVersion = lastVersion;\n    this.nextVersion = nextVersion;\n    this.nextVersionRound = nextVersionRound;\n    this.nextVersionSupported = nextVersionSupported;\n    this.stoppedAtUnsupportedRound = stoppedAtUnsupportedRound;\n    this.timeSinceLastRound = timeSinceLastRound;\n    this.catchpoint = catchpoint;\n    this.catchpointAcquiredBlocks = catchpointAcquiredBlocks;\n    this.catchpointProcessedAccounts = catchpointProcessedAccounts;\n    this.catchpointProcessedKvs = catchpointProcessedKvs;\n    this.catchpointTotalAccounts = catchpointTotalAccounts;\n    this.catchpointTotalBlocks = catchpointTotalBlocks;\n    this.catchpointTotalKvs = catchpointTotalKvs;\n    this.catchpointVerifiedAccounts = catchpointVerifiedAccounts;\n    this.catchpointVerifiedKvs = catchpointVerifiedKvs;\n    this.lastCatchpoint = lastCatchpoint;\n    this.upgradeDelay = upgradeDelay;\n    this.upgradeNextProtocolVoteBefore = upgradeNextProtocolVoteBefore;\n    this.upgradeNoVotes = upgradeNoVotes;\n    this.upgradeNodeVote = upgradeNodeVote;\n    this.upgradeVoteRounds = upgradeVoteRounds;\n    this.upgradeVotes = upgradeVotes;\n    this.upgradeVotesRequired = upgradeVotesRequired;\n    this.upgradeYesVotes = upgradeYesVotes;\n\n    this.attribute_map = {\n      catchupTime: 'catchup-time',\n      lastRound: 'last-round',\n      lastVersion: 'last-version',\n      nextVersion: 'next-version',\n      nextVersionRound: 'next-version-round',\n      nextVersionSupported: 'next-version-supported',\n      stoppedAtUnsupportedRound: 'stopped-at-unsupported-round',\n      timeSinceLastRound: 'time-since-last-round',\n      catchpoint: 'catchpoint',\n      catchpointAcquiredBlocks: 'catchpoint-acquired-blocks',\n      catchpointProcessedAccounts: 'catchpoint-processed-accounts',\n      catchpointProcessedKvs: 'catchpoint-processed-kvs',\n      catchpointTotalAccounts: 'catchpoint-total-accounts',\n      catchpointTotalBlocks: 'catchpoint-total-blocks',\n      catchpointTotalKvs: 'catchpoint-total-kvs',\n      catchpointVerifiedAccounts: 'catchpoint-verified-accounts',\n      catchpointVerifiedKvs: 'catchpoint-verified-kvs',\n      lastCatchpoint: 'last-catchpoint',\n      upgradeDelay: 'upgrade-delay',\n      upgradeNextProtocolVoteBefore: 'upgrade-next-protocol-vote-before',\n      upgradeNoVotes: 'upgrade-no-votes',\n      upgradeNodeVote: 'upgrade-node-vote',\n      upgradeVoteRounds: 'upgrade-vote-rounds',\n      upgradeVotes: 'upgrade-votes',\n      upgradeVotesRequired: 'upgrade-votes-required',\n      upgradeYesVotes: 'upgrade-yes-votes',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): NodeStatusResponse {\n    /* eslint-disable dot-notation */\n    if (typeof data['catchup-time'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'catchup-time': ${data}`\n      );\n    if (typeof data['last-round'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'last-round': ${data}`\n      );\n    if (typeof data['last-version'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'last-version': ${data}`\n      );\n    if (typeof data['next-version'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'next-version': ${data}`\n      );\n    if (typeof data['next-version-round'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'next-version-round': ${data}`\n      );\n    if (typeof data['next-version-supported'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'next-version-supported': ${data}`\n      );\n    if (typeof data['stopped-at-unsupported-round'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'stopped-at-unsupported-round': ${data}`\n      );\n    if (typeof data['time-since-last-round'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'time-since-last-round': ${data}`\n      );\n    return new NodeStatusResponse({\n      catchupTime: data['catchup-time'],\n      lastRound: data['last-round'],\n      lastVersion: data['last-version'],\n      nextVersion: data['next-version'],\n      nextVersionRound: data['next-version-round'],\n      nextVersionSupported: data['next-version-supported'],\n      stoppedAtUnsupportedRound: data['stopped-at-unsupported-round'],\n      timeSinceLastRound: data['time-since-last-round'],\n      catchpoint: data['catchpoint'],\n      catchpointAcquiredBlocks: data['catchpoint-acquired-blocks'],\n      catchpointProcessedAccounts: data['catchpoint-processed-accounts'],\n      catchpointProcessedKvs: data['catchpoint-processed-kvs'],\n      catchpointTotalAccounts: data['catchpoint-total-accounts'],\n      catchpointTotalBlocks: data['catchpoint-total-blocks'],\n      catchpointTotalKvs: data['catchpoint-total-kvs'],\n      catchpointVerifiedAccounts: data['catchpoint-verified-accounts'],\n      catchpointVerifiedKvs: data['catchpoint-verified-kvs'],\n      lastCatchpoint: data['last-catchpoint'],\n      upgradeDelay: data['upgrade-delay'],\n      upgradeNextProtocolVoteBefore: data['upgrade-next-protocol-vote-before'],\n      upgradeNoVotes: data['upgrade-no-votes'],\n      upgradeNodeVote: data['upgrade-node-vote'],\n      upgradeVoteRounds: data['upgrade-vote-rounds'],\n      upgradeVotes: data['upgrade-votes'],\n      upgradeVotesRequired: data['upgrade-votes-required'],\n      upgradeYesVotes: data['upgrade-yes-votes'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Details about a pending transaction. If the transaction was recently confirmed,\n * includes confirmation details like the round and reward details.\n */\nexport class PendingTransactionResponse extends BaseModel {\n  /**\n   * Indicates that the transaction was kicked out of this node's transaction pool\n   * (and specifies why that happened). An empty string indicates the transaction\n   * wasn't kicked out of this node's txpool due to an error.\n   */\n  public poolError: string;\n\n  /**\n   * The raw signed transaction.\n   */\n  public txn: EncodedSignedTransaction;\n\n  /**\n   * The application index if the transaction was found and it created an\n   * application.\n   */\n  public applicationIndex?: number | bigint;\n\n  /**\n   * The number of the asset's unit that were transferred to the close-to address.\n   */\n  public assetClosingAmount?: number | bigint;\n\n  /**\n   * The asset index if the transaction was found and it created an asset.\n   */\n  public assetIndex?: number | bigint;\n\n  /**\n   * Rewards in microalgos applied to the close remainder to account.\n   */\n  public closeRewards?: number | bigint;\n\n  /**\n   * Closing amount for the transaction.\n   */\n  public closingAmount?: number | bigint;\n\n  /**\n   * The round where this transaction was confirmed, if present.\n   */\n  public confirmedRound?: number | bigint;\n\n  /**\n   * Global state key/value changes for the application being executed by this\n   * transaction.\n   */\n  public globalStateDelta?: EvalDeltaKeyValue[];\n\n  /**\n   * Inner transactions produced by application execution.\n   */\n  public innerTxns?: PendingTransactionResponse[];\n\n  /**\n   * Local state key/value changes for the application being executed by this\n   * transaction.\n   */\n  public localStateDelta?: AccountStateDelta[];\n\n  /**\n   * Logs for the application being executed by this transaction.\n   */\n  public logs?: Uint8Array[];\n\n  /**\n   * Rewards in microalgos applied to the receiver account.\n   */\n  public receiverRewards?: number | bigint;\n\n  /**\n   * Rewards in microalgos applied to the sender account.\n   */\n  public senderRewards?: number | bigint;\n\n  /**\n   * Creates a new `PendingTransactionResponse` object.\n   * @param poolError - Indicates that the transaction was kicked out of this node's transaction pool\n   * (and specifies why that happened). An empty string indicates the transaction\n   * wasn't kicked out of this node's txpool due to an error.\n   * @param txn - The raw signed transaction.\n   * @param applicationIndex - The application index if the transaction was found and it created an\n   * application.\n   * @param assetClosingAmount - The number of the asset's unit that were transferred to the close-to address.\n   * @param assetIndex - The asset index if the transaction was found and it created an asset.\n   * @param closeRewards - Rewards in microalgos applied to the close remainder to account.\n   * @param closingAmount - Closing amount for the transaction.\n   * @param confirmedRound - The round where this transaction was confirmed, if present.\n   * @param globalStateDelta - Global state key/value changes for the application being executed by this\n   * transaction.\n   * @param innerTxns - Inner transactions produced by application execution.\n   * @param localStateDelta - Local state key/value changes for the application being executed by this\n   * transaction.\n   * @param logs - Logs for the application being executed by this transaction.\n   * @param receiverRewards - Rewards in microalgos applied to the receiver account.\n   * @param senderRewards - Rewards in microalgos applied to the sender account.\n   */\n  constructor({\n    poolError,\n    txn,\n    applicationIndex,\n    assetClosingAmount,\n    assetIndex,\n    closeRewards,\n    closingAmount,\n    confirmedRound,\n    globalStateDelta,\n    innerTxns,\n    localStateDelta,\n    logs,\n    receiverRewards,\n    senderRewards,\n  }: {\n    poolError: string;\n    txn: EncodedSignedTransaction;\n    applicationIndex?: number | bigint;\n    assetClosingAmount?: number | bigint;\n    assetIndex?: number | bigint;\n    closeRewards?: number | bigint;\n    closingAmount?: number | bigint;\n    confirmedRound?: number | bigint;\n    globalStateDelta?: EvalDeltaKeyValue[];\n    innerTxns?: PendingTransactionResponse[];\n    localStateDelta?: AccountStateDelta[];\n    logs?: Uint8Array[];\n    receiverRewards?: number | bigint;\n    senderRewards?: number | bigint;\n  }) {\n    super();\n    this.poolError = poolError;\n    this.txn = txn;\n    this.applicationIndex = applicationIndex;\n    this.assetClosingAmount = assetClosingAmount;\n    this.assetIndex = assetIndex;\n    this.closeRewards = closeRewards;\n    this.closingAmount = closingAmount;\n    this.confirmedRound = confirmedRound;\n    this.globalStateDelta = globalStateDelta;\n    this.innerTxns = innerTxns;\n    this.localStateDelta = localStateDelta;\n    this.logs = logs;\n    this.receiverRewards = receiverRewards;\n    this.senderRewards = senderRewards;\n\n    this.attribute_map = {\n      poolError: 'pool-error',\n      txn: 'txn',\n      applicationIndex: 'application-index',\n      assetClosingAmount: 'asset-closing-amount',\n      assetIndex: 'asset-index',\n      closeRewards: 'close-rewards',\n      closingAmount: 'closing-amount',\n      confirmedRound: 'confirmed-round',\n      globalStateDelta: 'global-state-delta',\n      innerTxns: 'inner-txns',\n      localStateDelta: 'local-state-delta',\n      logs: 'logs',\n      receiverRewards: 'receiver-rewards',\n      senderRewards: 'sender-rewards',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): PendingTransactionResponse {\n    /* eslint-disable dot-notation */\n    if (typeof data['pool-error'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'pool-error': ${data}`\n      );\n    if (typeof data['txn'] === 'undefined')\n      throw new Error(`Response is missing required field 'txn': ${data}`);\n    return new PendingTransactionResponse({\n      poolError: data['pool-error'],\n      txn: data['txn'],\n      applicationIndex: data['application-index'],\n      assetClosingAmount: data['asset-closing-amount'],\n      assetIndex: data['asset-index'],\n      closeRewards: data['close-rewards'],\n      closingAmount: data['closing-amount'],\n      confirmedRound: data['confirmed-round'],\n      globalStateDelta:\n        typeof data['global-state-delta'] !== 'undefined'\n          ? data['global-state-delta'].map(\n              EvalDeltaKeyValue.from_obj_for_encoding\n            )\n          : undefined,\n      innerTxns:\n        typeof data['inner-txns'] !== 'undefined'\n          ? data['inner-txns'].map(\n              PendingTransactionResponse.from_obj_for_encoding\n            )\n          : undefined,\n      localStateDelta:\n        typeof data['local-state-delta'] !== 'undefined'\n          ? data['local-state-delta'].map(\n              AccountStateDelta.from_obj_for_encoding\n            )\n          : undefined,\n      logs: data['logs'],\n      receiverRewards: data['receiver-rewards'],\n      senderRewards: data['sender-rewards'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * A potentially truncated list of transactions currently in the node's transaction\n * pool. You can compute whether or not the list is truncated if the number of\n * elements in the **top-transactions** array is fewer than **total-transactions**.\n */\nexport class PendingTransactionsResponse extends BaseModel {\n  /**\n   * An array of signed transaction objects.\n   */\n  public topTransactions: EncodedSignedTransaction[];\n\n  /**\n   * Total number of transactions in the pool.\n   */\n  public totalTransactions: number | bigint;\n\n  /**\n   * Creates a new `PendingTransactionsResponse` object.\n   * @param topTransactions - An array of signed transaction objects.\n   * @param totalTransactions - Total number of transactions in the pool.\n   */\n  constructor({\n    topTransactions,\n    totalTransactions,\n  }: {\n    topTransactions: EncodedSignedTransaction[];\n    totalTransactions: number | bigint;\n  }) {\n    super();\n    this.topTransactions = topTransactions;\n    this.totalTransactions = totalTransactions;\n\n    this.attribute_map = {\n      topTransactions: 'top-transactions',\n      totalTransactions: 'total-transactions',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): PendingTransactionsResponse {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['top-transactions']))\n      throw new Error(\n        `Response is missing required array field 'top-transactions': ${data}`\n      );\n    if (typeof data['total-transactions'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'total-transactions': ${data}`\n      );\n    return new PendingTransactionsResponse({\n      topTransactions: data['top-transactions'],\n      totalTransactions: data['total-transactions'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Transaction ID of the submission.\n */\nexport class PostTransactionsResponse extends BaseModel {\n  /**\n   * encoding of the transaction hash.\n   */\n  public txid: string;\n\n  /**\n   * Creates a new `PostTransactionsResponse` object.\n   * @param txid - encoding of the transaction hash.\n   */\n  constructor({ txid }: { txid: string }) {\n    super();\n    this.txid = txid;\n\n    this.attribute_map = {\n      txid: 'txId',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): PostTransactionsResponse {\n    /* eslint-disable dot-notation */\n    if (typeof data['txId'] === 'undefined')\n      throw new Error(`Response is missing required field 'txId': ${data}`);\n    return new PostTransactionsResponse({\n      txid: data['txId'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * A write operation into a scratch slot.\n */\nexport class ScratchChange extends BaseModel {\n  /**\n   * Represents an AVM value.\n   */\n  public newValue: AvmValue;\n\n  /**\n   * The scratch slot written.\n   */\n  public slot: number | bigint;\n\n  /**\n   * Creates a new `ScratchChange` object.\n   * @param newValue - Represents an AVM value.\n   * @param slot - The scratch slot written.\n   */\n  constructor({\n    newValue,\n    slot,\n  }: {\n    newValue: AvmValue;\n    slot: number | bigint;\n  }) {\n    super();\n    this.newValue = newValue;\n    this.slot = slot;\n\n    this.attribute_map = {\n      newValue: 'new-value',\n      slot: 'slot',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): ScratchChange {\n    /* eslint-disable dot-notation */\n    if (typeof data['new-value'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'new-value': ${data}`\n      );\n    if (typeof data['slot'] === 'undefined')\n      throw new Error(`Response is missing required field 'slot': ${data}`);\n    return new ScratchChange({\n      newValue: AvmValue.from_obj_for_encoding(data['new-value']),\n      slot: data['slot'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Initial states of resources that were accessed during simulation.\n */\nexport class SimulateInitialStates extends BaseModel {\n  /**\n   * The initial states of accessed application before simulation. The order of this\n   * array is arbitrary.\n   */\n  public appInitialStates?: ApplicationInitialStates[];\n\n  /**\n   * Creates a new `SimulateInitialStates` object.\n   * @param appInitialStates - The initial states of accessed application before simulation. The order of this\n   * array is arbitrary.\n   */\n  constructor({\n    appInitialStates,\n  }: {\n    appInitialStates?: ApplicationInitialStates[];\n  }) {\n    super();\n    this.appInitialStates = appInitialStates;\n\n    this.attribute_map = {\n      appInitialStates: 'app-initial-states',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): SimulateInitialStates {\n    /* eslint-disable dot-notation */\n    return new SimulateInitialStates({\n      appInitialStates:\n        typeof data['app-initial-states'] !== 'undefined'\n          ? data['app-initial-states'].map(\n              ApplicationInitialStates.from_obj_for_encoding\n            )\n          : undefined,\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Request type for simulation endpoint.\n */\nexport class SimulateRequest extends BaseModel {\n  /**\n   * The transaction groups to simulate.\n   */\n  public txnGroups: SimulateRequestTransactionGroup[];\n\n  /**\n   * Allows transactions without signatures to be simulated as if they had correct\n   * signatures.\n   */\n  public allowEmptySignatures?: boolean;\n\n  /**\n   * Lifts limits on log opcode usage during simulation.\n   */\n  public allowMoreLogging?: boolean;\n\n  /**\n   * Allows access to unnamed resources during simulation.\n   */\n  public allowUnnamedResources?: boolean;\n\n  /**\n   * An object that configures simulation execution trace.\n   */\n  public execTraceConfig?: SimulateTraceConfig;\n\n  /**\n   * Applies extra opcode budget during simulation for each transaction group.\n   */\n  public extraOpcodeBudget?: number | bigint;\n\n  /**\n   * If provided, specifies the round preceding the simulation. State changes through\n   * this round will be used to run this simulation. Usually only the 4 most recent\n   * rounds will be available (controlled by the node config value MaxAcctLookback).\n   * If not specified, defaults to the latest available round.\n   */\n  public round?: number | bigint;\n\n  /**\n   * Creates a new `SimulateRequest` object.\n   * @param txnGroups - The transaction groups to simulate.\n   * @param allowEmptySignatures - Allows transactions without signatures to be simulated as if they had correct\n   * signatures.\n   * @param allowMoreLogging - Lifts limits on log opcode usage during simulation.\n   * @param allowUnnamedResources - Allows access to unnamed resources during simulation.\n   * @param execTraceConfig - An object that configures simulation execution trace.\n   * @param extraOpcodeBudget - Applies extra opcode budget during simulation for each transaction group.\n   * @param round - If provided, specifies the round preceding the simulation. State changes through\n   * this round will be used to run this simulation. Usually only the 4 most recent\n   * rounds will be available (controlled by the node config value MaxAcctLookback).\n   * If not specified, defaults to the latest available round.\n   */\n  constructor({\n    txnGroups,\n    allowEmptySignatures,\n    allowMoreLogging,\n    allowUnnamedResources,\n    execTraceConfig,\n    extraOpcodeBudget,\n    round,\n  }: {\n    txnGroups: SimulateRequestTransactionGroup[];\n    allowEmptySignatures?: boolean;\n    allowMoreLogging?: boolean;\n    allowUnnamedResources?: boolean;\n    execTraceConfig?: SimulateTraceConfig;\n    extraOpcodeBudget?: number | bigint;\n    round?: number | bigint;\n  }) {\n    super();\n    this.txnGroups = txnGroups;\n    this.allowEmptySignatures = allowEmptySignatures;\n    this.allowMoreLogging = allowMoreLogging;\n    this.allowUnnamedResources = allowUnnamedResources;\n    this.execTraceConfig = execTraceConfig;\n    this.extraOpcodeBudget = extraOpcodeBudget;\n    this.round = round;\n\n    this.attribute_map = {\n      txnGroups: 'txn-groups',\n      allowEmptySignatures: 'allow-empty-signatures',\n      allowMoreLogging: 'allow-more-logging',\n      allowUnnamedResources: 'allow-unnamed-resources',\n      execTraceConfig: 'exec-trace-config',\n      extraOpcodeBudget: 'extra-opcode-budget',\n      round: 'round',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): SimulateRequest {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['txn-groups']))\n      throw new Error(\n        `Response is missing required array field 'txn-groups': ${data}`\n      );\n    return new SimulateRequest({\n      txnGroups: data['txn-groups'].map(\n        SimulateRequestTransactionGroup.from_obj_for_encoding\n      ),\n      allowEmptySignatures: data['allow-empty-signatures'],\n      allowMoreLogging: data['allow-more-logging'],\n      allowUnnamedResources: data['allow-unnamed-resources'],\n      execTraceConfig:\n        typeof data['exec-trace-config'] !== 'undefined'\n          ? SimulateTraceConfig.from_obj_for_encoding(data['exec-trace-config'])\n          : undefined,\n      extraOpcodeBudget: data['extra-opcode-budget'],\n      round: data['round'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * A transaction group to simulate.\n */\nexport class SimulateRequestTransactionGroup extends BaseModel {\n  /**\n   * An atomic transaction group.\n   */\n  public txns: EncodedSignedTransaction[];\n\n  /**\n   * Creates a new `SimulateRequestTransactionGroup` object.\n   * @param txns - An atomic transaction group.\n   */\n  constructor({ txns }: { txns: EncodedSignedTransaction[] }) {\n    super();\n    this.txns = txns;\n\n    this.attribute_map = {\n      txns: 'txns',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): SimulateRequestTransactionGroup {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['txns']))\n      throw new Error(\n        `Response is missing required array field 'txns': ${data}`\n      );\n    return new SimulateRequestTransactionGroup({\n      txns: data['txns'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Result of a transaction group simulation.\n */\nexport class SimulateResponse extends BaseModel {\n  /**\n   * The round immediately preceding this simulation. State changes through this\n   * round were used to run this simulation.\n   */\n  public lastRound: number | bigint;\n\n  /**\n   * A result object for each transaction group that was simulated.\n   */\n  public txnGroups: SimulateTransactionGroupResult[];\n\n  /**\n   * The version of this response object.\n   */\n  public version: number | bigint;\n\n  /**\n   * The set of parameters and limits override during simulation. If this set of\n   * parameters is present, then evaluation parameters may differ from standard\n   * evaluation in certain ways.\n   */\n  public evalOverrides?: SimulationEvalOverrides;\n\n  /**\n   * An object that configures simulation execution trace.\n   */\n  public execTraceConfig?: SimulateTraceConfig;\n\n  /**\n   * Initial states of resources that were accessed during simulation.\n   */\n  public initialStates?: SimulateInitialStates;\n\n  /**\n   * Creates a new `SimulateResponse` object.\n   * @param lastRound - The round immediately preceding this simulation. State changes through this\n   * round were used to run this simulation.\n   * @param txnGroups - A result object for each transaction group that was simulated.\n   * @param version - The version of this response object.\n   * @param evalOverrides - The set of parameters and limits override during simulation. If this set of\n   * parameters is present, then evaluation parameters may differ from standard\n   * evaluation in certain ways.\n   * @param execTraceConfig - An object that configures simulation execution trace.\n   * @param initialStates - Initial states of resources that were accessed during simulation.\n   */\n  constructor({\n    lastRound,\n    txnGroups,\n    version,\n    evalOverrides,\n    execTraceConfig,\n    initialStates,\n  }: {\n    lastRound: number | bigint;\n    txnGroups: SimulateTransactionGroupResult[];\n    version: number | bigint;\n    evalOverrides?: SimulationEvalOverrides;\n    execTraceConfig?: SimulateTraceConfig;\n    initialStates?: SimulateInitialStates;\n  }) {\n    super();\n    this.lastRound = lastRound;\n    this.txnGroups = txnGroups;\n    this.version = version;\n    this.evalOverrides = evalOverrides;\n    this.execTraceConfig = execTraceConfig;\n    this.initialStates = initialStates;\n\n    this.attribute_map = {\n      lastRound: 'last-round',\n      txnGroups: 'txn-groups',\n      version: 'version',\n      evalOverrides: 'eval-overrides',\n      execTraceConfig: 'exec-trace-config',\n      initialStates: 'initial-states',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): SimulateResponse {\n    /* eslint-disable dot-notation */\n    if (typeof data['last-round'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'last-round': ${data}`\n      );\n    if (!Array.isArray(data['txn-groups']))\n      throw new Error(\n        `Response is missing required array field 'txn-groups': ${data}`\n      );\n    if (typeof data['version'] === 'undefined')\n      throw new Error(`Response is missing required field 'version': ${data}`);\n    return new SimulateResponse({\n      lastRound: data['last-round'],\n      txnGroups: data['txn-groups'].map(\n        SimulateTransactionGroupResult.from_obj_for_encoding\n      ),\n      version: data['version'],\n      evalOverrides:\n        typeof data['eval-overrides'] !== 'undefined'\n          ? SimulationEvalOverrides.from_obj_for_encoding(\n              data['eval-overrides']\n            )\n          : undefined,\n      execTraceConfig:\n        typeof data['exec-trace-config'] !== 'undefined'\n          ? SimulateTraceConfig.from_obj_for_encoding(data['exec-trace-config'])\n          : undefined,\n      initialStates:\n        typeof data['initial-states'] !== 'undefined'\n          ? SimulateInitialStates.from_obj_for_encoding(data['initial-states'])\n          : undefined,\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * An object that configures simulation execution trace.\n */\nexport class SimulateTraceConfig extends BaseModel {\n  /**\n   * A boolean option for opting in execution trace features simulation endpoint.\n   */\n  public enable?: boolean;\n\n  /**\n   * A boolean option enabling returning scratch slot changes together with execution\n   * trace during simulation.\n   */\n  public scratchChange?: boolean;\n\n  /**\n   * A boolean option enabling returning stack changes together with execution trace\n   * during simulation.\n   */\n  public stackChange?: boolean;\n\n  /**\n   * A boolean option enabling returning application state changes (global, local,\n   * and box changes) with the execution trace during simulation.\n   */\n  public stateChange?: boolean;\n\n  /**\n   * Creates a new `SimulateTraceConfig` object.\n   * @param enable - A boolean option for opting in execution trace features simulation endpoint.\n   * @param scratchChange - A boolean option enabling returning scratch slot changes together with execution\n   * trace during simulation.\n   * @param stackChange - A boolean option enabling returning stack changes together with execution trace\n   * during simulation.\n   * @param stateChange - A boolean option enabling returning application state changes (global, local,\n   * and box changes) with the execution trace during simulation.\n   */\n  constructor({\n    enable,\n    scratchChange,\n    stackChange,\n    stateChange,\n  }: {\n    enable?: boolean;\n    scratchChange?: boolean;\n    stackChange?: boolean;\n    stateChange?: boolean;\n  }) {\n    super();\n    this.enable = enable;\n    this.scratchChange = scratchChange;\n    this.stackChange = stackChange;\n    this.stateChange = stateChange;\n\n    this.attribute_map = {\n      enable: 'enable',\n      scratchChange: 'scratch-change',\n      stackChange: 'stack-change',\n      stateChange: 'state-change',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): SimulateTraceConfig {\n    /* eslint-disable dot-notation */\n    return new SimulateTraceConfig({\n      enable: data['enable'],\n      scratchChange: data['scratch-change'],\n      stackChange: data['stack-change'],\n      stateChange: data['state-change'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Simulation result for an atomic transaction group\n */\nexport class SimulateTransactionGroupResult extends BaseModel {\n  /**\n   * Simulation result for individual transactions\n   */\n  public txnResults: SimulateTransactionResult[];\n\n  /**\n   * Total budget added during execution of app calls in the transaction group.\n   */\n  public appBudgetAdded?: number | bigint;\n\n  /**\n   * Total budget consumed during execution of app calls in the transaction group.\n   */\n  public appBudgetConsumed?: number | bigint;\n\n  /**\n   * If present, indicates which transaction in this group caused the failure. This\n   * array represents the path to the failing transaction. Indexes are zero based,\n   * the first element indicates the top-level transaction, and successive elements\n   * indicate deeper inner transactions.\n   */\n  public failedAt?: (number | bigint)[];\n\n  /**\n   * If present, indicates that the transaction group failed and specifies why that\n   * happened\n   */\n  public failureMessage?: string;\n\n  /**\n   * These are resources that were accessed by this group that would normally have\n   * caused failure, but were allowed in simulation. Depending on where this object\n   * is in the response, the unnamed resources it contains may or may not qualify for\n   * group resource sharing. If this is a field in SimulateTransactionGroupResult,\n   * the resources do qualify, but if this is a field in SimulateTransactionResult,\n   * they do not qualify. In order to make this group valid for actual submission,\n   * resources that qualify for group sharing can be made available by any\n   * transaction of the group; otherwise, resources must be placed in the same\n   * transaction which accessed them.\n   */\n  public unnamedResourcesAccessed?: SimulateUnnamedResourcesAccessed;\n\n  /**\n   * Creates a new `SimulateTransactionGroupResult` object.\n   * @param txnResults - Simulation result for individual transactions\n   * @param appBudgetAdded - Total budget added during execution of app calls in the transaction group.\n   * @param appBudgetConsumed - Total budget consumed during execution of app calls in the transaction group.\n   * @param failedAt - If present, indicates which transaction in this group caused the failure. This\n   * array represents the path to the failing transaction. Indexes are zero based,\n   * the first element indicates the top-level transaction, and successive elements\n   * indicate deeper inner transactions.\n   * @param failureMessage - If present, indicates that the transaction group failed and specifies why that\n   * happened\n   * @param unnamedResourcesAccessed - These are resources that were accessed by this group that would normally have\n   * caused failure, but were allowed in simulation. Depending on where this object\n   * is in the response, the unnamed resources it contains may or may not qualify for\n   * group resource sharing. If this is a field in SimulateTransactionGroupResult,\n   * the resources do qualify, but if this is a field in SimulateTransactionResult,\n   * they do not qualify. In order to make this group valid for actual submission,\n   * resources that qualify for group sharing can be made available by any\n   * transaction of the group; otherwise, resources must be placed in the same\n   * transaction which accessed them.\n   */\n  constructor({\n    txnResults,\n    appBudgetAdded,\n    appBudgetConsumed,\n    failedAt,\n    failureMessage,\n    unnamedResourcesAccessed,\n  }: {\n    txnResults: SimulateTransactionResult[];\n    appBudgetAdded?: number | bigint;\n    appBudgetConsumed?: number | bigint;\n    failedAt?: (number | bigint)[];\n    failureMessage?: string;\n    unnamedResourcesAccessed?: SimulateUnnamedResourcesAccessed;\n  }) {\n    super();\n    this.txnResults = txnResults;\n    this.appBudgetAdded = appBudgetAdded;\n    this.appBudgetConsumed = appBudgetConsumed;\n    this.failedAt = failedAt;\n    this.failureMessage = failureMessage;\n    this.unnamedResourcesAccessed = unnamedResourcesAccessed;\n\n    this.attribute_map = {\n      txnResults: 'txn-results',\n      appBudgetAdded: 'app-budget-added',\n      appBudgetConsumed: 'app-budget-consumed',\n      failedAt: 'failed-at',\n      failureMessage: 'failure-message',\n      unnamedResourcesAccessed: 'unnamed-resources-accessed',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): SimulateTransactionGroupResult {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['txn-results']))\n      throw new Error(\n        `Response is missing required array field 'txn-results': ${data}`\n      );\n    return new SimulateTransactionGroupResult({\n      txnResults: data['txn-results'].map(\n        SimulateTransactionResult.from_obj_for_encoding\n      ),\n      appBudgetAdded: data['app-budget-added'],\n      appBudgetConsumed: data['app-budget-consumed'],\n      failedAt: data['failed-at'],\n      failureMessage: data['failure-message'],\n      unnamedResourcesAccessed:\n        typeof data['unnamed-resources-accessed'] !== 'undefined'\n          ? SimulateUnnamedResourcesAccessed.from_obj_for_encoding(\n              data['unnamed-resources-accessed']\n            )\n          : undefined,\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Simulation result for an individual transaction\n */\nexport class SimulateTransactionResult extends BaseModel {\n  /**\n   * Details about a pending transaction. If the transaction was recently confirmed,\n   * includes confirmation details like the round and reward details.\n   */\n  public txnResult: PendingTransactionResponse;\n\n  /**\n   * Budget used during execution of an app call transaction. This value includes\n   * budged used by inner app calls spawned by this transaction.\n   */\n  public appBudgetConsumed?: number | bigint;\n\n  /**\n   * The execution trace of calling an app or a logic sig, containing the inner app\n   * call trace in a recursive way.\n   */\n  public execTrace?: SimulationTransactionExecTrace;\n\n  /**\n   * Budget used during execution of a logic sig transaction.\n   */\n  public logicSigBudgetConsumed?: number | bigint;\n\n  /**\n   * These are resources that were accessed by this group that would normally have\n   * caused failure, but were allowed in simulation. Depending on where this object\n   * is in the response, the unnamed resources it contains may or may not qualify for\n   * group resource sharing. If this is a field in SimulateTransactionGroupResult,\n   * the resources do qualify, but if this is a field in SimulateTransactionResult,\n   * they do not qualify. In order to make this group valid for actual submission,\n   * resources that qualify for group sharing can be made available by any\n   * transaction of the group; otherwise, resources must be placed in the same\n   * transaction which accessed them.\n   */\n  public unnamedResourcesAccessed?: SimulateUnnamedResourcesAccessed;\n\n  /**\n   * Creates a new `SimulateTransactionResult` object.\n   * @param txnResult - Details about a pending transaction. If the transaction was recently confirmed,\n   * includes confirmation details like the round and reward details.\n   * @param appBudgetConsumed - Budget used during execution of an app call transaction. This value includes\n   * budged used by inner app calls spawned by this transaction.\n   * @param execTrace - The execution trace of calling an app or a logic sig, containing the inner app\n   * call trace in a recursive way.\n   * @param logicSigBudgetConsumed - Budget used during execution of a logic sig transaction.\n   * @param unnamedResourcesAccessed - These are resources that were accessed by this group that would normally have\n   * caused failure, but were allowed in simulation. Depending on where this object\n   * is in the response, the unnamed resources it contains may or may not qualify for\n   * group resource sharing. If this is a field in SimulateTransactionGroupResult,\n   * the resources do qualify, but if this is a field in SimulateTransactionResult,\n   * they do not qualify. In order to make this group valid for actual submission,\n   * resources that qualify for group sharing can be made available by any\n   * transaction of the group; otherwise, resources must be placed in the same\n   * transaction which accessed them.\n   */\n  constructor({\n    txnResult,\n    appBudgetConsumed,\n    execTrace,\n    logicSigBudgetConsumed,\n    unnamedResourcesAccessed,\n  }: {\n    txnResult: PendingTransactionResponse;\n    appBudgetConsumed?: number | bigint;\n    execTrace?: SimulationTransactionExecTrace;\n    logicSigBudgetConsumed?: number | bigint;\n    unnamedResourcesAccessed?: SimulateUnnamedResourcesAccessed;\n  }) {\n    super();\n    this.txnResult = txnResult;\n    this.appBudgetConsumed = appBudgetConsumed;\n    this.execTrace = execTrace;\n    this.logicSigBudgetConsumed = logicSigBudgetConsumed;\n    this.unnamedResourcesAccessed = unnamedResourcesAccessed;\n\n    this.attribute_map = {\n      txnResult: 'txn-result',\n      appBudgetConsumed: 'app-budget-consumed',\n      execTrace: 'exec-trace',\n      logicSigBudgetConsumed: 'logic-sig-budget-consumed',\n      unnamedResourcesAccessed: 'unnamed-resources-accessed',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): SimulateTransactionResult {\n    /* eslint-disable dot-notation */\n    if (typeof data['txn-result'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'txn-result': ${data}`\n      );\n    return new SimulateTransactionResult({\n      txnResult: PendingTransactionResponse.from_obj_for_encoding(\n        data['txn-result']\n      ),\n      appBudgetConsumed: data['app-budget-consumed'],\n      execTrace:\n        typeof data['exec-trace'] !== 'undefined'\n          ? SimulationTransactionExecTrace.from_obj_for_encoding(\n              data['exec-trace']\n            )\n          : undefined,\n      logicSigBudgetConsumed: data['logic-sig-budget-consumed'],\n      unnamedResourcesAccessed:\n        typeof data['unnamed-resources-accessed'] !== 'undefined'\n          ? SimulateUnnamedResourcesAccessed.from_obj_for_encoding(\n              data['unnamed-resources-accessed']\n            )\n          : undefined,\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * These are resources that were accessed by this group that would normally have\n * caused failure, but were allowed in simulation. Depending on where this object\n * is in the response, the unnamed resources it contains may or may not qualify for\n * group resource sharing. If this is a field in SimulateTransactionGroupResult,\n * the resources do qualify, but if this is a field in SimulateTransactionResult,\n * they do not qualify. In order to make this group valid for actual submission,\n * resources that qualify for group sharing can be made available by any\n * transaction of the group; otherwise, resources must be placed in the same\n * transaction which accessed them.\n */\nexport class SimulateUnnamedResourcesAccessed extends BaseModel {\n  /**\n   * The unnamed accounts that were referenced. The order of this array is arbitrary.\n   */\n  public accounts?: string[];\n\n  /**\n   * The unnamed application local states that were referenced. The order of this\n   * array is arbitrary.\n   */\n  public appLocals?: ApplicationLocalReference[];\n\n  /**\n   * The unnamed applications that were referenced. The order of this array is\n   * arbitrary.\n   */\n  public apps?: (number | bigint)[];\n\n  /**\n   * The unnamed asset holdings that were referenced. The order of this array is\n   * arbitrary.\n   */\n  public assetHoldings?: AssetHoldingReference[];\n\n  /**\n   * The unnamed assets that were referenced. The order of this array is arbitrary.\n   */\n  public assets?: (number | bigint)[];\n\n  /**\n   * The unnamed boxes that were referenced. The order of this array is arbitrary.\n   */\n  public boxes?: BoxReference[];\n\n  /**\n   * The number of extra box references used to increase the IO budget. This is in\n   * addition to the references defined in the input transaction group and any\n   * referenced to unnamed boxes.\n   */\n  public extraBoxRefs?: number | bigint;\n\n  /**\n   * Creates a new `SimulateUnnamedResourcesAccessed` object.\n   * @param accounts - The unnamed accounts that were referenced. The order of this array is arbitrary.\n   * @param appLocals - The unnamed application local states that were referenced. The order of this\n   * array is arbitrary.\n   * @param apps - The unnamed applications that were referenced. The order of this array is\n   * arbitrary.\n   * @param assetHoldings - The unnamed asset holdings that were referenced. The order of this array is\n   * arbitrary.\n   * @param assets - The unnamed assets that were referenced. The order of this array is arbitrary.\n   * @param boxes - The unnamed boxes that were referenced. The order of this array is arbitrary.\n   * @param extraBoxRefs - The number of extra box references used to increase the IO budget. This is in\n   * addition to the references defined in the input transaction group and any\n   * referenced to unnamed boxes.\n   */\n  constructor({\n    accounts,\n    appLocals,\n    apps,\n    assetHoldings,\n    assets,\n    boxes,\n    extraBoxRefs,\n  }: {\n    accounts?: string[];\n    appLocals?: ApplicationLocalReference[];\n    apps?: (number | bigint)[];\n    assetHoldings?: AssetHoldingReference[];\n    assets?: (number | bigint)[];\n    boxes?: BoxReference[];\n    extraBoxRefs?: number | bigint;\n  }) {\n    super();\n    this.accounts = accounts;\n    this.appLocals = appLocals;\n    this.apps = apps;\n    this.assetHoldings = assetHoldings;\n    this.assets = assets;\n    this.boxes = boxes;\n    this.extraBoxRefs = extraBoxRefs;\n\n    this.attribute_map = {\n      accounts: 'accounts',\n      appLocals: 'app-locals',\n      apps: 'apps',\n      assetHoldings: 'asset-holdings',\n      assets: 'assets',\n      boxes: 'boxes',\n      extraBoxRefs: 'extra-box-refs',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): SimulateUnnamedResourcesAccessed {\n    /* eslint-disable dot-notation */\n    return new SimulateUnnamedResourcesAccessed({\n      accounts: data['accounts'],\n      appLocals:\n        typeof data['app-locals'] !== 'undefined'\n          ? data['app-locals'].map(\n              ApplicationLocalReference.from_obj_for_encoding\n            )\n          : undefined,\n      apps: data['apps'],\n      assetHoldings:\n        typeof data['asset-holdings'] !== 'undefined'\n          ? data['asset-holdings'].map(\n              AssetHoldingReference.from_obj_for_encoding\n            )\n          : undefined,\n      assets: data['assets'],\n      boxes:\n        typeof data['boxes'] !== 'undefined'\n          ? data['boxes'].map(BoxReference.from_obj_for_encoding)\n          : undefined,\n      extraBoxRefs: data['extra-box-refs'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * The set of parameters and limits override during simulation. If this set of\n * parameters is present, then evaluation parameters may differ from standard\n * evaluation in certain ways.\n */\nexport class SimulationEvalOverrides extends BaseModel {\n  /**\n   * If true, transactions without signatures are allowed and simulated as if they\n   * were properly signed.\n   */\n  public allowEmptySignatures?: boolean;\n\n  /**\n   * If true, allows access to unnamed resources during simulation.\n   */\n  public allowUnnamedResources?: boolean;\n\n  /**\n   * The extra opcode budget added to each transaction group during simulation\n   */\n  public extraOpcodeBudget?: number | bigint;\n\n  /**\n   * The maximum log calls one can make during simulation\n   */\n  public maxLogCalls?: number | bigint;\n\n  /**\n   * The maximum byte number to log during simulation\n   */\n  public maxLogSize?: number | bigint;\n\n  /**\n   * Creates a new `SimulationEvalOverrides` object.\n   * @param allowEmptySignatures - If true, transactions without signatures are allowed and simulated as if they\n   * were properly signed.\n   * @param allowUnnamedResources - If true, allows access to unnamed resources during simulation.\n   * @param extraOpcodeBudget - The extra opcode budget added to each transaction group during simulation\n   * @param maxLogCalls - The maximum log calls one can make during simulation\n   * @param maxLogSize - The maximum byte number to log during simulation\n   */\n  constructor({\n    allowEmptySignatures,\n    allowUnnamedResources,\n    extraOpcodeBudget,\n    maxLogCalls,\n    maxLogSize,\n  }: {\n    allowEmptySignatures?: boolean;\n    allowUnnamedResources?: boolean;\n    extraOpcodeBudget?: number | bigint;\n    maxLogCalls?: number | bigint;\n    maxLogSize?: number | bigint;\n  }) {\n    super();\n    this.allowEmptySignatures = allowEmptySignatures;\n    this.allowUnnamedResources = allowUnnamedResources;\n    this.extraOpcodeBudget = extraOpcodeBudget;\n    this.maxLogCalls = maxLogCalls;\n    this.maxLogSize = maxLogSize;\n\n    this.attribute_map = {\n      allowEmptySignatures: 'allow-empty-signatures',\n      allowUnnamedResources: 'allow-unnamed-resources',\n      extraOpcodeBudget: 'extra-opcode-budget',\n      maxLogCalls: 'max-log-calls',\n      maxLogSize: 'max-log-size',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): SimulationEvalOverrides {\n    /* eslint-disable dot-notation */\n    return new SimulationEvalOverrides({\n      allowEmptySignatures: data['allow-empty-signatures'],\n      allowUnnamedResources: data['allow-unnamed-resources'],\n      extraOpcodeBudget: data['extra-opcode-budget'],\n      maxLogCalls: data['max-log-calls'],\n      maxLogSize: data['max-log-size'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * The set of trace information and effect from evaluating a single opcode.\n */\nexport class SimulationOpcodeTraceUnit extends BaseModel {\n  /**\n   * The program counter of the current opcode being evaluated.\n   */\n  public pc: number | bigint;\n\n  /**\n   * The writes into scratch slots.\n   */\n  public scratchChanges?: ScratchChange[];\n\n  /**\n   * The indexes of the traces for inner transactions spawned by this opcode, if any.\n   */\n  public spawnedInners?: (number | bigint)[];\n\n  /**\n   * The values added by this opcode to the stack.\n   */\n  public stackAdditions?: AvmValue[];\n\n  /**\n   * The number of deleted stack values by this opcode.\n   */\n  public stackPopCount?: number | bigint;\n\n  /**\n   * The operations against the current application's states.\n   */\n  public stateChanges?: ApplicationStateOperation[];\n\n  /**\n   * Creates a new `SimulationOpcodeTraceUnit` object.\n   * @param pc - The program counter of the current opcode being evaluated.\n   * @param scratchChanges - The writes into scratch slots.\n   * @param spawnedInners - The indexes of the traces for inner transactions spawned by this opcode, if any.\n   * @param stackAdditions - The values added by this opcode to the stack.\n   * @param stackPopCount - The number of deleted stack values by this opcode.\n   * @param stateChanges - The operations against the current application's states.\n   */\n  constructor({\n    pc,\n    scratchChanges,\n    spawnedInners,\n    stackAdditions,\n    stackPopCount,\n    stateChanges,\n  }: {\n    pc: number | bigint;\n    scratchChanges?: ScratchChange[];\n    spawnedInners?: (number | bigint)[];\n    stackAdditions?: AvmValue[];\n    stackPopCount?: number | bigint;\n    stateChanges?: ApplicationStateOperation[];\n  }) {\n    super();\n    this.pc = pc;\n    this.scratchChanges = scratchChanges;\n    this.spawnedInners = spawnedInners;\n    this.stackAdditions = stackAdditions;\n    this.stackPopCount = stackPopCount;\n    this.stateChanges = stateChanges;\n\n    this.attribute_map = {\n      pc: 'pc',\n      scratchChanges: 'scratch-changes',\n      spawnedInners: 'spawned-inners',\n      stackAdditions: 'stack-additions',\n      stackPopCount: 'stack-pop-count',\n      stateChanges: 'state-changes',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): SimulationOpcodeTraceUnit {\n    /* eslint-disable dot-notation */\n    if (typeof data['pc'] === 'undefined')\n      throw new Error(`Response is missing required field 'pc': ${data}`);\n    return new SimulationOpcodeTraceUnit({\n      pc: data['pc'],\n      scratchChanges:\n        typeof data['scratch-changes'] !== 'undefined'\n          ? data['scratch-changes'].map(ScratchChange.from_obj_for_encoding)\n          : undefined,\n      spawnedInners: data['spawned-inners'],\n      stackAdditions:\n        typeof data['stack-additions'] !== 'undefined'\n          ? data['stack-additions'].map(AvmValue.from_obj_for_encoding)\n          : undefined,\n      stackPopCount: data['stack-pop-count'],\n      stateChanges:\n        typeof data['state-changes'] !== 'undefined'\n          ? data['state-changes'].map(\n              ApplicationStateOperation.from_obj_for_encoding\n            )\n          : undefined,\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * The execution trace of calling an app or a logic sig, containing the inner app\n * call trace in a recursive way.\n */\nexport class SimulationTransactionExecTrace extends BaseModel {\n  /**\n   * SHA512_256 hash digest of the approval program executed in transaction.\n   */\n  public approvalProgramHash?: Uint8Array;\n\n  /**\n   * Program trace that contains a trace of opcode effects in an approval program.\n   */\n  public approvalProgramTrace?: SimulationOpcodeTraceUnit[];\n\n  /**\n   * SHA512_256 hash digest of the clear state program executed in transaction.\n   */\n  public clearStateProgramHash?: Uint8Array;\n\n  /**\n   * Program trace that contains a trace of opcode effects in a clear state program.\n   */\n  public clearStateProgramTrace?: SimulationOpcodeTraceUnit[];\n\n  /**\n   * An array of SimulationTransactionExecTrace representing the execution trace of\n   * any inner transactions executed.\n   */\n  public innerTrace?: SimulationTransactionExecTrace[];\n\n  /**\n   * SHA512_256 hash digest of the logic sig executed in transaction.\n   */\n  public logicSigHash?: Uint8Array;\n\n  /**\n   * Program trace that contains a trace of opcode effects in a logic sig.\n   */\n  public logicSigTrace?: SimulationOpcodeTraceUnit[];\n\n  /**\n   * Creates a new `SimulationTransactionExecTrace` object.\n   * @param approvalProgramHash - SHA512_256 hash digest of the approval program executed in transaction.\n   * @param approvalProgramTrace - Program trace that contains a trace of opcode effects in an approval program.\n   * @param clearStateProgramHash - SHA512_256 hash digest of the clear state program executed in transaction.\n   * @param clearStateProgramTrace - Program trace that contains a trace of opcode effects in a clear state program.\n   * @param innerTrace - An array of SimulationTransactionExecTrace representing the execution trace of\n   * any inner transactions executed.\n   * @param logicSigHash - SHA512_256 hash digest of the logic sig executed in transaction.\n   * @param logicSigTrace - Program trace that contains a trace of opcode effects in a logic sig.\n   */\n  constructor({\n    approvalProgramHash,\n    approvalProgramTrace,\n    clearStateProgramHash,\n    clearStateProgramTrace,\n    innerTrace,\n    logicSigHash,\n    logicSigTrace,\n  }: {\n    approvalProgramHash?: string | Uint8Array;\n    approvalProgramTrace?: SimulationOpcodeTraceUnit[];\n    clearStateProgramHash?: string | Uint8Array;\n    clearStateProgramTrace?: SimulationOpcodeTraceUnit[];\n    innerTrace?: SimulationTransactionExecTrace[];\n    logicSigHash?: string | Uint8Array;\n    logicSigTrace?: SimulationOpcodeTraceUnit[];\n  }) {\n    super();\n    this.approvalProgramHash =\n      typeof approvalProgramHash === 'string'\n        ? new Uint8Array(Buffer.from(approvalProgramHash, 'base64'))\n        : approvalProgramHash;\n    this.approvalProgramTrace = approvalProgramTrace;\n    this.clearStateProgramHash =\n      typeof clearStateProgramHash === 'string'\n        ? new Uint8Array(Buffer.from(clearStateProgramHash, 'base64'))\n        : clearStateProgramHash;\n    this.clearStateProgramTrace = clearStateProgramTrace;\n    this.innerTrace = innerTrace;\n    this.logicSigHash =\n      typeof logicSigHash === 'string'\n        ? new Uint8Array(Buffer.from(logicSigHash, 'base64'))\n        : logicSigHash;\n    this.logicSigTrace = logicSigTrace;\n\n    this.attribute_map = {\n      approvalProgramHash: 'approval-program-hash',\n      approvalProgramTrace: 'approval-program-trace',\n      clearStateProgramHash: 'clear-state-program-hash',\n      clearStateProgramTrace: 'clear-state-program-trace',\n      innerTrace: 'inner-trace',\n      logicSigHash: 'logic-sig-hash',\n      logicSigTrace: 'logic-sig-trace',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): SimulationTransactionExecTrace {\n    /* eslint-disable dot-notation */\n    return new SimulationTransactionExecTrace({\n      approvalProgramHash: data['approval-program-hash'],\n      approvalProgramTrace:\n        typeof data['approval-program-trace'] !== 'undefined'\n          ? data['approval-program-trace'].map(\n              SimulationOpcodeTraceUnit.from_obj_for_encoding\n            )\n          : undefined,\n      clearStateProgramHash: data['clear-state-program-hash'],\n      clearStateProgramTrace:\n        typeof data['clear-state-program-trace'] !== 'undefined'\n          ? data['clear-state-program-trace'].map(\n              SimulationOpcodeTraceUnit.from_obj_for_encoding\n            )\n          : undefined,\n      innerTrace:\n        typeof data['inner-trace'] !== 'undefined'\n          ? data['inner-trace'].map(\n              SimulationTransactionExecTrace.from_obj_for_encoding\n            )\n          : undefined,\n      logicSigHash: data['logic-sig-hash'],\n      logicSigTrace:\n        typeof data['logic-sig-trace'] !== 'undefined'\n          ? data['logic-sig-trace'].map(\n              SimulationOpcodeTraceUnit.from_obj_for_encoding\n            )\n          : undefined,\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Represents a state proof and its corresponding message\n */\nexport class StateProof extends BaseModel {\n  /**\n   * Represents the message that the state proofs are attesting to.\n   */\n  public message: StateProofMessage;\n\n  /**\n   * The encoded StateProof for the message.\n   */\n  public stateproof: Uint8Array;\n\n  /**\n   * Creates a new `StateProof` object.\n   * @param message - Represents the message that the state proofs are attesting to.\n   * @param stateproof - The encoded StateProof for the message.\n   */\n  constructor({\n    message,\n    stateproof,\n  }: {\n    message: StateProofMessage;\n    stateproof: string | Uint8Array;\n  }) {\n    super();\n    this.message = message;\n    this.stateproof =\n      typeof stateproof === 'string'\n        ? new Uint8Array(Buffer.from(stateproof, 'base64'))\n        : stateproof;\n\n    this.attribute_map = {\n      message: 'Message',\n      stateproof: 'StateProof',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): StateProof {\n    /* eslint-disable dot-notation */\n    if (typeof data['Message'] === 'undefined')\n      throw new Error(`Response is missing required field 'Message': ${data}`);\n    if (typeof data['StateProof'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'StateProof': ${data}`\n      );\n    return new StateProof({\n      message: StateProofMessage.from_obj_for_encoding(data['Message']),\n      stateproof: data['StateProof'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Represents the message that the state proofs are attesting to.\n */\nexport class StateProofMessage extends BaseModel {\n  /**\n   * The vector commitment root on all light block headers within a state proof\n   * interval.\n   */\n  public blockheaderscommitment: Uint8Array;\n\n  /**\n   * The first round the message attests to.\n   */\n  public firstattestedround: number | bigint;\n\n  /**\n   * The last round the message attests to.\n   */\n  public lastattestedround: number | bigint;\n\n  /**\n   * An integer value representing the natural log of the proven weight with 16 bits\n   * of precision. This value would be used to verify the next state proof.\n   */\n  public lnprovenweight: number | bigint;\n\n  /**\n   * The vector commitment root of the top N accounts to sign the next StateProof.\n   */\n  public voterscommitment: Uint8Array;\n\n  /**\n   * Creates a new `StateProofMessage` object.\n   * @param blockheaderscommitment - The vector commitment root on all light block headers within a state proof\n   * interval.\n   * @param firstattestedround - The first round the message attests to.\n   * @param lastattestedround - The last round the message attests to.\n   * @param lnprovenweight - An integer value representing the natural log of the proven weight with 16 bits\n   * of precision. This value would be used to verify the next state proof.\n   * @param voterscommitment - The vector commitment root of the top N accounts to sign the next StateProof.\n   */\n  constructor({\n    blockheaderscommitment,\n    firstattestedround,\n    lastattestedround,\n    lnprovenweight,\n    voterscommitment,\n  }: {\n    blockheaderscommitment: string | Uint8Array;\n    firstattestedround: number | bigint;\n    lastattestedround: number | bigint;\n    lnprovenweight: number | bigint;\n    voterscommitment: string | Uint8Array;\n  }) {\n    super();\n    this.blockheaderscommitment =\n      typeof blockheaderscommitment === 'string'\n        ? new Uint8Array(Buffer.from(blockheaderscommitment, 'base64'))\n        : blockheaderscommitment;\n    this.firstattestedround = firstattestedround;\n    this.lastattestedround = lastattestedround;\n    this.lnprovenweight = lnprovenweight;\n    this.voterscommitment =\n      typeof voterscommitment === 'string'\n        ? new Uint8Array(Buffer.from(voterscommitment, 'base64'))\n        : voterscommitment;\n\n    this.attribute_map = {\n      blockheaderscommitment: 'BlockHeadersCommitment',\n      firstattestedround: 'FirstAttestedRound',\n      lastattestedround: 'LastAttestedRound',\n      lnprovenweight: 'LnProvenWeight',\n      voterscommitment: 'VotersCommitment',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): StateProofMessage {\n    /* eslint-disable dot-notation */\n    if (typeof data['BlockHeadersCommitment'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'BlockHeadersCommitment': ${data}`\n      );\n    if (typeof data['FirstAttestedRound'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'FirstAttestedRound': ${data}`\n      );\n    if (typeof data['LastAttestedRound'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'LastAttestedRound': ${data}`\n      );\n    if (typeof data['LnProvenWeight'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'LnProvenWeight': ${data}`\n      );\n    if (typeof data['VotersCommitment'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'VotersCommitment': ${data}`\n      );\n    return new StateProofMessage({\n      blockheaderscommitment: data['BlockHeadersCommitment'],\n      firstattestedround: data['FirstAttestedRound'],\n      lastattestedround: data['LastAttestedRound'],\n      lnprovenweight: data['LnProvenWeight'],\n      voterscommitment: data['VotersCommitment'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Supply represents the current supply of MicroAlgos in the system.\n */\nexport class SupplyResponse extends BaseModel {\n  /**\n   * Round\n   */\n  public currentRound: number | bigint;\n\n  /**\n   * OnlineMoney\n   */\n  public onlineMoney: number | bigint;\n\n  /**\n   * TotalMoney\n   */\n  public totalMoney: number | bigint;\n\n  /**\n   * Creates a new `SupplyResponse` object.\n   * @param currentRound - Round\n   * @param onlineMoney - OnlineMoney\n   * @param totalMoney - TotalMoney\n   */\n  constructor({\n    currentRound,\n    onlineMoney,\n    totalMoney,\n  }: {\n    currentRound: number | bigint;\n    onlineMoney: number | bigint;\n    totalMoney: number | bigint;\n  }) {\n    super();\n    this.currentRound = currentRound;\n    this.onlineMoney = onlineMoney;\n    this.totalMoney = totalMoney;\n\n    this.attribute_map = {\n      currentRound: 'current_round',\n      onlineMoney: 'online-money',\n      totalMoney: 'total-money',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): SupplyResponse {\n    /* eslint-disable dot-notation */\n    if (typeof data['current_round'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'current_round': ${data}`\n      );\n    if (typeof data['online-money'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'online-money': ${data}`\n      );\n    if (typeof data['total-money'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'total-money': ${data}`\n      );\n    return new SupplyResponse({\n      currentRound: data['current_round'],\n      onlineMoney: data['online-money'],\n      totalMoney: data['total-money'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Represents a key-value pair in an application store.\n */\nexport class TealKeyValue extends BaseModel {\n  public key: string;\n\n  /**\n   * Represents a TEAL value.\n   */\n  public value: TealValue;\n\n  /**\n   * Creates a new `TealKeyValue` object.\n   * @param key -\n   * @param value - Represents a TEAL value.\n   */\n  constructor({ key, value }: { key: string; value: TealValue }) {\n    super();\n    this.key = key;\n    this.value = value;\n\n    this.attribute_map = {\n      key: 'key',\n      value: 'value',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): TealKeyValue {\n    /* eslint-disable dot-notation */\n    if (typeof data['key'] === 'undefined')\n      throw new Error(`Response is missing required field 'key': ${data}`);\n    if (typeof data['value'] === 'undefined')\n      throw new Error(`Response is missing required field 'value': ${data}`);\n    return new TealKeyValue({\n      key: data['key'],\n      value: TealValue.from_obj_for_encoding(data['value']),\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Represents a TEAL value.\n */\nexport class TealValue extends BaseModel {\n  /**\n   * (tt) value type. Value `1` refers to **bytes**, value `2` refers to **uint**\n   */\n  public type: number | bigint;\n\n  /**\n   * (tb) bytes value.\n   */\n  public bytes: string;\n\n  /**\n   * (ui) uint value.\n   */\n  public uint: number | bigint;\n\n  /**\n   * Creates a new `TealValue` object.\n   * @param type - (tt) value type. Value `1` refers to **bytes**, value `2` refers to **uint**\n   * @param bytes - (tb) bytes value.\n   * @param uint - (ui) uint value.\n   */\n  constructor({\n    type,\n    bytes,\n    uint,\n  }: {\n    type: number | bigint;\n    bytes: string;\n    uint: number | bigint;\n  }) {\n    super();\n    this.type = type;\n    this.bytes = bytes;\n    this.uint = uint;\n\n    this.attribute_map = {\n      type: 'type',\n      bytes: 'bytes',\n      uint: 'uint',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): TealValue {\n    /* eslint-disable dot-notation */\n    if (typeof data['type'] === 'undefined')\n      throw new Error(`Response is missing required field 'type': ${data}`);\n    if (typeof data['bytes'] === 'undefined')\n      throw new Error(`Response is missing required field 'bytes': ${data}`);\n    if (typeof data['uint'] === 'undefined')\n      throw new Error(`Response is missing required field 'uint': ${data}`);\n    return new TealValue({\n      type: data['type'],\n      bytes: data['bytes'],\n      uint: data['uint'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Response containing all ledger state deltas for transaction groups, with their\n * associated Ids, in a single round.\n */\nexport class TransactionGroupLedgerStateDeltasForRoundResponse extends BaseModel {\n  public deltas: LedgerStateDeltaForTransactionGroup[];\n\n  /**\n   * Creates a new `TransactionGroupLedgerStateDeltasForRoundResponse` object.\n   * @param deltas -\n   */\n  constructor({ deltas }: { deltas: LedgerStateDeltaForTransactionGroup[] }) {\n    super();\n    this.deltas = deltas;\n\n    this.attribute_map = {\n      deltas: 'Deltas',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): TransactionGroupLedgerStateDeltasForRoundResponse {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['Deltas']))\n      throw new Error(\n        `Response is missing required array field 'Deltas': ${data}`\n      );\n    return new TransactionGroupLedgerStateDeltasForRoundResponse({\n      deltas: data['Deltas'].map(\n        LedgerStateDeltaForTransactionGroup.from_obj_for_encoding\n      ),\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * TransactionParams contains the parameters that help a client construct a new\n * transaction.\n */\nexport class TransactionParametersResponse extends BaseModel {\n  /**\n   * ConsensusVersion indicates the consensus protocol version\n   * as of LastRound.\n   */\n  public consensusVersion: string;\n\n  /**\n   * Fee is the suggested transaction fee\n   * Fee is in units of micro-Algos per byte.\n   * Fee may fall to zero but transactions must still have a fee of\n   * at least MinTxnFee for the current network protocol.\n   */\n  public fee: number | bigint;\n\n  /**\n   * GenesisHash is the hash of the genesis block.\n   */\n  public genesisHash: Uint8Array;\n\n  /**\n   * GenesisID is an ID listed in the genesis block.\n   */\n  public genesisId: string;\n\n  /**\n   * LastRound indicates the last round seen\n   */\n  public lastRound: number | bigint;\n\n  /**\n   * The minimum transaction fee (not per byte) required for the\n   * txn to validate for the current network protocol.\n   */\n  public minFee: number | bigint;\n\n  /**\n   * Creates a new `TransactionParametersResponse` object.\n   * @param consensusVersion - ConsensusVersion indicates the consensus protocol version\n   * as of LastRound.\n   * @param fee - Fee is the suggested transaction fee\n   * Fee is in units of micro-Algos per byte.\n   * Fee may fall to zero but transactions must still have a fee of\n   * at least MinTxnFee for the current network protocol.\n   * @param genesisHash - GenesisHash is the hash of the genesis block.\n   * @param genesisId - GenesisID is an ID listed in the genesis block.\n   * @param lastRound - LastRound indicates the last round seen\n   * @param minFee - The minimum transaction fee (not per byte) required for the\n   * txn to validate for the current network protocol.\n   */\n  constructor({\n    consensusVersion,\n    fee,\n    genesisHash,\n    genesisId,\n    lastRound,\n    minFee,\n  }: {\n    consensusVersion: string;\n    fee: number | bigint;\n    genesisHash: string | Uint8Array;\n    genesisId: string;\n    lastRound: number | bigint;\n    minFee: number | bigint;\n  }) {\n    super();\n    this.consensusVersion = consensusVersion;\n    this.fee = fee;\n    this.genesisHash =\n      typeof genesisHash === 'string'\n        ? new Uint8Array(Buffer.from(genesisHash, 'base64'))\n        : genesisHash;\n    this.genesisId = genesisId;\n    this.lastRound = lastRound;\n    this.minFee = minFee;\n\n    this.attribute_map = {\n      consensusVersion: 'consensus-version',\n      fee: 'fee',\n      genesisHash: 'genesis-hash',\n      genesisId: 'genesis-id',\n      lastRound: 'last-round',\n      minFee: 'min-fee',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): TransactionParametersResponse {\n    /* eslint-disable dot-notation */\n    if (typeof data['consensus-version'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'consensus-version': ${data}`\n      );\n    if (typeof data['fee'] === 'undefined')\n      throw new Error(`Response is missing required field 'fee': ${data}`);\n    if (typeof data['genesis-hash'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'genesis-hash': ${data}`\n      );\n    if (typeof data['genesis-id'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'genesis-id': ${data}`\n      );\n    if (typeof data['last-round'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'last-round': ${data}`\n      );\n    if (typeof data['min-fee'] === 'undefined')\n      throw new Error(`Response is missing required field 'min-fee': ${data}`);\n    return new TransactionParametersResponse({\n      consensusVersion: data['consensus-version'],\n      fee: data['fee'],\n      genesisHash: data['genesis-hash'],\n      genesisId: data['genesis-id'],\n      lastRound: data['last-round'],\n      minFee: data['min-fee'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Proof of transaction in a block.\n */\nexport class TransactionProofResponse extends BaseModel {\n  /**\n   * Index of the transaction in the block's payset.\n   */\n  public idx: number | bigint;\n\n  /**\n   * Proof of transaction membership.\n   */\n  public proof: Uint8Array;\n\n  /**\n   * Hash of SignedTxnInBlock for verifying proof.\n   */\n  public stibhash: Uint8Array;\n\n  /**\n   * Represents the depth of the tree that is being proven, i.e. the number of edges\n   * from a leaf to the root.\n   */\n  public treedepth: number | bigint;\n\n  /**\n   * The type of hash function used to create the proof, must be one of:\n   * * sha512_256\n   * * sha256\n   */\n  public hashtype?: string;\n\n  /**\n   * Creates a new `TransactionProofResponse` object.\n   * @param idx - Index of the transaction in the block's payset.\n   * @param proof - Proof of transaction membership.\n   * @param stibhash - Hash of SignedTxnInBlock for verifying proof.\n   * @param treedepth - Represents the depth of the tree that is being proven, i.e. the number of edges\n   * from a leaf to the root.\n   * @param hashtype - The type of hash function used to create the proof, must be one of:\n   * * sha512_256\n   * * sha256\n   */\n  constructor({\n    idx,\n    proof,\n    stibhash,\n    treedepth,\n    hashtype,\n  }: {\n    idx: number | bigint;\n    proof: string | Uint8Array;\n    stibhash: string | Uint8Array;\n    treedepth: number | bigint;\n    hashtype?: string;\n  }) {\n    super();\n    this.idx = idx;\n    this.proof =\n      typeof proof === 'string'\n        ? new Uint8Array(Buffer.from(proof, 'base64'))\n        : proof;\n    this.stibhash =\n      typeof stibhash === 'string'\n        ? new Uint8Array(Buffer.from(stibhash, 'base64'))\n        : stibhash;\n    this.treedepth = treedepth;\n    this.hashtype = hashtype;\n\n    this.attribute_map = {\n      idx: 'idx',\n      proof: 'proof',\n      stibhash: 'stibhash',\n      treedepth: 'treedepth',\n      hashtype: 'hashtype',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): TransactionProofResponse {\n    /* eslint-disable dot-notation */\n    if (typeof data['idx'] === 'undefined')\n      throw new Error(`Response is missing required field 'idx': ${data}`);\n    if (typeof data['proof'] === 'undefined')\n      throw new Error(`Response is missing required field 'proof': ${data}`);\n    if (typeof data['stibhash'] === 'undefined')\n      throw new Error(`Response is missing required field 'stibhash': ${data}`);\n    if (typeof data['treedepth'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'treedepth': ${data}`\n      );\n    return new TransactionProofResponse({\n      idx: data['idx'],\n      proof: data['proof'],\n      stibhash: data['stibhash'],\n      treedepth: data['treedepth'],\n      hashtype: data['hashtype'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * algod version information.\n */\nexport class Version extends BaseModel {\n  public build: BuildVersion;\n\n  public genesisHashB64: Uint8Array;\n\n  public genesisId: string;\n\n  public versions: string[];\n\n  /**\n   * Creates a new `Version` object.\n   * @param build -\n   * @param genesisHashB64 -\n   * @param genesisId -\n   * @param versions -\n   */\n  constructor({\n    build,\n    genesisHashB64,\n    genesisId,\n    versions,\n  }: {\n    build: BuildVersion;\n    genesisHashB64: string | Uint8Array;\n    genesisId: string;\n    versions: string[];\n  }) {\n    super();\n    this.build = build;\n    this.genesisHashB64 =\n      typeof genesisHashB64 === 'string'\n        ? new Uint8Array(Buffer.from(genesisHashB64, 'base64'))\n        : genesisHashB64;\n    this.genesisId = genesisId;\n    this.versions = versions;\n\n    this.attribute_map = {\n      build: 'build',\n      genesisHashB64: 'genesis_hash_b64',\n      genesisId: 'genesis_id',\n      versions: 'versions',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): Version {\n    /* eslint-disable dot-notation */\n    if (typeof data['build'] === 'undefined')\n      throw new Error(`Response is missing required field 'build': ${data}`);\n    if (typeof data['genesis_hash_b64'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'genesis_hash_b64': ${data}`\n      );\n    if (typeof data['genesis_id'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'genesis_id': ${data}`\n      );\n    if (!Array.isArray(data['versions']))\n      throw new Error(\n        `Response is missing required array field 'versions': ${data}`\n      );\n    return new Version({\n      build: BuildVersion.from_obj_for_encoding(data['build']),\n      genesisHashB64: data['genesis_hash_b64'],\n      genesisId: data['genesis_id'],\n      versions: data['versions'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n"],"mappings":";;;;AAAA;;;AAIA;AACA,SAASA,MAAM,QAAQ,QAAQ;AAC/B,OAAOC,SAAS,MAAM,iBAAiB;AAIvC;;;;;AAKA,WAAaC,OAAQ,0BAAAC,UAAA;EAAAC,SAAA,CAAAF,OAAA,EAAAC,UAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,OAAA;EAiJnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAmDA,SAAAA,QAAAK,IAAA,EAkDC;IAAA,IAAAC,KAAA;IAAA,IAjDCC,OAAO,GAAAF,IAAA,CAAPE,OAAO;MACPC,MAAM,GAAAH,IAAA,CAANG,MAAM;MACNC,2BAA2B,GAAAJ,IAAA,CAA3BI,2BAA2B;MAC3BC,UAAU,GAAAL,IAAA,CAAVK,UAAU;MACVC,cAAc,GAAAN,IAAA,CAAdM,cAAc;MACdC,OAAO,GAAAP,IAAA,CAAPO,OAAO;MACPC,KAAK,GAAAR,IAAA,CAALQ,KAAK;MACLC,MAAM,GAAAT,IAAA,CAANS,MAAM;MACNC,gBAAgB,GAAAV,IAAA,CAAhBU,gBAAgB;MAChBC,kBAAkB,GAAAX,IAAA,CAAlBW,kBAAkB;MAClBC,gBAAgB,GAAAZ,IAAA,CAAhBY,gBAAgB;MAChBC,kBAAkB,GAAAb,IAAA,CAAlBa,kBAAkB;MAClBC,cAAc,GAAAd,IAAA,CAAdc,cAAc;MACdC,mBAAmB,GAAAf,IAAA,CAAnBe,mBAAmB;MACnBC,eAAe,GAAAhB,IAAA,CAAfgB,eAAe;MACfC,MAAM,GAAAjB,IAAA,CAANiB,MAAM;MACNC,QAAQ,GAAAlB,IAAA,CAARkB,QAAQ;MACRC,WAAW,GAAAnB,IAAA,CAAXmB,WAAW;MACXC,aAAa,GAAApB,IAAA,CAAboB,aAAa;MACbC,aAAa,GAAArB,IAAA,CAAbqB,aAAa;MACbC,UAAU,GAAAtB,IAAA,CAAVsB,UAAU;MACVC,OAAO,GAAAvB,IAAA,CAAPuB,OAAO;MACPC,aAAa,GAAAxB,IAAA,CAAbwB,aAAa;MACbC,UAAU,GAAAzB,IAAA,CAAVyB,UAAU;IAAAC,eAAA,OAAA/B,OAAA;IA2BVM,KAAA,GAAAH,MAAA,CAAA6B,IAAA;IACA1B,KAAA,CAAKC,OAAO,GAAGA,OAAO;IACtBD,KAAA,CAAKE,MAAM,GAAGA,MAAM;IACpBF,KAAA,CAAKG,2BAA2B,GAAGA,2BAA2B;IAC9DH,KAAA,CAAKI,UAAU,GAAGA,UAAU;IAC5BJ,KAAA,CAAKK,cAAc,GAAGA,cAAc;IACpCL,KAAA,CAAKM,OAAO,GAAGA,OAAO;IACtBN,KAAA,CAAKO,KAAK,GAAGA,KAAK;IAClBP,KAAA,CAAKQ,MAAM,GAAGA,MAAM;IACpBR,KAAA,CAAKS,gBAAgB,GAAGA,gBAAgB;IACxCT,KAAA,CAAKU,kBAAkB,GAAGA,kBAAkB;IAC5CV,KAAA,CAAKW,gBAAgB,GAAGA,gBAAgB;IACxCX,KAAA,CAAKY,kBAAkB,GAAGA,kBAAkB;IAC5CZ,KAAA,CAAKa,cAAc,GAAGA,cAAc;IACpCb,KAAA,CAAKc,mBAAmB,GAAGA,mBAAmB;IAC9Cd,KAAA,CAAKe,eAAe,GAAGA,eAAe;IACtCf,KAAA,CAAKgB,MAAM,GAAGA,MAAM;IACpBhB,KAAA,CAAKiB,QAAQ,GAAGA,QAAQ;IACxBjB,KAAA,CAAKkB,WAAW,GAAGA,WAAW;IAC9BlB,KAAA,CAAKmB,aAAa,GAAGA,aAAa;IAClCnB,KAAA,CAAKoB,aAAa,GAAGA,aAAa;IAClCpB,KAAA,CAAKqB,UAAU,GAAGA,UAAU;IAC5BrB,KAAA,CAAKsB,OAAO,GAAGA,OAAO;IACtBtB,KAAA,CAAKuB,aAAa,GAAGA,aAAa;IAClCvB,KAAA,CAAKwB,UAAU,GAAGA,UAAU;IAE5BxB,KAAA,CAAK2B,aAAa,GAAG;MACnB1B,OAAO,EAAE,SAAS;MAClBC,MAAM,EAAE,QAAQ;MAChBC,2BAA2B,EAAE,gCAAgC;MAC7DC,UAAU,EAAE,aAAa;MACzBC,cAAc,EAAE,iBAAiB;MACjCC,OAAO,EAAE,SAAS;MAClBC,KAAK,EAAE,OAAO;MACdC,MAAM,EAAE,QAAQ;MAChBC,gBAAgB,EAAE,qBAAqB;MACvCC,kBAAkB,EAAE,uBAAuB;MAC3CC,gBAAgB,EAAE,oBAAoB;MACtCC,kBAAkB,EAAE,sBAAsB;MAC1CC,cAAc,EAAE,kBAAkB;MAClCC,mBAAmB,EAAE,wBAAwB;MAC7CC,eAAe,EAAE,mBAAmB;MACpCC,MAAM,EAAE,QAAQ;MAChBC,QAAQ,EAAE,WAAW;MACrBC,WAAW,EAAE,cAAc;MAC3BC,aAAa,EAAE,gBAAgB;MAC/BC,aAAa,EAAE,eAAe;MAC9BC,UAAU,EAAE,aAAa;MACzBC,OAAO,EAAE,UAAU;MACnBC,aAAa,EAAE,iBAAiB;MAChCC,UAAU,EAAE;KACb;IAAC,OAAAxB,KAAA;EACJ;EAEA;EAAA4B,YAAA,CAAAlC,OAAA;IAAAmC,GAAA;IAAAC,KAAA,EACA,SAAAC,sBAA6BC,IAAyB;MACpD;MACA,IAAI,OAAOA,IAAI,CAAC,SAAS,CAAC,KAAK,WAAW,EACxC,MAAM,IAAIC,KAAK,kDAAAC,MAAA,CAAkDF,IAAI,CAAE,CAAC;MAC1E,IAAI,OAAOA,IAAI,CAAC,QAAQ,CAAC,KAAK,WAAW,EACvC,MAAM,IAAIC,KAAK,iDAAAC,MAAA,CAAiDF,IAAI,CAAE,CAAC;MACzE,IAAI,OAAOA,IAAI,CAAC,gCAAgC,CAAC,KAAK,WAAW,EAC/D,MAAM,IAAIC,KAAK,yEAAAC,MAAA,CAC2DF,IAAI,CAAE,CAC/E;MACH,IAAI,OAAOA,IAAI,CAAC,aAAa,CAAC,KAAK,WAAW,EAC5C,MAAM,IAAIC,KAAK,sDAAAC,MAAA,CACwCF,IAAI,CAAE,CAC5D;MACH,IAAI,OAAOA,IAAI,CAAC,iBAAiB,CAAC,KAAK,WAAW,EAChD,MAAM,IAAIC,KAAK,0DAAAC,MAAA,CAC4CF,IAAI,CAAE,CAChE;MACH,IAAI,OAAOA,IAAI,CAAC,SAAS,CAAC,KAAK,WAAW,EACxC,MAAM,IAAIC,KAAK,kDAAAC,MAAA,CAAkDF,IAAI,CAAE,CAAC;MAC1E,IAAI,OAAOA,IAAI,CAAC,OAAO,CAAC,KAAK,WAAW,EACtC,MAAM,IAAIC,KAAK,gDAAAC,MAAA,CAAgDF,IAAI,CAAE,CAAC;MACxE,IAAI,OAAOA,IAAI,CAAC,QAAQ,CAAC,KAAK,WAAW,EACvC,MAAM,IAAIC,KAAK,iDAAAC,MAAA,CAAiDF,IAAI,CAAE,CAAC;MACzE,IAAI,OAAOA,IAAI,CAAC,qBAAqB,CAAC,KAAK,WAAW,EACpD,MAAM,IAAIC,KAAK,8DAAAC,MAAA,CACgDF,IAAI,CAAE,CACpE;MACH,IAAI,OAAOA,IAAI,CAAC,uBAAuB,CAAC,KAAK,WAAW,EACtD,MAAM,IAAIC,KAAK,gEAAAC,MAAA,CACkDF,IAAI,CAAE,CACtE;MACH,IAAI,OAAOA,IAAI,CAAC,oBAAoB,CAAC,KAAK,WAAW,EACnD,MAAM,IAAIC,KAAK,6DAAAC,MAAA,CAC+CF,IAAI,CAAE,CACnE;MACH,IAAI,OAAOA,IAAI,CAAC,sBAAsB,CAAC,KAAK,WAAW,EACrD,MAAM,IAAIC,KAAK,+DAAAC,MAAA,CACiDF,IAAI,CAAE,CACrE;MACH,OAAO,IAAItC,OAAO,CAAC;QACjBO,OAAO,EAAE+B,IAAI,CAAC,SAAS,CAAC;QACxB9B,MAAM,EAAE8B,IAAI,CAAC,QAAQ,CAAC;QACtB7B,2BAA2B,EAAE6B,IAAI,CAAC,gCAAgC,CAAC;QACnE5B,UAAU,EAAE4B,IAAI,CAAC,aAAa,CAAC;QAC/B3B,cAAc,EAAE2B,IAAI,CAAC,iBAAiB,CAAC;QACvC1B,OAAO,EAAE0B,IAAI,CAAC,SAAS,CAAC;QACxBzB,KAAK,EAAEyB,IAAI,CAAC,OAAO,CAAC;QACpBxB,MAAM,EAAEwB,IAAI,CAAC,QAAQ,CAAC;QACtBvB,gBAAgB,EAAEuB,IAAI,CAAC,qBAAqB,CAAC;QAC7CtB,kBAAkB,EAAEsB,IAAI,CAAC,uBAAuB,CAAC;QACjDrB,gBAAgB,EAAEqB,IAAI,CAAC,oBAAoB,CAAC;QAC5CpB,kBAAkB,EAAEoB,IAAI,CAAC,sBAAsB,CAAC;QAChDnB,cAAc,EACZ,OAAOmB,IAAI,CAAC,kBAAkB,CAAC,KAAK,WAAW,GAC3CA,IAAI,CAAC,kBAAkB,CAAC,CAACG,GAAG,CAC1BC,qBAAqB,CAACL,qBAAqB,CAC5C,GACDM,SAAS;QACfvB,mBAAmB,EAAEkB,IAAI,CAAC,wBAAwB,CAAC;QACnDjB,eAAe,EACb,OAAOiB,IAAI,CAAC,mBAAmB,CAAC,KAAK,WAAW,GAC5CM,sBAAsB,CAACP,qBAAqB,CAC1CC,IAAI,CAAC,mBAAmB,CAAC,CAC1B,GACDK,SAAS;QACfrB,MAAM,EACJ,OAAOgB,IAAI,CAAC,QAAQ,CAAC,KAAK,WAAW,GACjCA,IAAI,CAAC,QAAQ,CAAC,CAACG,GAAG,CAACI,YAAY,CAACR,qBAAqB,CAAC,GACtDM,SAAS;QACfpB,QAAQ,EAAEe,IAAI,CAAC,WAAW,CAAC;QAC3Bd,WAAW,EACT,OAAOc,IAAI,CAAC,cAAc,CAAC,KAAK,WAAW,GACvCA,IAAI,CAAC,cAAc,CAAC,CAACG,GAAG,CAACK,WAAW,CAACT,qBAAqB,CAAC,GAC3DM,SAAS;QACflB,aAAa,EACX,OAAOa,IAAI,CAAC,gBAAgB,CAAC,KAAK,WAAW,GACzCA,IAAI,CAAC,gBAAgB,CAAC,CAACG,GAAG,CAACM,KAAK,CAACV,qBAAqB,CAAC,GACvDM,SAAS;QACfjB,aAAa,EACX,OAAOY,IAAI,CAAC,eAAe,CAAC,KAAK,WAAW,GACxCU,oBAAoB,CAACX,qBAAqB,CAACC,IAAI,CAAC,eAAe,CAAC,CAAC,GACjEK,SAAS;QACfhB,UAAU,EAAEW,IAAI,CAAC,aAAa,CAAC;QAC/BV,OAAO,EAAEU,IAAI,CAAC,UAAU,CAAC;QACzBT,aAAa,EAAES,IAAI,CAAC,iBAAiB,CAAC;QACtCR,UAAU,EAAEQ,IAAI,CAAC,aAAa;OAC/B,CAAC;MACF;IACF;EAAC;EAAA,OAAAtC,OAAA;AAAA,EAvY0BD,SAAS;AA0YtC;;;;;;AAMA,WAAakD,0BAA2B,0BAAAC,WAAA;EAAAhD,SAAA,CAAA+C,0BAAA,EAAAC,WAAA;EAAA,IAAAC,OAAA,GAAA/C,YAAA,CAAA6C,0BAAA;EAmBtC;;;;;;;;;EASA,SAAAA,2BAAAG,KAAA,EAQC;IAAA,IAAAC,MAAA;IAAA,IAPCxC,KAAK,GAAAuC,KAAA,CAALvC,KAAK;MACLyC,aAAa,GAAAF,KAAA,CAAbE,aAAa;MACbC,UAAU,GAAAH,KAAA,CAAVG,UAAU;IAAAxB,eAAA,OAAAkB,0BAAA;IAMVI,MAAA,GAAAF,OAAA,CAAAnB,IAAA;IACAqB,MAAA,CAAKxC,KAAK,GAAGA,KAAK;IAClBwC,MAAA,CAAKC,aAAa,GAAGA,aAAa;IAClCD,MAAA,CAAKE,UAAU,GAAGA,UAAU;IAE5BF,MAAA,CAAKpB,aAAa,GAAG;MACnBpB,KAAK,EAAE,OAAO;MACdyC,aAAa,EAAE,iBAAiB;MAChCC,UAAU,EAAE;KACb;IAAC,OAAAF,MAAA;EACJ;EAEA;EAAAnB,YAAA,CAAAe,0BAAA;IAAAd,GAAA;IAAAC,KAAA,EACA,SAAAC,sBACEC,IAAyB;MAEzB;MACA,IAAI,OAAOA,IAAI,CAAC,OAAO,CAAC,KAAK,WAAW,EACtC,MAAM,IAAIC,KAAK,gDAAAC,MAAA,CAAgDF,IAAI,CAAE,CAAC;MACxE,OAAO,IAAIW,0BAA0B,CAAC;QACpCpC,KAAK,EAAEyB,IAAI,CAAC,OAAO,CAAC;QACpBgB,aAAa,EACX,OAAOhB,IAAI,CAAC,iBAAiB,CAAC,KAAK,WAAW,GAC1CI,qBAAqB,CAACL,qBAAqB,CAACC,IAAI,CAAC,iBAAiB,CAAC,CAAC,GACpEK,SAAS;QACfY,UAAU,EACR,OAAOjB,IAAI,CAAC,aAAa,CAAC,KAAK,WAAW,GACtCkB,iBAAiB,CAACnB,qBAAqB,CAACC,IAAI,CAAC,aAAa,CAAC,CAAC,GAC5DK;OACP,CAAC;MACF;IACF;EAAC;EAAA,OAAAM,0BAAA;AAAA,EApE6ClD,SAAS;AAuEzD;;;;;AAKA,WAAa0D,oBAAqB,0BAAAC,WAAA;EAAAxD,SAAA,CAAAuD,oBAAA,EAAAC,WAAA;EAAA,IAAAC,OAAA,GAAAvD,YAAA,CAAAqD,oBAAA;EAkBhC;;;;;;;;EAQA,SAAAA,qBAAAG,KAAA,EAQC;IAAA,IAAAC,MAAA;IAAA,IAPChD,KAAK,GAAA+C,KAAA,CAAL/C,KAAK;MACLiD,YAAY,GAAAF,KAAA,CAAZE,YAAY;MACZC,YAAY,GAAAH,KAAA,CAAZG,YAAY;IAAAhC,eAAA,OAAA0B,oBAAA;IAMZI,MAAA,GAAAF,OAAA,CAAA3B,IAAA;IACA6B,MAAA,CAAKhD,KAAK,GAAGA,KAAK;IAClBgD,MAAA,CAAKC,YAAY,GAAGA,YAAY;IAChCD,MAAA,CAAKE,YAAY,GAAGA,YAAY;IAEhCF,MAAA,CAAK5B,aAAa,GAAG;MACnBpB,KAAK,EAAE,OAAO;MACdiD,YAAY,EAAE,eAAe;MAC7BC,YAAY,EAAE;KACf;IAAC,OAAAF,MAAA;EACJ;EAEA;EAAA3B,YAAA,CAAAuB,oBAAA;IAAAtB,GAAA;IAAAC,KAAA,EACA,SAAAC,sBACEC,IAAyB;MAEzB;MACA,IAAI,OAAOA,IAAI,CAAC,OAAO,CAAC,KAAK,WAAW,EACtC,MAAM,IAAIC,KAAK,gDAAAC,MAAA,CAAgDF,IAAI,CAAE,CAAC;MACxE,OAAO,IAAImB,oBAAoB,CAAC;QAC9B5C,KAAK,EAAEyB,IAAI,CAAC,OAAO,CAAC;QACpBwB,YAAY,EACV,OAAOxB,IAAI,CAAC,eAAe,CAAC,KAAK,WAAW,GACxCO,YAAY,CAACR,qBAAqB,CAACC,IAAI,CAAC,eAAe,CAAC,CAAC,GACzDK,SAAS;QACfoB,YAAY,EACV,OAAOzB,IAAI,CAAC,eAAe,CAAC,KAAK,WAAW,GACxC0B,WAAW,CAAC3B,qBAAqB,CAACC,IAAI,CAAC,eAAe,CAAC,CAAC,GACxDK;OACP,CAAC;MACF;IACF;EAAC;EAAA,OAAAc,oBAAA;AAAA,EAlEuC1D,SAAS;AAqEnD;;;;AAIA,WAAaiD,oBAAqB,0BAAAiB,WAAA;EAAA/D,SAAA,CAAA8C,oBAAA,EAAAiB,WAAA;EAAA,IAAAC,OAAA,GAAA9D,YAAA,CAAA4C,oBAAA;EAgChC;;;;;;;;;;EAUA,SAAAA,qBAAAmB,KAAA,EAcC;IAAA,IAAAC,MAAA;IAAA,IAbCC,yBAAyB,GAAAF,KAAA,CAAzBE,yBAAyB;MACzBC,cAAc,GAAAH,KAAA,CAAdG,cAAc;MACdC,eAAe,GAAAJ,KAAA,CAAfI,eAAe;MACfC,aAAa,GAAAL,KAAA,CAAbK,aAAa;MACbC,oBAAoB,GAAAN,KAAA,CAApBM,oBAAoB;MACpBC,aAAa,GAAAP,KAAA,CAAbO,aAAa;IAAA3C,eAAA,OAAAiB,oBAAA;IASboB,MAAA,GAAAF,OAAA,CAAAlC,IAAA;IACAoC,MAAA,CAAKC,yBAAyB,GAC5B,OAAOA,yBAAyB,KAAK,QAAQ,GACzC,IAAIM,UAAU,CAAC7E,MAAM,CAAC8E,IAAI,CAACP,yBAAyB,EAAE,QAAQ,CAAC,CAAC,GAChEA,yBAAyB;IAC/BD,MAAA,CAAKE,cAAc,GAAGA,cAAc;IACpCF,MAAA,CAAKG,eAAe,GAAGA,eAAe;IACtCH,MAAA,CAAKI,aAAa,GAAGA,aAAa;IAClCJ,MAAA,CAAKK,oBAAoB,GACvB,OAAOA,oBAAoB,KAAK,QAAQ,GACpC,IAAIE,UAAU,CAAC7E,MAAM,CAAC8E,IAAI,CAACH,oBAAoB,EAAE,QAAQ,CAAC,CAAC,GAC3DA,oBAAoB;IAC1BL,MAAA,CAAKM,aAAa,GAChB,OAAOA,aAAa,KAAK,QAAQ,GAC7B,IAAIC,UAAU,CAAC7E,MAAM,CAAC8E,IAAI,CAACF,aAAa,EAAE,QAAQ,CAAC,CAAC,GACpDA,aAAa;IAEnBN,MAAA,CAAKnC,aAAa,GAAG;MACnBoC,yBAAyB,EAAE,6BAA6B;MACxDC,cAAc,EAAE,kBAAkB;MAClCC,eAAe,EAAE,mBAAmB;MACpCC,aAAa,EAAE,iBAAiB;MAChCC,oBAAoB,EAAE,wBAAwB;MAC9CC,aAAa,EAAE;KAChB;IAAC,OAAAN,MAAA;EACJ;EAEA;EAAAlC,YAAA,CAAAc,oBAAA;IAAAb,GAAA;IAAAC,KAAA,EACA,SAAAC,sBACEC,IAAyB;MAEzB;MACA,IAAI,OAAOA,IAAI,CAAC,6BAA6B,CAAC,KAAK,WAAW,EAC5D,MAAM,IAAIC,KAAK,sEAAAC,MAAA,CACwDF,IAAI,CAAE,CAC5E;MACH,IAAI,OAAOA,IAAI,CAAC,kBAAkB,CAAC,KAAK,WAAW,EACjD,MAAM,IAAIC,KAAK,2DAAAC,MAAA,CAC6CF,IAAI,CAAE,CACjE;MACH,IAAI,OAAOA,IAAI,CAAC,mBAAmB,CAAC,KAAK,WAAW,EAClD,MAAM,IAAIC,KAAK,4DAAAC,MAAA,CAC8CF,IAAI,CAAE,CAClE;MACH,IAAI,OAAOA,IAAI,CAAC,iBAAiB,CAAC,KAAK,WAAW,EAChD,MAAM,IAAIC,KAAK,0DAAAC,MAAA,CAC4CF,IAAI,CAAE,CAChE;MACH,IAAI,OAAOA,IAAI,CAAC,wBAAwB,CAAC,KAAK,WAAW,EACvD,MAAM,IAAIC,KAAK,iEAAAC,MAAA,CACmDF,IAAI,CAAE,CACvE;MACH,OAAO,IAAIU,oBAAoB,CAAC;QAC9BqB,yBAAyB,EAAE/B,IAAI,CAAC,6BAA6B,CAAC;QAC9DgC,cAAc,EAAEhC,IAAI,CAAC,kBAAkB,CAAC;QACxCiC,eAAe,EAAEjC,IAAI,CAAC,mBAAmB,CAAC;QAC1CkC,aAAa,EAAElC,IAAI,CAAC,iBAAiB,CAAC;QACtCmC,oBAAoB,EAAEnC,IAAI,CAAC,wBAAwB,CAAC;QACpDoC,aAAa,EAAEpC,IAAI,CAAC,iBAAiB;OACtC,CAAC;MACF;IACF;EAAC;EAAA,OAAAU,oBAAA;AAAA,EAtHuCjD,SAAS;AAyHnD;;;AAGA,WAAa8E,iBAAkB,0BAAAC,WAAA;EAAA5E,SAAA,CAAA2E,iBAAA,EAAAC,WAAA;EAAA,IAAAC,OAAA,GAAA3E,YAAA,CAAAyE,iBAAA;EAQ7B;;;;;EAKA,SAAAA,kBAAAG,KAAA,EAMC;IAAA,IAAAC,MAAA;IAAA,IALC1E,OAAO,GAAAyE,KAAA,CAAPzE,OAAO;MACP2E,KAAK,GAAAF,KAAA,CAALE,KAAK;IAAAnD,eAAA,OAAA8C,iBAAA;IAKLI,MAAA,GAAAF,OAAA,CAAA/C,IAAA;IACAiD,MAAA,CAAK1E,OAAO,GAAGA,OAAO;IACtB0E,MAAA,CAAKC,KAAK,GAAGA,KAAK;IAElBD,MAAA,CAAKhD,aAAa,GAAG;MACnB1B,OAAO,EAAE,SAAS;MAClB2E,KAAK,EAAE;KACR;IAAC,OAAAD,MAAA;EACJ;EAEA;EAAA/C,YAAA,CAAA2C,iBAAA;IAAA1C,GAAA;IAAAC,KAAA,EACA,SAAAC,sBAA6BC,IAAyB;MACpD;MACA,IAAI,OAAOA,IAAI,CAAC,SAAS,CAAC,KAAK,WAAW,EACxC,MAAM,IAAIC,KAAK,kDAAAC,MAAA,CAAkDF,IAAI,CAAE,CAAC;MAC1E,IAAI,CAAC6C,KAAK,CAACC,OAAO,CAAC9C,IAAI,CAAC,OAAO,CAAC,CAAC,EAC/B,MAAM,IAAIC,KAAK,sDAAAC,MAAA,CACwCF,IAAI,CAAE,CAC5D;MACH,OAAO,IAAIuC,iBAAiB,CAAC;QAC3BtE,OAAO,EAAE+B,IAAI,CAAC,SAAS,CAAC;QACxB4C,KAAK,EAAE5C,IAAI,CAAC,OAAO,CAAC,CAACG,GAAG,CAAC4C,iBAAiB,CAAChD,qBAAqB;OACjE,CAAC;MACF;IACF;EAAC;EAAA,OAAAwC,iBAAA;AAAA,EA5CoC9E,SAAS;AA+ChD;;;AAGA,WAAa+C,WAAY,0BAAAwC,WAAA;EAAApF,SAAA,CAAA4C,WAAA,EAAAwC,WAAA;EAAA,IAAAC,OAAA,GAAAnF,YAAA,CAAA0C,WAAA;EAWvB;;;;;EAKA,SAAAA,YAAA0C,KAAA,EAMC;IAAA,IAAAC,MAAA;IAAA,IALCC,EAAE,GAAAF,KAAA,CAAFE,EAAE;MACFC,MAAM,GAAAH,KAAA,CAANG,MAAM;IAAA5D,eAAA,OAAAe,WAAA;IAKN2C,MAAA,GAAAF,OAAA,CAAAvD,IAAA;IACAyD,MAAA,CAAKC,EAAE,GAAGA,EAAE;IACZD,MAAA,CAAKE,MAAM,GAAGA,MAAM;IAEpBF,MAAA,CAAKxD,aAAa,GAAG;MACnByD,EAAE,EAAE,IAAI;MACRC,MAAM,EAAE;KACT;IAAC,OAAAF,MAAA;EACJ;EAEA;EAAAvD,YAAA,CAAAY,WAAA;IAAAX,GAAA;IAAAC,KAAA,EACA,SAAAC,sBAA6BC,IAAyB;MACpD;MACA,IAAI,OAAOA,IAAI,CAAC,IAAI,CAAC,KAAK,WAAW,EACnC,MAAM,IAAIC,KAAK,6CAAAC,MAAA,CAA6CF,IAAI,CAAE,CAAC;MACrE,IAAI,OAAOA,IAAI,CAAC,QAAQ,CAAC,KAAK,WAAW,EACvC,MAAM,IAAIC,KAAK,iDAAAC,MAAA,CAAiDF,IAAI,CAAE,CAAC;MACzE,OAAO,IAAIQ,WAAW,CAAC;QACrB4C,EAAE,EAAEpD,IAAI,CAAC,IAAI,CAAC;QACdqD,MAAM,EAAEnC,iBAAiB,CAACnB,qBAAqB,CAACC,IAAI,CAAC,QAAQ,CAAC;OAC/D,CAAC;MACF;IACF;EAAC;EAAA,OAAAQ,WAAA;AAAA,EA7C8B/C,SAAS;AAgD1C;;;;AAIA,WAAa6F,wBAAyB,0BAAAC,WAAA;EAAA3F,SAAA,CAAA0F,wBAAA,EAAAC,WAAA;EAAA,IAAAC,OAAA,GAAA1F,YAAA,CAAAwF,wBAAA;EAqBpC;;;;;;;EAOA,SAAAA,yBAAAG,KAAA,EAUC;IAAA,IAAAC,MAAA;IAAA,IATCN,EAAE,GAAAK,KAAA,CAAFL,EAAE;MACFO,QAAQ,GAAAF,KAAA,CAARE,QAAQ;MACRC,UAAU,GAAAH,KAAA,CAAVG,UAAU;MACVC,SAAS,GAAAJ,KAAA,CAATI,SAAS;IAAApE,eAAA,OAAA6D,wBAAA;IAOTI,MAAA,GAAAF,OAAA,CAAA9D,IAAA;IACAgE,MAAA,CAAKN,EAAE,GAAGA,EAAE;IACZM,MAAA,CAAKC,QAAQ,GAAGA,QAAQ;IACxBD,MAAA,CAAKE,UAAU,GAAGA,UAAU;IAC5BF,MAAA,CAAKG,SAAS,GAAGA,SAAS;IAE1BH,MAAA,CAAK/D,aAAa,GAAG;MACnByD,EAAE,EAAE,IAAI;MACRO,QAAQ,EAAE,WAAW;MACrBC,UAAU,EAAE,aAAa;MACzBC,SAAS,EAAE;KACZ;IAAC,OAAAH,MAAA;EACJ;EAEA;EAAA9D,YAAA,CAAA0D,wBAAA;IAAAzD,GAAA;IAAAC,KAAA,EACA,SAAAC,sBACEC,IAAyB;MAEzB;MACA,IAAI,OAAOA,IAAI,CAAC,IAAI,CAAC,KAAK,WAAW,EACnC,MAAM,IAAIC,KAAK,6CAAAC,MAAA,CAA6CF,IAAI,CAAE,CAAC;MACrE,OAAO,IAAIsD,wBAAwB,CAAC;QAClCF,EAAE,EAAEpD,IAAI,CAAC,IAAI,CAAC;QACd2D,QAAQ,EACN,OAAO3D,IAAI,CAAC,WAAW,CAAC,KAAK,WAAW,GACpC8D,oBAAoB,CAAC/D,qBAAqB,CAACC,IAAI,CAAC,WAAW,CAAC,CAAC,GAC7DK,SAAS;QACfuD,UAAU,EACR,OAAO5D,IAAI,CAAC,aAAa,CAAC,KAAK,WAAW,GACtC8D,oBAAoB,CAAC/D,qBAAqB,CAACC,IAAI,CAAC,aAAa,CAAC,CAAC,GAC/DK,SAAS;QACfwD,SAAS,EACP,OAAO7D,IAAI,CAAC,YAAY,CAAC,KAAK,WAAW,GACrCA,IAAI,CAAC,YAAY,CAAC,CAACG,GAAG,CAAC2D,oBAAoB,CAAC/D,qBAAqB,CAAC,GAClEM;OACP,CAAC;MACF;IACF;EAAC;EAAA,OAAAiD,wBAAA;AAAA,EA5E2C7F,SAAS;AA+EvD;;;AAGA,WAAaqG,oBAAqB,0BAAAC,WAAA;EAAAnG,SAAA,CAAAkG,oBAAA,EAAAC,WAAA;EAAA,IAAAC,OAAA,GAAAlG,YAAA,CAAAgG,oBAAA;EAWhC;;;;;EAKA,SAAAA,qBAAAG,KAAA,EAAsE;IAAA,IAAAC,MAAA;IAAA,IAAxDC,GAAG,GAAAF,KAAA,CAAHE,GAAG;MAAEC,OAAO,GAAAH,KAAA,CAAPG,OAAO;IAAA3E,eAAA,OAAAqE,oBAAA;IACxBI,MAAA,GAAAF,OAAA,CAAAtE,IAAA;IACAwE,MAAA,CAAKC,GAAG,GAAGA,GAAG;IACdD,MAAA,CAAKE,OAAO,GAAGA,OAAO;IAEtBF,MAAA,CAAKvE,aAAa,GAAG;MACnBwE,GAAG,EAAE,KAAK;MACVC,OAAO,EAAE;KACV;IAAC,OAAAF,MAAA;EACJ;EAEA;EAAAtE,YAAA,CAAAkE,oBAAA;IAAAjE,GAAA;IAAAC,KAAA,EACA,SAAAC,sBACEC,IAAyB;MAEzB;MACA,IAAI,CAAC6C,KAAK,CAACC,OAAO,CAAC9C,IAAI,CAAC,KAAK,CAAC,CAAC,EAC7B,MAAM,IAAIC,KAAK,oDAAAC,MAAA,CACsCF,IAAI,CAAE,CAC1D;MACH,OAAO,IAAI8D,oBAAoB,CAAC;QAC9BK,GAAG,EAAEnE,IAAI,CAAC,KAAK,CAAC,CAACG,GAAG,CAACkE,WAAW,CAACtE,qBAAqB,CAAC;QACvDqE,OAAO,EAAEpE,IAAI,CAAC,SAAS;OACxB,CAAC;MACF;IACF;EAAC;EAAA,OAAA8D,oBAAA;AAAA,EAzCuCrG,SAAS;AA4CnD;;;AAGA,WAAa6G,yBAA0B,0BAAAC,WAAA;EAAA3G,SAAA,CAAA0G,yBAAA,EAAAC,WAAA;EAAA,IAAAC,OAAA,GAAA1G,YAAA,CAAAwG,yBAAA;EAWrC;;;;;EAKA,SAAAA,0BAAAG,KAAA,EAAuE;IAAA,IAAAC,MAAA;IAAA,IAAzDN,OAAO,GAAAK,KAAA,CAAPL,OAAO;MAAEO,GAAG,GAAAF,KAAA,CAAHE,GAAG;IAAAlF,eAAA,OAAA6E,yBAAA;IACxBI,MAAA,GAAAF,OAAA,CAAA9E,IAAA;IACAgF,MAAA,CAAKN,OAAO,GAAGA,OAAO;IACtBM,MAAA,CAAKC,GAAG,GAAGA,GAAG;IAEdD,MAAA,CAAK/E,aAAa,GAAG;MACnByE,OAAO,EAAE,SAAS;MAClBO,GAAG,EAAE;KACN;IAAC,OAAAD,MAAA;EACJ;EAEA;EAAA9E,YAAA,CAAA0E,yBAAA;IAAAzE,GAAA;IAAAC,KAAA,EACA,SAAAC,sBACEC,IAAyB;MAEzB;MACA,IAAI,OAAOA,IAAI,CAAC,SAAS,CAAC,KAAK,WAAW,EACxC,MAAM,IAAIC,KAAK,kDAAAC,MAAA,CAAkDF,IAAI,CAAE,CAAC;MAC1E,IAAI,OAAOA,IAAI,CAAC,KAAK,CAAC,KAAK,WAAW,EACpC,MAAM,IAAIC,KAAK,8CAAAC,MAAA,CAA8CF,IAAI,CAAE,CAAC;MACtE,OAAO,IAAIsE,yBAAyB,CAAC;QACnCF,OAAO,EAAEpE,IAAI,CAAC,SAAS,CAAC;QACxB2E,GAAG,EAAE3E,IAAI,CAAC,KAAK;OAChB,CAAC;MACF;IACF;EAAC;EAAA,OAAAsE,yBAAA;AAAA,EAzC4C7G,SAAS;AA4CxD;;;AAGA,WAAa2C,qBAAsB,0BAAAwE,YAAA;EAAAhH,SAAA,CAAAwC,qBAAA,EAAAwE,YAAA;EAAA,IAAAC,QAAA,GAAA/G,YAAA,CAAAsC,qBAAA;EAgBjC;;;;;;EAMA,SAAAA,sBAAA0E,MAAA,EAQC;IAAA,IAAAC,OAAA;IAAA,IAPC3B,EAAE,GAAA0B,MAAA,CAAF1B,EAAE;MACF4B,MAAM,GAAAF,MAAA,CAANE,MAAM;MACNC,QAAQ,GAAAH,MAAA,CAARG,QAAQ;IAAAxF,eAAA,OAAAW,qBAAA;IAMR2E,OAAA,GAAAF,QAAA,CAAAnF,IAAA;IACAqF,OAAA,CAAK3B,EAAE,GAAGA,EAAE;IACZ2B,OAAA,CAAKC,MAAM,GAAGA,MAAM;IACpBD,OAAA,CAAKE,QAAQ,GAAGA,QAAQ;IAExBF,OAAA,CAAKpF,aAAa,GAAG;MACnByD,EAAE,EAAE,IAAI;MACR4B,MAAM,EAAE,QAAQ;MAChBC,QAAQ,EAAE;KACX;IAAC,OAAAF,OAAA;EACJ;EAEA;EAAAnF,YAAA,CAAAQ,qBAAA;IAAAP,GAAA;IAAAC,KAAA,EACA,SAAAC,sBACEC,IAAyB;MAEzB;MACA,IAAI,OAAOA,IAAI,CAAC,IAAI,CAAC,KAAK,WAAW,EACnC,MAAM,IAAIC,KAAK,6CAAAC,MAAA,CAA6CF,IAAI,CAAE,CAAC;MACrE,IAAI,OAAOA,IAAI,CAAC,QAAQ,CAAC,KAAK,WAAW,EACvC,MAAM,IAAIC,KAAK,iDAAAC,MAAA,CAAiDF,IAAI,CAAE,CAAC;MACzE,OAAO,IAAII,qBAAqB,CAAC;QAC/BgD,EAAE,EAAEpD,IAAI,CAAC,IAAI,CAAC;QACdgF,MAAM,EAAE1E,sBAAsB,CAACP,qBAAqB,CAACC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACpEiF,QAAQ,EACN,OAAOjF,IAAI,CAAC,WAAW,CAAC,KAAK,WAAW,GACpCA,IAAI,CAAC,WAAW,CAAC,CAACG,GAAG,CAAC+E,YAAY,CAACnF,qBAAqB,CAAC,GACzDM;OACP,CAAC;MACF;IACF;EAAC;EAAA,OAAAD,qBAAA;AAAA,EA7DwC3C,SAAS;AAgEpD;;;AAGA,WAAayD,iBAAkB,0BAAAiE,YAAA;EAAAvH,SAAA,CAAAsD,iBAAA,EAAAiE,YAAA;EAAA,IAAAC,QAAA,GAAAtH,YAAA,CAAAoD,iBAAA;EAqC7B;;;;;;;;;;;EAWA,SAAAA,kBAAAmE,MAAA,EAgBC;IAAA,IAAAC,OAAA;IAAA,IAfCC,eAAe,GAAAF,MAAA,CAAfE,eAAe;MACfC,iBAAiB,GAAAH,MAAA,CAAjBG,iBAAiB;MACjBC,OAAO,GAAAJ,MAAA,CAAPI,OAAO;MACPC,iBAAiB,GAAAL,MAAA,CAAjBK,iBAAiB;MACjBC,WAAW,GAAAN,MAAA,CAAXM,WAAW;MACXC,iBAAiB,GAAAP,MAAA,CAAjBO,iBAAiB;MACjBC,gBAAgB,GAAAR,MAAA,CAAhBQ,gBAAgB;IAAApG,eAAA,OAAAyB,iBAAA;IAUhBoE,OAAA,GAAAF,QAAA,CAAA1F,IAAA;IACA4F,OAAA,CAAKC,eAAe,GAClB,OAAOA,eAAe,KAAK,QAAQ,GAC/B,IAAIlD,UAAU,CAAC7E,MAAM,CAAC8E,IAAI,CAACiD,eAAe,EAAE,QAAQ,CAAC,CAAC,GACtDA,eAAe;IACrBD,OAAA,CAAKE,iBAAiB,GACpB,OAAOA,iBAAiB,KAAK,QAAQ,GACjC,IAAInD,UAAU,CAAC7E,MAAM,CAAC8E,IAAI,CAACkD,iBAAiB,EAAE,QAAQ,CAAC,CAAC,GACxDA,iBAAiB;IACvBF,OAAA,CAAKG,OAAO,GAAGA,OAAO;IACtBH,OAAA,CAAKI,iBAAiB,GAAGA,iBAAiB;IAC1CJ,OAAA,CAAKK,WAAW,GAAGA,WAAW;IAC9BL,OAAA,CAAKM,iBAAiB,GAAGA,iBAAiB;IAC1CN,OAAA,CAAKO,gBAAgB,GAAGA,gBAAgB;IAExCP,OAAA,CAAK3F,aAAa,GAAG;MACnB4F,eAAe,EAAE,kBAAkB;MACnCC,iBAAiB,EAAE,qBAAqB;MACxCC,OAAO,EAAE,SAAS;MAClBC,iBAAiB,EAAE,qBAAqB;MACxCC,WAAW,EAAE,cAAc;MAC3BC,iBAAiB,EAAE,qBAAqB;MACxCC,gBAAgB,EAAE;KACnB;IAAC,OAAAP,OAAA;EACJ;EAEA;EAAA1F,YAAA,CAAAsB,iBAAA;IAAArB,GAAA;IAAAC,KAAA,EACA,SAAAC,sBAA6BC,IAAyB;MACpD;MACA,IAAI,OAAOA,IAAI,CAAC,kBAAkB,CAAC,KAAK,WAAW,EACjD,MAAM,IAAIC,KAAK,2DAAAC,MAAA,CAC6CF,IAAI,CAAE,CACjE;MACH,IAAI,OAAOA,IAAI,CAAC,qBAAqB,CAAC,KAAK,WAAW,EACpD,MAAM,IAAIC,KAAK,8DAAAC,MAAA,CACgDF,IAAI,CAAE,CACpE;MACH,IAAI,OAAOA,IAAI,CAAC,SAAS,CAAC,KAAK,WAAW,EACxC,MAAM,IAAIC,KAAK,kDAAAC,MAAA,CAAkDF,IAAI,CAAE,CAAC;MAC1E,OAAO,IAAIkB,iBAAiB,CAAC;QAC3BqE,eAAe,EAAEvF,IAAI,CAAC,kBAAkB,CAAC;QACzCwF,iBAAiB,EAAExF,IAAI,CAAC,qBAAqB,CAAC;QAC9CyF,OAAO,EAAEzF,IAAI,CAAC,SAAS,CAAC;QACxB0F,iBAAiB,EAAE1F,IAAI,CAAC,qBAAqB,CAAC;QAC9C2F,WAAW,EACT,OAAO3F,IAAI,CAAC,cAAc,CAAC,KAAK,WAAW,GACvCA,IAAI,CAAC,cAAc,CAAC,CAACG,GAAG,CAAC+E,YAAY,CAACnF,qBAAqB,CAAC,GAC5DM,SAAS;QACfuF,iBAAiB,EACf,OAAO5F,IAAI,CAAC,qBAAqB,CAAC,KAAK,WAAW,GAC9CM,sBAAsB,CAACP,qBAAqB,CAC1CC,IAAI,CAAC,qBAAqB,CAAC,CAC5B,GACDK,SAAS;QACfwF,gBAAgB,EACd,OAAO7F,IAAI,CAAC,oBAAoB,CAAC,KAAK,WAAW,GAC7CM,sBAAsB,CAACP,qBAAqB,CAC1CC,IAAI,CAAC,oBAAoB,CAAC,CAC3B,GACDK;OACP,CAAC;MACF;IACF;EAAC;EAAA,OAAAa,iBAAA;AAAA,EA/HoCzD,SAAS;AAkIhD;;;AAGA,WAAaqI,yBAA0B,0BAAAC,YAAA;EAAAnI,SAAA,CAAAkI,yBAAA,EAAAC,YAAA;EAAA,IAAAC,QAAA,GAAAlI,YAAA,CAAAgI,yBAAA;EA4BrC;;;;;;;;;;EAUA,SAAAA,0BAAAG,MAAA,EAYC;IAAA,IAAAC,OAAA;IAAA,IAXCC,YAAY,GAAAF,MAAA,CAAZE,YAAY;MACZtG,GAAG,GAAAoG,MAAA,CAAHpG,GAAG;MACHuG,SAAS,GAAAH,MAAA,CAATG,SAAS;MACThC,OAAO,GAAA6B,MAAA,CAAP7B,OAAO;MACPiC,QAAQ,GAAAJ,MAAA,CAARI,QAAQ;IAAA5G,eAAA,OAAAqG,yBAAA;IAQRI,OAAA,GAAAF,QAAA,CAAAtG,IAAA;IACAwG,OAAA,CAAKC,YAAY,GAAGA,YAAY;IAChCD,OAAA,CAAKrG,GAAG,GACN,OAAOA,GAAG,KAAK,QAAQ,GACnB,IAAIwC,UAAU,CAAC7E,MAAM,CAAC8E,IAAI,CAACzC,GAAG,EAAE,QAAQ,CAAC,CAAC,GAC1CA,GAAG;IACTqG,OAAA,CAAKE,SAAS,GAAGA,SAAS;IAC1BF,OAAA,CAAK9B,OAAO,GAAGA,OAAO;IACtB8B,OAAA,CAAKG,QAAQ,GAAGA,QAAQ;IAExBH,OAAA,CAAKvG,aAAa,GAAG;MACnBwG,YAAY,EAAE,gBAAgB;MAC9BtG,GAAG,EAAE,KAAK;MACVuG,SAAS,EAAE,WAAW;MACtBhC,OAAO,EAAE,SAAS;MAClBiC,QAAQ,EAAE;KACX;IAAC,OAAAH,OAAA;EACJ;EAEA;EAAAtG,YAAA,CAAAkG,yBAAA;IAAAjG,GAAA;IAAAC,KAAA,EACA,SAAAC,sBACEC,IAAyB;MAEzB;MACA,IAAI,OAAOA,IAAI,CAAC,gBAAgB,CAAC,KAAK,WAAW,EAC/C,MAAM,IAAIC,KAAK,yDAAAC,MAAA,CAC2CF,IAAI,CAAE,CAC/D;MACH,IAAI,OAAOA,IAAI,CAAC,KAAK,CAAC,KAAK,WAAW,EACpC,MAAM,IAAIC,KAAK,8CAAAC,MAAA,CAA8CF,IAAI,CAAE,CAAC;MACtE,IAAI,OAAOA,IAAI,CAAC,WAAW,CAAC,KAAK,WAAW,EAC1C,MAAM,IAAIC,KAAK,oDAAAC,MAAA,CACsCF,IAAI,CAAE,CAC1D;MACH,OAAO,IAAI8F,yBAAyB,CAAC;QACnCK,YAAY,EAAEnG,IAAI,CAAC,gBAAgB,CAAC;QACpCH,GAAG,EAAEG,IAAI,CAAC,KAAK,CAAC;QAChBoG,SAAS,EAAEpG,IAAI,CAAC,WAAW,CAAC;QAC5BoE,OAAO,EAAEpE,IAAI,CAAC,SAAS,CAAC;QACxBqG,QAAQ,EACN,OAAOrG,IAAI,CAAC,WAAW,CAAC,KAAK,WAAW,GACpCsG,QAAQ,CAACvG,qBAAqB,CAACC,IAAI,CAAC,WAAW,CAAC,CAAC,GACjDK;OACP,CAAC;MACF;IACF;EAAC;EAAA,OAAAyF,yBAAA;AAAA,EAhG4CrI,SAAS;AAmGxD;;;AAGA,WAAa6C,sBAAuB,0BAAAiG,YAAA;EAAA3I,SAAA,CAAA0C,sBAAA,EAAAiG,YAAA;EAAA,IAAAC,QAAA,GAAA1I,YAAA,CAAAwC,sBAAA;EAWlC;;;;;EAKA,SAAAA,uBAAAmG,MAAA,EAMC;IAAA,IAAAC,OAAA;IAAA,IALCC,OAAO,GAAAF,MAAA,CAAPE,OAAO;MACPC,YAAY,GAAAH,MAAA,CAAZG,YAAY;IAAAnH,eAAA,OAAAa,sBAAA;IAKZoG,OAAA,GAAAF,QAAA,CAAA9G,IAAA;IACAgH,OAAA,CAAKC,OAAO,GAAGA,OAAO;IACtBD,OAAA,CAAKE,YAAY,GAAGA,YAAY;IAEhCF,OAAA,CAAK/G,aAAa,GAAG;MACnBgH,OAAO,EAAE,UAAU;MACnBC,YAAY,EAAE;KACf;IAAC,OAAAF,OAAA;EACJ;EAEA;EAAA9G,YAAA,CAAAU,sBAAA;IAAAT,GAAA;IAAAC,KAAA,EACA,SAAAC,sBACEC,IAAyB;MAEzB;MACA,IAAI,OAAOA,IAAI,CAAC,UAAU,CAAC,KAAK,WAAW,EACzC,MAAM,IAAIC,KAAK,mDAAAC,MAAA,CAAmDF,IAAI,CAAE,CAAC;MAC3E,IAAI,OAAOA,IAAI,CAAC,gBAAgB,CAAC,KAAK,WAAW,EAC/C,MAAM,IAAIC,KAAK,yDAAAC,MAAA,CAC2CF,IAAI,CAAE,CAC/D;MACH,OAAO,IAAIM,sBAAsB,CAAC;QAChCqG,OAAO,EAAE3G,IAAI,CAAC,UAAU,CAAC;QACzB4G,YAAY,EAAE5G,IAAI,CAAC,gBAAgB;OACpC,CAAC;MACF;IACF;EAAC;EAAA,OAAAM,sBAAA;AAAA,EAjDyC7C,SAAS;AAoDrD;;;AAGA,WAAagD,KAAM,0BAAAoG,YAAA;EAAAjJ,SAAA,CAAA6C,KAAA,EAAAoG,YAAA;EAAA,IAAAC,QAAA,GAAAhJ,YAAA,CAAA2C,KAAA;EAcjB;;;;;;;;EAQA,SAAAA,MAAAsG,MAAA,EAMC;IAAA,IAAAC,OAAA;IAAA,IALCC,KAAK,GAAAF,MAAA,CAALE,KAAK;MACL5D,MAAM,GAAA0D,MAAA,CAAN1D,MAAM;IAAA5D,eAAA,OAAAgB,KAAA;IAKNuG,OAAA,GAAAF,QAAA,CAAApH,IAAA;IACAsH,OAAA,CAAKC,KAAK,GAAGA,KAAK;IAClBD,OAAA,CAAK3D,MAAM,GAAGA,MAAM;IAEpB2D,OAAA,CAAKrH,aAAa,GAAG;MACnBsH,KAAK,EAAE,OAAO;MACd5D,MAAM,EAAE;KACT;IAAC,OAAA2D,OAAA;EACJ;EAEA;EAAApH,YAAA,CAAAa,KAAA;IAAAZ,GAAA;IAAAC,KAAA,EACA,SAAAC,sBAA6BC,IAAyB;MACpD;MACA,IAAI,OAAOA,IAAI,CAAC,OAAO,CAAC,KAAK,WAAW,EACtC,MAAM,IAAIC,KAAK,gDAAAC,MAAA,CAAgDF,IAAI,CAAE,CAAC;MACxE,IAAI,OAAOA,IAAI,CAAC,QAAQ,CAAC,KAAK,WAAW,EACvC,MAAM,IAAIC,KAAK,iDAAAC,MAAA,CAAiDF,IAAI,CAAE,CAAC;MACzE,OAAO,IAAIS,KAAK,CAAC;QACfwG,KAAK,EAAEjH,IAAI,CAAC,OAAO,CAAC;QACpBqD,MAAM,EAAE3B,WAAW,CAAC3B,qBAAqB,CAACC,IAAI,CAAC,QAAQ,CAAC;OACzD,CAAC;MACF;IACF;EAAC;EAAA,OAAAS,KAAA;AAAA,EAnDwBhD,SAAS;AAsDpC;;;;;AAKA,WAAa8C,YAAa,0BAAA2G,YAAA;EAAAtJ,SAAA,CAAA2C,YAAA,EAAA2G,YAAA;EAAA,IAAAC,QAAA,GAAArJ,YAAA,CAAAyC,YAAA;EAgBxB;;;;;;EAMA,SAAAA,aAAA6G,MAAA,EAQC;IAAA,IAAAC,OAAA;IAAA,IAPCnJ,MAAM,GAAAkJ,MAAA,CAANlJ,MAAM;MACNoJ,OAAO,GAAAF,MAAA,CAAPE,OAAO;MACPC,QAAQ,GAAAH,MAAA,CAARG,QAAQ;IAAA9H,eAAA,OAAAc,YAAA;IAMR8G,OAAA,GAAAF,QAAA,CAAAzH,IAAA;IACA2H,OAAA,CAAKnJ,MAAM,GAAGA,MAAM;IACpBmJ,OAAA,CAAKC,OAAO,GAAGA,OAAO;IACtBD,OAAA,CAAKE,QAAQ,GAAGA,QAAQ;IAExBF,OAAA,CAAK1H,aAAa,GAAG;MACnBzB,MAAM,EAAE,QAAQ;MAChBoJ,OAAO,EAAE,UAAU;MACnBC,QAAQ,EAAE;KACX;IAAC,OAAAF,OAAA;EACJ;EAEA;EAAAzH,YAAA,CAAAW,YAAA;IAAAV,GAAA;IAAAC,KAAA,EACA,SAAAC,sBAA6BC,IAAyB;MACpD;MACA,IAAI,OAAOA,IAAI,CAAC,QAAQ,CAAC,KAAK,WAAW,EACvC,MAAM,IAAIC,KAAK,iDAAAC,MAAA,CAAiDF,IAAI,CAAE,CAAC;MACzE,IAAI,OAAOA,IAAI,CAAC,UAAU,CAAC,KAAK,WAAW,EACzC,MAAM,IAAIC,KAAK,mDAAAC,MAAA,CAAmDF,IAAI,CAAE,CAAC;MAC3E,IAAI,OAAOA,IAAI,CAAC,WAAW,CAAC,KAAK,WAAW,EAC1C,MAAM,IAAIC,KAAK,oDAAAC,MAAA,CACsCF,IAAI,CAAE,CAC1D;MACH,OAAO,IAAIO,YAAY,CAAC;QACtBrC,MAAM,EAAE8B,IAAI,CAAC,QAAQ,CAAC;QACtBsH,OAAO,EAAEtH,IAAI,CAAC,UAAU,CAAC;QACzBuH,QAAQ,EAAEvH,IAAI,CAAC,WAAW;OAC3B,CAAC;MACF;IACF;EAAC;EAAA,OAAAO,YAAA;AAAA,EA5D+B9C,SAAS;AA+D3C;;;AAGA,WAAa+J,qBAAsB,0BAAAC,YAAA;EAAA7J,SAAA,CAAA4J,qBAAA,EAAAC,YAAA;EAAA,IAAAC,QAAA,GAAA5J,YAAA,CAAA0J,qBAAA;EAWjC;;;;;EAKA,SAAAA,sBAAAG,MAAA,EAA2E;IAAA,IAAAC,OAAA;IAAA,IAA7DxD,OAAO,GAAAuD,MAAA,CAAPvD,OAAO;MAAEyD,KAAK,GAAAF,MAAA,CAALE,KAAK;IAAApI,eAAA,OAAA+H,qBAAA;IAC1BI,OAAA,GAAAF,QAAA,CAAAhI,IAAA;IACAkI,OAAA,CAAKxD,OAAO,GAAGA,OAAO;IACtBwD,OAAA,CAAKC,KAAK,GAAGA,KAAK;IAElBD,OAAA,CAAKjI,aAAa,GAAG;MACnByE,OAAO,EAAE,SAAS;MAClByD,KAAK,EAAE;KACR;IAAC,OAAAD,OAAA;EACJ;EAEA;EAAAhI,YAAA,CAAA4H,qBAAA;IAAA3H,GAAA;IAAAC,KAAA,EACA,SAAAC,sBACEC,IAAyB;MAEzB;MACA,IAAI,OAAOA,IAAI,CAAC,SAAS,CAAC,KAAK,WAAW,EACxC,MAAM,IAAIC,KAAK,kDAAAC,MAAA,CAAkDF,IAAI,CAAE,CAAC;MAC1E,IAAI,OAAOA,IAAI,CAAC,OAAO,CAAC,KAAK,WAAW,EACtC,MAAM,IAAIC,KAAK,gDAAAC,MAAA,CAAgDF,IAAI,CAAE,CAAC;MACxE,OAAO,IAAIwH,qBAAqB,CAAC;QAC/BpD,OAAO,EAAEpE,IAAI,CAAC,SAAS,CAAC;QACxB6H,KAAK,EAAE7H,IAAI,CAAC,OAAO;OACpB,CAAC;MACF;IACF;EAAC;EAAA,OAAAwH,qBAAA;AAAA,EAzCwC/J,SAAS;AA4CpD;;;;;;AAMA,WAAaiE,WAAY,0BAAAoG,YAAA;EAAAlK,SAAA,CAAA8D,WAAA,EAAAoG,YAAA;EAAA,IAAAC,QAAA,GAAAjK,YAAA,CAAA4D,WAAA;EAuFvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA6BA,SAAAA,YAAAsG,MAAA,EAgCC;IAAA,IAAAC,OAAA;IAAA,IA/BCxC,OAAO,GAAAuC,MAAA,CAAPvC,OAAO;MACPyC,QAAQ,GAAAF,MAAA,CAARE,QAAQ;MACRC,KAAK,GAAAH,MAAA,CAALG,KAAK;MACLC,QAAQ,GAAAJ,MAAA,CAARI,QAAQ;MACRC,aAAa,GAAAL,MAAA,CAAbK,aAAa;MACbC,MAAM,GAAAN,MAAA,CAANM,MAAM;MACNC,OAAO,GAAAP,MAAA,CAAPO,OAAO;MACPC,YAAY,GAAAR,MAAA,CAAZQ,YAAY;MACZC,IAAI,GAAAT,MAAA,CAAJS,IAAI;MACJC,OAAO,GAAAV,MAAA,CAAPU,OAAO;MACPC,OAAO,GAAAX,MAAA,CAAPW,OAAO;MACPC,QAAQ,GAAAZ,MAAA,CAARY,QAAQ;MACRC,WAAW,GAAAb,MAAA,CAAXa,WAAW;MACXC,GAAG,GAAAd,MAAA,CAAHc,GAAG;MACHC,MAAM,GAAAf,MAAA,CAANe,MAAM;IAAAtJ,eAAA,OAAAiC,WAAA;IAkBNuG,OAAA,GAAAF,QAAA,CAAArI,IAAA;IACAuI,OAAA,CAAKxC,OAAO,GAAGA,OAAO;IACtBwC,OAAA,CAAKC,QAAQ,GAAGA,QAAQ;IACxBD,OAAA,CAAKE,KAAK,GAAGA,KAAK;IAClBF,OAAA,CAAKG,QAAQ,GAAGA,QAAQ;IACxBH,OAAA,CAAKI,aAAa,GAAGA,aAAa;IAClCJ,OAAA,CAAKK,MAAM,GAAGA,MAAM;IACpBL,OAAA,CAAKM,OAAO,GAAGA,OAAO;IACtBN,OAAA,CAAKO,YAAY,GACf,OAAOA,YAAY,KAAK,QAAQ,GAC5B,IAAInG,UAAU,CAAC7E,MAAM,CAAC8E,IAAI,CAACkG,YAAY,EAAE,QAAQ,CAAC,CAAC,GACnDA,YAAY;IAClBP,OAAA,CAAKQ,IAAI,GAAGA,IAAI;IAChBR,OAAA,CAAKS,OAAO,GACV,OAAOA,OAAO,KAAK,QAAQ,GACvB,IAAIrG,UAAU,CAAC7E,MAAM,CAAC8E,IAAI,CAACoG,OAAO,EAAE,QAAQ,CAAC,CAAC,GAC9CA,OAAO;IACbT,OAAA,CAAKU,OAAO,GAAGA,OAAO;IACtBV,OAAA,CAAKW,QAAQ,GAAGA,QAAQ;IACxBX,OAAA,CAAKY,WAAW,GACd,OAAOA,WAAW,KAAK,QAAQ,GAC3B,IAAIxG,UAAU,CAAC7E,MAAM,CAAC8E,IAAI,CAACuG,WAAW,EAAE,QAAQ,CAAC,CAAC,GAClDA,WAAW;IACjBZ,OAAA,CAAKa,GAAG,GAAGA,GAAG;IACdb,OAAA,CAAKc,MAAM,GACT,OAAOA,MAAM,KAAK,QAAQ,GACtB,IAAI1G,UAAU,CAAC7E,MAAM,CAAC8E,IAAI,CAACyG,MAAM,EAAE,QAAQ,CAAC,CAAC,GAC7CA,MAAM;IAEZd,OAAA,CAAKtI,aAAa,GAAG;MACnB8F,OAAO,EAAE,SAAS;MAClByC,QAAQ,EAAE,UAAU;MACpBC,KAAK,EAAE,OAAO;MACdC,QAAQ,EAAE,UAAU;MACpBC,aAAa,EAAE,gBAAgB;MAC/BC,MAAM,EAAE,QAAQ;MAChBC,OAAO,EAAE,SAAS;MAClBC,YAAY,EAAE,eAAe;MAC7BC,IAAI,EAAE,MAAM;MACZC,OAAO,EAAE,UAAU;MACnBC,OAAO,EAAE,SAAS;MAClBC,QAAQ,EAAE,WAAW;MACrBC,WAAW,EAAE,eAAe;MAC5BC,GAAG,EAAE,KAAK;MACVC,MAAM,EAAE;KACT;IAAC,OAAAd,OAAA;EACJ;EAEA;EAAArI,YAAA,CAAA8B,WAAA;IAAA7B,GAAA;IAAAC,KAAA,EACA,SAAAC,sBAA6BC,IAAyB;MACpD;MACA,IAAI,OAAOA,IAAI,CAAC,SAAS,CAAC,KAAK,WAAW,EACxC,MAAM,IAAIC,KAAK,kDAAAC,MAAA,CAAkDF,IAAI,CAAE,CAAC;MAC1E,IAAI,OAAOA,IAAI,CAAC,UAAU,CAAC,KAAK,WAAW,EACzC,MAAM,IAAIC,KAAK,mDAAAC,MAAA,CAAmDF,IAAI,CAAE,CAAC;MAC3E,IAAI,OAAOA,IAAI,CAAC,OAAO,CAAC,KAAK,WAAW,EACtC,MAAM,IAAIC,KAAK,gDAAAC,MAAA,CAAgDF,IAAI,CAAE,CAAC;MACxE,OAAO,IAAI0B,WAAW,CAAC;QACrB+D,OAAO,EAAEzF,IAAI,CAAC,SAAS,CAAC;QACxBkI,QAAQ,EAAElI,IAAI,CAAC,UAAU,CAAC;QAC1BmI,KAAK,EAAEnI,IAAI,CAAC,OAAO,CAAC;QACpBoI,QAAQ,EAAEpI,IAAI,CAAC,UAAU,CAAC;QAC1BqI,aAAa,EAAErI,IAAI,CAAC,gBAAgB,CAAC;QACrCsI,MAAM,EAAEtI,IAAI,CAAC,QAAQ,CAAC;QACtBuI,OAAO,EAAEvI,IAAI,CAAC,SAAS,CAAC;QACxBwI,YAAY,EAAExI,IAAI,CAAC,eAAe,CAAC;QACnCyI,IAAI,EAAEzI,IAAI,CAAC,MAAM,CAAC;QAClB0I,OAAO,EAAE1I,IAAI,CAAC,UAAU,CAAC;QACzB2I,OAAO,EAAE3I,IAAI,CAAC,SAAS,CAAC;QACxB4I,QAAQ,EAAE5I,IAAI,CAAC,WAAW,CAAC;QAC3B6I,WAAW,EAAE7I,IAAI,CAAC,eAAe,CAAC;QAClC8I,GAAG,EAAE9I,IAAI,CAAC,KAAK,CAAC;QAChB+I,MAAM,EAAE/I,IAAI,CAAC,SAAS;OACvB,CAAC;MACF;IACF;EAAC;EAAA,OAAA0B,WAAA;AAAA,EAhO8BjE,SAAS;AAmO1C;;;AAGA,WAAa4G,WAAY,0BAAA2E,YAAA;EAAApL,SAAA,CAAAyG,WAAA,EAAA2E,YAAA;EAAA,IAAAC,QAAA,GAAAnL,YAAA,CAAAuG,WAAA;EAQvB;;;;;EAKA,SAAAA,YAAA6E,MAAA,EAAyE;IAAA,IAAAC,OAAA;IAAA,IAA3DtJ,GAAG,GAAAqJ,MAAA,CAAHrJ,GAAG;MAAEC,KAAK,GAAAoJ,MAAA,CAALpJ,KAAK;IAAAL,eAAA,OAAA4E,WAAA;IACtB8E,OAAA,GAAAF,QAAA,CAAAvJ,IAAA;IACAyJ,OAAA,CAAKtJ,GAAG,GACN,OAAOA,GAAG,KAAK,QAAQ,GACnB,IAAIwC,UAAU,CAAC7E,MAAM,CAAC8E,IAAI,CAACzC,GAAG,EAAE,QAAQ,CAAC,CAAC,GAC1CA,GAAG;IACTsJ,OAAA,CAAKrJ,KAAK,GAAGA,KAAK;IAElBqJ,OAAA,CAAKxJ,aAAa,GAAG;MACnBE,GAAG,EAAE,KAAK;MACVC,KAAK,EAAE;KACR;IAAC,OAAAqJ,OAAA;EACJ;EAEA;EAAAvJ,YAAA,CAAAyE,WAAA;IAAAxE,GAAA;IAAAC,KAAA,EACA,SAAAC,sBAA6BC,IAAyB;MACpD;MACA,IAAI,OAAOA,IAAI,CAAC,KAAK,CAAC,KAAK,WAAW,EACpC,MAAM,IAAIC,KAAK,8CAAAC,MAAA,CAA8CF,IAAI,CAAE,CAAC;MACtE,IAAI,OAAOA,IAAI,CAAC,OAAO,CAAC,KAAK,WAAW,EACtC,MAAM,IAAIC,KAAK,gDAAAC,MAAA,CAAgDF,IAAI,CAAE,CAAC;MACxE,OAAO,IAAIqE,WAAW,CAAC;QACrBxE,GAAG,EAAEG,IAAI,CAAC,KAAK,CAAC;QAChBF,KAAK,EAAEwG,QAAQ,CAACvG,qBAAqB,CAACC,IAAI,CAAC,OAAO,CAAC;OACpD,CAAC;MACF;IACF;EAAC;EAAA,OAAAqE,WAAA;AAAA,EAvC8B5G,SAAS;AA0C1C;;;AAGA,WAAa6I,QAAS,0BAAA8C,YAAA;EAAAxL,SAAA,CAAA0I,QAAA,EAAA8C,YAAA;EAAA,IAAAC,QAAA,GAAAvL,YAAA,CAAAwI,QAAA;EAgBpB;;;;;;EAMA,SAAAA,SAAAgD,MAAA,EAQC;IAAA,IAAAC,OAAA;IAAA,IAPCC,IAAI,GAAAF,MAAA,CAAJE,IAAI;MACJC,KAAK,GAAAH,MAAA,CAALG,KAAK;MACLC,IAAI,GAAAJ,MAAA,CAAJI,IAAI;IAAAjK,eAAA,OAAA6G,QAAA;IAMJiD,OAAA,GAAAF,QAAA,CAAA3J,IAAA;IACA6J,OAAA,CAAKC,IAAI,GAAGA,IAAI;IAChBD,OAAA,CAAKE,KAAK,GACR,OAAOA,KAAK,KAAK,QAAQ,GACrB,IAAIpH,UAAU,CAAC7E,MAAM,CAAC8E,IAAI,CAACmH,KAAK,EAAE,QAAQ,CAAC,CAAC,GAC5CA,KAAK;IACXF,OAAA,CAAKG,IAAI,GAAGA,IAAI;IAEhBH,OAAA,CAAK5J,aAAa,GAAG;MACnB6J,IAAI,EAAE,MAAM;MACZC,KAAK,EAAE,OAAO;MACdC,IAAI,EAAE;KACP;IAAC,OAAAH,OAAA;EACJ;EAEA;EAAA3J,YAAA,CAAA0G,QAAA;IAAAzG,GAAA;IAAAC,KAAA,EACA,SAAAC,sBAA6BC,IAAyB;MACpD;MACA,IAAI,OAAOA,IAAI,CAAC,MAAM,CAAC,KAAK,WAAW,EACrC,MAAM,IAAIC,KAAK,+CAAAC,MAAA,CAA+CF,IAAI,CAAE,CAAC;MACvE,OAAO,IAAIsG,QAAQ,CAAC;QAClBkD,IAAI,EAAExJ,IAAI,CAAC,MAAM,CAAC;QAClByJ,KAAK,EAAEzJ,IAAI,CAAC,OAAO,CAAC;QACpB0J,IAAI,EAAE1J,IAAI,CAAC,MAAM;OAClB,CAAC;MACF;IACF;EAAC;EAAA,OAAAsG,QAAA;AAAA,EAzD2B7I,SAAS;AA4DvC;;;AAGA,WAAakM,iBAAkB,0BAAAC,YAAA;EAAAhM,SAAA,CAAA+L,iBAAA,EAAAC,YAAA;EAAA,IAAAC,QAAA,GAAA/L,YAAA,CAAA6L,iBAAA;EAM7B;;;;EAIA,SAAAA,kBAAAG,MAAA,EAAgD;IAAA,IAAAC,OAAA;IAAA,IAAlCC,SAAS,GAAAF,MAAA,CAATE,SAAS;IAAAvK,eAAA,OAAAkK,iBAAA;IACrBI,OAAA,GAAAF,QAAA,CAAAnK,IAAA;IACAqK,OAAA,CAAKC,SAAS,GAAGA,SAAS;IAE1BD,OAAA,CAAKpK,aAAa,GAAG;MACnBqK,SAAS,EAAE;KACZ;IAAC,OAAAD,OAAA;EACJ;EAEA;EAAAnK,YAAA,CAAA+J,iBAAA;IAAA9J,GAAA;IAAAC,KAAA,EACA,SAAAC,sBAA6BC,IAAyB;MACpD;MACA,IAAI,OAAOA,IAAI,CAAC,WAAW,CAAC,KAAK,WAAW,EAC1C,MAAM,IAAIC,KAAK,oDAAAC,MAAA,CACsCF,IAAI,CAAE,CAC1D;MACH,OAAO,IAAI2J,iBAAiB,CAAC;QAC3BK,SAAS,EAAEhK,IAAI,CAAC,WAAW;OAC5B,CAAC;MACF;IACF;EAAC;EAAA,OAAA2J,iBAAA;AAAA,EA9BoClM,SAAS;AAiChD;;;AAGA,WAAawM,aAAc,0BAAAC,YAAA;EAAAtM,SAAA,CAAAqM,aAAA,EAAAC,YAAA;EAAA,IAAAC,QAAA,GAAArM,YAAA,CAAAmM,aAAA;EAYzB;;;;;;EAMA,SAAAA,cAAAG,MAAA,EAMC;IAAA,IAAAC,OAAA;IAAA,IALCC,KAAK,GAAAF,MAAA,CAALE,KAAK;MACLC,IAAI,GAAAH,MAAA,CAAJG,IAAI;IAAA9K,eAAA,OAAAwK,aAAA;IAKJI,OAAA,GAAAF,QAAA,CAAAzK,IAAA;IACA2K,OAAA,CAAKC,KAAK,GAAGA,KAAK;IAClBD,OAAA,CAAKE,IAAI,GAAGA,IAAI;IAEhBF,OAAA,CAAK1K,aAAa,GAAG;MACnB2K,KAAK,EAAE,OAAO;MACdC,IAAI,EAAE;KACP;IAAC,OAAAF,OAAA;EACJ;EAEA;EAAAzK,YAAA,CAAAqK,aAAA;IAAApK,GAAA;IAAAC,KAAA,EACA,SAAAC,sBAA6BC,IAAyB;MACpD;MACA,IAAI,OAAOA,IAAI,CAAC,OAAO,CAAC,KAAK,WAAW,EACtC,MAAM,IAAIC,KAAK,gDAAAC,MAAA,CAAgDF,IAAI,CAAE,CAAC;MACxE,OAAO,IAAIiK,aAAa,CAAC;QACvBK,KAAK,EAAEtK,IAAI,CAAC,OAAO,CAAC;QACpBuK,IAAI,EAAEvK,IAAI,CAAC,MAAM;OAClB,CAAC;MACF;IACF;EAAC;EAAA,OAAAiK,aAAA;AAAA,EA7CgCxM,SAAS;AAgD5C;;;AAGA,WAAa+M,kBAAmB,0BAAAC,YAAA;EAAA7M,SAAA,CAAA4M,kBAAA,EAAAC,YAAA;EAAA,IAAAC,QAAA,GAAA5M,YAAA,CAAA0M,kBAAA;EAM9B;;;;EAIA,SAAAA,mBAAAG,MAAA,EAAoD;IAAA,IAAAC,OAAA;IAAA,IAAtCC,UAAU,GAAAF,MAAA,CAAVE,UAAU;IAAApL,eAAA,OAAA+K,kBAAA;IACtBI,OAAA,GAAAF,QAAA,CAAAhL,IAAA;IACAkL,OAAA,CAAKC,UAAU,GAAGA,UAAU;IAE5BD,OAAA,CAAKjL,aAAa,GAAG;MACnBkL,UAAU,EAAE;KACb;IAAC,OAAAD,OAAA;EACJ;EAEA;EAAAhL,YAAA,CAAA4K,kBAAA;IAAA3K,GAAA;IAAAC,KAAA,EACA,SAAAC,sBAA6BC,IAAyB;MACpD;MACA,IAAI,CAAC6C,KAAK,CAACC,OAAO,CAAC9C,IAAI,CAAC,YAAY,CAAC,CAAC,EACpC,MAAM,IAAIC,KAAK,2DAAAC,MAAA,CAC6CF,IAAI,CAAE,CACjE;MACH,OAAO,IAAIwK,kBAAkB,CAAC;QAC5BK,UAAU,EAAE7K,IAAI,CAAC,YAAY;OAC9B,CAAC;MACF;IACF;EAAC;EAAA,OAAAwK,kBAAA;AAAA,EA9BqC/M,SAAS;AAiCjD;;;AAGA,WAAaqN,GAAI,0BAAAC,YAAA;EAAAnN,SAAA,CAAAkN,GAAA,EAAAC,YAAA;EAAA,IAAAC,QAAA,GAAAlN,YAAA,CAAAgN,GAAA;EAgBf;;;;;;EAMA,SAAAA,IAAAG,MAAA,EAQC;IAAA,IAAAC,OAAA;IAAA,IAPCzC,IAAI,GAAAwC,MAAA,CAAJxC,IAAI;MACJlK,KAAK,GAAA0M,MAAA,CAAL1M,KAAK;MACLuB,KAAK,GAAAmL,MAAA,CAALnL,KAAK;IAAAL,eAAA,OAAAqL,GAAA;IAMLI,OAAA,GAAAF,QAAA,CAAAtL,IAAA;IACAwL,OAAA,CAAKzC,IAAI,GACP,OAAOA,IAAI,KAAK,QAAQ,GACpB,IAAIpG,UAAU,CAAC7E,MAAM,CAAC8E,IAAI,CAACmG,IAAI,EAAE,QAAQ,CAAC,CAAC,GAC3CA,IAAI;IACVyC,OAAA,CAAK3M,KAAK,GAAGA,KAAK;IAClB2M,OAAA,CAAKpL,KAAK,GACR,OAAOA,KAAK,KAAK,QAAQ,GACrB,IAAIuC,UAAU,CAAC7E,MAAM,CAAC8E,IAAI,CAACxC,KAAK,EAAE,QAAQ,CAAC,CAAC,GAC5CA,KAAK;IAEXoL,OAAA,CAAKvL,aAAa,GAAG;MACnB8I,IAAI,EAAE,MAAM;MACZlK,KAAK,EAAE,OAAO;MACduB,KAAK,EAAE;KACR;IAAC,OAAAoL,OAAA;EACJ;EAEA;EAAAtL,YAAA,CAAAkL,GAAA;IAAAjL,GAAA;IAAAC,KAAA,EACA,SAAAC,sBAA6BC,IAAyB;MACpD;MACA,IAAI,OAAOA,IAAI,CAAC,MAAM,CAAC,KAAK,WAAW,EACrC,MAAM,IAAIC,KAAK,+CAAAC,MAAA,CAA+CF,IAAI,CAAE,CAAC;MACvE,IAAI,OAAOA,IAAI,CAAC,OAAO,CAAC,KAAK,WAAW,EACtC,MAAM,IAAIC,KAAK,gDAAAC,MAAA,CAAgDF,IAAI,CAAE,CAAC;MACxE,IAAI,OAAOA,IAAI,CAAC,OAAO,CAAC,KAAK,WAAW,EACtC,MAAM,IAAIC,KAAK,gDAAAC,MAAA,CAAgDF,IAAI,CAAE,CAAC;MACxE,OAAO,IAAI8K,GAAG,CAAC;QACbrC,IAAI,EAAEzI,IAAI,CAAC,MAAM,CAAC;QAClBzB,KAAK,EAAEyB,IAAI,CAAC,OAAO,CAAC;QACpBF,KAAK,EAAEE,IAAI,CAAC,OAAO;OACpB,CAAC;MACF;IACF;EAAC;EAAA,OAAA8K,GAAA;AAAA,EAhEsBrN,SAAS;AAmElC;;;AAGA,WAAa0N,aAAc,0BAAAC,YAAA;EAAAxN,SAAA,CAAAuN,aAAA,EAAAC,YAAA;EAAA,IAAAC,QAAA,GAAAvN,YAAA,CAAAqN,aAAA;EAMzB;;;;EAIA,SAAAA,cAAAG,MAAA,EAAmD;IAAA,IAAAC,OAAA;IAAA,IAArC9C,IAAI,GAAA6C,MAAA,CAAJ7C,IAAI;IAAAhJ,eAAA,OAAA0L,aAAA;IAChBI,OAAA,GAAAF,QAAA,CAAA3L,IAAA;IACA6L,OAAA,CAAK9C,IAAI,GACP,OAAOA,IAAI,KAAK,QAAQ,GACpB,IAAIpG,UAAU,CAAC7E,MAAM,CAAC8E,IAAI,CAACmG,IAAI,EAAE,QAAQ,CAAC,CAAC,GAC3CA,IAAI;IAEV8C,OAAA,CAAK5L,aAAa,GAAG;MACnB8I,IAAI,EAAE;KACP;IAAC,OAAA8C,OAAA;EACJ;EAEA;EAAA3L,YAAA,CAAAuL,aAAA;IAAAtL,GAAA;IAAAC,KAAA,EACA,SAAAC,sBAA6BC,IAAyB;MACpD;MACA,IAAI,OAAOA,IAAI,CAAC,MAAM,CAAC,KAAK,WAAW,EACrC,MAAM,IAAIC,KAAK,+CAAAC,MAAA,CAA+CF,IAAI,CAAE,CAAC;MACvE,OAAO,IAAImL,aAAa,CAAC;QACvB1C,IAAI,EAAEzI,IAAI,CAAC,MAAM;OAClB,CAAC;MACF;IACF;EAAC;EAAA,OAAAmL,aAAA;AAAA,EA/BgC1N,SAAS;AAkC5C;;;AAGA,WAAa+N,YAAa,0BAAAC,YAAA;EAAA7N,SAAA,CAAA4N,YAAA,EAAAC,YAAA;EAAA,IAAAC,QAAA,GAAA5N,YAAA,CAAA0N,YAAA;EAWxB;;;;;EAKA,SAAAA,aAAAG,MAAA,EAMC;IAAA,IAAAC,OAAA;IAAA,IALCjH,GAAG,GAAAgH,MAAA,CAAHhH,GAAG;MACH8D,IAAI,GAAAkD,MAAA,CAAJlD,IAAI;IAAAhJ,eAAA,OAAA+L,YAAA;IAKJI,OAAA,GAAAF,QAAA,CAAAhM,IAAA;IACAkM,OAAA,CAAKjH,GAAG,GAAGA,GAAG;IACdiH,OAAA,CAAKnD,IAAI,GACP,OAAOA,IAAI,KAAK,QAAQ,GACpB,IAAIpG,UAAU,CAAC7E,MAAM,CAAC8E,IAAI,CAACmG,IAAI,EAAE,QAAQ,CAAC,CAAC,GAC3CA,IAAI;IAEVmD,OAAA,CAAKjM,aAAa,GAAG;MACnBgF,GAAG,EAAE,KAAK;MACV8D,IAAI,EAAE;KACP;IAAC,OAAAmD,OAAA;EACJ;EAEA;EAAAhM,YAAA,CAAA4L,YAAA;IAAA3L,GAAA;IAAAC,KAAA,EACA,SAAAC,sBAA6BC,IAAyB;MACpD;MACA,IAAI,OAAOA,IAAI,CAAC,KAAK,CAAC,KAAK,WAAW,EACpC,MAAM,IAAIC,KAAK,8CAAAC,MAAA,CAA8CF,IAAI,CAAE,CAAC;MACtE,IAAI,OAAOA,IAAI,CAAC,MAAM,CAAC,KAAK,WAAW,EACrC,MAAM,IAAIC,KAAK,+CAAAC,MAAA,CAA+CF,IAAI,CAAE,CAAC;MACvE,OAAO,IAAIwL,YAAY,CAAC;QACtB7G,GAAG,EAAE3E,IAAI,CAAC,KAAK,CAAC;QAChByI,IAAI,EAAEzI,IAAI,CAAC,MAAM;OAClB,CAAC;MACF;IACF;EAAC;EAAA,OAAAwL,YAAA;AAAA,EAhD+B/N,SAAS;AAmD3C;;;AAGA,WAAaoO,aAAc,0BAAAC,YAAA;EAAAlO,SAAA,CAAAiO,aAAA,EAAAC,YAAA;EAAA,IAAAC,QAAA,GAAAjO,YAAA,CAAA+N,aAAA;EAGzB;;;;EAIA,SAAAA,cAAAG,MAAA,EAAiD;IAAA,IAAAC,OAAA;IAAA,IAAnCC,KAAK,GAAAF,MAAA,CAALE,KAAK;IAAAzM,eAAA,OAAAoM,aAAA;IACjBI,OAAA,GAAAF,QAAA,CAAArM,IAAA;IACAuM,OAAA,CAAKC,KAAK,GAAGA,KAAK;IAElBD,OAAA,CAAKtM,aAAa,GAAG;MACnBuM,KAAK,EAAE;KACR;IAAC,OAAAD,OAAA;EACJ;EAEA;EAAArM,YAAA,CAAAiM,aAAA;IAAAhM,GAAA;IAAAC,KAAA,EACA,SAAAC,sBAA6BC,IAAyB;MACpD;MACA,IAAI,CAAC6C,KAAK,CAACC,OAAO,CAAC9C,IAAI,CAAC,OAAO,CAAC,CAAC,EAC/B,MAAM,IAAIC,KAAK,sDAAAC,MAAA,CACwCF,IAAI,CAAE,CAC5D;MACH,OAAO,IAAI6L,aAAa,CAAC;QACvBK,KAAK,EAAElM,IAAI,CAAC,OAAO,CAAC,CAACG,GAAG,CAACgL,aAAa,CAACpL,qBAAqB;OAC7D,CAAC;MACF;IACF;EAAC;EAAA,OAAA8L,aAAA;AAAA,EA3BgCpO,SAAS;AA8B5C,WAAa0O,YAAa,0BAAAC,YAAA;EAAAxO,SAAA,CAAAuO,YAAA,EAAAC,YAAA;EAAA,IAAAC,QAAA,GAAAvO,YAAA,CAAAqO,YAAA;EAaxB;;;;;;;;;EASA,SAAAA,aAAAG,MAAA,EAcC;IAAA,IAAAC,OAAA;IAAA,IAbCC,MAAM,GAAAF,MAAA,CAANE,MAAM;MACNC,WAAW,GAAAH,MAAA,CAAXG,WAAW;MACXC,OAAO,GAAAJ,MAAA,CAAPI,OAAO;MACPC,UAAU,GAAAL,MAAA,CAAVK,UAAU;MACVC,KAAK,GAAAN,MAAA,CAALM,KAAK;MACLC,KAAK,GAAAP,MAAA,CAALO,KAAK;IAAApN,eAAA,OAAA0M,YAAA;IASLI,OAAA,GAAAF,QAAA,CAAA3M,IAAA;IACA6M,OAAA,CAAKC,MAAM,GAAGA,MAAM;IACpBD,OAAA,CAAKE,WAAW,GAAGA,WAAW;IAC9BF,OAAA,CAAKG,OAAO,GAAGA,OAAO;IACtBH,OAAA,CAAKI,UAAU,GAAGA,UAAU;IAC5BJ,OAAA,CAAKK,KAAK,GAAGA,KAAK;IAClBL,OAAA,CAAKM,KAAK,GAAGA,KAAK;IAElBN,OAAA,CAAK5M,aAAa,GAAG;MACnB6M,MAAM,EAAE,QAAQ;MAChBC,WAAW,EAAE,cAAc;MAC3BC,OAAO,EAAE,SAAS;MAClBC,UAAU,EAAE,aAAa;MACzBC,KAAK,EAAE,OAAO;MACdC,KAAK,EAAE;KACR;IAAC,OAAAN,OAAA;EACJ;EAEA;EAAA3M,YAAA,CAAAuM,YAAA;IAAAtM,GAAA;IAAAC,KAAA,EACA,SAAAC,sBAA6BC,IAAyB;MACpD;MACA,IAAI,OAAOA,IAAI,CAAC,QAAQ,CAAC,KAAK,WAAW,EACvC,MAAM,IAAIC,KAAK,iDAAAC,MAAA,CAAiDF,IAAI,CAAE,CAAC;MACzE,IAAI,OAAOA,IAAI,CAAC,cAAc,CAAC,KAAK,WAAW,EAC7C,MAAM,IAAIC,KAAK,uDAAAC,MAAA,CACyCF,IAAI,CAAE,CAC7D;MACH,IAAI,OAAOA,IAAI,CAAC,SAAS,CAAC,KAAK,WAAW,EACxC,MAAM,IAAIC,KAAK,kDAAAC,MAAA,CAAkDF,IAAI,CAAE,CAAC;MAC1E,IAAI,OAAOA,IAAI,CAAC,aAAa,CAAC,KAAK,WAAW,EAC5C,MAAM,IAAIC,KAAK,sDAAAC,MAAA,CACwCF,IAAI,CAAE,CAC5D;MACH,IAAI,OAAOA,IAAI,CAAC,OAAO,CAAC,KAAK,WAAW,EACtC,MAAM,IAAIC,KAAK,gDAAAC,MAAA,CAAgDF,IAAI,CAAE,CAAC;MACxE,IAAI,OAAOA,IAAI,CAAC,OAAO,CAAC,KAAK,WAAW,EACtC,MAAM,IAAIC,KAAK,gDAAAC,MAAA,CAAgDF,IAAI,CAAE,CAAC;MACxE,OAAO,IAAImM,YAAY,CAAC;QACtBK,MAAM,EAAExM,IAAI,CAAC,QAAQ,CAAC;QACtByM,WAAW,EAAEzM,IAAI,CAAC,cAAc,CAAC;QACjC0M,OAAO,EAAE1M,IAAI,CAAC,SAAS,CAAC;QACxB2M,UAAU,EAAE3M,IAAI,CAAC,aAAa,CAAC;QAC/B4M,KAAK,EAAE5M,IAAI,CAAC,OAAO,CAAC;QACpB6M,KAAK,EAAE7M,IAAI,CAAC,OAAO;OACpB,CAAC;MACF;IACF;EAAC;EAAA,OAAAmM,YAAA;AAAA,EAnF+B1O,SAAS;AAsF3C;;;AAGA,WAAaqP,eAAgB,0BAAAC,YAAA;EAAAnP,SAAA,CAAAkP,eAAA,EAAAC,YAAA;EAAA,IAAAC,QAAA,GAAAlP,YAAA,CAAAgP,eAAA;EAgB3B;;;;;;EAMA,SAAAA,gBAAAG,MAAA,EAQC;IAAA,IAAAC,OAAA;IAAA,IAPCC,IAAI,GAAAF,MAAA,CAAJE,IAAI;MACJC,MAAM,GAAAH,MAAA,CAANG,MAAM;MACNC,SAAS,GAAAJ,MAAA,CAATI,SAAS;IAAA5N,eAAA,OAAAqN,eAAA;IAMTI,OAAA,GAAAF,QAAA,CAAAtN,IAAA;IACAwN,OAAA,CAAKC,IAAI,GAAGA,IAAI;IAChBD,OAAA,CAAKE,MAAM,GAAGA,MAAM;IACpBF,OAAA,CAAKG,SAAS,GAAGA,SAAS;IAE1BH,OAAA,CAAKvN,aAAa,GAAG;MACnBwN,IAAI,EAAE,MAAM;MACZC,MAAM,EAAE,QAAQ;MAChBC,SAAS,EAAE;KACZ;IAAC,OAAAH,OAAA;EACJ;EAEA;EAAAtN,YAAA,CAAAkN,eAAA;IAAAjN,GAAA;IAAAC,KAAA,EACA,SAAAC,sBAA6BC,IAAyB;MACpD;MACA,IAAI,OAAOA,IAAI,CAAC,MAAM,CAAC,KAAK,WAAW,EACrC,MAAM,IAAIC,KAAK,+CAAAC,MAAA,CAA+CF,IAAI,CAAE,CAAC;MACvE,IAAI,OAAOA,IAAI,CAAC,QAAQ,CAAC,KAAK,WAAW,EACvC,MAAM,IAAIC,KAAK,iDAAAC,MAAA,CAAiDF,IAAI,CAAE,CAAC;MACzE,OAAO,IAAI8M,eAAe,CAAC;QACzBK,IAAI,EAAEnN,IAAI,CAAC,MAAM,CAAC;QAClBoN,MAAM,EAAEpN,IAAI,CAAC,QAAQ,CAAC;QACtBqN,SAAS,EAAErN,IAAI,CAAC,WAAW;OAC5B,CAAC;MACF;IACF;EAAC;EAAA,OAAA8M,eAAA;AAAA,EAxDkCrP,SAAS;AA2D9C;;;AAGA,WAAa6P,mBAAoB,0BAAAC,YAAA;EAAA3P,SAAA,CAAA0P,mBAAA,EAAAC,YAAA;EAAA,IAAAC,QAAA,GAAA1P,YAAA,CAAAwP,mBAAA;EAM/B;;;;EAIA,SAAAA,oBAAAG,MAAA,EAA0C;IAAA,IAAAC,OAAA;IAAA,IAA5BN,MAAM,GAAAK,MAAA,CAANL,MAAM;IAAA3N,eAAA,OAAA6N,mBAAA;IAClBI,OAAA,GAAAF,QAAA,CAAA9N,IAAA;IACAgO,OAAA,CAAKN,MAAM,GAAGA,MAAM;IAEpBM,OAAA,CAAK/N,aAAa,GAAG;MACnByN,MAAM,EAAE;KACT;IAAC,OAAAM,OAAA;EACJ;EAEA;EAAA9N,YAAA,CAAA0N,mBAAA;IAAAzN,GAAA;IAAAC,KAAA,EACA,SAAAC,sBAA6BC,IAAyB;MACpD;MACA,IAAI,OAAOA,IAAI,CAAC,QAAQ,CAAC,KAAK,WAAW,EACvC,MAAM,IAAIC,KAAK,iDAAAC,MAAA,CAAiDF,IAAI,CAAE,CAAC;MACzE,OAAO,IAAIsN,mBAAmB,CAAC;QAC7BF,MAAM,EAAEpN,IAAI,CAAC,QAAQ;OACtB,CAAC;MACF;IACF;EAAC;EAAA,OAAAsN,mBAAA;AAAA,EA5BsC7P,SAAS;AA+BlD;;;;AAIA,WAAakQ,aAAc,0BAAAC,YAAA;EAAAhQ,SAAA,CAAA+P,aAAA,EAAAC,YAAA;EAAA,IAAAC,QAAA,GAAA/P,YAAA,CAAA6P,aAAA;EA2BzB;;;;;;;;;;;;;EAaA,SAAAA,cAAAG,MAAA,EAgBC;IAAA,IAAAC,OAAA;IAAA,IAfCC,QAAQ,GAAAF,MAAA,CAARE,QAAQ;MACRC,IAAI,GAAAH,MAAA,CAAJG,IAAI;MACJC,eAAe,GAAAJ,MAAA,CAAfI,eAAe;MACfC,eAAe,GAAAL,MAAA,CAAfK,eAAe;MACf5P,KAAK,GAAAuP,MAAA,CAALvP,KAAK;MACL6P,OAAO,GAAAN,MAAA,CAAPM,OAAO;MACPC,IAAI,GAAAP,MAAA,CAAJO,IAAI;IAAA5O,eAAA,OAAAkO,aAAA;IAUJI,OAAA,GAAAF,QAAA,CAAAnO,IAAA;IACAqO,OAAA,CAAKC,QAAQ,GAAGA,QAAQ;IACxBD,OAAA,CAAKE,IAAI,GAAGA,IAAI;IAChBF,OAAA,CAAKG,eAAe,GAAGA,eAAe;IACtCH,OAAA,CAAKI,eAAe,GAAGA,eAAe;IACtCJ,OAAA,CAAKxP,KAAK,GAAGA,KAAK;IAClBwP,OAAA,CAAKK,OAAO,GAAGA,OAAO;IACtBL,OAAA,CAAKM,IAAI,GAAGA,IAAI;IAEhBN,OAAA,CAAKpO,aAAa,GAAG;MACnBqO,QAAQ,EAAE,UAAU;MACpBC,IAAI,EAAE,MAAM;MACZC,eAAe,EAAE,kBAAkB;MACnCC,eAAe,EAAE,kBAAkB;MACnC5P,KAAK,EAAE,OAAO;MACd6P,OAAO,EAAE,SAAS;MAClBC,IAAI,EAAE;KACP;IAAC,OAAAN,OAAA;EACJ;EAEA;EAAAnO,YAAA,CAAA+N,aAAA;IAAA9N,GAAA;IAAAC,KAAA,EACA,SAAAC,sBAA6BC,IAAyB;MACpD;MACA,IAAI,CAAC6C,KAAK,CAACC,OAAO,CAAC9C,IAAI,CAAC,UAAU,CAAC,CAAC,EAClC,MAAM,IAAIC,KAAK,yDAAAC,MAAA,CAC2CF,IAAI,CAAE,CAC/D;MACH,IAAI,CAAC6C,KAAK,CAACC,OAAO,CAAC9C,IAAI,CAAC,MAAM,CAAC,CAAC,EAC9B,MAAM,IAAIC,KAAK,qDAAAC,MAAA,CACuCF,IAAI,CAAE,CAC3D;MACH,IAAI,OAAOA,IAAI,CAAC,kBAAkB,CAAC,KAAK,WAAW,EACjD,MAAM,IAAIC,KAAK,2DAAAC,MAAA,CAC6CF,IAAI,CAAE,CACjE;MACH,IAAI,OAAOA,IAAI,CAAC,kBAAkB,CAAC,KAAK,WAAW,EACjD,MAAM,IAAIC,KAAK,2DAAAC,MAAA,CAC6CF,IAAI,CAAE,CACjE;MACH,IAAI,OAAOA,IAAI,CAAC,OAAO,CAAC,KAAK,WAAW,EACtC,MAAM,IAAIC,KAAK,gDAAAC,MAAA,CAAgDF,IAAI,CAAE,CAAC;MACxE,IAAI,CAAC6C,KAAK,CAACC,OAAO,CAAC9C,IAAI,CAAC,SAAS,CAAC,CAAC,EACjC,MAAM,IAAIC,KAAK,wDAAAC,MAAA,CAC0CF,IAAI,CAAE,CAC9D;MACH,IAAI,CAAC6C,KAAK,CAACC,OAAO,CAAC9C,IAAI,CAAC,MAAM,CAAC,CAAC,EAC9B,MAAM,IAAIC,KAAK,qDAAAC,MAAA,CACuCF,IAAI,CAAE,CAC3D;MACH,OAAO,IAAI2N,aAAa,CAAC;QACvBK,QAAQ,EAAEhO,IAAI,CAAC,UAAU,CAAC,CAACG,GAAG,CAACzC,OAAO,CAACqC,qBAAqB,CAAC;QAC7DkO,IAAI,EAAEjO,IAAI,CAAC,MAAM,CAAC,CAACG,GAAG,CAACK,WAAW,CAACT,qBAAqB,CAAC;QACzDmO,eAAe,EAAElO,IAAI,CAAC,kBAAkB,CAAC;QACzCmO,eAAe,EAAEnO,IAAI,CAAC,kBAAkB,CAAC;QACzCzB,KAAK,EAAEyB,IAAI,CAAC,OAAO,CAAC;QACpBoO,OAAO,EAAEpO,IAAI,CAAC,SAAS,CAAC,CAACG,GAAG,CAACmO,YAAY,CAACvO,qBAAqB,CAAC;QAChEsO,IAAI,EAAErO,IAAI,CAAC,MAAM;OAClB,CAAC;MACF;IACF;EAAC;EAAA,OAAA2N,aAAA;AAAA,EApHgClQ,SAAS;AAuH5C;;;AAGA,WAAa8Q,cAAe,0BAAAC,YAAA;EAAA5Q,SAAA,CAAA2Q,cAAA,EAAAC,YAAA;EAAA,IAAAC,QAAA,GAAA3Q,YAAA,CAAAyQ,cAAA;EAU1B;;;;;;EAMA,SAAAA,eAAAG,MAAA,EAQC;IAAA,IAAAC,OAAA;IAAA,IAPCC,KAAK,GAAAF,MAAA,CAALE,KAAK;MACLT,eAAe,GAAAO,MAAA,CAAfP,eAAe;MACfE,IAAI,GAAAK,MAAA,CAAJL,IAAI;IAAA5O,eAAA,OAAA8O,cAAA;IAMJI,OAAA,GAAAF,QAAA,CAAA/O,IAAA;IACAiP,OAAA,CAAKC,KAAK,GAAGA,KAAK;IAClBD,OAAA,CAAKR,eAAe,GAAGA,eAAe;IACtCQ,OAAA,CAAKN,IAAI,GAAGA,IAAI;IAEhBM,OAAA,CAAKhP,aAAa,GAAG;MACnBiP,KAAK,EAAE,OAAO;MACdT,eAAe,EAAE,kBAAkB;MACnCE,IAAI,EAAE;KACP;IAAC,OAAAM,OAAA;EACJ;EAEA;EAAA/O,YAAA,CAAA2O,cAAA;IAAA1O,GAAA;IAAAC,KAAA,EACA,SAAAC,sBAA6BC,IAAyB;MACpD;MACA,IAAI,OAAOA,IAAI,CAAC,OAAO,CAAC,KAAK,WAAW,EACtC,MAAM,IAAIC,KAAK,gDAAAC,MAAA,CAAgDF,IAAI,CAAE,CAAC;MACxE,IAAI,OAAOA,IAAI,CAAC,kBAAkB,CAAC,KAAK,WAAW,EACjD,MAAM,IAAIC,KAAK,2DAAAC,MAAA,CAC6CF,IAAI,CAAE,CACjE;MACH,IAAI,CAAC6C,KAAK,CAACC,OAAO,CAAC9C,IAAI,CAAC,MAAM,CAAC,CAAC,EAC9B,MAAM,IAAIC,KAAK,qDAAAC,MAAA,CACuCF,IAAI,CAAE,CAC3D;MACH,OAAO,IAAIuO,cAAc,CAAC;QACxBK,KAAK,EAAE5O,IAAI,CAAC,OAAO,CAAC;QACpBmO,eAAe,EAAEnO,IAAI,CAAC,kBAAkB,CAAC;QACzCqO,IAAI,EAAErO,IAAI,CAAC,MAAM,CAAC,CAACG,GAAG,CAAC0O,eAAe,CAAC9O,qBAAqB;OAC7D,CAAC;MACF;IACF;EAAC;EAAA,OAAAwO,cAAA;AAAA,EAxDiC9Q,SAAS;AA2D7C;;;;AAIA,WAAa6Q,YAAa,0BAAAQ,YAAA;EAAAlR,SAAA,CAAA0Q,YAAA,EAAAQ,YAAA;EAAA,IAAAC,QAAA,GAAAjR,YAAA,CAAAwQ,YAAA;EAcxB;;;;;;;;;EASA,SAAAA,aAAAU,MAAA,EAUC;IAAA,IAAAC,OAAA;IAAA,IATCC,SAAS,GAAAF,MAAA,CAATE,SAAS;MACTC,MAAM,GAAAH,MAAA,CAANG,MAAM;MACNC,QAAQ,GAAAJ,MAAA,CAARI,QAAQ;MACRC,QAAQ,GAAAL,MAAA,CAARK,QAAQ;IAAA5P,eAAA,OAAA6O,YAAA;IAORW,OAAA,GAAAF,QAAA,CAAArP,IAAA;IACAuP,OAAA,CAAKC,SAAS,GAAGA,SAAS;IAC1BD,OAAA,CAAKE,MAAM,GAAGA,MAAM;IACpBF,OAAA,CAAKG,QAAQ,GAAGA,QAAQ;IACxBH,OAAA,CAAKI,QAAQ,GAAGA,QAAQ;IAExBJ,OAAA,CAAKtP,aAAa,GAAG;MACnBuP,SAAS,EAAE,YAAY;MACvBC,MAAM,EAAE,QAAQ;MAChBC,QAAQ,EAAE,WAAW;MACrBC,QAAQ,EAAE;KACX;IAAC,OAAAJ,OAAA;EACJ;EAEA;EAAArP,YAAA,CAAA0O,YAAA;IAAAzO,GAAA;IAAAC,KAAA,EACA,SAAAC,sBAA6BC,IAAyB;MACpD;MACA,IAAI,OAAOA,IAAI,CAAC,YAAY,CAAC,KAAK,WAAW,EAC3C,MAAM,IAAIC,KAAK,qDAAAC,MAAA,CACuCF,IAAI,CAAE,CAC3D;MACH,IAAI,OAAOA,IAAI,CAAC,QAAQ,CAAC,KAAK,WAAW,EACvC,MAAM,IAAIC,KAAK,iDAAAC,MAAA,CAAiDF,IAAI,CAAE,CAAC;MACzE,IAAI,OAAOA,IAAI,CAAC,WAAW,CAAC,KAAK,WAAW,EAC1C,MAAM,IAAIC,KAAK,oDAAAC,MAAA,CACsCF,IAAI,CAAE,CAC1D;MACH,IAAI,OAAOA,IAAI,CAAC,WAAW,CAAC,KAAK,WAAW,EAC1C,MAAM,IAAIC,KAAK,oDAAAC,MAAA,CACsCF,IAAI,CAAE,CAC1D;MACH,OAAO,IAAIsO,YAAY,CAAC;QACtBY,SAAS,EAAElP,IAAI,CAAC,YAAY,CAAC;QAC7BmP,MAAM,EAAEnP,IAAI,CAAC,QAAQ,CAAC;QACtBoP,QAAQ,EAAEpP,IAAI,CAAC,WAAW,CAAC;QAC3BqP,QAAQ,EAAErP,IAAI,CAAC,WAAW;OAC3B,CAAC;MACF;IACF;EAAC;EAAA,OAAAsO,YAAA;AAAA,EAxE+B7Q,SAAS;AA2E3C;;;AAGA,WAAa6R,WAAY,0BAAAC,YAAA;EAAA3R,SAAA,CAAA0R,WAAA,EAAAC,YAAA;EAAA,IAAAC,QAAA,GAAA1R,YAAA,CAAAwR,WAAA;EAoBvB;;;;;;;;EAQA,SAAAA,YAAAG,MAAA,EAYC;IAAA,IAAAC,OAAA;IAAA,IAXCC,IAAI,GAAAF,MAAA,CAAJE,IAAI;MACJC,EAAE,GAAAH,MAAA,CAAFG,EAAE;MACFC,KAAK,GAAAJ,MAAA,CAALI,KAAK;MACLjB,KAAK,GAAAa,MAAA,CAALb,KAAK;MACLkB,OAAO,GAAAL,MAAA,CAAPK,OAAO;IAAArQ,eAAA,OAAA6P,WAAA;IAQPI,OAAA,GAAAF,QAAA,CAAA9P,IAAA;IACAgQ,OAAA,CAAKC,IAAI,GAAGA,IAAI;IAChBD,OAAA,CAAKE,EAAE,GAAGA,EAAE;IACZF,OAAA,CAAKG,KAAK,GAAGA,KAAK;IAClBH,OAAA,CAAKd,KAAK,GAAGA,KAAK;IAClBc,OAAA,CAAKI,OAAO,GAAGA,OAAO;IAEtBJ,OAAA,CAAK/P,aAAa,GAAG;MACnBgQ,IAAI,EAAE,MAAM;MACZC,EAAE,EAAE,IAAI;MACRC,KAAK,EAAE,OAAO;MACdjB,KAAK,EAAE,OAAO;MACdkB,OAAO,EAAE;KACV;IAAC,OAAAJ,OAAA;EACJ;EAEA;EAAA9P,YAAA,CAAA0P,WAAA;IAAAzP,GAAA;IAAAC,KAAA,EACA,SAAAC,sBAA6BC,IAAyB;MACpD;MACA,IAAI,OAAOA,IAAI,CAAC,MAAM,CAAC,KAAK,WAAW,EACrC,MAAM,IAAIC,KAAK,+CAAAC,MAAA,CAA+CF,IAAI,CAAE,CAAC;MACvE,IAAI,OAAOA,IAAI,CAAC,IAAI,CAAC,KAAK,WAAW,EACnC,MAAM,IAAIC,KAAK,6CAAAC,MAAA,CAA6CF,IAAI,CAAE,CAAC;MACrE,IAAI,CAAC6C,KAAK,CAACC,OAAO,CAAC9C,IAAI,CAAC,OAAO,CAAC,CAAC,EAC/B,MAAM,IAAIC,KAAK,sDAAAC,MAAA,CACwCF,IAAI,CAAE,CAC5D;MACH,OAAO,IAAIsP,WAAW,CAAC;QACrBK,IAAI,EAAE3P,IAAI,CAAC,MAAM,CAAC;QAClB4P,EAAE,EAAE5P,IAAI,CAAC,IAAI,CAAC;QACd6P,KAAK,EAAE7P,IAAI,CAAC,OAAO,CAAC,CAACG,GAAG,CAAC4P,SAAS,CAAChQ,qBAAqB,CAAC;QACzD6O,KAAK,EAAE5O,IAAI,CAAC,OAAO,CAAC;QACpB8P,OAAO,EACL,OAAO9P,IAAI,CAAC,SAAS,CAAC,KAAK,WAAW,GAClCA,IAAI,CAAC,SAAS,CAAC,CAACG,GAAG,CAAC4P,SAAS,CAAChQ,qBAAqB,CAAC,GACpDM;OACP,CAAC;MACF;IACF;EAAC;EAAA,OAAAiP,WAAA;AAAA,EA/E8B7R,SAAS;AAkF1C;;;;AAIA,WAAaoR,eAAgB,0BAAAmB,YAAA;EAAApS,SAAA,CAAAiR,eAAA,EAAAmB,YAAA;EAAA,IAAAC,QAAA,GAAAnS,YAAA,CAAA+Q,eAAA;EAsC3B;;;;;;;;;;;;;;EAcA,SAAAA,gBAAAqB,MAAA,EAwBC;IAAA,IAAAC,OAAA;IAAA,IAvBCC,WAAW,GAAAF,MAAA,CAAXE,WAAW;MACXC,eAAe,GAAAH,MAAA,CAAfG,eAAe;MACfC,YAAY,GAAAJ,MAAA,CAAZI,YAAY;MACZC,WAAW,GAAAL,MAAA,CAAXK,WAAW;MACXC,cAAc,GAAAN,MAAA,CAAdM,cAAc;MACdC,WAAW,GAAAP,MAAA,CAAXO,WAAW;MACXC,WAAW,GAAAR,MAAA,CAAXQ,WAAW;MACXC,mBAAmB,GAAAT,MAAA,CAAnBS,mBAAmB;MACnBC,gBAAgB,GAAAV,MAAA,CAAhBU,gBAAgB;MAChBC,aAAa,GAAAX,MAAA,CAAbW,aAAa;MACbC,IAAI,GAAAZ,MAAA,CAAJY,IAAI;IAAArR,eAAA,OAAAoP,eAAA;IAcJsB,OAAA,GAAAF,QAAA,CAAAvQ,IAAA;IACAyQ,OAAA,CAAKC,WAAW,GAAGA,WAAW;IAC9BD,OAAA,CAAKE,eAAe,GAAGA,eAAe;IACtCF,OAAA,CAAKG,YAAY,GAAGA,YAAY;IAChCH,OAAA,CAAKI,WAAW,GAAGA,WAAW;IAC9BJ,OAAA,CAAKK,cAAc,GAAGA,cAAc;IACpCL,OAAA,CAAKM,WAAW,GAAGA,WAAW;IAC9BN,OAAA,CAAKO,WAAW,GAAGA,WAAW;IAC9BP,OAAA,CAAKQ,mBAAmB,GAAGA,mBAAmB;IAC9CR,OAAA,CAAKS,gBAAgB,GAAGA,gBAAgB;IACxCT,OAAA,CAAKU,aAAa,GAAGA,aAAa;IAClCV,OAAA,CAAKW,IAAI,GAAGA,IAAI;IAEhBX,OAAA,CAAKxQ,aAAa,GAAG;MACnByQ,WAAW,EAAE,aAAa;MAC1BC,eAAe,EAAE,mBAAmB;MACpCC,YAAY,EAAE,gBAAgB;MAC9BC,WAAW,EAAE,cAAc;MAC3BC,cAAc,EAAE,iBAAiB;MACjCC,WAAW,EAAE,cAAc;MAC3BC,WAAW,EAAE,cAAc;MAC3BC,mBAAmB,EAAE,uBAAuB;MAC5CC,gBAAgB,EAAE,oBAAoB;MACtCC,aAAa,EAAE,iBAAiB;MAChCC,IAAI,EAAE;KACP;IAAC,OAAAX,OAAA;EACJ;EAEA;EAAAvQ,YAAA,CAAAiP,eAAA;IAAAhP,GAAA;IAAAC,KAAA,EACA,SAAAC,sBAA6BC,IAAyB;MACpD;MACA,IAAI,CAAC6C,KAAK,CAACC,OAAO,CAAC9C,IAAI,CAAC,aAAa,CAAC,CAAC,EACrC,MAAM,IAAIC,KAAK,4DAAAC,MAAA,CAC8CF,IAAI,CAAE,CAClE;MACH,OAAO,IAAI6O,eAAe,CAAC;QACzBuB,WAAW,EAAEpQ,IAAI,CAAC,aAAa,CAAC;QAChCqQ,eAAe,EAAErQ,IAAI,CAAC,mBAAmB,CAAC;QAC1CsQ,YAAY,EACV,OAAOtQ,IAAI,CAAC,gBAAgB,CAAC,KAAK,WAAW,GACzCA,IAAI,CAAC,gBAAgB,CAAC,CAACG,GAAG,CAACmP,WAAW,CAACvP,qBAAqB,CAAC,GAC7DM,SAAS;QACfkQ,WAAW,EAAEvQ,IAAI,CAAC,cAAc,CAAC;QACjCwQ,cAAc,EAAExQ,IAAI,CAAC,iBAAiB,CAAC;QACvCyQ,WAAW,EACT,OAAOzQ,IAAI,CAAC,cAAc,CAAC,KAAK,WAAW,GACvCA,IAAI,CAAC,cAAc,CAAC,CAACG,GAAG,CAAC4C,iBAAiB,CAAChD,qBAAqB,CAAC,GACjEM,SAAS;QACfqQ,WAAW,EACT,OAAO1Q,IAAI,CAAC,cAAc,CAAC,KAAK,WAAW,GACvCA,IAAI,CAAC,cAAc,CAAC,CAACG,GAAG,CAACoC,iBAAiB,CAACxC,qBAAqB,CAAC,GACjEM,SAAS;QACfsQ,mBAAmB,EAAE3Q,IAAI,CAAC,uBAAuB,CAAC;QAClD4Q,gBAAgB,EAAE5Q,IAAI,CAAC,oBAAoB,CAAC;QAC5C6Q,aAAa,EACX,OAAO7Q,IAAI,CAAC,iBAAiB,CAAC,KAAK,WAAW,GAC1CA,IAAI,CAAC,iBAAiB,CAAC,CAACG,GAAG,CAACmP,WAAW,CAACvP,qBAAqB,CAAC,GAC9DM,SAAS;QACfyQ,IAAI,EAAE9Q,IAAI,CAAC,MAAM;OAClB,CAAC;MACF;IACF;EAAC;EAAA,OAAA6O,eAAA;AAAA,EA1IkCpR,SAAS;AA6I9C;;;AAGA,WAAasT,aAAc,0BAAAC,YAAA;EAAApT,SAAA,CAAAmT,aAAA,EAAAC,YAAA;EAAA,IAAAC,QAAA,GAAAnT,YAAA,CAAAiT,aAAA;EAKzB;;;;;EAKA,SAAAA,cAAAG,MAAA,EAMC;IAAA,IAAAC,OAAA;IAAA,IALCC,OAAO,GAAAF,MAAA,CAAPE,OAAO;MACPpR,IAAI,GAAAkR,MAAA,CAAJlR,IAAI;IAAAP,eAAA,OAAAsR,aAAA;IAKJI,OAAA,GAAAF,QAAA,CAAAvR,IAAA;IACAyR,OAAA,CAAKC,OAAO,GAAGA,OAAO;IACtBD,OAAA,CAAKnR,IAAI,GAAGA,IAAI;IAEhBmR,OAAA,CAAKxR,aAAa,GAAG;MACnByR,OAAO,EAAE,SAAS;MAClBpR,IAAI,EAAE;KACP;IAAC,OAAAmR,OAAA;EACJ;EAEA;EAAAvR,YAAA,CAAAmR,aAAA;IAAAlR,GAAA;IAAAC,KAAA,EACA,SAAAC,sBAA6BC,IAAyB;MACpD;MACA,IAAI,OAAOA,IAAI,CAAC,SAAS,CAAC,KAAK,WAAW,EACxC,MAAM,IAAIC,KAAK,kDAAAC,MAAA,CAAkDF,IAAI,CAAE,CAAC;MAC1E,OAAO,IAAI+Q,aAAa,CAAC;QACvBK,OAAO,EAAEpR,IAAI,CAAC,SAAS,CAAC;QACxBA,IAAI,EAAEA,IAAI,CAAC,MAAM;OAClB,CAAC;MACF;IACF;EAAC;EAAA,OAAA+Q,aAAA;AAAA,EArCgCtT,SAAS;AAwC5C;;;AAGA,WAAa4T,SAAU,0BAAAC,YAAA;EAAA1T,SAAA,CAAAyT,SAAA,EAAAC,YAAA;EAAA,IAAAC,QAAA,GAAAzT,YAAA,CAAAuT,SAAA;EAgBrB;;;;;;EAMA,SAAAA,UAAAG,MAAA,EAQC;IAAA,IAAAC,OAAA;IAAA,IAPCC,MAAM,GAAAF,MAAA,CAANE,MAAM;MACNjI,KAAK,GAAA+H,MAAA,CAAL/H,KAAK;MACLC,IAAI,GAAA8H,MAAA,CAAJ9H,IAAI;IAAAjK,eAAA,OAAA4R,SAAA;IAMJI,OAAA,GAAAF,QAAA,CAAA7R,IAAA;IACA+R,OAAA,CAAKC,MAAM,GAAGA,MAAM;IACpBD,OAAA,CAAKhI,KAAK,GAAGA,KAAK;IAClBgI,OAAA,CAAK/H,IAAI,GAAGA,IAAI;IAEhB+H,OAAA,CAAK9R,aAAa,GAAG;MACnB+R,MAAM,EAAE,QAAQ;MAChBjI,KAAK,EAAE,OAAO;MACdC,IAAI,EAAE;KACP;IAAC,OAAA+H,OAAA;EACJ;EAEA;EAAA7R,YAAA,CAAAyR,SAAA;IAAAxR,GAAA;IAAAC,KAAA,EACA,SAAAC,sBAA6BC,IAAyB;MACpD;MACA,IAAI,OAAOA,IAAI,CAAC,QAAQ,CAAC,KAAK,WAAW,EACvC,MAAM,IAAIC,KAAK,iDAAAC,MAAA,CAAiDF,IAAI,CAAE,CAAC;MACzE,OAAO,IAAIqR,SAAS,CAAC;QACnBK,MAAM,EAAE1R,IAAI,CAAC,QAAQ,CAAC;QACtByJ,KAAK,EAAEzJ,IAAI,CAAC,OAAO,CAAC;QACpB0J,IAAI,EAAE1J,IAAI,CAAC,MAAM;OAClB,CAAC;MACF;IACF;EAAC;EAAA,OAAAqR,SAAA;AAAA,EAtD4B5T,SAAS;AAyDxC;;;AAGA,WAAasF,iBAAkB,0BAAA4O,YAAA;EAAA/T,SAAA,CAAAmF,iBAAA,EAAA4O,YAAA;EAAA,IAAAC,QAAA,GAAA9T,YAAA,CAAAiF,iBAAA;EAQ7B;;;;;EAKA,SAAAA,kBAAA8O,MAAA,EAA6D;IAAA,IAAAC,OAAA;IAAA,IAA/CjS,GAAG,GAAAgS,MAAA,CAAHhS,GAAG;MAAEC,KAAK,GAAA+R,MAAA,CAAL/R,KAAK;IAAAL,eAAA,OAAAsD,iBAAA;IACtB+O,OAAA,GAAAF,QAAA,CAAAlS,IAAA;IACAoS,OAAA,CAAKjS,GAAG,GAAGA,GAAG;IACdiS,OAAA,CAAKhS,KAAK,GAAGA,KAAK;IAElBgS,OAAA,CAAKnS,aAAa,GAAG;MACnBE,GAAG,EAAE,KAAK;MACVC,KAAK,EAAE;KACR;IAAC,OAAAgS,OAAA;EACJ;EAEA;EAAAlS,YAAA,CAAAmD,iBAAA;IAAAlD,GAAA;IAAAC,KAAA,EACA,SAAAC,sBAA6BC,IAAyB;MACpD;MACA,IAAI,OAAOA,IAAI,CAAC,KAAK,CAAC,KAAK,WAAW,EACpC,MAAM,IAAIC,KAAK,8CAAAC,MAAA,CAA8CF,IAAI,CAAE,CAAC;MACtE,IAAI,OAAOA,IAAI,CAAC,OAAO,CAAC,KAAK,WAAW,EACtC,MAAM,IAAIC,KAAK,gDAAAC,MAAA,CAAgDF,IAAI,CAAE,CAAC;MACxE,OAAO,IAAI+C,iBAAiB,CAAC;QAC3BlD,GAAG,EAAEG,IAAI,CAAC,KAAK,CAAC;QAChBF,KAAK,EAAEuR,SAAS,CAACtR,qBAAqB,CAACC,IAAI,CAAC,OAAO,CAAC;OACrD,CAAC;MACF;IACF;EAAC;EAAA,OAAA+C,iBAAA;AAAA,EApCoCtF,SAAS;AAuChD;;;AAGA,WAAasU,+BAAgC,0BAAAC,YAAA;EAAApU,SAAA,CAAAmU,+BAAA,EAAAC,YAAA;EAAA,IAAAC,QAAA,GAAAnU,YAAA,CAAAiU,+BAAA;EAM3C;;;;EAIA,SAAAA,gCAAAG,MAAA,EAAmD;IAAA,IAAAC,OAAA;IAAA,IAArCC,MAAM,GAAAF,MAAA,CAANE,MAAM;IAAA3S,eAAA,OAAAsS,+BAAA;IAClBI,OAAA,GAAAF,QAAA,CAAAvS,IAAA;IACAyS,OAAA,CAAKC,MAAM,GAAGA,MAAM;IAEpBD,OAAA,CAAKxS,aAAa,GAAG;MACnByS,MAAM,EAAE;KACT;IAAC,OAAAD,OAAA;EACJ;EAEA;EAAAvS,YAAA,CAAAmS,+BAAA;IAAAlS,GAAA;IAAAC,KAAA,EACA,SAAAC,sBACEC,IAAyB;MAEzB;MACA,IAAI,OAAOA,IAAI,CAAC,QAAQ,CAAC,KAAK,WAAW,EACvC,MAAM,IAAIC,KAAK,iDAAAC,MAAA,CAAiDF,IAAI,CAAE,CAAC;MACzE,OAAO,IAAI+R,+BAA+B,CAAC;QACzCK,MAAM,EAAEpS,IAAI,CAAC,QAAQ;OACtB,CAAC;MACF;IACF;EAAC;EAAA,OAAA+R,+BAAA;AAAA,EA9BkDtU,SAAS;AAiC9D;;;AAGA,WAAa4U,oBAAqB,0BAAAC,YAAA;EAAA1U,SAAA,CAAAyU,oBAAA,EAAAC,YAAA;EAAA,IAAAC,QAAA,GAAAzU,YAAA,CAAAuU,oBAAA;EAMhC;;;;EAIA,SAAAA,qBAAAG,MAAA,EAAiD;IAAA,IAAAC,OAAA;IAAA,IAAnClU,KAAK,GAAAiU,MAAA,CAALjU,KAAK;IAAAkB,eAAA,OAAA4S,oBAAA;IACjBI,OAAA,GAAAF,QAAA,CAAA7S,IAAA;IACA+S,OAAA,CAAKlU,KAAK,GAAGA,KAAK;IAElBkU,OAAA,CAAK9S,aAAa,GAAG;MACnBpB,KAAK,EAAE;KACR;IAAC,OAAAkU,OAAA;EACJ;EAEA;EAAA7S,YAAA,CAAAyS,oBAAA;IAAAxS,GAAA;IAAAC,KAAA,EACA,SAAAC,sBACEC,IAAyB;MAEzB;MACA,IAAI,OAAOA,IAAI,CAAC,OAAO,CAAC,KAAK,WAAW,EACtC,MAAM,IAAIC,KAAK,gDAAAC,MAAA,CAAgDF,IAAI,CAAE,CAAC;MACxE,OAAO,IAAIqS,oBAAoB,CAAC;QAC9B9T,KAAK,EAAEyB,IAAI,CAAC,OAAO;OACpB,CAAC;MACF;IACF;EAAC;EAAA,OAAAqS,oBAAA;AAAA,EA9BuC5U,SAAS;AAiCnD;;;;AAIA,WAAaiV,OAAQ,0BAAAC,YAAA;EAAA/U,SAAA,CAAA8U,OAAA,EAAAC,YAAA;EAAA,IAAAC,QAAA,GAAA9U,YAAA,CAAA4U,OAAA;EAWnB;;;;;EAKA,SAAAA,QAAAG,MAAA,EAMC;IAAA,IAAAC,OAAA;IAAA,IALCjT,GAAG,GAAAgT,MAAA,CAAHhT,GAAG;MACHC,KAAK,GAAA+S,MAAA,CAAL/S,KAAK;IAAAL,eAAA,OAAAiT,OAAA;IAKLI,OAAA,GAAAF,QAAA,CAAAlT,IAAA;IACAoT,OAAA,CAAKjT,GAAG,GACN,OAAOA,GAAG,KAAK,QAAQ,GACnB,IAAIwC,UAAU,CAAC7E,MAAM,CAAC8E,IAAI,CAACzC,GAAG,EAAE,QAAQ,CAAC,CAAC,GAC1CA,GAAG;IACTiT,OAAA,CAAKhT,KAAK,GACR,OAAOA,KAAK,KAAK,QAAQ,GACrB,IAAIuC,UAAU,CAAC7E,MAAM,CAAC8E,IAAI,CAACxC,KAAK,EAAE,QAAQ,CAAC,CAAC,GAC5CA,KAAK;IAEXgT,OAAA,CAAKnT,aAAa,GAAG;MACnBE,GAAG,EAAE,KAAK;MACVC,KAAK,EAAE;KACR;IAAC,OAAAgT,OAAA;EACJ;EAEA;EAAAlT,YAAA,CAAA8S,OAAA;IAAA7S,GAAA;IAAAC,KAAA,EACA,SAAAC,sBAA6BC,IAAyB;MACpD;MACA,OAAO,IAAI0S,OAAO,CAAC;QACjB7S,GAAG,EAAEG,IAAI,CAAC,KAAK,CAAC;QAChBF,KAAK,EAAEE,IAAI,CAAC,OAAO;OACpB,CAAC;MACF;IACF;EAAC;EAAA,OAAA0S,OAAA;AAAA,EA/C0BjV,SAAS;AAkDtC;;;AAGA,WAAasV,mCAAoC,0BAAAC,YAAA;EAAApV,SAAA,CAAAmV,mCAAA,EAAAC,YAAA;EAAA,IAAAC,QAAA,GAAAnV,YAAA,CAAAiV,mCAAA;EAQ/C;;;;;EAKA,SAAAA,oCAAAG,MAAA,EAAyE;IAAA,IAAAC,OAAA;IAAA,IAA3DvQ,KAAK,GAAAsQ,MAAA,CAALtQ,KAAK;MAAEwQ,GAAG,GAAAF,MAAA,CAAHE,GAAG;IAAA3T,eAAA,OAAAsT,mCAAA;IACtBI,OAAA,GAAAF,QAAA,CAAAvT,IAAA;IACAyT,OAAA,CAAKvQ,KAAK,GAAGA,KAAK;IAClBuQ,OAAA,CAAKC,GAAG,GAAGA,GAAG;IAEdD,OAAA,CAAKxT,aAAa,GAAG;MACnBiD,KAAK,EAAE,OAAO;MACdwQ,GAAG,EAAE;KACN;IAAC,OAAAD,OAAA;EACJ;EAEA;EAAAvT,YAAA,CAAAmT,mCAAA;IAAAlT,GAAA;IAAAC,KAAA,EACA,SAAAC,sBACEC,IAAyB;MAEzB;MACA,IAAI,OAAOA,IAAI,CAAC,OAAO,CAAC,KAAK,WAAW,EACtC,MAAM,IAAIC,KAAK,gDAAAC,MAAA,CAAgDF,IAAI,CAAE,CAAC;MACxE,IAAI,CAAC6C,KAAK,CAACC,OAAO,CAAC9C,IAAI,CAAC,KAAK,CAAC,CAAC,EAC7B,MAAM,IAAIC,KAAK,oDAAAC,MAAA,CACsCF,IAAI,CAAE,CAC1D;MACH,OAAO,IAAI+S,mCAAmC,CAAC;QAC7CnQ,KAAK,EAAE5C,IAAI,CAAC,OAAO,CAAC;QACpBoT,GAAG,EAAEpT,IAAI,CAAC,KAAK;OAChB,CAAC;MACF;IACF;EAAC;EAAA,OAAA+S,mCAAA;AAAA,EAxCsDtV,SAAS;AA2ClE;;;AAGA,WAAa4V,qBAAsB,0BAAAC,YAAA;EAAA1V,SAAA,CAAAyV,qBAAA,EAAAC,YAAA;EAAA,IAAAC,QAAA,GAAAzV,YAAA,CAAAuV,qBAAA;EAiBjC;;;;;;;EAOA,SAAAA,sBAAAG,MAAA,EAQC;IAAA,IAAAC,OAAA;IAAA,IAPCxM,KAAK,GAAAuM,MAAA,CAALvM,KAAK;MACLyM,KAAK,GAAAF,MAAA,CAALE,KAAK;MACLC,SAAS,GAAAH,MAAA,CAATG,SAAS;IAAAlU,eAAA,OAAA4T,qBAAA;IAMTI,OAAA,GAAAF,QAAA,CAAA7T,IAAA;IACA+T,OAAA,CAAKxM,KAAK,GAAGA,KAAK;IAClBwM,OAAA,CAAKC,KAAK,GACR,OAAOA,KAAK,KAAK,QAAQ,GACrB,IAAIrR,UAAU,CAAC7E,MAAM,CAAC8E,IAAI,CAACoR,KAAK,EAAE,QAAQ,CAAC,CAAC,GAC5CA,KAAK;IACXD,OAAA,CAAKE,SAAS,GAAGA,SAAS;IAE1BF,OAAA,CAAK9T,aAAa,GAAG;MACnBsH,KAAK,EAAE,OAAO;MACdyM,KAAK,EAAE,OAAO;MACdC,SAAS,EAAE;KACZ;IAAC,OAAAF,OAAA;EACJ;EAEA;EAAA7T,YAAA,CAAAyT,qBAAA;IAAAxT,GAAA;IAAAC,KAAA,EACA,SAAAC,sBACEC,IAAyB;MAEzB;MACA,IAAI,OAAOA,IAAI,CAAC,OAAO,CAAC,KAAK,WAAW,EACtC,MAAM,IAAIC,KAAK,gDAAAC,MAAA,CAAgDF,IAAI,CAAE,CAAC;MACxE,IAAI,OAAOA,IAAI,CAAC,OAAO,CAAC,KAAK,WAAW,EACtC,MAAM,IAAIC,KAAK,gDAAAC,MAAA,CAAgDF,IAAI,CAAE,CAAC;MACxE,IAAI,OAAOA,IAAI,CAAC,WAAW,CAAC,KAAK,WAAW,EAC1C,MAAM,IAAIC,KAAK,oDAAAC,MAAA,CACsCF,IAAI,CAAE,CAC1D;MACH,OAAO,IAAIqT,qBAAqB,CAAC;QAC/BpM,KAAK,EAAEjH,IAAI,CAAC,OAAO,CAAC;QACpB0T,KAAK,EAAE1T,IAAI,CAAC,OAAO,CAAC;QACpB2T,SAAS,EAAE3T,IAAI,CAAC,WAAW;OAC5B,CAAC;MACF;IACF;EAAC;EAAA,OAAAqT,qBAAA;AAAA,EAnEwC5V,SAAS;AAsEpD;;;AAGA,WAAamW,kBAAmB,0BAAAC,YAAA;EAAAjW,SAAA,CAAAgW,kBAAA,EAAAC,YAAA;EAAA,IAAAC,QAAA,GAAAhW,YAAA,CAAA8V,kBAAA;EA2I9B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAqCA,SAAAA,mBAAAG,MAAA,EAsDC;IAAA,IAAAC,OAAA;IAAA,IArDCC,WAAW,GAAAF,MAAA,CAAXE,WAAW;MACXC,SAAS,GAAAH,MAAA,CAATG,SAAS;MACTC,WAAW,GAAAJ,MAAA,CAAXI,WAAW;MACXC,WAAW,GAAAL,MAAA,CAAXK,WAAW;MACXC,gBAAgB,GAAAN,MAAA,CAAhBM,gBAAgB;MAChBC,oBAAoB,GAAAP,MAAA,CAApBO,oBAAoB;MACpBC,yBAAyB,GAAAR,MAAA,CAAzBQ,yBAAyB;MACzBC,kBAAkB,GAAAT,MAAA,CAAlBS,kBAAkB;MAClBC,UAAU,GAAAV,MAAA,CAAVU,UAAU;MACVC,wBAAwB,GAAAX,MAAA,CAAxBW,wBAAwB;MACxBC,2BAA2B,GAAAZ,MAAA,CAA3BY,2BAA2B;MAC3BC,sBAAsB,GAAAb,MAAA,CAAtBa,sBAAsB;MACtBC,uBAAuB,GAAAd,MAAA,CAAvBc,uBAAuB;MACvBC,qBAAqB,GAAAf,MAAA,CAArBe,qBAAqB;MACrBC,kBAAkB,GAAAhB,MAAA,CAAlBgB,kBAAkB;MAClBC,0BAA0B,GAAAjB,MAAA,CAA1BiB,0BAA0B;MAC1BC,qBAAqB,GAAAlB,MAAA,CAArBkB,qBAAqB;MACrBC,cAAc,GAAAnB,MAAA,CAAdmB,cAAc;MACdC,YAAY,GAAApB,MAAA,CAAZoB,YAAY;MACZC,6BAA6B,GAAArB,MAAA,CAA7BqB,6BAA6B;MAC7BC,cAAc,GAAAtB,MAAA,CAAdsB,cAAc;MACdC,eAAe,GAAAvB,MAAA,CAAfuB,eAAe;MACfC,iBAAiB,GAAAxB,MAAA,CAAjBwB,iBAAiB;MACjBC,YAAY,GAAAzB,MAAA,CAAZyB,YAAY;MACZC,oBAAoB,GAAA1B,MAAA,CAApB0B,oBAAoB;MACpBC,eAAe,GAAA3B,MAAA,CAAf2B,eAAe;IAAAjW,eAAA,OAAAmU,kBAAA;IA6BfI,OAAA,GAAAF,QAAA,CAAApU,IAAA;IACAsU,OAAA,CAAKC,WAAW,GAAGA,WAAW;IAC9BD,OAAA,CAAKE,SAAS,GAAGA,SAAS;IAC1BF,OAAA,CAAKG,WAAW,GAAGA,WAAW;IAC9BH,OAAA,CAAKI,WAAW,GAAGA,WAAW;IAC9BJ,OAAA,CAAKK,gBAAgB,GAAGA,gBAAgB;IACxCL,OAAA,CAAKM,oBAAoB,GAAGA,oBAAoB;IAChDN,OAAA,CAAKO,yBAAyB,GAAGA,yBAAyB;IAC1DP,OAAA,CAAKQ,kBAAkB,GAAGA,kBAAkB;IAC5CR,OAAA,CAAKS,UAAU,GAAGA,UAAU;IAC5BT,OAAA,CAAKU,wBAAwB,GAAGA,wBAAwB;IACxDV,OAAA,CAAKW,2BAA2B,GAAGA,2BAA2B;IAC9DX,OAAA,CAAKY,sBAAsB,GAAGA,sBAAsB;IACpDZ,OAAA,CAAKa,uBAAuB,GAAGA,uBAAuB;IACtDb,OAAA,CAAKc,qBAAqB,GAAGA,qBAAqB;IAClDd,OAAA,CAAKe,kBAAkB,GAAGA,kBAAkB;IAC5Cf,OAAA,CAAKgB,0BAA0B,GAAGA,0BAA0B;IAC5DhB,OAAA,CAAKiB,qBAAqB,GAAGA,qBAAqB;IAClDjB,OAAA,CAAKkB,cAAc,GAAGA,cAAc;IACpClB,OAAA,CAAKmB,YAAY,GAAGA,YAAY;IAChCnB,OAAA,CAAKoB,6BAA6B,GAAGA,6BAA6B;IAClEpB,OAAA,CAAKqB,cAAc,GAAGA,cAAc;IACpCrB,OAAA,CAAKsB,eAAe,GAAGA,eAAe;IACtCtB,OAAA,CAAKuB,iBAAiB,GAAGA,iBAAiB;IAC1CvB,OAAA,CAAKwB,YAAY,GAAGA,YAAY;IAChCxB,OAAA,CAAKyB,oBAAoB,GAAGA,oBAAoB;IAChDzB,OAAA,CAAK0B,eAAe,GAAGA,eAAe;IAEtC1B,OAAA,CAAKrU,aAAa,GAAG;MACnBsU,WAAW,EAAE,cAAc;MAC3BC,SAAS,EAAE,YAAY;MACvBC,WAAW,EAAE,cAAc;MAC3BC,WAAW,EAAE,cAAc;MAC3BC,gBAAgB,EAAE,oBAAoB;MACtCC,oBAAoB,EAAE,wBAAwB;MAC9CC,yBAAyB,EAAE,8BAA8B;MACzDC,kBAAkB,EAAE,uBAAuB;MAC3CC,UAAU,EAAE,YAAY;MACxBC,wBAAwB,EAAE,4BAA4B;MACtDC,2BAA2B,EAAE,+BAA+B;MAC5DC,sBAAsB,EAAE,0BAA0B;MAClDC,uBAAuB,EAAE,2BAA2B;MACpDC,qBAAqB,EAAE,yBAAyB;MAChDC,kBAAkB,EAAE,sBAAsB;MAC1CC,0BAA0B,EAAE,8BAA8B;MAC1DC,qBAAqB,EAAE,yBAAyB;MAChDC,cAAc,EAAE,iBAAiB;MACjCC,YAAY,EAAE,eAAe;MAC7BC,6BAA6B,EAAE,mCAAmC;MAClEC,cAAc,EAAE,kBAAkB;MAClCC,eAAe,EAAE,mBAAmB;MACpCC,iBAAiB,EAAE,qBAAqB;MACxCC,YAAY,EAAE,eAAe;MAC7BC,oBAAoB,EAAE,wBAAwB;MAC9CC,eAAe,EAAE;KAClB;IAAC,OAAA1B,OAAA;EACJ;EAEA;EAAApU,YAAA,CAAAgU,kBAAA;IAAA/T,GAAA;IAAAC,KAAA,EACA,SAAAC,sBAA6BC,IAAyB;MACpD;MACA,IAAI,OAAOA,IAAI,CAAC,cAAc,CAAC,KAAK,WAAW,EAC7C,MAAM,IAAIC,KAAK,uDAAAC,MAAA,CACyCF,IAAI,CAAE,CAC7D;MACH,IAAI,OAAOA,IAAI,CAAC,YAAY,CAAC,KAAK,WAAW,EAC3C,MAAM,IAAIC,KAAK,qDAAAC,MAAA,CACuCF,IAAI,CAAE,CAC3D;MACH,IAAI,OAAOA,IAAI,CAAC,cAAc,CAAC,KAAK,WAAW,EAC7C,MAAM,IAAIC,KAAK,uDAAAC,MAAA,CACyCF,IAAI,CAAE,CAC7D;MACH,IAAI,OAAOA,IAAI,CAAC,cAAc,CAAC,KAAK,WAAW,EAC7C,MAAM,IAAIC,KAAK,uDAAAC,MAAA,CACyCF,IAAI,CAAE,CAC7D;MACH,IAAI,OAAOA,IAAI,CAAC,oBAAoB,CAAC,KAAK,WAAW,EACnD,MAAM,IAAIC,KAAK,6DAAAC,MAAA,CAC+CF,IAAI,CAAE,CACnE;MACH,IAAI,OAAOA,IAAI,CAAC,wBAAwB,CAAC,KAAK,WAAW,EACvD,MAAM,IAAIC,KAAK,iEAAAC,MAAA,CACmDF,IAAI,CAAE,CACvE;MACH,IAAI,OAAOA,IAAI,CAAC,8BAA8B,CAAC,KAAK,WAAW,EAC7D,MAAM,IAAIC,KAAK,uEAAAC,MAAA,CACyDF,IAAI,CAAE,CAC7E;MACH,IAAI,OAAOA,IAAI,CAAC,uBAAuB,CAAC,KAAK,WAAW,EACtD,MAAM,IAAIC,KAAK,gEAAAC,MAAA,CACkDF,IAAI,CAAE,CACtE;MACH,OAAO,IAAI4T,kBAAkB,CAAC;QAC5BK,WAAW,EAAEjU,IAAI,CAAC,cAAc,CAAC;QACjCkU,SAAS,EAAElU,IAAI,CAAC,YAAY,CAAC;QAC7BmU,WAAW,EAAEnU,IAAI,CAAC,cAAc,CAAC;QACjCoU,WAAW,EAAEpU,IAAI,CAAC,cAAc,CAAC;QACjCqU,gBAAgB,EAAErU,IAAI,CAAC,oBAAoB,CAAC;QAC5CsU,oBAAoB,EAAEtU,IAAI,CAAC,wBAAwB,CAAC;QACpDuU,yBAAyB,EAAEvU,IAAI,CAAC,8BAA8B,CAAC;QAC/DwU,kBAAkB,EAAExU,IAAI,CAAC,uBAAuB,CAAC;QACjDyU,UAAU,EAAEzU,IAAI,CAAC,YAAY,CAAC;QAC9B0U,wBAAwB,EAAE1U,IAAI,CAAC,4BAA4B,CAAC;QAC5D2U,2BAA2B,EAAE3U,IAAI,CAAC,+BAA+B,CAAC;QAClE4U,sBAAsB,EAAE5U,IAAI,CAAC,0BAA0B,CAAC;QACxD6U,uBAAuB,EAAE7U,IAAI,CAAC,2BAA2B,CAAC;QAC1D8U,qBAAqB,EAAE9U,IAAI,CAAC,yBAAyB,CAAC;QACtD+U,kBAAkB,EAAE/U,IAAI,CAAC,sBAAsB,CAAC;QAChDgV,0BAA0B,EAAEhV,IAAI,CAAC,8BAA8B,CAAC;QAChEiV,qBAAqB,EAAEjV,IAAI,CAAC,yBAAyB,CAAC;QACtDkV,cAAc,EAAElV,IAAI,CAAC,iBAAiB,CAAC;QACvCmV,YAAY,EAAEnV,IAAI,CAAC,eAAe,CAAC;QACnCoV,6BAA6B,EAAEpV,IAAI,CAAC,mCAAmC,CAAC;QACxEqV,cAAc,EAAErV,IAAI,CAAC,kBAAkB,CAAC;QACxCsV,eAAe,EAAEtV,IAAI,CAAC,mBAAmB,CAAC;QAC1CuV,iBAAiB,EAAEvV,IAAI,CAAC,qBAAqB,CAAC;QAC9CwV,YAAY,EAAExV,IAAI,CAAC,eAAe,CAAC;QACnCyV,oBAAoB,EAAEzV,IAAI,CAAC,wBAAwB,CAAC;QACpD0V,eAAe,EAAE1V,IAAI,CAAC,mBAAmB;OAC1C,CAAC;MACF;IACF;EAAC;EAAA,OAAA4T,kBAAA;AAAA,EAjWqCnW,SAAS;AAoWjD;;;;AAIA,WAAakY,0BAA2B,0BAAAC,YAAA;EAAAhY,SAAA,CAAA+X,0BAAA,EAAAC,YAAA;EAAA,IAAAC,QAAA,GAAA/X,YAAA,CAAA6X,0BAAA;EA4EtC;;;;;;;;;;;;;;;;;;;;;;EAsBA,SAAAA,2BAAAG,MAAA,EA8BC;IAAA,IAAAC,OAAA;IAAA,IA7BCC,SAAS,GAAAF,MAAA,CAATE,SAAS;MACTC,GAAG,GAAAH,MAAA,CAAHG,GAAG;MACHC,gBAAgB,GAAAJ,MAAA,CAAhBI,gBAAgB;MAChBC,kBAAkB,GAAAL,MAAA,CAAlBK,kBAAkB;MAClBC,UAAU,GAAAN,MAAA,CAAVM,UAAU;MACVC,YAAY,GAAAP,MAAA,CAAZO,YAAY;MACZC,aAAa,GAAAR,MAAA,CAAbQ,aAAa;MACbC,cAAc,GAAAT,MAAA,CAAdS,cAAc;MACdC,gBAAgB,GAAAV,MAAA,CAAhBU,gBAAgB;MAChBC,SAAS,GAAAX,MAAA,CAATW,SAAS;MACTC,eAAe,GAAAZ,MAAA,CAAfY,eAAe;MACf5F,IAAI,GAAAgF,MAAA,CAAJhF,IAAI;MACJ6F,eAAe,GAAAb,MAAA,CAAfa,eAAe;MACfC,aAAa,GAAAd,MAAA,CAAbc,aAAa;IAAAnX,eAAA,OAAAkW,0BAAA;IAiBbI,OAAA,GAAAF,QAAA,CAAAnW,IAAA;IACAqW,OAAA,CAAKC,SAAS,GAAGA,SAAS;IAC1BD,OAAA,CAAKE,GAAG,GAAGA,GAAG;IACdF,OAAA,CAAKG,gBAAgB,GAAGA,gBAAgB;IACxCH,OAAA,CAAKI,kBAAkB,GAAGA,kBAAkB;IAC5CJ,OAAA,CAAKK,UAAU,GAAGA,UAAU;IAC5BL,OAAA,CAAKM,YAAY,GAAGA,YAAY;IAChCN,OAAA,CAAKO,aAAa,GAAGA,aAAa;IAClCP,OAAA,CAAKQ,cAAc,GAAGA,cAAc;IACpCR,OAAA,CAAKS,gBAAgB,GAAGA,gBAAgB;IACxCT,OAAA,CAAKU,SAAS,GAAGA,SAAS;IAC1BV,OAAA,CAAKW,eAAe,GAAGA,eAAe;IACtCX,OAAA,CAAKjF,IAAI,GAAGA,IAAI;IAChBiF,OAAA,CAAKY,eAAe,GAAGA,eAAe;IACtCZ,OAAA,CAAKa,aAAa,GAAGA,aAAa;IAElCb,OAAA,CAAKpW,aAAa,GAAG;MACnBqW,SAAS,EAAE,YAAY;MACvBC,GAAG,EAAE,KAAK;MACVC,gBAAgB,EAAE,mBAAmB;MACrCC,kBAAkB,EAAE,sBAAsB;MAC1CC,UAAU,EAAE,aAAa;MACzBC,YAAY,EAAE,eAAe;MAC7BC,aAAa,EAAE,gBAAgB;MAC/BC,cAAc,EAAE,iBAAiB;MACjCC,gBAAgB,EAAE,oBAAoB;MACtCC,SAAS,EAAE,YAAY;MACvBC,eAAe,EAAE,mBAAmB;MACpC5F,IAAI,EAAE,MAAM;MACZ6F,eAAe,EAAE,kBAAkB;MACnCC,aAAa,EAAE;KAChB;IAAC,OAAAb,OAAA;EACJ;EAEA;EAAAnW,YAAA,CAAA+V,0BAAA;IAAA9V,GAAA;IAAAC,KAAA,EACA,SAAAC,sBACEC,IAAyB;MAEzB;MACA,IAAI,OAAOA,IAAI,CAAC,YAAY,CAAC,KAAK,WAAW,EAC3C,MAAM,IAAIC,KAAK,qDAAAC,MAAA,CACuCF,IAAI,CAAE,CAC3D;MACH,IAAI,OAAOA,IAAI,CAAC,KAAK,CAAC,KAAK,WAAW,EACpC,MAAM,IAAIC,KAAK,8CAAAC,MAAA,CAA8CF,IAAI,CAAE,CAAC;MACtE,OAAO,IAAI2V,0BAA0B,CAAC;QACpCK,SAAS,EAAEhW,IAAI,CAAC,YAAY,CAAC;QAC7BiW,GAAG,EAAEjW,IAAI,CAAC,KAAK,CAAC;QAChBkW,gBAAgB,EAAElW,IAAI,CAAC,mBAAmB,CAAC;QAC3CmW,kBAAkB,EAAEnW,IAAI,CAAC,sBAAsB,CAAC;QAChDoW,UAAU,EAAEpW,IAAI,CAAC,aAAa,CAAC;QAC/BqW,YAAY,EAAErW,IAAI,CAAC,eAAe,CAAC;QACnCsW,aAAa,EAAEtW,IAAI,CAAC,gBAAgB,CAAC;QACrCuW,cAAc,EAAEvW,IAAI,CAAC,iBAAiB,CAAC;QACvCwW,gBAAgB,EACd,OAAOxW,IAAI,CAAC,oBAAoB,CAAC,KAAK,WAAW,GAC7CA,IAAI,CAAC,oBAAoB,CAAC,CAACG,GAAG,CAC5B4C,iBAAiB,CAAChD,qBAAqB,CACxC,GACDM,SAAS;QACfoW,SAAS,EACP,OAAOzW,IAAI,CAAC,YAAY,CAAC,KAAK,WAAW,GACrCA,IAAI,CAAC,YAAY,CAAC,CAACG,GAAG,CACpBwV,0BAA0B,CAAC5V,qBAAqB,CACjD,GACDM,SAAS;QACfqW,eAAe,EACb,OAAO1W,IAAI,CAAC,mBAAmB,CAAC,KAAK,WAAW,GAC5CA,IAAI,CAAC,mBAAmB,CAAC,CAACG,GAAG,CAC3BoC,iBAAiB,CAACxC,qBAAqB,CACxC,GACDM,SAAS;QACfyQ,IAAI,EAAE9Q,IAAI,CAAC,MAAM,CAAC;QAClB2W,eAAe,EAAE3W,IAAI,CAAC,kBAAkB,CAAC;QACzC4W,aAAa,EAAE5W,IAAI,CAAC,gBAAgB;OACrC,CAAC;MACF;IACF;EAAC;EAAA,OAAA2V,0BAAA;AAAA,EA9M6ClY,SAAS;AAiNzD;;;;;AAKA,WAAaoZ,2BAA4B,0BAAAC,YAAA;EAAAlZ,SAAA,CAAAiZ,2BAAA,EAAAC,YAAA;EAAA,IAAAC,QAAA,GAAAjZ,YAAA,CAAA+Y,2BAAA;EAWvC;;;;;EAKA,SAAAA,4BAAAG,MAAA,EAMC;IAAA,IAAAC,OAAA;IAAA,IALCC,eAAe,GAAAF,MAAA,CAAfE,eAAe;MACfC,iBAAiB,GAAAH,MAAA,CAAjBG,iBAAiB;IAAA1X,eAAA,OAAAoX,2BAAA;IAKjBI,OAAA,GAAAF,QAAA,CAAArX,IAAA;IACAuX,OAAA,CAAKC,eAAe,GAAGA,eAAe;IACtCD,OAAA,CAAKE,iBAAiB,GAAGA,iBAAiB;IAE1CF,OAAA,CAAKtX,aAAa,GAAG;MACnBuX,eAAe,EAAE,kBAAkB;MACnCC,iBAAiB,EAAE;KACpB;IAAC,OAAAF,OAAA;EACJ;EAEA;EAAArX,YAAA,CAAAiX,2BAAA;IAAAhX,GAAA;IAAAC,KAAA,EACA,SAAAC,sBACEC,IAAyB;MAEzB;MACA,IAAI,CAAC6C,KAAK,CAACC,OAAO,CAAC9C,IAAI,CAAC,kBAAkB,CAAC,CAAC,EAC1C,MAAM,IAAIC,KAAK,iEAAAC,MAAA,CACmDF,IAAI,CAAE,CACvE;MACH,IAAI,OAAOA,IAAI,CAAC,oBAAoB,CAAC,KAAK,WAAW,EACnD,MAAM,IAAIC,KAAK,6DAAAC,MAAA,CAC+CF,IAAI,CAAE,CACnE;MACH,OAAO,IAAI6W,2BAA2B,CAAC;QACrCK,eAAe,EAAElX,IAAI,CAAC,kBAAkB,CAAC;QACzCmX,iBAAiB,EAAEnX,IAAI,CAAC,oBAAoB;OAC7C,CAAC;MACF;IACF;EAAC;EAAA,OAAA6W,2BAAA;AAAA,EAnD8CpZ,SAAS;AAsD1D;;;AAGA,WAAa2Z,wBAAyB,0BAAAC,YAAA;EAAAzZ,SAAA,CAAAwZ,wBAAA,EAAAC,YAAA;EAAA,IAAAC,QAAA,GAAAxZ,YAAA,CAAAsZ,wBAAA;EAMpC;;;;EAIA,SAAAA,yBAAAG,MAAA,EAAsC;IAAA,IAAAC,OAAA;IAAA,IAAxBC,IAAI,GAAAF,MAAA,CAAJE,IAAI;IAAAhY,eAAA,OAAA2X,wBAAA;IAChBI,OAAA,GAAAF,QAAA,CAAA5X,IAAA;IACA8X,OAAA,CAAKC,IAAI,GAAGA,IAAI;IAEhBD,OAAA,CAAK7X,aAAa,GAAG;MACnB8X,IAAI,EAAE;KACP;IAAC,OAAAD,OAAA;EACJ;EAEA;EAAA5X,YAAA,CAAAwX,wBAAA;IAAAvX,GAAA;IAAAC,KAAA,EACA,SAAAC,sBACEC,IAAyB;MAEzB;MACA,IAAI,OAAOA,IAAI,CAAC,MAAM,CAAC,KAAK,WAAW,EACrC,MAAM,IAAIC,KAAK,+CAAAC,MAAA,CAA+CF,IAAI,CAAE,CAAC;MACvE,OAAO,IAAIoX,wBAAwB,CAAC;QAClCK,IAAI,EAAEzX,IAAI,CAAC,MAAM;OAClB,CAAC;MACF;IACF;EAAC;EAAA,OAAAoX,wBAAA;AAAA,EA9B2C3Z,SAAS;AAiCvD;;;AAGA,WAAaia,aAAc,0BAAAC,YAAA;EAAA/Z,SAAA,CAAA8Z,aAAA,EAAAC,YAAA;EAAA,IAAAC,QAAA,GAAA9Z,YAAA,CAAA4Z,aAAA;EAWzB;;;;;EAKA,SAAAA,cAAAG,MAAA,EAMC;IAAA,IAAAC,OAAA;IAAA,IALCzR,QAAQ,GAAAwR,MAAA,CAARxR,QAAQ;MACR0R,IAAI,GAAAF,MAAA,CAAJE,IAAI;IAAAtY,eAAA,OAAAiY,aAAA;IAKJI,OAAA,GAAAF,QAAA,CAAAlY,IAAA;IACAoY,OAAA,CAAKzR,QAAQ,GAAGA,QAAQ;IACxByR,OAAA,CAAKC,IAAI,GAAGA,IAAI;IAEhBD,OAAA,CAAKnY,aAAa,GAAG;MACnB0G,QAAQ,EAAE,WAAW;MACrB0R,IAAI,EAAE;KACP;IAAC,OAAAD,OAAA;EACJ;EAEA;EAAAlY,YAAA,CAAA8X,aAAA;IAAA7X,GAAA;IAAAC,KAAA,EACA,SAAAC,sBAA6BC,IAAyB;MACpD;MACA,IAAI,OAAOA,IAAI,CAAC,WAAW,CAAC,KAAK,WAAW,EAC1C,MAAM,IAAIC,KAAK,oDAAAC,MAAA,CACsCF,IAAI,CAAE,CAC1D;MACH,IAAI,OAAOA,IAAI,CAAC,MAAM,CAAC,KAAK,WAAW,EACrC,MAAM,IAAIC,KAAK,+CAAAC,MAAA,CAA+CF,IAAI,CAAE,CAAC;MACvE,OAAO,IAAI0X,aAAa,CAAC;QACvBrR,QAAQ,EAAEC,QAAQ,CAACvG,qBAAqB,CAACC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC3D+X,IAAI,EAAE/X,IAAI,CAAC,MAAM;OAClB,CAAC;MACF;IACF;EAAC;EAAA,OAAA0X,aAAA;AAAA,EA/CgCja,SAAS;AAkD5C;;;AAGA,WAAaua,qBAAsB,0BAAAC,YAAA;EAAAra,SAAA,CAAAoa,qBAAA,EAAAC,YAAA;EAAA,IAAAC,QAAA,GAAApa,YAAA,CAAAka,qBAAA;EAOjC;;;;;EAKA,SAAAA,sBAAAG,MAAA,EAIC;IAAA,IAAAC,OAAA;IAAA,IAHCC,gBAAgB,GAAAF,MAAA,CAAhBE,gBAAgB;IAAA5Y,eAAA,OAAAuY,qBAAA;IAIhBI,OAAA,GAAAF,QAAA,CAAAxY,IAAA;IACA0Y,OAAA,CAAKC,gBAAgB,GAAGA,gBAAgB;IAExCD,OAAA,CAAKzY,aAAa,GAAG;MACnB0Y,gBAAgB,EAAE;KACnB;IAAC,OAAAD,OAAA;EACJ;EAEA;EAAAxY,YAAA,CAAAoY,qBAAA;IAAAnY,GAAA;IAAAC,KAAA,EACA,SAAAC,sBACEC,IAAyB;MAEzB;MACA,OAAO,IAAIgY,qBAAqB,CAAC;QAC/BK,gBAAgB,EACd,OAAOrY,IAAI,CAAC,oBAAoB,CAAC,KAAK,WAAW,GAC7CA,IAAI,CAAC,oBAAoB,CAAC,CAACG,GAAG,CAC5BmD,wBAAwB,CAACvD,qBAAqB,CAC/C,GACDM;OACP,CAAC;MACF;IACF;EAAC;EAAA,OAAA2X,qBAAA;AAAA,EAvCwCva,SAAS;AA0CpD;;;AAGA,WAAa6a,eAAgB,0BAAAC,YAAA;EAAA3a,SAAA,CAAA0a,eAAA,EAAAC,YAAA;EAAA,IAAAC,QAAA,GAAA1a,YAAA,CAAAwa,eAAA;EAwC3B;;;;;;;;;;;;;;EAcA,SAAAA,gBAAAG,MAAA,EAgBC;IAAA,IAAAC,OAAA;IAAA,IAfCC,SAAS,GAAAF,MAAA,CAATE,SAAS;MACTC,oBAAoB,GAAAH,MAAA,CAApBG,oBAAoB;MACpBC,gBAAgB,GAAAJ,MAAA,CAAhBI,gBAAgB;MAChBC,qBAAqB,GAAAL,MAAA,CAArBK,qBAAqB;MACrBC,eAAe,GAAAN,MAAA,CAAfM,eAAe;MACfC,iBAAiB,GAAAP,MAAA,CAAjBO,iBAAiB;MACjBza,KAAK,GAAAka,MAAA,CAALla,KAAK;IAAAkB,eAAA,OAAA6Y,eAAA;IAULI,OAAA,GAAAF,QAAA,CAAA9Y,IAAA;IACAgZ,OAAA,CAAKC,SAAS,GAAGA,SAAS;IAC1BD,OAAA,CAAKE,oBAAoB,GAAGA,oBAAoB;IAChDF,OAAA,CAAKG,gBAAgB,GAAGA,gBAAgB;IACxCH,OAAA,CAAKI,qBAAqB,GAAGA,qBAAqB;IAClDJ,OAAA,CAAKK,eAAe,GAAGA,eAAe;IACtCL,OAAA,CAAKM,iBAAiB,GAAGA,iBAAiB;IAC1CN,OAAA,CAAKna,KAAK,GAAGA,KAAK;IAElBma,OAAA,CAAK/Y,aAAa,GAAG;MACnBgZ,SAAS,EAAE,YAAY;MACvBC,oBAAoB,EAAE,wBAAwB;MAC9CC,gBAAgB,EAAE,oBAAoB;MACtCC,qBAAqB,EAAE,yBAAyB;MAChDC,eAAe,EAAE,mBAAmB;MACpCC,iBAAiB,EAAE,qBAAqB;MACxCza,KAAK,EAAE;KACR;IAAC,OAAAma,OAAA;EACJ;EAEA;EAAA9Y,YAAA,CAAA0Y,eAAA;IAAAzY,GAAA;IAAAC,KAAA,EACA,SAAAC,sBAA6BC,IAAyB;MACpD;MACA,IAAI,CAAC6C,KAAK,CAACC,OAAO,CAAC9C,IAAI,CAAC,YAAY,CAAC,CAAC,EACpC,MAAM,IAAIC,KAAK,2DAAAC,MAAA,CAC6CF,IAAI,CAAE,CACjE;MACH,OAAO,IAAIsY,eAAe,CAAC;QACzBK,SAAS,EAAE3Y,IAAI,CAAC,YAAY,CAAC,CAACG,GAAG,CAC/B8Y,+BAA+B,CAAClZ,qBAAqB,CACtD;QACD6Y,oBAAoB,EAAE5Y,IAAI,CAAC,wBAAwB,CAAC;QACpD6Y,gBAAgB,EAAE7Y,IAAI,CAAC,oBAAoB,CAAC;QAC5C8Y,qBAAqB,EAAE9Y,IAAI,CAAC,yBAAyB,CAAC;QACtD+Y,eAAe,EACb,OAAO/Y,IAAI,CAAC,mBAAmB,CAAC,KAAK,WAAW,GAC5CkZ,mBAAmB,CAACnZ,qBAAqB,CAACC,IAAI,CAAC,mBAAmB,CAAC,CAAC,GACpEK,SAAS;QACf2Y,iBAAiB,EAAEhZ,IAAI,CAAC,qBAAqB,CAAC;QAC9CzB,KAAK,EAAEyB,IAAI,CAAC,OAAO;OACpB,CAAC;MACF;IACF;EAAC;EAAA,OAAAsY,eAAA;AAAA,EAjHkC7a,SAAS;AAoH9C;;;AAGA,WAAawb,+BAAgC,0BAAAE,YAAA;EAAAvb,SAAA,CAAAqb,+BAAA,EAAAE,YAAA;EAAA,IAAAC,QAAA,GAAAtb,YAAA,CAAAmb,+BAAA;EAM3C;;;;EAIA,SAAAA,gCAAAI,MAAA,EAA0D;IAAA,IAAAC,OAAA;IAAA,IAA5CjL,IAAI,GAAAgL,MAAA,CAAJhL,IAAI;IAAA5O,eAAA,OAAAwZ,+BAAA;IAChBK,OAAA,GAAAF,QAAA,CAAA1Z,IAAA;IACA4Z,OAAA,CAAKjL,IAAI,GAAGA,IAAI;IAEhBiL,OAAA,CAAK3Z,aAAa,GAAG;MACnB0O,IAAI,EAAE;KACP;IAAC,OAAAiL,OAAA;EACJ;EAEA;EAAA1Z,YAAA,CAAAqZ,+BAAA;IAAApZ,GAAA;IAAAC,KAAA,EACA,SAAAC,sBACEC,IAAyB;MAEzB;MACA,IAAI,CAAC6C,KAAK,CAACC,OAAO,CAAC9C,IAAI,CAAC,MAAM,CAAC,CAAC,EAC9B,MAAM,IAAIC,KAAK,qDAAAC,MAAA,CACuCF,IAAI,CAAE,CAC3D;MACH,OAAO,IAAIiZ,+BAA+B,CAAC;QACzC5K,IAAI,EAAErO,IAAI,CAAC,MAAM;OAClB,CAAC;MACF;IACF;EAAC;EAAA,OAAAiZ,+BAAA;AAAA,EAhCkDxb,SAAS;AAmC9D;;;AAGA,WAAa8b,gBAAiB,0BAAAC,YAAA;EAAA5b,SAAA,CAAA2b,gBAAA,EAAAC,YAAA;EAAA,IAAAC,QAAA,GAAA3b,YAAA,CAAAyb,gBAAA;EAkC5B;;;;;;;;;;;;EAYA,SAAAA,iBAAAG,MAAA,EAcC;IAAA,IAAAC,OAAA;IAAA,IAbCzF,SAAS,GAAAwF,MAAA,CAATxF,SAAS;MACTyE,SAAS,GAAAe,MAAA,CAATf,SAAS;MACTiB,OAAO,GAAAF,MAAA,CAAPE,OAAO;MACPC,aAAa,GAAAH,MAAA,CAAbG,aAAa;MACbd,eAAe,GAAAW,MAAA,CAAfX,eAAe;MACfe,aAAa,GAAAJ,MAAA,CAAbI,aAAa;IAAAra,eAAA,OAAA8Z,gBAAA;IASbI,OAAA,GAAAF,QAAA,CAAA/Z,IAAA;IACAia,OAAA,CAAKzF,SAAS,GAAGA,SAAS;IAC1ByF,OAAA,CAAKhB,SAAS,GAAGA,SAAS;IAC1BgB,OAAA,CAAKC,OAAO,GAAGA,OAAO;IACtBD,OAAA,CAAKE,aAAa,GAAGA,aAAa;IAClCF,OAAA,CAAKZ,eAAe,GAAGA,eAAe;IACtCY,OAAA,CAAKG,aAAa,GAAGA,aAAa;IAElCH,OAAA,CAAKha,aAAa,GAAG;MACnBuU,SAAS,EAAE,YAAY;MACvByE,SAAS,EAAE,YAAY;MACvBiB,OAAO,EAAE,SAAS;MAClBC,aAAa,EAAE,gBAAgB;MAC/Bd,eAAe,EAAE,mBAAmB;MACpCe,aAAa,EAAE;KAChB;IAAC,OAAAH,OAAA;EACJ;EAEA;EAAA/Z,YAAA,CAAA2Z,gBAAA;IAAA1Z,GAAA;IAAAC,KAAA,EACA,SAAAC,sBAA6BC,IAAyB;MACpD;MACA,IAAI,OAAOA,IAAI,CAAC,YAAY,CAAC,KAAK,WAAW,EAC3C,MAAM,IAAIC,KAAK,qDAAAC,MAAA,CACuCF,IAAI,CAAE,CAC3D;MACH,IAAI,CAAC6C,KAAK,CAACC,OAAO,CAAC9C,IAAI,CAAC,YAAY,CAAC,CAAC,EACpC,MAAM,IAAIC,KAAK,2DAAAC,MAAA,CAC6CF,IAAI,CAAE,CACjE;MACH,IAAI,OAAOA,IAAI,CAAC,SAAS,CAAC,KAAK,WAAW,EACxC,MAAM,IAAIC,KAAK,kDAAAC,MAAA,CAAkDF,IAAI,CAAE,CAAC;MAC1E,OAAO,IAAIuZ,gBAAgB,CAAC;QAC1BrF,SAAS,EAAElU,IAAI,CAAC,YAAY,CAAC;QAC7B2Y,SAAS,EAAE3Y,IAAI,CAAC,YAAY,CAAC,CAACG,GAAG,CAC/B4Z,8BAA8B,CAACha,qBAAqB,CACrD;QACD6Z,OAAO,EAAE5Z,IAAI,CAAC,SAAS,CAAC;QACxB6Z,aAAa,EACX,OAAO7Z,IAAI,CAAC,gBAAgB,CAAC,KAAK,WAAW,GACzCga,uBAAuB,CAACja,qBAAqB,CAC3CC,IAAI,CAAC,gBAAgB,CAAC,CACvB,GACDK,SAAS;QACf0Y,eAAe,EACb,OAAO/Y,IAAI,CAAC,mBAAmB,CAAC,KAAK,WAAW,GAC5CkZ,mBAAmB,CAACnZ,qBAAqB,CAACC,IAAI,CAAC,mBAAmB,CAAC,CAAC,GACpEK,SAAS;QACfyZ,aAAa,EACX,OAAO9Z,IAAI,CAAC,gBAAgB,CAAC,KAAK,WAAW,GACzCgY,qBAAqB,CAACjY,qBAAqB,CAACC,IAAI,CAAC,gBAAgB,CAAC,CAAC,GACnEK;OACP,CAAC;MACF;IACF;EAAC;EAAA,OAAAkZ,gBAAA;AAAA,EAlHmC9b,SAAS;AAqH/C;;;AAGA,WAAayb,mBAAoB,0BAAAe,YAAA;EAAArc,SAAA,CAAAsb,mBAAA,EAAAe,YAAA;EAAA,IAAAC,QAAA,GAAApc,YAAA,CAAAob,mBAAA;EAwB/B;;;;;;;;;;EAUA,SAAAA,oBAAAiB,MAAA,EAUC;IAAA,IAAAC,OAAA;IAAA,IATCC,MAAM,GAAAF,MAAA,CAANE,MAAM;MACNC,aAAa,GAAAH,MAAA,CAAbG,aAAa;MACbC,WAAW,GAAAJ,MAAA,CAAXI,WAAW;MACXC,WAAW,GAAAL,MAAA,CAAXK,WAAW;IAAA/a,eAAA,OAAAyZ,mBAAA;IAOXkB,OAAA,GAAAF,QAAA,CAAAxa,IAAA;IACA0a,OAAA,CAAKC,MAAM,GAAGA,MAAM;IACpBD,OAAA,CAAKE,aAAa,GAAGA,aAAa;IAClCF,OAAA,CAAKG,WAAW,GAAGA,WAAW;IAC9BH,OAAA,CAAKI,WAAW,GAAGA,WAAW;IAE9BJ,OAAA,CAAKza,aAAa,GAAG;MACnB0a,MAAM,EAAE,QAAQ;MAChBC,aAAa,EAAE,gBAAgB;MAC/BC,WAAW,EAAE,cAAc;MAC3BC,WAAW,EAAE;KACd;IAAC,OAAAJ,OAAA;EACJ;EAEA;EAAAxa,YAAA,CAAAsZ,mBAAA;IAAArZ,GAAA;IAAAC,KAAA,EACA,SAAAC,sBAA6BC,IAAyB;MACpD;MACA,OAAO,IAAIkZ,mBAAmB,CAAC;QAC7BmB,MAAM,EAAEra,IAAI,CAAC,QAAQ,CAAC;QACtBsa,aAAa,EAAEta,IAAI,CAAC,gBAAgB,CAAC;QACrCua,WAAW,EAAEva,IAAI,CAAC,cAAc,CAAC;QACjCwa,WAAW,EAAExa,IAAI,CAAC,cAAc;OACjC,CAAC;MACF;IACF;EAAC;EAAA,OAAAkZ,mBAAA;AAAA,EArEsCzb,SAAS;AAwElD;;;AAGA,WAAasc,8BAA+B,0BAAAU,YAAA;EAAA7c,SAAA,CAAAmc,8BAAA,EAAAU,YAAA;EAAA,IAAAC,QAAA,GAAA5c,YAAA,CAAAic,8BAAA;EA2C1C;;;;;;;;;;;;;;;;;;;;;EAqBA,SAAAA,+BAAAY,MAAA,EAcC;IAAA,IAAAC,OAAA;IAAA,IAbCC,UAAU,GAAAF,MAAA,CAAVE,UAAU;MACVC,cAAc,GAAAH,MAAA,CAAdG,cAAc;MACdC,iBAAiB,GAAAJ,MAAA,CAAjBI,iBAAiB;MACjBC,QAAQ,GAAAL,MAAA,CAARK,QAAQ;MACRC,cAAc,GAAAN,MAAA,CAAdM,cAAc;MACdC,wBAAwB,GAAAP,MAAA,CAAxBO,wBAAwB;IAAAzb,eAAA,OAAAsa,8BAAA;IASxBa,OAAA,GAAAF,QAAA,CAAAhb,IAAA;IACAkb,OAAA,CAAKC,UAAU,GAAGA,UAAU;IAC5BD,OAAA,CAAKE,cAAc,GAAGA,cAAc;IACpCF,OAAA,CAAKG,iBAAiB,GAAGA,iBAAiB;IAC1CH,OAAA,CAAKI,QAAQ,GAAGA,QAAQ;IACxBJ,OAAA,CAAKK,cAAc,GAAGA,cAAc;IACpCL,OAAA,CAAKM,wBAAwB,GAAGA,wBAAwB;IAExDN,OAAA,CAAKjb,aAAa,GAAG;MACnBkb,UAAU,EAAE,aAAa;MACzBC,cAAc,EAAE,kBAAkB;MAClCC,iBAAiB,EAAE,qBAAqB;MACxCC,QAAQ,EAAE,WAAW;MACrBC,cAAc,EAAE,iBAAiB;MACjCC,wBAAwB,EAAE;KAC3B;IAAC,OAAAN,OAAA;EACJ;EAEA;EAAAhb,YAAA,CAAAma,8BAAA;IAAAla,GAAA;IAAAC,KAAA,EACA,SAAAC,sBACEC,IAAyB;MAEzB;MACA,IAAI,CAAC6C,KAAK,CAACC,OAAO,CAAC9C,IAAI,CAAC,aAAa,CAAC,CAAC,EACrC,MAAM,IAAIC,KAAK,4DAAAC,MAAA,CAC8CF,IAAI,CAAE,CAClE;MACH,OAAO,IAAI+Z,8BAA8B,CAAC;QACxCc,UAAU,EAAE7a,IAAI,CAAC,aAAa,CAAC,CAACG,GAAG,CACjCgb,yBAAyB,CAACpb,qBAAqB,CAChD;QACD+a,cAAc,EAAE9a,IAAI,CAAC,kBAAkB,CAAC;QACxC+a,iBAAiB,EAAE/a,IAAI,CAAC,qBAAqB,CAAC;QAC9Cgb,QAAQ,EAAEhb,IAAI,CAAC,WAAW,CAAC;QAC3Bib,cAAc,EAAEjb,IAAI,CAAC,iBAAiB,CAAC;QACvCkb,wBAAwB,EACtB,OAAOlb,IAAI,CAAC,4BAA4B,CAAC,KAAK,WAAW,GACrDob,gCAAgC,CAACrb,qBAAqB,CACpDC,IAAI,CAAC,4BAA4B,CAAC,CACnC,GACDK;OACP,CAAC;MACF;IACF;EAAC;EAAA,OAAA0Z,8BAAA;AAAA,EA1HiDtc,SAAS;AA6H7D;;;AAGA,WAAa0d,yBAA0B,0BAAAE,YAAA;EAAAzd,SAAA,CAAAud,yBAAA,EAAAE,YAAA;EAAA,IAAAC,QAAA,GAAAxd,YAAA,CAAAqd,yBAAA;EAqCrC;;;;;;;;;;;;;;;;;;;EAmBA,SAAAA,0BAAAI,MAAA,EAYC;IAAA,IAAAC,OAAA;IAAA,IAXCC,SAAS,GAAAF,MAAA,CAATE,SAAS;MACTV,iBAAiB,GAAAQ,MAAA,CAAjBR,iBAAiB;MACjBW,SAAS,GAAAH,MAAA,CAATG,SAAS;MACTC,sBAAsB,GAAAJ,MAAA,CAAtBI,sBAAsB;MACtBT,wBAAwB,GAAAK,MAAA,CAAxBL,wBAAwB;IAAAzb,eAAA,OAAA0b,yBAAA;IAQxBK,OAAA,GAAAF,QAAA,CAAA5b,IAAA;IACA8b,OAAA,CAAKC,SAAS,GAAGA,SAAS;IAC1BD,OAAA,CAAKT,iBAAiB,GAAGA,iBAAiB;IAC1CS,OAAA,CAAKE,SAAS,GAAGA,SAAS;IAC1BF,OAAA,CAAKG,sBAAsB,GAAGA,sBAAsB;IACpDH,OAAA,CAAKN,wBAAwB,GAAGA,wBAAwB;IAExDM,OAAA,CAAK7b,aAAa,GAAG;MACnB8b,SAAS,EAAE,YAAY;MACvBV,iBAAiB,EAAE,qBAAqB;MACxCW,SAAS,EAAE,YAAY;MACvBC,sBAAsB,EAAE,2BAA2B;MACnDT,wBAAwB,EAAE;KAC3B;IAAC,OAAAM,OAAA;EACJ;EAEA;EAAA5b,YAAA,CAAAub,yBAAA;IAAAtb,GAAA;IAAAC,KAAA,EACA,SAAAC,sBACEC,IAAyB;MAEzB;MACA,IAAI,OAAOA,IAAI,CAAC,YAAY,CAAC,KAAK,WAAW,EAC3C,MAAM,IAAIC,KAAK,qDAAAC,MAAA,CACuCF,IAAI,CAAE,CAC3D;MACH,OAAO,IAAImb,yBAAyB,CAAC;QACnCM,SAAS,EAAE9F,0BAA0B,CAAC5V,qBAAqB,CACzDC,IAAI,CAAC,YAAY,CAAC,CACnB;QACD+a,iBAAiB,EAAE/a,IAAI,CAAC,qBAAqB,CAAC;QAC9C0b,SAAS,EACP,OAAO1b,IAAI,CAAC,YAAY,CAAC,KAAK,WAAW,GACrC4b,8BAA8B,CAAC7b,qBAAqB,CAClDC,IAAI,CAAC,YAAY,CAAC,CACnB,GACDK,SAAS;QACfsb,sBAAsB,EAAE3b,IAAI,CAAC,2BAA2B,CAAC;QACzDkb,wBAAwB,EACtB,OAAOlb,IAAI,CAAC,4BAA4B,CAAC,KAAK,WAAW,GACrDob,gCAAgC,CAACrb,qBAAqB,CACpDC,IAAI,CAAC,4BAA4B,CAAC,CACnC,GACDK;OACP,CAAC;MACF;IACF;EAAC;EAAA,OAAA8a,yBAAA;AAAA,EAlH4C1d,SAAS;AAqHxD;;;;;;;;;;;AAWA,WAAa2d,gCAAiC,0BAAAS,YAAA;EAAAje,SAAA,CAAAwd,gCAAA,EAAAS,YAAA;EAAA,IAAAC,QAAA,GAAAhe,YAAA,CAAAsd,gCAAA;EAyC5C;;;;;;;;;;;;;;;EAeA,SAAAA,iCAAAW,MAAA,EAgBC;IAAA,IAAAC,OAAA;IAAA,IAfChO,QAAQ,GAAA+N,MAAA,CAAR/N,QAAQ;MACRnK,SAAS,GAAAkY,MAAA,CAATlY,SAAS;MACToK,IAAI,GAAA8N,MAAA,CAAJ9N,IAAI;MACJgO,aAAa,GAAAF,MAAA,CAAbE,aAAa;MACbjd,MAAM,GAAA+c,MAAA,CAAN/c,MAAM;MACNkN,KAAK,GAAA6P,MAAA,CAAL7P,KAAK;MACLgQ,YAAY,GAAAH,MAAA,CAAZG,YAAY;IAAAzc,eAAA,OAAA2b,gCAAA;IAUZY,OAAA,GAAAF,QAAA,CAAApc,IAAA;IACAsc,OAAA,CAAKhO,QAAQ,GAAGA,QAAQ;IACxBgO,OAAA,CAAKnY,SAAS,GAAGA,SAAS;IAC1BmY,OAAA,CAAK/N,IAAI,GAAGA,IAAI;IAChB+N,OAAA,CAAKC,aAAa,GAAGA,aAAa;IAClCD,OAAA,CAAKhd,MAAM,GAAGA,MAAM;IACpBgd,OAAA,CAAK9P,KAAK,GAAGA,KAAK;IAClB8P,OAAA,CAAKE,YAAY,GAAGA,YAAY;IAEhCF,OAAA,CAAKrc,aAAa,GAAG;MACnBqO,QAAQ,EAAE,UAAU;MACpBnK,SAAS,EAAE,YAAY;MACvBoK,IAAI,EAAE,MAAM;MACZgO,aAAa,EAAE,gBAAgB;MAC/Bjd,MAAM,EAAE,QAAQ;MAChBkN,KAAK,EAAE,OAAO;MACdgQ,YAAY,EAAE;KACf;IAAC,OAAAF,OAAA;EACJ;EAEA;EAAApc,YAAA,CAAAwb,gCAAA;IAAAvb,GAAA;IAAAC,KAAA,EACA,SAAAC,sBACEC,IAAyB;MAEzB;MACA,OAAO,IAAIob,gCAAgC,CAAC;QAC1CpN,QAAQ,EAAEhO,IAAI,CAAC,UAAU,CAAC;QAC1B6D,SAAS,EACP,OAAO7D,IAAI,CAAC,YAAY,CAAC,KAAK,WAAW,GACrCA,IAAI,CAAC,YAAY,CAAC,CAACG,GAAG,CACpBmE,yBAAyB,CAACvE,qBAAqB,CAChD,GACDM,SAAS;QACf4N,IAAI,EAAEjO,IAAI,CAAC,MAAM,CAAC;QAClBic,aAAa,EACX,OAAOjc,IAAI,CAAC,gBAAgB,CAAC,KAAK,WAAW,GACzCA,IAAI,CAAC,gBAAgB,CAAC,CAACG,GAAG,CACxBqH,qBAAqB,CAACzH,qBAAqB,CAC5C,GACDM,SAAS;QACfrB,MAAM,EAAEgB,IAAI,CAAC,QAAQ,CAAC;QACtBkM,KAAK,EACH,OAAOlM,IAAI,CAAC,OAAO,CAAC,KAAK,WAAW,GAChCA,IAAI,CAAC,OAAO,CAAC,CAACG,GAAG,CAACqL,YAAY,CAACzL,qBAAqB,CAAC,GACrDM,SAAS;QACf6b,YAAY,EAAElc,IAAI,CAAC,gBAAgB;OACpC,CAAC;MACF;IACF;EAAC;EAAA,OAAAob,gCAAA;AAAA,EAzHmD3d,SAAS;AA4H/D;;;;;AAKA,WAAauc,uBAAwB,0BAAAmC,YAAA;EAAAve,SAAA,CAAAoc,uBAAA,EAAAmC,YAAA;EAAA,IAAAC,QAAA,GAAAte,YAAA,CAAAkc,uBAAA;EA2BnC;;;;;;;;;EASA,SAAAA,wBAAAqC,MAAA,EAYC;IAAA,IAAAC,OAAA;IAAA,IAXC1D,oBAAoB,GAAAyD,MAAA,CAApBzD,oBAAoB;MACpBE,qBAAqB,GAAAuD,MAAA,CAArBvD,qBAAqB;MACrBE,iBAAiB,GAAAqD,MAAA,CAAjBrD,iBAAiB;MACjBuD,WAAW,GAAAF,MAAA,CAAXE,WAAW;MACXC,UAAU,GAAAH,MAAA,CAAVG,UAAU;IAAA/c,eAAA,OAAAua,uBAAA;IAQVsC,OAAA,GAAAF,QAAA,CAAA1c,IAAA;IACA4c,OAAA,CAAK1D,oBAAoB,GAAGA,oBAAoB;IAChD0D,OAAA,CAAKxD,qBAAqB,GAAGA,qBAAqB;IAClDwD,OAAA,CAAKtD,iBAAiB,GAAGA,iBAAiB;IAC1CsD,OAAA,CAAKC,WAAW,GAAGA,WAAW;IAC9BD,OAAA,CAAKE,UAAU,GAAGA,UAAU;IAE5BF,OAAA,CAAK3c,aAAa,GAAG;MACnBiZ,oBAAoB,EAAE,wBAAwB;MAC9CE,qBAAqB,EAAE,yBAAyB;MAChDE,iBAAiB,EAAE,qBAAqB;MACxCuD,WAAW,EAAE,eAAe;MAC5BC,UAAU,EAAE;KACb;IAAC,OAAAF,OAAA;EACJ;EAEA;EAAA1c,YAAA,CAAAoa,uBAAA;IAAAna,GAAA;IAAAC,KAAA,EACA,SAAAC,sBACEC,IAAyB;MAEzB;MACA,OAAO,IAAIga,uBAAuB,CAAC;QACjCpB,oBAAoB,EAAE5Y,IAAI,CAAC,wBAAwB,CAAC;QACpD8Y,qBAAqB,EAAE9Y,IAAI,CAAC,yBAAyB,CAAC;QACtDgZ,iBAAiB,EAAEhZ,IAAI,CAAC,qBAAqB,CAAC;QAC9Cuc,WAAW,EAAEvc,IAAI,CAAC,eAAe,CAAC;QAClCwc,UAAU,EAAExc,IAAI,CAAC,cAAc;OAChC,CAAC;MACF;IACF;EAAC;EAAA,OAAAga,uBAAA;AAAA,EA9E0Cvc,SAAS;AAiFtD;;;AAGA,WAAagf,yBAA0B,0BAAAC,YAAA;EAAA9e,SAAA,CAAA6e,yBAAA,EAAAC,YAAA;EAAA,IAAAC,QAAA,GAAA7e,YAAA,CAAA2e,yBAAA;EA+BrC;;;;;;;;;EASA,SAAAA,0BAAAG,MAAA,EAcC;IAAA,IAAAC,OAAA;IAAA,IAbCjN,EAAE,GAAAgN,MAAA,CAAFhN,EAAE;MACFkN,cAAc,GAAAF,MAAA,CAAdE,cAAc;MACdC,aAAa,GAAAH,MAAA,CAAbG,aAAa;MACbC,cAAc,GAAAJ,MAAA,CAAdI,cAAc;MACdC,aAAa,GAAAL,MAAA,CAAbK,aAAa;MACbC,YAAY,GAAAN,MAAA,CAAZM,YAAY;IAAAzd,eAAA,OAAAgd,yBAAA;IASZI,OAAA,GAAAF,QAAA,CAAAjd,IAAA;IACAmd,OAAA,CAAKjN,EAAE,GAAGA,EAAE;IACZiN,OAAA,CAAKC,cAAc,GAAGA,cAAc;IACpCD,OAAA,CAAKE,aAAa,GAAGA,aAAa;IAClCF,OAAA,CAAKG,cAAc,GAAGA,cAAc;IACpCH,OAAA,CAAKI,aAAa,GAAGA,aAAa;IAClCJ,OAAA,CAAKK,YAAY,GAAGA,YAAY;IAEhCL,OAAA,CAAKld,aAAa,GAAG;MACnBiQ,EAAE,EAAE,IAAI;MACRkN,cAAc,EAAE,iBAAiB;MACjCC,aAAa,EAAE,gBAAgB;MAC/BC,cAAc,EAAE,iBAAiB;MACjCC,aAAa,EAAE,iBAAiB;MAChCC,YAAY,EAAE;KACf;IAAC,OAAAL,OAAA;EACJ;EAEA;EAAAjd,YAAA,CAAA6c,yBAAA;IAAA5c,GAAA;IAAAC,KAAA,EACA,SAAAC,sBACEC,IAAyB;MAEzB;MACA,IAAI,OAAOA,IAAI,CAAC,IAAI,CAAC,KAAK,WAAW,EACnC,MAAM,IAAIC,KAAK,6CAAAC,MAAA,CAA6CF,IAAI,CAAE,CAAC;MACrE,OAAO,IAAIyc,yBAAyB,CAAC;QACnC7M,EAAE,EAAE5P,IAAI,CAAC,IAAI,CAAC;QACd8c,cAAc,EACZ,OAAO9c,IAAI,CAAC,iBAAiB,CAAC,KAAK,WAAW,GAC1CA,IAAI,CAAC,iBAAiB,CAAC,CAACG,GAAG,CAACuX,aAAa,CAAC3X,qBAAqB,CAAC,GAChEM,SAAS;QACf0c,aAAa,EAAE/c,IAAI,CAAC,gBAAgB,CAAC;QACrCgd,cAAc,EACZ,OAAOhd,IAAI,CAAC,iBAAiB,CAAC,KAAK,WAAW,GAC1CA,IAAI,CAAC,iBAAiB,CAAC,CAACG,GAAG,CAACmG,QAAQ,CAACvG,qBAAqB,CAAC,GAC3DM,SAAS;QACf4c,aAAa,EAAEjd,IAAI,CAAC,iBAAiB,CAAC;QACtCkd,YAAY,EACV,OAAOld,IAAI,CAAC,eAAe,CAAC,KAAK,WAAW,GACxCA,IAAI,CAAC,eAAe,CAAC,CAACG,GAAG,CACvB2F,yBAAyB,CAAC/F,qBAAqB,CAChD,GACDM;OACP,CAAC;MACF;IACF;EAAC;EAAA,OAAAoc,yBAAA;AAAA,EApG4Chf,SAAS;AAuGxD;;;;AAIA,WAAame,8BAA+B,0BAAAuB,YAAA;EAAAvf,SAAA,CAAAge,8BAAA,EAAAuB,YAAA;EAAA,IAAAC,QAAA,GAAAtf,YAAA,CAAA8d,8BAAA;EAqC1C;;;;;;;;;;;EAWA,SAAAA,+BAAAyB,MAAA,EAgBC;IAAA,IAAAC,OAAA;IAAA,IAfCC,mBAAmB,GAAAF,MAAA,CAAnBE,mBAAmB;MACnBC,oBAAoB,GAAAH,MAAA,CAApBG,oBAAoB;MACpBC,qBAAqB,GAAAJ,MAAA,CAArBI,qBAAqB;MACrBC,sBAAsB,GAAAL,MAAA,CAAtBK,sBAAsB;MACtBC,UAAU,GAAAN,MAAA,CAAVM,UAAU;MACVC,YAAY,GAAAP,MAAA,CAAZO,YAAY;MACZ/M,aAAa,GAAAwM,MAAA,CAAbxM,aAAa;IAAApR,eAAA,OAAAmc,8BAAA;IAUb0B,OAAA,GAAAF,QAAA,CAAA1d,IAAA;IACA4d,OAAA,CAAKC,mBAAmB,GACtB,OAAOA,mBAAmB,KAAK,QAAQ,GACnC,IAAIlb,UAAU,CAAC7E,MAAM,CAAC8E,IAAI,CAACib,mBAAmB,EAAE,QAAQ,CAAC,CAAC,GAC1DA,mBAAmB;IACzBD,OAAA,CAAKE,oBAAoB,GAAGA,oBAAoB;IAChDF,OAAA,CAAKG,qBAAqB,GACxB,OAAOA,qBAAqB,KAAK,QAAQ,GACrC,IAAIpb,UAAU,CAAC7E,MAAM,CAAC8E,IAAI,CAACmb,qBAAqB,EAAE,QAAQ,CAAC,CAAC,GAC5DA,qBAAqB;IAC3BH,OAAA,CAAKI,sBAAsB,GAAGA,sBAAsB;IACpDJ,OAAA,CAAKK,UAAU,GAAGA,UAAU;IAC5BL,OAAA,CAAKM,YAAY,GACf,OAAOA,YAAY,KAAK,QAAQ,GAC5B,IAAIvb,UAAU,CAAC7E,MAAM,CAAC8E,IAAI,CAACsb,YAAY,EAAE,QAAQ,CAAC,CAAC,GACnDA,YAAY;IAClBN,OAAA,CAAKzM,aAAa,GAAGA,aAAa;IAElCyM,OAAA,CAAK3d,aAAa,GAAG;MACnB4d,mBAAmB,EAAE,uBAAuB;MAC5CC,oBAAoB,EAAE,wBAAwB;MAC9CC,qBAAqB,EAAE,0BAA0B;MACjDC,sBAAsB,EAAE,2BAA2B;MACnDC,UAAU,EAAE,aAAa;MACzBC,YAAY,EAAE,gBAAgB;MAC9B/M,aAAa,EAAE;KAChB;IAAC,OAAAyM,OAAA;EACJ;EAEA;EAAA1d,YAAA,CAAAgc,8BAAA;IAAA/b,GAAA;IAAAC,KAAA,EACA,SAAAC,sBACEC,IAAyB;MAEzB;MACA,OAAO,IAAI4b,8BAA8B,CAAC;QACxC2B,mBAAmB,EAAEvd,IAAI,CAAC,uBAAuB,CAAC;QAClDwd,oBAAoB,EAClB,OAAOxd,IAAI,CAAC,wBAAwB,CAAC,KAAK,WAAW,GACjDA,IAAI,CAAC,wBAAwB,CAAC,CAACG,GAAG,CAChCsc,yBAAyB,CAAC1c,qBAAqB,CAChD,GACDM,SAAS;QACfod,qBAAqB,EAAEzd,IAAI,CAAC,0BAA0B,CAAC;QACvD0d,sBAAsB,EACpB,OAAO1d,IAAI,CAAC,2BAA2B,CAAC,KAAK,WAAW,GACpDA,IAAI,CAAC,2BAA2B,CAAC,CAACG,GAAG,CACnCsc,yBAAyB,CAAC1c,qBAAqB,CAChD,GACDM,SAAS;QACfsd,UAAU,EACR,OAAO3d,IAAI,CAAC,aAAa,CAAC,KAAK,WAAW,GACtCA,IAAI,CAAC,aAAa,CAAC,CAACG,GAAG,CACrByb,8BAA8B,CAAC7b,qBAAqB,CACrD,GACDM,SAAS;QACfud,YAAY,EAAE5d,IAAI,CAAC,gBAAgB,CAAC;QACpC6Q,aAAa,EACX,OAAO7Q,IAAI,CAAC,iBAAiB,CAAC,KAAK,WAAW,GAC1CA,IAAI,CAAC,iBAAiB,CAAC,CAACG,GAAG,CACzBsc,yBAAyB,CAAC1c,qBAAqB,CAChD,GACDM;OACP,CAAC;MACF;IACF;EAAC;EAAA,OAAAub,8BAAA;AAAA,EAjIiDne,SAAS;AAoI7D;;;AAGA,WAAaogB,UAAW,0BAAAC,YAAA;EAAAlgB,SAAA,CAAAigB,UAAA,EAAAC,YAAA;EAAA,IAAAC,QAAA,GAAAjgB,YAAA,CAAA+f,UAAA;EAWtB;;;;;EAKA,SAAAA,WAAAG,MAAA,EAMC;IAAA,IAAAC,OAAA;IAAA,IALC7M,OAAO,GAAA4M,MAAA,CAAP5M,OAAO;MACP8M,UAAU,GAAAF,MAAA,CAAVE,UAAU;IAAAze,eAAA,OAAAoe,UAAA;IAKVI,OAAA,GAAAF,QAAA,CAAAre,IAAA;IACAue,OAAA,CAAK7M,OAAO,GAAGA,OAAO;IACtB6M,OAAA,CAAKC,UAAU,GACb,OAAOA,UAAU,KAAK,QAAQ,GAC1B,IAAI7b,UAAU,CAAC7E,MAAM,CAAC8E,IAAI,CAAC4b,UAAU,EAAE,QAAQ,CAAC,CAAC,GACjDA,UAAU;IAEhBD,OAAA,CAAKte,aAAa,GAAG;MACnByR,OAAO,EAAE,SAAS;MAClB8M,UAAU,EAAE;KACb;IAAC,OAAAD,OAAA;EACJ;EAEA;EAAAre,YAAA,CAAAie,UAAA;IAAAhe,GAAA;IAAAC,KAAA,EACA,SAAAC,sBAA6BC,IAAyB;MACpD;MACA,IAAI,OAAOA,IAAI,CAAC,SAAS,CAAC,KAAK,WAAW,EACxC,MAAM,IAAIC,KAAK,kDAAAC,MAAA,CAAkDF,IAAI,CAAE,CAAC;MAC1E,IAAI,OAAOA,IAAI,CAAC,YAAY,CAAC,KAAK,WAAW,EAC3C,MAAM,IAAIC,KAAK,qDAAAC,MAAA,CACuCF,IAAI,CAAE,CAC3D;MACH,OAAO,IAAI6d,UAAU,CAAC;QACpBzM,OAAO,EAAE+M,iBAAiB,CAACpe,qBAAqB,CAACC,IAAI,CAAC,SAAS,CAAC,CAAC;QACjEke,UAAU,EAAEle,IAAI,CAAC,YAAY;OAC9B,CAAC;MACF;IACF;EAAC;EAAA,OAAA6d,UAAA;AAAA,EAlD6BpgB,SAAS;AAqDzC;;;AAGA,WAAa0gB,iBAAkB,0BAAAC,YAAA;EAAAxgB,SAAA,CAAAugB,iBAAA,EAAAC,YAAA;EAAA,IAAAC,QAAA,GAAAvgB,YAAA,CAAAqgB,iBAAA;EA4B7B;;;;;;;;;;EAUA,SAAAA,kBAAAG,MAAA,EAYC;IAAA,IAAAC,OAAA;IAAA,IAXCC,sBAAsB,GAAAF,MAAA,CAAtBE,sBAAsB;MACtBC,kBAAkB,GAAAH,MAAA,CAAlBG,kBAAkB;MAClBC,iBAAiB,GAAAJ,MAAA,CAAjBI,iBAAiB;MACjBC,cAAc,GAAAL,MAAA,CAAdK,cAAc;MACdC,gBAAgB,GAAAN,MAAA,CAAhBM,gBAAgB;IAAAnf,eAAA,OAAA0e,iBAAA;IAQhBI,OAAA,GAAAF,QAAA,CAAA3e,IAAA;IACA6e,OAAA,CAAKC,sBAAsB,GACzB,OAAOA,sBAAsB,KAAK,QAAQ,GACtC,IAAInc,UAAU,CAAC7E,MAAM,CAAC8E,IAAI,CAACkc,sBAAsB,EAAE,QAAQ,CAAC,CAAC,GAC7DA,sBAAsB;IAC5BD,OAAA,CAAKE,kBAAkB,GAAGA,kBAAkB;IAC5CF,OAAA,CAAKG,iBAAiB,GAAGA,iBAAiB;IAC1CH,OAAA,CAAKI,cAAc,GAAGA,cAAc;IACpCJ,OAAA,CAAKK,gBAAgB,GACnB,OAAOA,gBAAgB,KAAK,QAAQ,GAChC,IAAIvc,UAAU,CAAC7E,MAAM,CAAC8E,IAAI,CAACsc,gBAAgB,EAAE,QAAQ,CAAC,CAAC,GACvDA,gBAAgB;IAEtBL,OAAA,CAAK5e,aAAa,GAAG;MACnB6e,sBAAsB,EAAE,wBAAwB;MAChDC,kBAAkB,EAAE,oBAAoB;MACxCC,iBAAiB,EAAE,mBAAmB;MACtCC,cAAc,EAAE,gBAAgB;MAChCC,gBAAgB,EAAE;KACnB;IAAC,OAAAL,OAAA;EACJ;EAEA;EAAA3e,YAAA,CAAAue,iBAAA;IAAAte,GAAA;IAAAC,KAAA,EACA,SAAAC,sBAA6BC,IAAyB;MACpD;MACA,IAAI,OAAOA,IAAI,CAAC,wBAAwB,CAAC,KAAK,WAAW,EACvD,MAAM,IAAIC,KAAK,iEAAAC,MAAA,CACmDF,IAAI,CAAE,CACvE;MACH,IAAI,OAAOA,IAAI,CAAC,oBAAoB,CAAC,KAAK,WAAW,EACnD,MAAM,IAAIC,KAAK,6DAAAC,MAAA,CAC+CF,IAAI,CAAE,CACnE;MACH,IAAI,OAAOA,IAAI,CAAC,mBAAmB,CAAC,KAAK,WAAW,EAClD,MAAM,IAAIC,KAAK,4DAAAC,MAAA,CAC8CF,IAAI,CAAE,CAClE;MACH,IAAI,OAAOA,IAAI,CAAC,gBAAgB,CAAC,KAAK,WAAW,EAC/C,MAAM,IAAIC,KAAK,yDAAAC,MAAA,CAC2CF,IAAI,CAAE,CAC/D;MACH,IAAI,OAAOA,IAAI,CAAC,kBAAkB,CAAC,KAAK,WAAW,EACjD,MAAM,IAAIC,KAAK,2DAAAC,MAAA,CAC6CF,IAAI,CAAE,CACjE;MACH,OAAO,IAAIme,iBAAiB,CAAC;QAC3BK,sBAAsB,EAAExe,IAAI,CAAC,wBAAwB,CAAC;QACtDye,kBAAkB,EAAEze,IAAI,CAAC,oBAAoB,CAAC;QAC9C0e,iBAAiB,EAAE1e,IAAI,CAAC,mBAAmB,CAAC;QAC5C2e,cAAc,EAAE3e,IAAI,CAAC,gBAAgB,CAAC;QACtC4e,gBAAgB,EAAE5e,IAAI,CAAC,kBAAkB;OAC1C,CAAC;MACF;IACF;EAAC;EAAA,OAAAme,iBAAA;AAAA,EAxGoC1gB,SAAS;AA2GhD;;;AAGA,WAAaohB,cAAe,0BAAAC,YAAA;EAAAlhB,SAAA,CAAAihB,cAAA,EAAAC,YAAA;EAAA,IAAAC,QAAA,GAAAjhB,YAAA,CAAA+gB,cAAA;EAgB1B;;;;;;EAMA,SAAAA,eAAAG,MAAA,EAQC;IAAA,IAAAC,OAAA;IAAA,IAPCC,YAAY,GAAAF,MAAA,CAAZE,YAAY;MACZC,WAAW,GAAAH,MAAA,CAAXG,WAAW;MACXC,UAAU,GAAAJ,MAAA,CAAVI,UAAU;IAAA3f,eAAA,OAAAof,cAAA;IAMVI,OAAA,GAAAF,QAAA,CAAArf,IAAA;IACAuf,OAAA,CAAKC,YAAY,GAAGA,YAAY;IAChCD,OAAA,CAAKE,WAAW,GAAGA,WAAW;IAC9BF,OAAA,CAAKG,UAAU,GAAGA,UAAU;IAE5BH,OAAA,CAAKtf,aAAa,GAAG;MACnBuf,YAAY,EAAE,eAAe;MAC7BC,WAAW,EAAE,cAAc;MAC3BC,UAAU,EAAE;KACb;IAAC,OAAAH,OAAA;EACJ;EAEA;EAAArf,YAAA,CAAAif,cAAA;IAAAhf,GAAA;IAAAC,KAAA,EACA,SAAAC,sBAA6BC,IAAyB;MACpD;MACA,IAAI,OAAOA,IAAI,CAAC,eAAe,CAAC,KAAK,WAAW,EAC9C,MAAM,IAAIC,KAAK,wDAAAC,MAAA,CAC0CF,IAAI,CAAE,CAC9D;MACH,IAAI,OAAOA,IAAI,CAAC,cAAc,CAAC,KAAK,WAAW,EAC7C,MAAM,IAAIC,KAAK,uDAAAC,MAAA,CACyCF,IAAI,CAAE,CAC7D;MACH,IAAI,OAAOA,IAAI,CAAC,aAAa,CAAC,KAAK,WAAW,EAC5C,MAAM,IAAIC,KAAK,sDAAAC,MAAA,CACwCF,IAAI,CAAE,CAC5D;MACH,OAAO,IAAI6e,cAAc,CAAC;QACxBK,YAAY,EAAElf,IAAI,CAAC,eAAe,CAAC;QACnCmf,WAAW,EAAEnf,IAAI,CAAC,cAAc,CAAC;QACjCof,UAAU,EAAEpf,IAAI,CAAC,aAAa;OAC/B,CAAC;MACF;IACF;EAAC;EAAA,OAAA6e,cAAA;AAAA,EAhEiCphB,SAAS;AAmE7C;;;AAGA,WAAayH,YAAa,0BAAAma,YAAA;EAAAzhB,SAAA,CAAAsH,YAAA,EAAAma,YAAA;EAAA,IAAAC,QAAA,GAAAxhB,YAAA,CAAAoH,YAAA;EAQxB;;;;;EAKA,SAAAA,aAAAqa,MAAA,EAA6D;IAAA,IAAAC,OAAA;IAAA,IAA/C3f,GAAG,GAAA0f,MAAA,CAAH1f,GAAG;MAAEC,KAAK,GAAAyf,MAAA,CAALzf,KAAK;IAAAL,eAAA,OAAAyF,YAAA;IACtBsa,OAAA,GAAAF,QAAA,CAAA5f,IAAA;IACA8f,OAAA,CAAK3f,GAAG,GAAGA,GAAG;IACd2f,OAAA,CAAK1f,KAAK,GAAGA,KAAK;IAElB0f,OAAA,CAAK7f,aAAa,GAAG;MACnBE,GAAG,EAAE,KAAK;MACVC,KAAK,EAAE;KACR;IAAC,OAAA0f,OAAA;EACJ;EAEA;EAAA5f,YAAA,CAAAsF,YAAA;IAAArF,GAAA;IAAAC,KAAA,EACA,SAAAC,sBAA6BC,IAAyB;MACpD;MACA,IAAI,OAAOA,IAAI,CAAC,KAAK,CAAC,KAAK,WAAW,EACpC,MAAM,IAAIC,KAAK,8CAAAC,MAAA,CAA8CF,IAAI,CAAE,CAAC;MACtE,IAAI,OAAOA,IAAI,CAAC,OAAO,CAAC,KAAK,WAAW,EACtC,MAAM,IAAIC,KAAK,gDAAAC,MAAA,CAAgDF,IAAI,CAAE,CAAC;MACxE,OAAO,IAAIkF,YAAY,CAAC;QACtBrF,GAAG,EAAEG,IAAI,CAAC,KAAK,CAAC;QAChBF,KAAK,EAAEiQ,SAAS,CAAChQ,qBAAqB,CAACC,IAAI,CAAC,OAAO,CAAC;OACrD,CAAC;MACF;IACF;EAAC;EAAA,OAAAkF,YAAA;AAAA,EApC+BzH,SAAS;AAuC3C;;;AAGA,WAAasS,SAAU,0BAAA0P,YAAA;EAAA7hB,SAAA,CAAAmS,SAAA,EAAA0P,YAAA;EAAA,IAAAC,QAAA,GAAA5hB,YAAA,CAAAiS,SAAA;EAgBrB;;;;;;EAMA,SAAAA,UAAA4P,MAAA,EAQC;IAAA,IAAAC,OAAA;IAAA,IAPCpW,IAAI,GAAAmW,MAAA,CAAJnW,IAAI;MACJC,KAAK,GAAAkW,MAAA,CAALlW,KAAK;MACLC,IAAI,GAAAiW,MAAA,CAAJjW,IAAI;IAAAjK,eAAA,OAAAsQ,SAAA;IAMJ6P,OAAA,GAAAF,QAAA,CAAAhgB,IAAA;IACAkgB,OAAA,CAAKpW,IAAI,GAAGA,IAAI;IAChBoW,OAAA,CAAKnW,KAAK,GAAGA,KAAK;IAClBmW,OAAA,CAAKlW,IAAI,GAAGA,IAAI;IAEhBkW,OAAA,CAAKjgB,aAAa,GAAG;MACnB6J,IAAI,EAAE,MAAM;MACZC,KAAK,EAAE,OAAO;MACdC,IAAI,EAAE;KACP;IAAC,OAAAkW,OAAA;EACJ;EAEA;EAAAhgB,YAAA,CAAAmQ,SAAA;IAAAlQ,GAAA;IAAAC,KAAA,EACA,SAAAC,sBAA6BC,IAAyB;MACpD;MACA,IAAI,OAAOA,IAAI,CAAC,MAAM,CAAC,KAAK,WAAW,EACrC,MAAM,IAAIC,KAAK,+CAAAC,MAAA,CAA+CF,IAAI,CAAE,CAAC;MACvE,IAAI,OAAOA,IAAI,CAAC,OAAO,CAAC,KAAK,WAAW,EACtC,MAAM,IAAIC,KAAK,gDAAAC,MAAA,CAAgDF,IAAI,CAAE,CAAC;MACxE,IAAI,OAAOA,IAAI,CAAC,MAAM,CAAC,KAAK,WAAW,EACrC,MAAM,IAAIC,KAAK,+CAAAC,MAAA,CAA+CF,IAAI,CAAE,CAAC;MACvE,OAAO,IAAI+P,SAAS,CAAC;QACnBvG,IAAI,EAAExJ,IAAI,CAAC,MAAM,CAAC;QAClByJ,KAAK,EAAEzJ,IAAI,CAAC,OAAO,CAAC;QACpB0J,IAAI,EAAE1J,IAAI,CAAC,MAAM;OAClB,CAAC;MACF;IACF;EAAC;EAAA,OAAA+P,SAAA;AAAA,EA1D4BtS,SAAS;AA6DxC;;;;AAIA,WAAaoiB,iDAAkD,0BAAAC,YAAA;EAAAliB,SAAA,CAAAiiB,iDAAA,EAAAC,YAAA;EAAA,IAAAC,QAAA,GAAAjiB,YAAA,CAAA+hB,iDAAA;EAG7D;;;;EAIA,SAAAA,kDAAAG,MAAA,EAAyE;IAAA,IAAAC,OAAA;IAAA,IAA3DC,MAAM,GAAAF,MAAA,CAANE,MAAM;IAAAzgB,eAAA,OAAAogB,iDAAA;IAClBI,OAAA,GAAAF,QAAA,CAAArgB,IAAA;IACAugB,OAAA,CAAKC,MAAM,GAAGA,MAAM;IAEpBD,OAAA,CAAKtgB,aAAa,GAAG;MACnBugB,MAAM,EAAE;KACT;IAAC,OAAAD,OAAA;EACJ;EAEA;EAAArgB,YAAA,CAAAigB,iDAAA;IAAAhgB,GAAA;IAAAC,KAAA,EACA,SAAAC,sBACEC,IAAyB;MAEzB;MACA,IAAI,CAAC6C,KAAK,CAACC,OAAO,CAAC9C,IAAI,CAAC,QAAQ,CAAC,CAAC,EAChC,MAAM,IAAIC,KAAK,uDAAAC,MAAA,CACyCF,IAAI,CAAE,CAC7D;MACH,OAAO,IAAI6f,iDAAiD,CAAC;QAC3DK,MAAM,EAAElgB,IAAI,CAAC,QAAQ,CAAC,CAACG,GAAG,CACxB4S,mCAAmC,CAAChT,qBAAqB;OAE5D,CAAC;MACF;IACF;EAAC;EAAA,OAAA8f,iDAAA;AAAA,EA/BoEpiB,SAAS;AAkChF;;;;AAIA,WAAa0iB,6BAA8B,0BAAAC,YAAA;EAAAxiB,SAAA,CAAAuiB,6BAAA,EAAAC,YAAA;EAAA,IAAAC,QAAA,GAAAviB,YAAA,CAAAqiB,6BAAA;EAoCzC;;;;;;;;;;;;;;EAcA,SAAAA,8BAAAG,MAAA,EAcC;IAAA,IAAAC,OAAA;IAAA,IAbCC,gBAAgB,GAAAF,MAAA,CAAhBE,gBAAgB;MAChBC,GAAG,GAAAH,MAAA,CAAHG,GAAG;MACHC,WAAW,GAAAJ,MAAA,CAAXI,WAAW;MACXC,SAAS,GAAAL,MAAA,CAATK,SAAS;MACTzM,SAAS,GAAAoM,MAAA,CAATpM,SAAS;MACT0M,MAAM,GAAAN,MAAA,CAANM,MAAM;IAAAnhB,eAAA,OAAA0gB,6BAAA;IASNI,OAAA,GAAAF,QAAA,CAAA3gB,IAAA;IACA6gB,OAAA,CAAKC,gBAAgB,GAAGA,gBAAgB;IACxCD,OAAA,CAAKE,GAAG,GAAGA,GAAG;IACdF,OAAA,CAAKG,WAAW,GACd,OAAOA,WAAW,KAAK,QAAQ,GAC3B,IAAIre,UAAU,CAAC7E,MAAM,CAAC8E,IAAI,CAACoe,WAAW,EAAE,QAAQ,CAAC,CAAC,GAClDA,WAAW;IACjBH,OAAA,CAAKI,SAAS,GAAGA,SAAS;IAC1BJ,OAAA,CAAKrM,SAAS,GAAGA,SAAS;IAC1BqM,OAAA,CAAKK,MAAM,GAAGA,MAAM;IAEpBL,OAAA,CAAK5gB,aAAa,GAAG;MACnB6gB,gBAAgB,EAAE,mBAAmB;MACrCC,GAAG,EAAE,KAAK;MACVC,WAAW,EAAE,cAAc;MAC3BC,SAAS,EAAE,YAAY;MACvBzM,SAAS,EAAE,YAAY;MACvB0M,MAAM,EAAE;KACT;IAAC,OAAAL,OAAA;EACJ;EAEA;EAAA3gB,YAAA,CAAAugB,6BAAA;IAAAtgB,GAAA;IAAAC,KAAA,EACA,SAAAC,sBACEC,IAAyB;MAEzB;MACA,IAAI,OAAOA,IAAI,CAAC,mBAAmB,CAAC,KAAK,WAAW,EAClD,MAAM,IAAIC,KAAK,4DAAAC,MAAA,CAC8CF,IAAI,CAAE,CAClE;MACH,IAAI,OAAOA,IAAI,CAAC,KAAK,CAAC,KAAK,WAAW,EACpC,MAAM,IAAIC,KAAK,8CAAAC,MAAA,CAA8CF,IAAI,CAAE,CAAC;MACtE,IAAI,OAAOA,IAAI,CAAC,cAAc,CAAC,KAAK,WAAW,EAC7C,MAAM,IAAIC,KAAK,uDAAAC,MAAA,CACyCF,IAAI,CAAE,CAC7D;MACH,IAAI,OAAOA,IAAI,CAAC,YAAY,CAAC,KAAK,WAAW,EAC3C,MAAM,IAAIC,KAAK,qDAAAC,MAAA,CACuCF,IAAI,CAAE,CAC3D;MACH,IAAI,OAAOA,IAAI,CAAC,YAAY,CAAC,KAAK,WAAW,EAC3C,MAAM,IAAIC,KAAK,qDAAAC,MAAA,CACuCF,IAAI,CAAE,CAC3D;MACH,IAAI,OAAOA,IAAI,CAAC,SAAS,CAAC,KAAK,WAAW,EACxC,MAAM,IAAIC,KAAK,kDAAAC,MAAA,CAAkDF,IAAI,CAAE,CAAC;MAC1E,OAAO,IAAImgB,6BAA6B,CAAC;QACvCK,gBAAgB,EAAExgB,IAAI,CAAC,mBAAmB,CAAC;QAC3CygB,GAAG,EAAEzgB,IAAI,CAAC,KAAK,CAAC;QAChB0gB,WAAW,EAAE1gB,IAAI,CAAC,cAAc,CAAC;QACjC2gB,SAAS,EAAE3gB,IAAI,CAAC,YAAY,CAAC;QAC7BkU,SAAS,EAAElU,IAAI,CAAC,YAAY,CAAC;QAC7B4gB,MAAM,EAAE5gB,IAAI,CAAC,SAAS;OACvB,CAAC;MACF;IACF;EAAC;EAAA,OAAAmgB,6BAAA;AAAA,EAxHgD1iB,SAAS;AA2H5D;;;AAGA,WAAaojB,wBAAyB,0BAAAC,YAAA;EAAAljB,SAAA,CAAAijB,wBAAA,EAAAC,YAAA;EAAA,IAAAC,QAAA,GAAAjjB,YAAA,CAAA+iB,wBAAA;EA6BpC;;;;;;;;;;;EAWA,SAAAA,yBAAAG,MAAA,EAYC;IAAA,IAAAC,OAAA;IAAA,IAXCC,GAAG,GAAAF,MAAA,CAAHE,GAAG;MACHxN,KAAK,GAAAsN,MAAA,CAALtN,KAAK;MACLyN,QAAQ,GAAAH,MAAA,CAARG,QAAQ;MACRxN,SAAS,GAAAqN,MAAA,CAATrN,SAAS;MACTyN,QAAQ,GAAAJ,MAAA,CAARI,QAAQ;IAAA3hB,eAAA,OAAAohB,wBAAA;IAQRI,OAAA,GAAAF,QAAA,CAAArhB,IAAA;IACAuhB,OAAA,CAAKC,GAAG,GAAGA,GAAG;IACdD,OAAA,CAAKvN,KAAK,GACR,OAAOA,KAAK,KAAK,QAAQ,GACrB,IAAIrR,UAAU,CAAC7E,MAAM,CAAC8E,IAAI,CAACoR,KAAK,EAAE,QAAQ,CAAC,CAAC,GAC5CA,KAAK;IACXuN,OAAA,CAAKE,QAAQ,GACX,OAAOA,QAAQ,KAAK,QAAQ,GACxB,IAAI9e,UAAU,CAAC7E,MAAM,CAAC8E,IAAI,CAAC6e,QAAQ,EAAE,QAAQ,CAAC,CAAC,GAC/CA,QAAQ;IACdF,OAAA,CAAKtN,SAAS,GAAGA,SAAS;IAC1BsN,OAAA,CAAKG,QAAQ,GAAGA,QAAQ;IAExBH,OAAA,CAAKthB,aAAa,GAAG;MACnBuhB,GAAG,EAAE,KAAK;MACVxN,KAAK,EAAE,OAAO;MACdyN,QAAQ,EAAE,UAAU;MACpBxN,SAAS,EAAE,WAAW;MACtByN,QAAQ,EAAE;KACX;IAAC,OAAAH,OAAA;EACJ;EAEA;EAAArhB,YAAA,CAAAihB,wBAAA;IAAAhhB,GAAA;IAAAC,KAAA,EACA,SAAAC,sBACEC,IAAyB;MAEzB;MACA,IAAI,OAAOA,IAAI,CAAC,KAAK,CAAC,KAAK,WAAW,EACpC,MAAM,IAAIC,KAAK,8CAAAC,MAAA,CAA8CF,IAAI,CAAE,CAAC;MACtE,IAAI,OAAOA,IAAI,CAAC,OAAO,CAAC,KAAK,WAAW,EACtC,MAAM,IAAIC,KAAK,gDAAAC,MAAA,CAAgDF,IAAI,CAAE,CAAC;MACxE,IAAI,OAAOA,IAAI,CAAC,UAAU,CAAC,KAAK,WAAW,EACzC,MAAM,IAAIC,KAAK,mDAAAC,MAAA,CAAmDF,IAAI,CAAE,CAAC;MAC3E,IAAI,OAAOA,IAAI,CAAC,WAAW,CAAC,KAAK,WAAW,EAC1C,MAAM,IAAIC,KAAK,oDAAAC,MAAA,CACsCF,IAAI,CAAE,CAC1D;MACH,OAAO,IAAI6gB,wBAAwB,CAAC;QAClCK,GAAG,EAAElhB,IAAI,CAAC,KAAK,CAAC;QAChB0T,KAAK,EAAE1T,IAAI,CAAC,OAAO,CAAC;QACpBmhB,QAAQ,EAAEnhB,IAAI,CAAC,UAAU,CAAC;QAC1B2T,SAAS,EAAE3T,IAAI,CAAC,WAAW,CAAC;QAC5BohB,QAAQ,EAAEphB,IAAI,CAAC,UAAU;OAC1B,CAAC;MACF;IACF;EAAC;EAAA,OAAA6gB,wBAAA;AAAA,EAlG2CpjB,SAAS;AAqGvD;;;AAGA,WAAa4jB,OAAQ,0BAAAC,YAAA;EAAA1jB,SAAA,CAAAyjB,OAAA,EAAAC,YAAA;EAAA,IAAAC,QAAA,GAAAzjB,YAAA,CAAAujB,OAAA;EASnB;;;;;;;EAOA,SAAAA,QAAAG,MAAA,EAUC;IAAA,IAAAC,OAAA;IAAA,IATCC,KAAK,GAAAF,MAAA,CAALE,KAAK;MACLC,cAAc,GAAAH,MAAA,CAAdG,cAAc;MACdhB,SAAS,GAAAa,MAAA,CAATb,SAAS;MACTiB,QAAQ,GAAAJ,MAAA,CAARI,QAAQ;IAAAniB,eAAA,OAAA4hB,OAAA;IAORI,OAAA,GAAAF,QAAA,CAAA7hB,IAAA;IACA+hB,OAAA,CAAKC,KAAK,GAAGA,KAAK;IAClBD,OAAA,CAAKE,cAAc,GACjB,OAAOA,cAAc,KAAK,QAAQ,GAC9B,IAAItf,UAAU,CAAC7E,MAAM,CAAC8E,IAAI,CAACqf,cAAc,EAAE,QAAQ,CAAC,CAAC,GACrDA,cAAc;IACpBF,OAAA,CAAKd,SAAS,GAAGA,SAAS;IAC1Bc,OAAA,CAAKG,QAAQ,GAAGA,QAAQ;IAExBH,OAAA,CAAK9hB,aAAa,GAAG;MACnB+hB,KAAK,EAAE,OAAO;MACdC,cAAc,EAAE,kBAAkB;MAClChB,SAAS,EAAE,YAAY;MACvBiB,QAAQ,EAAE;KACX;IAAC,OAAAH,OAAA;EACJ;EAEA;EAAA7hB,YAAA,CAAAyhB,OAAA;IAAAxhB,GAAA;IAAAC,KAAA,EACA,SAAAC,sBAA6BC,IAAyB;MACpD;MACA,IAAI,OAAOA,IAAI,CAAC,OAAO,CAAC,KAAK,WAAW,EACtC,MAAM,IAAIC,KAAK,gDAAAC,MAAA,CAAgDF,IAAI,CAAE,CAAC;MACxE,IAAI,OAAOA,IAAI,CAAC,kBAAkB,CAAC,KAAK,WAAW,EACjD,MAAM,IAAIC,KAAK,2DAAAC,MAAA,CAC6CF,IAAI,CAAE,CACjE;MACH,IAAI,OAAOA,IAAI,CAAC,YAAY,CAAC,KAAK,WAAW,EAC3C,MAAM,IAAIC,KAAK,qDAAAC,MAAA,CACuCF,IAAI,CAAE,CAC3D;MACH,IAAI,CAAC6C,KAAK,CAACC,OAAO,CAAC9C,IAAI,CAAC,UAAU,CAAC,CAAC,EAClC,MAAM,IAAIC,KAAK,yDAAAC,MAAA,CAC2CF,IAAI,CAAE,CAC/D;MACH,OAAO,IAAIqhB,OAAO,CAAC;QACjBK,KAAK,EAAEvV,YAAY,CAACpM,qBAAqB,CAACC,IAAI,CAAC,OAAO,CAAC,CAAC;QACxD2hB,cAAc,EAAE3hB,IAAI,CAAC,kBAAkB,CAAC;QACxC2gB,SAAS,EAAE3gB,IAAI,CAAC,YAAY,CAAC;QAC7B4hB,QAAQ,EAAE5hB,IAAI,CAAC,UAAU;OAC1B,CAAC;MACF;IACF;EAAC;EAAA,OAAAqhB,OAAA;AAAA,EApE0B5jB,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}