{"ast":null,"code":"import { Buffer } from 'buffer';\nimport ServiceClient from './v2/serviceClient';\nimport * as txn from '../transaction';\nexport default class Kmd extends ServiceClient {\n  constructor(token, baseServer = 'http://127.0.0.1', port = 7833, headers = {}) {\n    super('X-KMD-API-Token', token, baseServer, port, headers);\n  }\n  /**\n   * version returns a VersionResponse containing a list of kmd API versions supported by this running kmd instance.\n   */\n  async versions() {\n    const res = await this.c.get('/versions');\n    return res.body;\n  }\n  /**\n   * listWallets returns a ListWalletsResponse containing the list of wallets known to kmd. Using a wallet ID\n   * returned from this endpoint, you can initialize a wallet handle with client.InitWalletHandle\n   */\n  async listWallets() {\n    const res = await this.c.get('/v1/wallets');\n    return res.body;\n  }\n  /**\n   * createWallet creates a wallet with the specified name, password, driver,\n   * and master derivation key. If the master derivation key is blank, one is\n   * generated internally to kmd. CreateWallet returns a CreateWalletResponse\n   * containing information about the new wallet.\n   * @param walletName\n   * @param walletPassword\n   * @param walletDriverName\n   * @param walletMDK\n   */\n  async createWallet(walletName, walletPassword, walletMDK = new Uint8Array(), walletDriverName = 'sqlite') {\n    const req = {\n      wallet_name: walletName,\n      wallet_driver_name: walletDriverName,\n      wallet_password: walletPassword,\n      master_derivation_key: Buffer.from(walletMDK).toString('base64')\n    };\n    const res = await this.c.post('/v1/wallet', req);\n    return res.body;\n  }\n  /**\n   * initWalletHandle accepts a wallet ID and a wallet password, and returns an\n   * initWalletHandleResponse containing a wallet handle token. This wallet\n   * handle token can be used for subsequent operations on this wallet, like key\n   * generation, transaction signing, etc.. WalletHandleTokens expire after a\n   * configurable number of seconds, and must be renewed periodically with\n   * RenewWalletHandle. It is good practice to call ReleaseWalletHandle when\n   * you're done interacting with this wallet.\n   * @param walletID\n   * @param walletPassword\n   */\n  async initWalletHandle(walletID, walletPassword) {\n    const req = {\n      wallet_id: walletID,\n      wallet_password: walletPassword\n    };\n    const res = await this.c.post('/v1/wallet/init', req);\n    return res.body;\n  }\n  /**\n   * releaseWalletHandle invalidates the passed wallet handle token, making\n   * it unusuable for subsequent wallet operations.\n   * @param walletHandle\n   */\n  async releaseWalletHandle(walletHandle) {\n    const req = {\n      wallet_handle_token: walletHandle\n    };\n    const res = await this.c.post('/v1/wallet/release', req);\n    return res.body;\n  }\n  /**\n   * renewWalletHandle accepts a wallet handle and attempts to renew it, moving\n   * the expiration time to some number of seconds in the future. It returns a\n   * RenewWalletHandleResponse containing the walletHandle and the number of\n   * seconds until expiration\n   * @param walletHandle\n   */\n  async renewWalletHandle(walletHandle) {\n    const req = {\n      wallet_handle_token: walletHandle\n    };\n    const res = await this.c.post('/v1/wallet/renew', req);\n    return res.body;\n  }\n  /**\n   * renameWallet accepts a wallet ID, wallet password, and a new wallet name,\n   * and renames the underlying wallet.\n   * @param walletID\n   * @param walletPassword\n   * @param newWalletName\n   */\n  async renameWallet(walletID, walletPassword, newWalletName) {\n    const req = {\n      wallet_id: walletID,\n      wallet_password: walletPassword,\n      wallet_name: newWalletName\n    };\n    const res = await this.c.post('/v1/wallet/rename', req);\n    return res.body;\n  }\n  /**\n   * getWallet accepts a wallet handle and returns high level information about\n   * this wallet in a GetWalletResponse.\n   * @param walletHandle\n   */\n  async getWallet(walletHandle) {\n    const req = {\n      wallet_handle_token: walletHandle\n    };\n    const res = await this.c.post('/v1/wallet/info', req);\n    return res.body;\n  }\n  /**\n   * exportMasterDerivationKey accepts a wallet handle and a wallet password, and\n   * returns an ExportMasterDerivationKeyResponse containing the master\n   * derivation key. This key can be used as an argument to CreateWallet in\n   * order to recover the keys generated by this wallet. The master derivation\n   * key can be encoded as a sequence of words using the mnemonic library, and\n   * @param walletHandle\n   * @param walletPassword\n   */\n  async exportMasterDerivationKey(walletHandle, walletPassword) {\n    const req = {\n      wallet_handle_token: walletHandle,\n      wallet_password: walletPassword\n    };\n    const res = await this.c.post('/v1/master-key/export', req);\n    return {\n      master_derivation_key: Buffer.from(res.body.master_derivation_key, 'base64')\n    };\n  }\n  /**\n   * importKey accepts a wallet handle and an ed25519 private key, and imports\n   * the key into the wallet. It returns an ImportKeyResponse containing the\n   * address corresponding to this private key.\n   * @param walletHandle\n   * @param secretKey\n   */\n  async importKey(walletHandle, secretKey) {\n    const req = {\n      wallet_handle_token: walletHandle,\n      private_key: Buffer.from(secretKey).toString('base64')\n    };\n    const res = await this.c.post('/v1/key/import', req);\n    return res.body;\n  }\n  /**\n   * exportKey accepts a wallet handle, wallet password, and address, and returns\n   * an ExportKeyResponse containing the ed25519 private key corresponding to the\n   * address stored in the wallet.\n   * @param walletHandle\n   * @param walletPassword\n   * @param addr\n   */\n  async exportKey(walletHandle, walletPassword, addr) {\n    const req = {\n      wallet_handle_token: walletHandle,\n      address: addr,\n      wallet_password: walletPassword\n    };\n    const res = await this.c.post('/v1/key/export', req);\n    return {\n      private_key: Buffer.from(res.body.private_key, 'base64')\n    };\n  }\n  /**\n   * generateKey accepts a wallet handle, and then generates the next key in the\n   * wallet using its internal master derivation key. Two wallets with the same\n   * master derivation key will generate the same sequence of keys.\n   * @param walletHandle\n   */\n  async generateKey(walletHandle) {\n    const req = {\n      wallet_handle_token: walletHandle,\n      display_mnemonic: false\n    };\n    const res = await this.c.post('/v1/key', req);\n    return res.body;\n  }\n  /**\n   * deleteKey accepts a wallet handle, wallet password, and address, and deletes\n   * the information about this address from the wallet (including address and\n   * secret key). If DeleteKey is called on a key generated using GenerateKey,\n   * the same key will not be generated again. However, if a wallet is recovered\n   * using the master derivation key, a key generated in this way can be\n   * recovered.\n   * @param walletHandle\n   * @param walletPassword\n   * @param addr\n   */\n  async deleteKey(walletHandle, walletPassword, addr) {\n    const req = {\n      wallet_handle_token: walletHandle,\n      address: addr,\n      wallet_password: walletPassword\n    };\n    const res = await this.c.delete('/v1/key', req);\n    return res.body;\n  }\n  /**\n   * ListKeys accepts a wallet handle and returns a ListKeysResponse containing\n   * all of the addresses for which this wallet contains secret keys.\n   * @param walletHandle\n   */\n  async listKeys(walletHandle) {\n    const req = {\n      wallet_handle_token: walletHandle\n    };\n    const res = await this.c.post('/v1/key/list', req);\n    return res.body;\n  }\n  /**\n   * signTransaction accepts a wallet handle, wallet password, and a transaction,\n   * and returns and SignTransactionResponse containing an encoded, signed\n   * transaction. The transaction is signed using the key corresponding to the\n   * Sender field.\n   * @param walletHandle\n   * @param walletPassword\n   * @param transaction\n   */\n  async signTransaction(walletHandle, walletPassword, transaction) {\n    const tx = txn.instantiateTxnIfNeeded(transaction);\n    const req = {\n      wallet_handle_token: walletHandle,\n      wallet_password: walletPassword,\n      transaction: Buffer.from(tx.toByte()).toString('base64')\n    };\n    const res = await this.c.post('/v1/transaction/sign', req);\n    if (res.status === 200) {\n      return Buffer.from(res.body.signed_transaction, 'base64');\n    }\n    return res.body;\n  }\n  /**\n   * signTransactionWithSpecificPublicKey accepts a wallet handle, wallet password, a transaction, and a public key,\n   * and returns and SignTransactionResponse containing an encoded, signed\n   * transaction. The transaction is signed using the key corresponding to the\n   * publicKey arg.\n   * @param walletHandle\n   * @param walletPassword\n   * @param transaction\n   * @param publicKey - sign the txn with the key corresponding to publicKey (used for working with a rekeyed addr)\n   */\n  async signTransactionWithSpecificPublicKey(walletHandle, walletPassword, transaction, publicKey) {\n    const tx = txn.instantiateTxnIfNeeded(transaction);\n    const req = {\n      wallet_handle_token: walletHandle,\n      wallet_password: walletPassword,\n      transaction: Buffer.from(tx.toByte()).toString('base64'),\n      public_key: Buffer.from(publicKey).toString('base64')\n    };\n    const res = await this.c.post('/v1/transaction/sign', req);\n    if (res.status === 200) {\n      return Buffer.from(res.body.signed_transaction, 'base64');\n    }\n    return res.body;\n  }\n  /**\n   * listMultisig accepts a wallet handle and returns a ListMultisigResponse\n   * containing the multisig addresses whose preimages are stored in this wallet.\n   * A preimage is the information needed to reconstruct this multisig address,\n   * including multisig version information, threshold information, and a list\n   * of public keys.\n   * @param walletHandle\n   */\n  async listMultisig(walletHandle) {\n    const req = {\n      wallet_handle_token: walletHandle\n    };\n    const res = await this.c.post('/v1/multisig/list', req);\n    return res.body;\n  }\n  /**\n   * importMultisig accepts a wallet handle and the information required to\n   * generate a multisig address. It derives this address, and stores all of the\n   * information within the wallet. It returns a ImportMultisigResponse with the\n   * derived address.\n   * @param walletHandle\n   * @param version\n   * @param threshold\n   * @param pks\n   */\n  async importMultisig(walletHandle, version, threshold, pks) {\n    const req = {\n      wallet_handle_token: walletHandle,\n      multisig_version: version,\n      threshold,\n      pks\n    };\n    const res = await this.c.post('/v1/multisig/import', req);\n    return res.body;\n  }\n  /**\n   * exportMultisig accepts a wallet handle, wallet password, and multisig\n   * address, and returns an ExportMultisigResponse containing the stored\n   * multisig preimage. The preimage contains all of the information necessary\n   * to derive the multisig address, including version, threshold, and a list of\n   * public keys.\n   * @param walletHandle\n   * @param walletPassword\n   * @param addr\n   */\n  async exportMultisig(walletHandle, addr) {\n    const req = {\n      wallet_handle_token: walletHandle,\n      address: addr\n    };\n    const res = await this.c.post('/v1/multisig/export', req);\n    return res.body;\n  }\n  /**\n   * signMultisigTransaction accepts a wallet handle, wallet password,\n   * transaction, public key (*not* an address), and an optional partial\n   * MultisigSig. It looks up the secret key corresponding to the public key, and\n   * returns a SignMultisigTransactionResponse containing a MultisigSig with a\n   * signature by the secret key included.\n   * @param walletHandle\n   * @param pw\n   * @param tx\n   * @param pk\n   * @param partial\n   */\n  async signMultisigTransaction(walletHandle, pw, transaction, pk, partial) {\n    const tx = txn.instantiateTxnIfNeeded(transaction);\n    const req = {\n      wallet_handle_token: walletHandle,\n      transaction: Buffer.from(tx.toByte()).toString('base64'),\n      public_key: Buffer.from(pk).toString('base64'),\n      partial_multisig: partial,\n      wallet_password: pw\n    };\n    const res = await this.c.post('/v1/multisig/sign', req);\n    return res.body;\n  }\n  /**\n   * deleteMultisig accepts a wallet handle, wallet password, and multisig\n   * address, and deletes the information about this multisig address from the\n   * wallet (including address and secret key).\n   * @param walletHandle\n   * @param walletPassword\n   * @param addr\n   */\n  async deleteMultisig(walletHandle, walletPassword, addr) {\n    const req = {\n      wallet_handle_token: walletHandle,\n      address: addr,\n      wallet_password: walletPassword\n    };\n    const res = await this.c.delete('/v1/multisig', req);\n    return res.body;\n  }\n}","map":{"version":3,"names":["Buffer","ServiceClient","txn","Kmd","constructor","token","baseServer","port","headers","versions","res","c","get","body","listWallets","createWallet","walletName","walletPassword","walletMDK","Uint8Array","walletDriverName","req","wallet_name","wallet_driver_name","wallet_password","master_derivation_key","from","toString","post","initWalletHandle","walletID","wallet_id","releaseWalletHandle","walletHandle","wallet_handle_token","renewWalletHandle","renameWallet","newWalletName","getWallet","exportMasterDerivationKey","importKey","secretKey","private_key","exportKey","addr","address","generateKey","display_mnemonic","deleteKey","delete","listKeys","signTransaction","transaction","tx","instantiateTxnIfNeeded","toByte","status","signed_transaction","signTransactionWithSpecificPublicKey","publicKey","public_key","listMultisig","importMultisig","version","threshold","pks","multisig_version","exportMultisig","signMultisigTransaction","pw","pk","partial","partial_multisig","deleteMultisig"],"sources":["/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/algosdk/src/client/kmd.ts"],"sourcesContent":["import { Buffer } from 'buffer';\nimport ServiceClient from './v2/serviceClient';\nimport * as txn from '../transaction';\nimport { CustomTokenHeader, KMDTokenHeader } from './urlTokenBaseHTTPClient';\n\nexport default class Kmd extends ServiceClient {\n  constructor(\n    token: string | KMDTokenHeader | CustomTokenHeader,\n    baseServer = 'http://127.0.0.1',\n    port: string | number = 7833,\n    headers = {}\n  ) {\n    super('X-KMD-API-Token', token, baseServer, port, headers);\n  }\n\n  /**\n   * version returns a VersionResponse containing a list of kmd API versions supported by this running kmd instance.\n   */\n  async versions() {\n    const res = await this.c.get('/versions');\n    return res.body;\n  }\n\n  /**\n   * listWallets returns a ListWalletsResponse containing the list of wallets known to kmd. Using a wallet ID\n   * returned from this endpoint, you can initialize a wallet handle with client.InitWalletHandle\n   */\n  async listWallets() {\n    const res = await this.c.get('/v1/wallets');\n    return res.body;\n  }\n\n  /**\n   * createWallet creates a wallet with the specified name, password, driver,\n   * and master derivation key. If the master derivation key is blank, one is\n   * generated internally to kmd. CreateWallet returns a CreateWalletResponse\n   * containing information about the new wallet.\n   * @param walletName\n   * @param walletPassword\n   * @param walletDriverName\n   * @param walletMDK\n   */\n  async createWallet(\n    walletName: string,\n    walletPassword: string,\n    walletMDK: Uint8Array = new Uint8Array(),\n    walletDriverName = 'sqlite'\n  ) {\n    const req = {\n      wallet_name: walletName,\n      wallet_driver_name: walletDriverName,\n      wallet_password: walletPassword,\n      master_derivation_key: Buffer.from(walletMDK).toString('base64'),\n    };\n    const res = await this.c.post('/v1/wallet', req);\n    return res.body;\n  }\n\n  /**\n   * initWalletHandle accepts a wallet ID and a wallet password, and returns an\n   * initWalletHandleResponse containing a wallet handle token. This wallet\n   * handle token can be used for subsequent operations on this wallet, like key\n   * generation, transaction signing, etc.. WalletHandleTokens expire after a\n   * configurable number of seconds, and must be renewed periodically with\n   * RenewWalletHandle. It is good practice to call ReleaseWalletHandle when\n   * you're done interacting with this wallet.\n   * @param walletID\n   * @param walletPassword\n   */\n  async initWalletHandle(walletID: string, walletPassword: string) {\n    const req = {\n      wallet_id: walletID,\n      wallet_password: walletPassword,\n    };\n    const res = await this.c.post('/v1/wallet/init', req);\n    return res.body;\n  }\n\n  /**\n   * releaseWalletHandle invalidates the passed wallet handle token, making\n   * it unusuable for subsequent wallet operations.\n   * @param walletHandle\n   */\n  async releaseWalletHandle(walletHandle: string) {\n    const req = {\n      wallet_handle_token: walletHandle,\n    };\n    const res = await this.c.post('/v1/wallet/release', req);\n    return res.body;\n  }\n\n  /**\n   * renewWalletHandle accepts a wallet handle and attempts to renew it, moving\n   * the expiration time to some number of seconds in the future. It returns a\n   * RenewWalletHandleResponse containing the walletHandle and the number of\n   * seconds until expiration\n   * @param walletHandle\n   */\n  async renewWalletHandle(walletHandle: string) {\n    const req = {\n      wallet_handle_token: walletHandle,\n    };\n    const res = await this.c.post('/v1/wallet/renew', req);\n    return res.body;\n  }\n\n  /**\n   * renameWallet accepts a wallet ID, wallet password, and a new wallet name,\n   * and renames the underlying wallet.\n   * @param walletID\n   * @param walletPassword\n   * @param newWalletName\n   */\n  async renameWallet(\n    walletID: string,\n    walletPassword: string,\n    newWalletName: string\n  ) {\n    const req = {\n      wallet_id: walletID,\n      wallet_password: walletPassword,\n      wallet_name: newWalletName,\n    };\n    const res = await this.c.post('/v1/wallet/rename', req);\n    return res.body;\n  }\n\n  /**\n   * getWallet accepts a wallet handle and returns high level information about\n   * this wallet in a GetWalletResponse.\n   * @param walletHandle\n   */\n  async getWallet(walletHandle: string) {\n    const req = {\n      wallet_handle_token: walletHandle,\n    };\n    const res = await this.c.post('/v1/wallet/info', req);\n    return res.body;\n  }\n\n  /**\n   * exportMasterDerivationKey accepts a wallet handle and a wallet password, and\n   * returns an ExportMasterDerivationKeyResponse containing the master\n   * derivation key. This key can be used as an argument to CreateWallet in\n   * order to recover the keys generated by this wallet. The master derivation\n   * key can be encoded as a sequence of words using the mnemonic library, and\n   * @param walletHandle\n   * @param walletPassword\n   */\n  async exportMasterDerivationKey(\n    walletHandle: string,\n    walletPassword: string\n  ) {\n    const req = {\n      wallet_handle_token: walletHandle,\n      wallet_password: walletPassword,\n    };\n    const res = await this.c.post('/v1/master-key/export', req);\n    return {\n      master_derivation_key: Buffer.from(\n        res.body.master_derivation_key,\n        'base64'\n      ),\n    };\n  }\n\n  /**\n   * importKey accepts a wallet handle and an ed25519 private key, and imports\n   * the key into the wallet. It returns an ImportKeyResponse containing the\n   * address corresponding to this private key.\n   * @param walletHandle\n   * @param secretKey\n   */\n  async importKey(walletHandle: string, secretKey: Uint8Array) {\n    const req = {\n      wallet_handle_token: walletHandle,\n      private_key: Buffer.from(secretKey).toString('base64'),\n    };\n    const res = await this.c.post('/v1/key/import', req);\n    return res.body;\n  }\n\n  /**\n   * exportKey accepts a wallet handle, wallet password, and address, and returns\n   * an ExportKeyResponse containing the ed25519 private key corresponding to the\n   * address stored in the wallet.\n   * @param walletHandle\n   * @param walletPassword\n   * @param addr\n   */\n  async exportKey(walletHandle: string, walletPassword: string, addr: string) {\n    const req = {\n      wallet_handle_token: walletHandle,\n      address: addr,\n      wallet_password: walletPassword,\n    };\n    const res = await this.c.post('/v1/key/export', req);\n    return { private_key: Buffer.from(res.body.private_key, 'base64') };\n  }\n\n  /**\n   * generateKey accepts a wallet handle, and then generates the next key in the\n   * wallet using its internal master derivation key. Two wallets with the same\n   * master derivation key will generate the same sequence of keys.\n   * @param walletHandle\n   */\n  async generateKey(walletHandle: string) {\n    const req = {\n      wallet_handle_token: walletHandle,\n      display_mnemonic: false,\n    };\n    const res = await this.c.post('/v1/key', req);\n    return res.body;\n  }\n\n  /**\n   * deleteKey accepts a wallet handle, wallet password, and address, and deletes\n   * the information about this address from the wallet (including address and\n   * secret key). If DeleteKey is called on a key generated using GenerateKey,\n   * the same key will not be generated again. However, if a wallet is recovered\n   * using the master derivation key, a key generated in this way can be\n   * recovered.\n   * @param walletHandle\n   * @param walletPassword\n   * @param addr\n   */\n  async deleteKey(walletHandle: string, walletPassword: string, addr: string) {\n    const req = {\n      wallet_handle_token: walletHandle,\n      address: addr,\n      wallet_password: walletPassword,\n    };\n    const res = await this.c.delete('/v1/key', req);\n    return res.body;\n  }\n\n  /**\n   * ListKeys accepts a wallet handle and returns a ListKeysResponse containing\n   * all of the addresses for which this wallet contains secret keys.\n   * @param walletHandle\n   */\n  async listKeys(walletHandle: string) {\n    const req = {\n      wallet_handle_token: walletHandle,\n    };\n    const res = await this.c.post('/v1/key/list', req);\n    return res.body;\n  }\n\n  /**\n   * signTransaction accepts a wallet handle, wallet password, and a transaction,\n   * and returns and SignTransactionResponse containing an encoded, signed\n   * transaction. The transaction is signed using the key corresponding to the\n   * Sender field.\n   * @param walletHandle\n   * @param walletPassword\n   * @param transaction\n   */\n  async signTransaction(\n    walletHandle: string,\n    walletPassword: string,\n    transaction: txn.TransactionLike\n  ) {\n    const tx = txn.instantiateTxnIfNeeded(transaction);\n\n    const req = {\n      wallet_handle_token: walletHandle,\n      wallet_password: walletPassword,\n      transaction: Buffer.from(tx.toByte()).toString('base64'),\n    };\n    const res = await this.c.post('/v1/transaction/sign', req);\n\n    if (res.status === 200) {\n      return Buffer.from(res.body.signed_transaction, 'base64');\n    }\n    return res.body;\n  }\n\n  /**\n   * signTransactionWithSpecificPublicKey accepts a wallet handle, wallet password, a transaction, and a public key,\n   * and returns and SignTransactionResponse containing an encoded, signed\n   * transaction. The transaction is signed using the key corresponding to the\n   * publicKey arg.\n   * @param walletHandle\n   * @param walletPassword\n   * @param transaction\n   * @param publicKey - sign the txn with the key corresponding to publicKey (used for working with a rekeyed addr)\n   */\n  async signTransactionWithSpecificPublicKey(\n    walletHandle: string,\n    walletPassword: string,\n    transaction: txn.TransactionLike,\n    publicKey: Uint8Array | string\n  ) {\n    const tx = txn.instantiateTxnIfNeeded(transaction);\n\n    const req = {\n      wallet_handle_token: walletHandle,\n      wallet_password: walletPassword,\n      transaction: Buffer.from(tx.toByte()).toString('base64'),\n      public_key: Buffer.from(publicKey).toString('base64'),\n    };\n    const res = await this.c.post('/v1/transaction/sign', req);\n\n    if (res.status === 200) {\n      return Buffer.from(res.body.signed_transaction, 'base64');\n    }\n    return res.body;\n  }\n\n  /**\n   * listMultisig accepts a wallet handle and returns a ListMultisigResponse\n   * containing the multisig addresses whose preimages are stored in this wallet.\n   * A preimage is the information needed to reconstruct this multisig address,\n   * including multisig version information, threshold information, and a list\n   * of public keys.\n   * @param walletHandle\n   */\n  async listMultisig(walletHandle: string) {\n    const req = {\n      wallet_handle_token: walletHandle,\n    };\n    const res = await this.c.post('/v1/multisig/list', req);\n    return res.body;\n  }\n\n  /**\n   * importMultisig accepts a wallet handle and the information required to\n   * generate a multisig address. It derives this address, and stores all of the\n   * information within the wallet. It returns a ImportMultisigResponse with the\n   * derived address.\n   * @param walletHandle\n   * @param version\n   * @param threshold\n   * @param pks\n   */\n  async importMultisig(\n    walletHandle: string,\n    version: number,\n    threshold: number,\n    pks: string[]\n  ) {\n    const req = {\n      wallet_handle_token: walletHandle,\n      multisig_version: version,\n      threshold,\n      pks,\n    };\n    const res = await this.c.post('/v1/multisig/import', req);\n    return res.body;\n  }\n\n  /**\n   * exportMultisig accepts a wallet handle, wallet password, and multisig\n   * address, and returns an ExportMultisigResponse containing the stored\n   * multisig preimage. The preimage contains all of the information necessary\n   * to derive the multisig address, including version, threshold, and a list of\n   * public keys.\n   * @param walletHandle\n   * @param walletPassword\n   * @param addr\n   */\n  async exportMultisig(walletHandle: string, addr: string) {\n    const req = {\n      wallet_handle_token: walletHandle,\n      address: addr,\n    };\n    const res = await this.c.post('/v1/multisig/export', req);\n    return res.body;\n  }\n\n  /**\n   * signMultisigTransaction accepts a wallet handle, wallet password,\n   * transaction, public key (*not* an address), and an optional partial\n   * MultisigSig. It looks up the secret key corresponding to the public key, and\n   * returns a SignMultisigTransactionResponse containing a MultisigSig with a\n   * signature by the secret key included.\n   * @param walletHandle\n   * @param pw\n   * @param tx\n   * @param pk\n   * @param partial\n   */\n  async signMultisigTransaction(\n    walletHandle: string,\n    pw: string,\n    transaction: txn.TransactionLike,\n    pk: Uint8Array | string,\n    partial: string\n  ) {\n    const tx = txn.instantiateTxnIfNeeded(transaction);\n    const req = {\n      wallet_handle_token: walletHandle,\n      transaction: Buffer.from(tx.toByte()).toString('base64'),\n      public_key: Buffer.from(pk).toString('base64'),\n      partial_multisig: partial,\n      wallet_password: pw,\n    };\n    const res = await this.c.post('/v1/multisig/sign', req);\n    return res.body;\n  }\n\n  /**\n   * deleteMultisig accepts a wallet handle, wallet password, and multisig\n   * address, and deletes the information about this multisig address from the\n   * wallet (including address and secret key).\n   * @param walletHandle\n   * @param walletPassword\n   * @param addr\n   */\n  async deleteMultisig(\n    walletHandle: string,\n    walletPassword: string,\n    addr: string\n  ) {\n    const req = {\n      wallet_handle_token: walletHandle,\n      address: addr,\n      wallet_password: walletPassword,\n    };\n    const res = await this.c.delete('/v1/multisig', req);\n    return res.body;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}