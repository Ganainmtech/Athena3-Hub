{"ast":null,"code":"export var ABITransactionType;\n(function (ABITransactionType) {\n  /**\n   * Any transaction type\n   */\n  ABITransactionType[\"any\"] = \"txn\";\n  /**\n   * Payment transaction type\n   */\n  ABITransactionType[\"pay\"] = \"pay\";\n  /**\n   * Key registration transaction type\n   */\n  ABITransactionType[\"keyreg\"] = \"keyreg\";\n  /**\n   * Asset configuration transaction type\n   */\n  ABITransactionType[\"acfg\"] = \"acfg\";\n  /**\n   * Asset transfer transaction type\n   */\n  ABITransactionType[\"axfer\"] = \"axfer\";\n  /**\n   * Asset freeze transaction type\n   */\n  ABITransactionType[\"afrz\"] = \"afrz\";\n  /**\n   * Application transaction type\n   */\n  ABITransactionType[\"appl\"] = \"appl\";\n})(ABITransactionType || (ABITransactionType = {}));\nexport function abiTypeIsTransaction(type) {\n  return type === ABITransactionType.any || type === ABITransactionType.pay || type === ABITransactionType.keyreg || type === ABITransactionType.acfg || type === ABITransactionType.axfer || type === ABITransactionType.afrz || type === ABITransactionType.appl;\n}\nexport function abiCheckTransactionType(type, txn) {\n  if (type === ABITransactionType.any) {\n    return true;\n  }\n  return txn.type && txn.type.toString() === type.toString();\n}","map":{"version":3,"names":["ABITransactionType","abiTypeIsTransaction","type","any","pay","keyreg","acfg","axfer","afrz","appl","abiCheckTransactionType","txn","toString"],"sources":["/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/node_modules/algosdk/src/abi/transaction.ts"],"sourcesContent":["import { Transaction } from '../transaction';\n\nexport enum ABITransactionType {\n  /**\n   * Any transaction type\n   */\n  any = 'txn',\n\n  /**\n   * Payment transaction type\n   */\n  pay = 'pay',\n\n  /**\n   * Key registration transaction type\n   */\n  keyreg = 'keyreg',\n\n  /**\n   * Asset configuration transaction type\n   */\n  acfg = 'acfg',\n\n  /**\n   * Asset transfer transaction type\n   */\n  axfer = 'axfer',\n\n  /**\n   * Asset freeze transaction type\n   */\n  afrz = 'afrz',\n\n  /**\n   * Application transaction type\n   */\n  appl = 'appl',\n}\n\nexport function abiTypeIsTransaction(type: any): type is ABITransactionType {\n  return (\n    type === ABITransactionType.any ||\n    type === ABITransactionType.pay ||\n    type === ABITransactionType.keyreg ||\n    type === ABITransactionType.acfg ||\n    type === ABITransactionType.axfer ||\n    type === ABITransactionType.afrz ||\n    type === ABITransactionType.appl\n  );\n}\n\nexport function abiCheckTransactionType(\n  type: ABITransactionType,\n  txn: Transaction\n): boolean {\n  if (type === ABITransactionType.any) {\n    return true;\n  }\n\n  return txn.type && txn.type.toString() === type.toString();\n}\n"],"mappings":"AAEA,WAAYA,kBAmCX;AAnCD,WAAYA,kBAAkB;EAC5B;;;EAGAA,kBAAA,eAAW;EAEX;;;EAGAA,kBAAA,eAAW;EAEX;;;EAGAA,kBAAA,qBAAiB;EAEjB;;;EAGAA,kBAAA,iBAAa;EAEb;;;EAGAA,kBAAA,mBAAe;EAEf;;;EAGAA,kBAAA,iBAAa;EAEb;;;EAGAA,kBAAA,iBAAa;AACf,CAAC,EAnCWA,kBAAkB,KAAlBA,kBAAkB;AAqC9B,OAAM,SAAUC,oBAAoBA,CAACC,IAAS;EAC5C,OACEA,IAAI,KAAKF,kBAAkB,CAACG,GAAG,IAC/BD,IAAI,KAAKF,kBAAkB,CAACI,GAAG,IAC/BF,IAAI,KAAKF,kBAAkB,CAACK,MAAM,IAClCH,IAAI,KAAKF,kBAAkB,CAACM,IAAI,IAChCJ,IAAI,KAAKF,kBAAkB,CAACO,KAAK,IACjCL,IAAI,KAAKF,kBAAkB,CAACQ,IAAI,IAChCN,IAAI,KAAKF,kBAAkB,CAACS,IAAI;AAEpC;AAEA,OAAM,SAAUC,uBAAuBA,CACrCR,IAAwB,EACxBS,GAAgB;EAEhB,IAAIT,IAAI,KAAKF,kBAAkB,CAACG,GAAG,EAAE;IACnC,OAAO,IAAI;;EAGb,OAAOQ,GAAG,CAACT,IAAI,IAAIS,GAAG,CAACT,IAAI,CAACU,QAAQ,EAAE,KAAKV,IAAI,CAACU,QAAQ,EAAE;AAC5D"},"metadata":{},"sourceType":"module","externalDependencies":[]}