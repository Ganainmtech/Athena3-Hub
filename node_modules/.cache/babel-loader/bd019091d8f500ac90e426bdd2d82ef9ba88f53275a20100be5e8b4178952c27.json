{"ast":null,"code":"import * as txnBuilder from './transaction';\nimport { OnApplicationComplete } from './types/transactions/base';\nimport {\n// Utilities\nTransactionType } from './types/transactions';\n/**\n * makePaymentTxnWithSuggestedParams takes payment arguments and returns a Transaction object\n * @param from - string representation of Algorand address of sender\n * @param to - string representation of Algorand address of recipient\n * @param amount - integer amount to send, in microAlgos\n * @param closeRemainderTo - optionally close out remaining account balance to this account, represented as string rep of Algorand address\n * @param note - uint8array of arbitrary data for sender to store\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n */\nexport function makePaymentTxnWithSuggestedParams(from, to, amount, closeRemainderTo, note, suggestedParams, rekeyTo) {\n  var o = {\n    from: from,\n    to: to,\n    amount: amount,\n    closeRemainderTo: closeRemainderTo,\n    note: note,\n    suggestedParams: suggestedParams,\n    type: TransactionType.pay,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n// helper for above makePaymentTxnWithSuggestedParams, instead accepting an arguments object\nexport function makePaymentTxnWithSuggestedParamsFromObject(o) {\n  return makePaymentTxnWithSuggestedParams(o.from, o.to, o.amount, o.closeRemainderTo, o.note, o.suggestedParams, o.rekeyTo);\n}\nexport function makeKeyRegistrationTxnWithSuggestedParams(from, note, voteKey, selectionKey, voteFirst, voteLast, voteKeyDilution, suggestedParams, rekeyTo) {\n  var nonParticipation = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : false;\n  var stateProofKey = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : undefined;\n  var o = {\n    from: from,\n    note: note,\n    voteKey: voteKey,\n    selectionKey: selectionKey,\n    voteFirst: voteFirst,\n    voteLast: voteLast,\n    voteKeyDilution: voteKeyDilution,\n    suggestedParams: suggestedParams,\n    type: TransactionType.keyreg,\n    reKeyTo: rekeyTo,\n    nonParticipation: nonParticipation,\n    stateProofKey: stateProofKey\n  };\n  return new txnBuilder.Transaction(o);\n}\nexport function makeKeyRegistrationTxnWithSuggestedParamsFromObject(o) {\n  return makeKeyRegistrationTxnWithSuggestedParams(o.from, o.note, o.voteKey, o.selectionKey, o.voteFirst, o.voteLast, o.voteKeyDilution, o.suggestedParams, o.rekeyTo, o.nonParticipation, o.stateProofKey);\n}\n/** makeAssetCreateTxnWithSuggestedParams takes asset creation arguments and returns a Transaction object\n * for creating that asset\n *\n * @param from - string representation of Algorand address of sender\n * @param note - uint8array of arbitrary data for sender to store\n * @param total - integer total supply of the asset\n * @param decimals - integer number of decimals for asset unit calculation\n * @param defaultFrozen - boolean whether asset accounts should default to being frozen\n * @param manager - string representation of Algorand address in charge of reserve, freeze, clawback, destruction, etc\n * @param reserve - string representation of Algorand address representing asset reserve\n * @param freeze - string representation of Algorand address with power to freeze/unfreeze asset holdings\n * @param clawback - string representation of Algorand address with power to revoke asset holdings\n * @param unitName - string units name for this asset\n * @param assetName - string name for this asset\n * @param assetURL - string URL relating to this asset\n * @param assetMetadataHash - Uint8Array or UTF-8 string representation of a hash commitment with respect to the asset. Must be exactly 32 bytes long.\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n */\nexport function makeAssetCreateTxnWithSuggestedParams(from, note, total, decimals, defaultFrozen, manager, reserve, freeze, clawback, unitName, assetName, assetURL, assetMetadataHash, suggestedParams, rekeyTo) {\n  var o = {\n    from: from,\n    note: note,\n    suggestedParams: suggestedParams,\n    assetTotal: total,\n    assetDecimals: decimals,\n    assetDefaultFrozen: defaultFrozen,\n    assetUnitName: unitName,\n    assetName: assetName,\n    assetURL: assetURL,\n    assetMetadataHash: assetMetadataHash,\n    assetManager: manager,\n    assetReserve: reserve,\n    assetFreeze: freeze,\n    assetClawback: clawback,\n    type: TransactionType.acfg,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n// helper for above makeAssetCreateTxnWithSuggestedParams, instead accepting an arguments object\nexport function makeAssetCreateTxnWithSuggestedParamsFromObject(o) {\n  return makeAssetCreateTxnWithSuggestedParams(o.from, o.note, o.total, o.decimals, o.defaultFrozen, o.manager, o.reserve, o.freeze, o.clawback, o.unitName, o.assetName, o.assetURL, o.assetMetadataHash, o.suggestedParams, o.rekeyTo);\n}\n/** makeAssetConfigTxnWithSuggestedParams can be issued by the asset manager to change the manager, reserve, freeze, or clawback\n * you must respecify existing addresses to keep them the same; leaving a field blank is the same as turning\n * that feature off for this asset\n *\n * @param from - string representation of Algorand address of sender\n * @param note - uint8array of arbitrary data for sender to store\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param manager - string representation of new asset manager Algorand address\n * @param reserve - string representation of new reserve Algorand address\n * @param freeze - string representation of new freeze manager Algorand address\n * @param clawback - string representation of new revocation manager Algorand address\n * @param strictEmptyAddressChecking - boolean - throw an error if any of manager, reserve, freeze, or clawback are undefined. optional, defaults to true.\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n */\nexport function makeAssetConfigTxnWithSuggestedParams(from, note, assetIndex, manager, reserve, freeze, clawback, suggestedParams) {\n  var strictEmptyAddressChecking = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : true;\n  var rekeyTo = arguments.length > 9 ? arguments[9] : undefined;\n  if (strictEmptyAddressChecking && (manager === undefined || reserve === undefined || freeze === undefined || clawback === undefined)) {\n    throw Error('strict empty address checking was turned on, but at least one empty address was provided');\n  }\n  var o = {\n    from: from,\n    suggestedParams: suggestedParams,\n    assetIndex: assetIndex,\n    assetManager: manager,\n    assetReserve: reserve,\n    assetFreeze: freeze,\n    assetClawback: clawback,\n    type: TransactionType.acfg,\n    note: note,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n// helper for above makeAssetConfigTxnWithSuggestedParams, instead accepting an arguments object\nexport function makeAssetConfigTxnWithSuggestedParamsFromObject(o) {\n  return makeAssetConfigTxnWithSuggestedParams(o.from, o.note, o.assetIndex, o.manager, o.reserve, o.freeze, o.clawback, o.suggestedParams, o.strictEmptyAddressChecking, o.rekeyTo);\n}\n/** makeAssetDestroyTxnWithSuggestedParams will allow the asset's manager to remove this asset from the ledger, so long\n * as all outstanding assets are held by the creator.\n *\n * @param from - string representation of Algorand address of sender\n * @param note - uint8array of arbitrary data for sender to store\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n */\nexport function makeAssetDestroyTxnWithSuggestedParams(from, note, assetIndex, suggestedParams, rekeyTo) {\n  var o = {\n    from: from,\n    suggestedParams: suggestedParams,\n    assetIndex: assetIndex,\n    type: TransactionType.acfg,\n    note: note,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n// helper for above makeAssetDestroyTxnWithSuggestedParams, instead accepting an arguments object\nexport function makeAssetDestroyTxnWithSuggestedParamsFromObject(o) {\n  return makeAssetDestroyTxnWithSuggestedParams(o.from, o.note, o.assetIndex, o.suggestedParams, o.rekeyTo);\n}\n/** makeAssetFreezeTxnWithSuggestedParams will allow the asset's freeze manager to freeze or un-freeze an account,\n * blocking or allowing asset transfers to and from the targeted account.\n *\n * @param from - string representation of Algorand address of sender\n * @param note - uint8array of arbitrary data for sender to store\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param freezeTarget - string representation of Algorand address being frozen or unfrozen\n * @param freezeState - true if freezeTarget should be frozen, false if freezeTarget should be allowed to transact\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n */\nexport function makeAssetFreezeTxnWithSuggestedParams(from, note, assetIndex, freezeTarget, freezeState, suggestedParams, rekeyTo) {\n  var o = {\n    from: from,\n    type: TransactionType.afrz,\n    freezeAccount: freezeTarget,\n    assetIndex: assetIndex,\n    freezeState: freezeState,\n    note: note,\n    suggestedParams: suggestedParams,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n// helper for above makeAssetFreezeTxnWithSuggestedParams, instead accepting an arguments object\nexport function makeAssetFreezeTxnWithSuggestedParamsFromObject(o) {\n  return makeAssetFreezeTxnWithSuggestedParams(o.from, o.note, o.assetIndex, o.freezeTarget, o.freezeState, o.suggestedParams, o.rekeyTo);\n}\n/** makeAssetTransferTxnWithSuggestedParams allows for the creation of an asset transfer transaction.\n * Special case: to begin accepting assets, set amount=0 and from=to.\n *\n * @param from - string representation of Algorand address of sender\n * @param to - string representation of Algorand address of asset recipient\n * @param closeRemainderTo - optional - string representation of Algorand address - if provided,\n * send all remaining assets after transfer to the \"closeRemainderTo\" address and close \"from\"'s asset holdings\n * @param revocationTarget - optional - string representation of Algorand address - if provided,\n * and if \"from\" is the asset's revocation manager, then deduct from \"revocationTarget\" rather than \"from\"\n * @param amount - integer amount of assets to send\n * @param note - uint8array of arbitrary data for sender to store\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n */\nexport function makeAssetTransferTxnWithSuggestedParams(from, to, closeRemainderTo, revocationTarget, amount, note, assetIndex, suggestedParams, rekeyTo) {\n  var o = {\n    type: TransactionType.axfer,\n    from: from,\n    to: to,\n    amount: amount,\n    suggestedParams: suggestedParams,\n    assetIndex: assetIndex,\n    note: note,\n    assetRevocationTarget: revocationTarget,\n    closeRemainderTo: closeRemainderTo,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n// helper for above makeAssetTransferTxnWithSuggestedParams, instead accepting an arguments object\nexport function makeAssetTransferTxnWithSuggestedParamsFromObject(o) {\n  return makeAssetTransferTxnWithSuggestedParams(o.from, o.to, o.closeRemainderTo, o.revocationTarget, o.amount, o.note, o.assetIndex, o.suggestedParams, o.rekeyTo);\n}\n/**\n * Make a transaction that will create an application.\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param onComplete - algosdk.OnApplicationComplete, what application should do once the program is done being run\n * @param approvalProgram - Uint8Array, the compiled TEAL that approves a transaction\n * @param clearProgram - Uint8Array, the compiled TEAL that runs when clearing state\n * @param numLocalInts - restricts number of ints in per-user local state\n * @param numLocalByteSlices - restricts number of byte slices in per-user local state\n * @param numGlobalInts - restricts number of ints in global state\n * @param numGlobalByteSlices - restricts number of byte slices in global state\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\n * @param note - Arbitrary data for sender to store\n * @param lease - Lease a transaction\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\n * @param extraPages - integer extra pages of memory to rent on creation of application\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\n */\nexport function makeApplicationCreateTxn(from, suggestedParams, onComplete, approvalProgram, clearProgram, numLocalInts, numLocalByteSlices, numGlobalInts, numGlobalByteSlices, appArgs, accounts, foreignApps, foreignAssets, note, lease, rekeyTo, extraPages, boxes) {\n  var o = {\n    type: TransactionType.appl,\n    from: from,\n    suggestedParams: suggestedParams,\n    appIndex: 0,\n    appOnComplete: onComplete,\n    appLocalInts: numLocalInts,\n    appLocalByteSlices: numLocalByteSlices,\n    appGlobalInts: numGlobalInts,\n    appGlobalByteSlices: numGlobalByteSlices,\n    appApprovalProgram: approvalProgram,\n    appClearProgram: clearProgram,\n    appArgs: appArgs,\n    appAccounts: accounts,\n    appForeignApps: foreignApps,\n    appForeignAssets: foreignAssets,\n    boxes: boxes,\n    note: note,\n    lease: lease,\n    reKeyTo: rekeyTo,\n    extraPages: extraPages\n  };\n  return new txnBuilder.Transaction(o);\n}\n// helper for above makeApplicationCreateTxn, instead accepting an arguments object\nexport function makeApplicationCreateTxnFromObject(o) {\n  return makeApplicationCreateTxn(o.from, o.suggestedParams, o.onComplete, o.approvalProgram, o.clearProgram, o.numLocalInts, o.numLocalByteSlices, o.numGlobalInts, o.numGlobalByteSlices, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo, o.extraPages, o.boxes);\n}\n/**\n * Make a transaction that changes an application's approval and clear programs\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to be updated\n * @param approvalProgram - Uint8Array, the compiled TEAL that approves a transaction\n * @param clearProgram - Uint8Array, the compiled TEAL that runs when clearing state\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\n * @param note - Arbitrary data for sender to store\n * @param lease - Lease a transaction\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\n */\nexport function makeApplicationUpdateTxn(from, suggestedParams, appIndex, approvalProgram, clearProgram, appArgs, accounts, foreignApps, foreignAssets, note, lease, rekeyTo, boxes) {\n  var o = {\n    type: TransactionType.appl,\n    from: from,\n    suggestedParams: suggestedParams,\n    appIndex: appIndex,\n    appApprovalProgram: approvalProgram,\n    appOnComplete: OnApplicationComplete.UpdateApplicationOC,\n    appClearProgram: clearProgram,\n    appArgs: appArgs,\n    appAccounts: accounts,\n    appForeignApps: foreignApps,\n    appForeignAssets: foreignAssets,\n    boxes: boxes,\n    note: note,\n    lease: lease,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n// helper for above makeApplicationUpdateTxn, instead accepting an arguments object\nexport function makeApplicationUpdateTxnFromObject(o) {\n  return makeApplicationUpdateTxn(o.from, o.suggestedParams, o.appIndex, o.approvalProgram, o.clearProgram, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo, o.boxes);\n}\n/**\n * Make a transaction that deletes an application\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to be deleted\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\n * @param note - Arbitrary data for sender to store\n * @param lease - Lease a transaction\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\n */\nexport function makeApplicationDeleteTxn(from, suggestedParams, appIndex, appArgs, accounts, foreignApps, foreignAssets, note, lease, rekeyTo, boxes) {\n  var o = {\n    type: TransactionType.appl,\n    from: from,\n    suggestedParams: suggestedParams,\n    appIndex: appIndex,\n    appOnComplete: OnApplicationComplete.DeleteApplicationOC,\n    appArgs: appArgs,\n    appAccounts: accounts,\n    appForeignApps: foreignApps,\n    appForeignAssets: foreignAssets,\n    boxes: boxes,\n    note: note,\n    lease: lease,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n// helper for above makeApplicationDeleteTxn, instead accepting an arguments object\nexport function makeApplicationDeleteTxnFromObject(o) {\n  return makeApplicationDeleteTxn(o.from, o.suggestedParams, o.appIndex, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo, o.boxes);\n}\n/**\n * Make a transaction that opts in to use an application\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to join\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\n * @param note - Arbitrary data for sender to store\n * @param lease - Lease a transaction\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\n */\nexport function makeApplicationOptInTxn(from, suggestedParams, appIndex, appArgs, accounts, foreignApps, foreignAssets, note, lease, rekeyTo, boxes) {\n  var o = {\n    type: TransactionType.appl,\n    from: from,\n    suggestedParams: suggestedParams,\n    appIndex: appIndex,\n    appOnComplete: OnApplicationComplete.OptInOC,\n    appArgs: appArgs,\n    appAccounts: accounts,\n    appForeignApps: foreignApps,\n    appForeignAssets: foreignAssets,\n    boxes: boxes,\n    note: note,\n    lease: lease,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n// helper for above makeApplicationOptInTxn, instead accepting an argument object\nexport function makeApplicationOptInTxnFromObject(o) {\n  return makeApplicationOptInTxn(o.from, o.suggestedParams, o.appIndex, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo, o.boxes);\n}\n/**\n * Make a transaction that closes out a user's state in an application\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to use\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\n * @param note - Arbitrary data for sender to store\n * @param lease - Lease a transaction\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\n */\nexport function makeApplicationCloseOutTxn(from, suggestedParams, appIndex, appArgs, accounts, foreignApps, foreignAssets, note, lease, rekeyTo, boxes) {\n  var o = {\n    type: TransactionType.appl,\n    from: from,\n    suggestedParams: suggestedParams,\n    appIndex: appIndex,\n    appOnComplete: OnApplicationComplete.CloseOutOC,\n    appArgs: appArgs,\n    appAccounts: accounts,\n    appForeignApps: foreignApps,\n    appForeignAssets: foreignAssets,\n    boxes: boxes,\n    note: note,\n    lease: lease,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n// helper for above makeApplicationCloseOutTxn, instead accepting an argument object\nexport function makeApplicationCloseOutTxnFromObject(o) {\n  return makeApplicationCloseOutTxn(o.from, o.suggestedParams, o.appIndex, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo, o.boxes);\n}\n/**\n * Make a transaction that clears a user's state in an application\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to use\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\n * @param note - Arbitrary data for sender to store\n * @param lease - Lease a transaction\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\n */\nexport function makeApplicationClearStateTxn(from, suggestedParams, appIndex, appArgs, accounts, foreignApps, foreignAssets, note, lease, rekeyTo, boxes) {\n  var o = {\n    type: TransactionType.appl,\n    from: from,\n    suggestedParams: suggestedParams,\n    appIndex: appIndex,\n    appOnComplete: OnApplicationComplete.ClearStateOC,\n    appArgs: appArgs,\n    appAccounts: accounts,\n    appForeignApps: foreignApps,\n    appForeignAssets: foreignAssets,\n    boxes: boxes,\n    note: note,\n    lease: lease,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n// helper for above makeApplicationClearStateTxn, instead accepting an argument object\nexport function makeApplicationClearStateTxnFromObject(o) {\n  return makeApplicationClearStateTxn(o.from, o.suggestedParams, o.appIndex, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo, o.boxes);\n}\n/**\n * Make a transaction that just calls an application, doing nothing on completion\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to use\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\n * @param note - Arbitrary data for sender to store\n * @param lease - Lease a transaction\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\n */\nexport function makeApplicationNoOpTxn(from, suggestedParams, appIndex, appArgs, accounts, foreignApps, foreignAssets, note, lease, rekeyTo, boxes) {\n  var o = {\n    type: TransactionType.appl,\n    from: from,\n    suggestedParams: suggestedParams,\n    appIndex: appIndex,\n    appOnComplete: OnApplicationComplete.NoOpOC,\n    appArgs: appArgs,\n    appAccounts: accounts,\n    appForeignApps: foreignApps,\n    appForeignAssets: foreignAssets,\n    boxes: boxes,\n    note: note,\n    lease: lease,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n// helper for above makeApplicationNoOpTxn, instead accepting an argument object\nexport function makeApplicationNoOpTxnFromObject(o) {\n  return makeApplicationNoOpTxn(o.from, o.suggestedParams, o.appIndex, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo, o.boxes);\n}\nexport { OnApplicationComplete } from './types/transactions/base';\n/**\n * Generic function for creating any application call transaction.\n */\nexport function makeApplicationCallTxnFromObject(options) {\n  var o = {\n    type: TransactionType.appl,\n    from: options.from,\n    suggestedParams: options.suggestedParams,\n    appIndex: options.appIndex,\n    appOnComplete: options.onComplete,\n    appLocalInts: options.numLocalInts,\n    appLocalByteSlices: options.numLocalByteSlices,\n    appGlobalInts: options.numGlobalInts,\n    appGlobalByteSlices: options.numGlobalByteSlices,\n    appApprovalProgram: options.approvalProgram,\n    appClearProgram: options.clearProgram,\n    appArgs: options.appArgs,\n    appAccounts: options.accounts,\n    appForeignApps: options.foreignApps,\n    appForeignAssets: options.foreignAssets,\n    boxes: options.boxes,\n    note: options.note,\n    lease: options.lease,\n    reKeyTo: options.rekeyTo,\n    extraPages: options.extraPages\n  };\n  return new txnBuilder.Transaction(o);\n}","map":{"version":3,"names":["txnBuilder","OnApplicationComplete","TransactionType","makePaymentTxnWithSuggestedParams","from","to","amount","closeRemainderTo","note","suggestedParams","rekeyTo","o","type","pay","reKeyTo","Transaction","makePaymentTxnWithSuggestedParamsFromObject","makeKeyRegistrationTxnWithSuggestedParams","voteKey","selectionKey","voteFirst","voteLast","voteKeyDilution","nonParticipation","arguments","length","undefined","stateProofKey","keyreg","makeKeyRegistrationTxnWithSuggestedParamsFromObject","makeAssetCreateTxnWithSuggestedParams","total","decimals","defaultFrozen","manager","reserve","freeze","clawback","unitName","assetName","assetURL","assetMetadataHash","assetTotal","assetDecimals","assetDefaultFrozen","assetUnitName","assetManager","assetReserve","assetFreeze","assetClawback","acfg","makeAssetCreateTxnWithSuggestedParamsFromObject","makeAssetConfigTxnWithSuggestedParams","assetIndex","strictEmptyAddressChecking","Error","makeAssetConfigTxnWithSuggestedParamsFromObject","makeAssetDestroyTxnWithSuggestedParams","makeAssetDestroyTxnWithSuggestedParamsFromObject","makeAssetFreezeTxnWithSuggestedParams","freezeTarget","freezeState","afrz","freezeAccount","makeAssetFreezeTxnWithSuggestedParamsFromObject","makeAssetTransferTxnWithSuggestedParams","revocationTarget","axfer","assetRevocationTarget","makeAssetTransferTxnWithSuggestedParamsFromObject","makeApplicationCreateTxn","onComplete","approvalProgram","clearProgram","numLocalInts","numLocalByteSlices","numGlobalInts","numGlobalByteSlices","appArgs","accounts","foreignApps","foreignAssets","lease","extraPages","boxes","appl","appIndex","appOnComplete","appLocalInts","appLocalByteSlices","appGlobalInts","appGlobalByteSlices","appApprovalProgram","appClearProgram","appAccounts","appForeignApps","appForeignAssets","makeApplicationCreateTxnFromObject","makeApplicationUpdateTxn","UpdateApplicationOC","makeApplicationUpdateTxnFromObject","makeApplicationDeleteTxn","DeleteApplicationOC","makeApplicationDeleteTxnFromObject","makeApplicationOptInTxn","OptInOC","makeApplicationOptInTxnFromObject","makeApplicationCloseOutTxn","CloseOutOC","makeApplicationCloseOutTxnFromObject","makeApplicationClearStateTxn","ClearStateOC","makeApplicationClearStateTxnFromObject","makeApplicationNoOpTxn","NoOpOC","makeApplicationNoOpTxnFromObject","makeApplicationCallTxnFromObject","options"],"sources":["/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/algosdk/src/makeTxn.ts"],"sourcesContent":["import * as txnBuilder from './transaction';\nimport { OnApplicationComplete } from './types/transactions/base';\nimport {\n  // Transaction types\n  PaymentTxn,\n  KeyRegistrationTxn,\n\n  // Utilities\n  TransactionType,\n  MustHaveSuggestedParams,\n  AssetCreateTxn,\n  AssetConfigTxn,\n  AssetDestroyTxn,\n  AssetFreezeTxn,\n  AssetTransferTxn,\n  AppCreateTxn,\n  AppUpdateTxn,\n  AppDeleteTxn,\n  AppOptInTxn,\n  AppCloseOutTxn,\n  AppClearStateTxn,\n  AppNoOpTxn,\n} from './types/transactions';\nimport { RenameProperties, RenameProperty, Expand } from './types/utils';\n\n/**\n * makePaymentTxnWithSuggestedParams takes payment arguments and returns a Transaction object\n * @param from - string representation of Algorand address of sender\n * @param to - string representation of Algorand address of recipient\n * @param amount - integer amount to send, in microAlgos\n * @param closeRemainderTo - optionally close out remaining account balance to this account, represented as string rep of Algorand address\n * @param note - uint8array of arbitrary data for sender to store\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n */\nexport function makePaymentTxnWithSuggestedParams(\n  from: PaymentTxn['from'],\n  to: PaymentTxn['to'],\n  amount: PaymentTxn['amount'],\n  closeRemainderTo: PaymentTxn['closeRemainderTo'],\n  note: PaymentTxn['note'],\n  suggestedParams: MustHaveSuggestedParams<PaymentTxn>['suggestedParams'],\n  rekeyTo?: PaymentTxn['reKeyTo']\n) {\n  const o: PaymentTxn = {\n    from,\n    to,\n    amount,\n    closeRemainderTo,\n    note,\n    suggestedParams,\n    type: TransactionType.pay,\n    reKeyTo: rekeyTo,\n  };\n  return new txnBuilder.Transaction(o);\n}\n\n// helper for above makePaymentTxnWithSuggestedParams, instead accepting an arguments object\nexport function makePaymentTxnWithSuggestedParamsFromObject(\n  o: Expand<\n    Pick<\n      RenameProperty<MustHaveSuggestedParams<PaymentTxn>, 'reKeyTo', 'rekeyTo'>,\n      | 'from'\n      | 'to'\n      | 'amount'\n      | 'closeRemainderTo'\n      | 'note'\n      | 'suggestedParams'\n      | 'rekeyTo'\n    >\n  >\n) {\n  return makePaymentTxnWithSuggestedParams(\n    o.from,\n    o.to,\n    o.amount,\n    o.closeRemainderTo,\n    o.note,\n    o.suggestedParams,\n    o.rekeyTo\n  );\n}\n\n/**\n * makeKeyRegistrationTxnWithSuggestedParams takes key registration arguments and returns a Transaction object for\n * that key registration operation\n *\n * @param from - string representation of Algorand address of sender\n * @param note - uint8array of arbitrary data for sender to store\n * @param voteKey - voting key. for key deregistration, leave undefined\n * @param selectionKey - selection key. for key deregistration, leave undefined\n * @param voteFirst - first round on which voteKey is valid\n * @param voteLast - last round on which voteKey is valid\n * @param voteKeyDilution - integer\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n * @param nonParticipation - configure whether the address wants to stop participating. If true,\n *   voteKey, selectionKey, voteFirst, voteLast, and voteKeyDilution must be undefined.\n * @param stateProofKey - state proof key. for key deregistration, leave undefined\n */\nexport function makeKeyRegistrationTxnWithSuggestedParams(\n  from: KeyRegistrationTxn['from'],\n  note: KeyRegistrationTxn['note'],\n  voteKey: KeyRegistrationTxn['voteKey'],\n  selectionKey: KeyRegistrationTxn['selectionKey'],\n  voteFirst: KeyRegistrationTxn['voteFirst'],\n  voteLast: KeyRegistrationTxn['voteLast'],\n  voteKeyDilution: KeyRegistrationTxn['voteKeyDilution'],\n  suggestedParams: MustHaveSuggestedParams<KeyRegistrationTxn>['suggestedParams'],\n  rekeyTo?: KeyRegistrationTxn['reKeyTo'],\n  nonParticipation?: false,\n  stateProofKey?: KeyRegistrationTxn['stateProofKey']\n): txnBuilder.Transaction;\nexport function makeKeyRegistrationTxnWithSuggestedParams(\n  from: KeyRegistrationTxn['from'],\n  note: KeyRegistrationTxn['note'],\n  voteKey: undefined,\n  selectionKey: undefined,\n  voteFirst: undefined,\n  voteLast: undefined,\n  voteKeyDilution: undefined,\n  suggestedParams: MustHaveSuggestedParams<KeyRegistrationTxn>['suggestedParams'],\n  rekeyTo?: KeyRegistrationTxn['reKeyTo'],\n  nonParticipation?: true,\n  stateProofKey?: undefined\n): txnBuilder.Transaction;\nexport function makeKeyRegistrationTxnWithSuggestedParams(\n  from: any,\n  note: any,\n  voteKey: any,\n  selectionKey: any,\n  voteFirst: any,\n  voteLast: any,\n  voteKeyDilution: any,\n  suggestedParams: any,\n  rekeyTo?: any,\n  nonParticipation = false,\n  stateProofKey: any = undefined\n) {\n  const o: KeyRegistrationTxn = {\n    from,\n    note,\n    voteKey,\n    selectionKey,\n    voteFirst,\n    voteLast,\n    voteKeyDilution,\n    suggestedParams,\n    type: TransactionType.keyreg,\n    reKeyTo: rekeyTo,\n    nonParticipation,\n    stateProofKey,\n  };\n  return new txnBuilder.Transaction(o);\n}\n\n// helper for above makeKeyRegistrationTxnWithSuggestedParams, instead accepting an arguments object\nexport function makeKeyRegistrationTxnWithSuggestedParamsFromObject(\n  o: Expand<\n    Pick<\n      RenameProperty<\n        MustHaveSuggestedParams<KeyRegistrationTxn>,\n        'reKeyTo',\n        'rekeyTo'\n      >,\n      | 'from'\n      | 'note'\n      | 'voteKey'\n      | 'selectionKey'\n      | 'stateProofKey'\n      | 'voteFirst'\n      | 'voteLast'\n      | 'voteKeyDilution'\n      | 'suggestedParams'\n      | 'rekeyTo'\n    > & {\n      nonParticipation?: false;\n    }\n  >\n): txnBuilder.Transaction;\nexport function makeKeyRegistrationTxnWithSuggestedParamsFromObject(\n  o: Expand<\n    Pick<\n      RenameProperty<\n        MustHaveSuggestedParams<KeyRegistrationTxn>,\n        'reKeyTo',\n        'rekeyTo'\n      >,\n      'from' | 'note' | 'suggestedParams' | 'rekeyTo' | 'nonParticipation'\n    >\n  >\n): txnBuilder.Transaction;\nexport function makeKeyRegistrationTxnWithSuggestedParamsFromObject(o: any) {\n  return makeKeyRegistrationTxnWithSuggestedParams(\n    o.from,\n    o.note,\n    o.voteKey,\n    o.selectionKey,\n    o.voteFirst,\n    o.voteLast,\n    o.voteKeyDilution,\n    o.suggestedParams,\n    o.rekeyTo,\n    o.nonParticipation,\n    o.stateProofKey\n  );\n}\n\n/** makeAssetCreateTxnWithSuggestedParams takes asset creation arguments and returns a Transaction object\n * for creating that asset\n *\n * @param from - string representation of Algorand address of sender\n * @param note - uint8array of arbitrary data for sender to store\n * @param total - integer total supply of the asset\n * @param decimals - integer number of decimals for asset unit calculation\n * @param defaultFrozen - boolean whether asset accounts should default to being frozen\n * @param manager - string representation of Algorand address in charge of reserve, freeze, clawback, destruction, etc\n * @param reserve - string representation of Algorand address representing asset reserve\n * @param freeze - string representation of Algorand address with power to freeze/unfreeze asset holdings\n * @param clawback - string representation of Algorand address with power to revoke asset holdings\n * @param unitName - string units name for this asset\n * @param assetName - string name for this asset\n * @param assetURL - string URL relating to this asset\n * @param assetMetadataHash - Uint8Array or UTF-8 string representation of a hash commitment with respect to the asset. Must be exactly 32 bytes long.\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n */\nexport function makeAssetCreateTxnWithSuggestedParams(\n  from: AssetCreateTxn['from'],\n  note: AssetCreateTxn['note'],\n  total: AssetCreateTxn['assetTotal'],\n  decimals: AssetCreateTxn['assetDecimals'],\n  defaultFrozen: AssetCreateTxn['assetDefaultFrozen'],\n  manager: AssetCreateTxn['assetManager'],\n  reserve: AssetCreateTxn['assetReserve'],\n  freeze: AssetCreateTxn['assetFreeze'],\n  clawback: AssetCreateTxn['assetClawback'],\n  unitName: AssetCreateTxn['assetUnitName'],\n  assetName: AssetCreateTxn['assetName'],\n  assetURL: AssetCreateTxn['assetURL'],\n  assetMetadataHash: AssetCreateTxn['assetMetadataHash'] | undefined,\n  suggestedParams: MustHaveSuggestedParams<AssetCreateTxn>['suggestedParams'],\n  rekeyTo?: AssetCreateTxn['reKeyTo']\n) {\n  const o: AssetCreateTxn = {\n    from,\n    note,\n    suggestedParams,\n    assetTotal: total,\n    assetDecimals: decimals,\n    assetDefaultFrozen: defaultFrozen,\n    assetUnitName: unitName,\n    assetName,\n    assetURL,\n    assetMetadataHash,\n    assetManager: manager,\n    assetReserve: reserve,\n    assetFreeze: freeze,\n    assetClawback: clawback,\n    type: TransactionType.acfg,\n    reKeyTo: rekeyTo,\n  };\n  return new txnBuilder.Transaction(o);\n}\n\n// helper for above makeAssetCreateTxnWithSuggestedParams, instead accepting an arguments object\nexport function makeAssetCreateTxnWithSuggestedParamsFromObject(\n  o: Expand<\n    Pick<\n      RenameProperties<\n        MustHaveSuggestedParams<AssetCreateTxn>,\n        {\n          reKeyTo: 'rekeyTo';\n          assetTotal: 'total';\n          assetDecimals: 'decimals';\n          assetDefaultFrozen: 'defaultFrozen';\n          assetManager: 'manager';\n          assetReserve: 'reserve';\n          assetFreeze: 'freeze';\n          assetClawback: 'clawback';\n          assetUnitName: 'unitName';\n        }\n      >,\n      | 'from'\n      | 'note'\n      | 'total'\n      | 'decimals'\n      | 'defaultFrozen'\n      | 'manager'\n      | 'reserve'\n      | 'freeze'\n      | 'clawback'\n      | 'unitName'\n      | 'assetName'\n      | 'assetURL'\n      | 'assetMetadataHash'\n      | 'suggestedParams'\n      | 'rekeyTo'\n    >\n  >\n) {\n  return makeAssetCreateTxnWithSuggestedParams(\n    o.from,\n    o.note,\n    o.total,\n    o.decimals,\n    o.defaultFrozen,\n    o.manager,\n    o.reserve,\n    o.freeze,\n    o.clawback,\n    o.unitName,\n    o.assetName,\n    o.assetURL,\n    o.assetMetadataHash,\n    o.suggestedParams,\n    o.rekeyTo\n  );\n}\n\n/** makeAssetConfigTxnWithSuggestedParams can be issued by the asset manager to change the manager, reserve, freeze, or clawback\n * you must respecify existing addresses to keep them the same; leaving a field blank is the same as turning\n * that feature off for this asset\n *\n * @param from - string representation of Algorand address of sender\n * @param note - uint8array of arbitrary data for sender to store\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param manager - string representation of new asset manager Algorand address\n * @param reserve - string representation of new reserve Algorand address\n * @param freeze - string representation of new freeze manager Algorand address\n * @param clawback - string representation of new revocation manager Algorand address\n * @param strictEmptyAddressChecking - boolean - throw an error if any of manager, reserve, freeze, or clawback are undefined. optional, defaults to true.\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n */\nexport function makeAssetConfigTxnWithSuggestedParams(\n  from: AssetConfigTxn['from'],\n  note: AssetConfigTxn['note'],\n  assetIndex: AssetConfigTxn['assetIndex'],\n  manager: AssetConfigTxn['assetManager'],\n  reserve: AssetConfigTxn['assetReserve'],\n  freeze: AssetConfigTxn['assetFreeze'],\n  clawback: AssetConfigTxn['assetClawback'],\n  suggestedParams: MustHaveSuggestedParams<AssetConfigTxn>['suggestedParams'],\n  strictEmptyAddressChecking = true,\n  rekeyTo?: AssetConfigTxn['reKeyTo']\n) {\n  if (\n    strictEmptyAddressChecking &&\n    (manager === undefined ||\n      reserve === undefined ||\n      freeze === undefined ||\n      clawback === undefined)\n  ) {\n    throw Error(\n      'strict empty address checking was turned on, but at least one empty address was provided'\n    );\n  }\n  const o: AssetConfigTxn = {\n    from,\n    suggestedParams,\n    assetIndex,\n    assetManager: manager,\n    assetReserve: reserve,\n    assetFreeze: freeze,\n    assetClawback: clawback,\n    type: TransactionType.acfg,\n    note,\n    reKeyTo: rekeyTo,\n  };\n  return new txnBuilder.Transaction(o);\n}\n\n// helper for above makeAssetConfigTxnWithSuggestedParams, instead accepting an arguments object\nexport function makeAssetConfigTxnWithSuggestedParamsFromObject(\n  o: Expand<\n    Pick<\n      RenameProperties<\n        MustHaveSuggestedParams<AssetConfigTxn>,\n        {\n          reKeyTo: 'rekeyTo';\n          assetManager: 'manager';\n          assetReserve: 'reserve';\n          assetFreeze: 'freeze';\n          assetClawback: 'clawback';\n        }\n      >,\n      | 'from'\n      | 'note'\n      | 'assetIndex'\n      | 'manager'\n      | 'reserve'\n      | 'freeze'\n      | 'clawback'\n      | 'suggestedParams'\n      | 'rekeyTo'\n    > & {\n      strictEmptyAddressChecking: boolean;\n    }\n  >\n) {\n  return makeAssetConfigTxnWithSuggestedParams(\n    o.from,\n    o.note,\n    o.assetIndex,\n    o.manager,\n    o.reserve,\n    o.freeze,\n    o.clawback,\n    o.suggestedParams,\n    o.strictEmptyAddressChecking,\n    o.rekeyTo\n  );\n}\n\n/** makeAssetDestroyTxnWithSuggestedParams will allow the asset's manager to remove this asset from the ledger, so long\n * as all outstanding assets are held by the creator.\n *\n * @param from - string representation of Algorand address of sender\n * @param note - uint8array of arbitrary data for sender to store\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n */\nexport function makeAssetDestroyTxnWithSuggestedParams(\n  from: AssetDestroyTxn['from'],\n  note: AssetDestroyTxn['note'],\n  assetIndex: AssetDestroyTxn['assetIndex'],\n  suggestedParams: MustHaveSuggestedParams<AssetDestroyTxn>['suggestedParams'],\n  rekeyTo?: AssetDestroyTxn['reKeyTo']\n) {\n  const o: AssetDestroyTxn = {\n    from,\n    suggestedParams,\n    assetIndex,\n    type: TransactionType.acfg,\n    note,\n    reKeyTo: rekeyTo,\n  };\n  return new txnBuilder.Transaction(o);\n}\n\n// helper for above makeAssetDestroyTxnWithSuggestedParams, instead accepting an arguments object\nexport function makeAssetDestroyTxnWithSuggestedParamsFromObject(\n  o: Expand<\n    Pick<\n      RenameProperty<\n        MustHaveSuggestedParams<AssetDestroyTxn>,\n        'reKeyTo',\n        'rekeyTo'\n      >,\n      'from' | 'note' | 'assetIndex' | 'suggestedParams' | 'rekeyTo'\n    >\n  >\n) {\n  return makeAssetDestroyTxnWithSuggestedParams(\n    o.from,\n    o.note,\n    o.assetIndex,\n    o.suggestedParams,\n    o.rekeyTo\n  );\n}\n\n/** makeAssetFreezeTxnWithSuggestedParams will allow the asset's freeze manager to freeze or un-freeze an account,\n * blocking or allowing asset transfers to and from the targeted account.\n *\n * @param from - string representation of Algorand address of sender\n * @param note - uint8array of arbitrary data for sender to store\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param freezeTarget - string representation of Algorand address being frozen or unfrozen\n * @param freezeState - true if freezeTarget should be frozen, false if freezeTarget should be allowed to transact\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n */\nexport function makeAssetFreezeTxnWithSuggestedParams(\n  from: AssetFreezeTxn['from'],\n  note: AssetFreezeTxn['note'],\n  assetIndex: AssetFreezeTxn['assetIndex'],\n  freezeTarget: AssetFreezeTxn['freezeAccount'],\n  freezeState: AssetFreezeTxn['freezeState'],\n  suggestedParams: MustHaveSuggestedParams<AssetFreezeTxn>['suggestedParams'],\n  rekeyTo?: AssetFreezeTxn['reKeyTo']\n) {\n  const o: AssetFreezeTxn = {\n    from,\n    type: TransactionType.afrz,\n    freezeAccount: freezeTarget,\n    assetIndex,\n    freezeState,\n    note,\n    suggestedParams,\n    reKeyTo: rekeyTo,\n  };\n  return new txnBuilder.Transaction(o);\n}\n\n// helper for above makeAssetFreezeTxnWithSuggestedParams, instead accepting an arguments object\nexport function makeAssetFreezeTxnWithSuggestedParamsFromObject(\n  o: Expand<\n    Pick<\n      RenameProperties<\n        MustHaveSuggestedParams<AssetFreezeTxn>,\n        {\n          freezeAccount: 'freezeTarget';\n          reKeyTo: 'rekeyTo';\n        }\n      >,\n      | 'from'\n      | 'note'\n      | 'assetIndex'\n      | 'freezeTarget'\n      | 'freezeState'\n      | 'suggestedParams'\n      | 'rekeyTo'\n    >\n  >\n) {\n  return makeAssetFreezeTxnWithSuggestedParams(\n    o.from,\n    o.note,\n    o.assetIndex,\n    o.freezeTarget,\n    o.freezeState,\n    o.suggestedParams,\n    o.rekeyTo\n  );\n}\n\n/** makeAssetTransferTxnWithSuggestedParams allows for the creation of an asset transfer transaction.\n * Special case: to begin accepting assets, set amount=0 and from=to.\n *\n * @param from - string representation of Algorand address of sender\n * @param to - string representation of Algorand address of asset recipient\n * @param closeRemainderTo - optional - string representation of Algorand address - if provided,\n * send all remaining assets after transfer to the \"closeRemainderTo\" address and close \"from\"'s asset holdings\n * @param revocationTarget - optional - string representation of Algorand address - if provided,\n * and if \"from\" is the asset's revocation manager, then deduct from \"revocationTarget\" rather than \"from\"\n * @param amount - integer amount of assets to send\n * @param note - uint8array of arbitrary data for sender to store\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n */\nexport function makeAssetTransferTxnWithSuggestedParams(\n  from: AssetTransferTxn['from'],\n  to: AssetTransferTxn['to'],\n  closeRemainderTo: AssetTransferTxn['closeRemainderTo'],\n  revocationTarget: AssetTransferTxn['assetRevocationTarget'],\n  amount: AssetTransferTxn['amount'],\n  note: AssetTransferTxn['note'],\n  assetIndex: AssetTransferTxn['assetIndex'],\n  suggestedParams: MustHaveSuggestedParams<AssetTransferTxn>['suggestedParams'],\n  rekeyTo?: AssetTransferTxn['reKeyTo']\n) {\n  const o: AssetTransferTxn = {\n    type: TransactionType.axfer,\n    from,\n    to,\n    amount,\n    suggestedParams,\n    assetIndex,\n    note,\n    assetRevocationTarget: revocationTarget,\n    closeRemainderTo,\n    reKeyTo: rekeyTo,\n  };\n  return new txnBuilder.Transaction(o);\n}\n\n// helper for above makeAssetTransferTxnWithSuggestedParams, instead accepting an arguments object\nexport function makeAssetTransferTxnWithSuggestedParamsFromObject(\n  o: Expand<\n    Pick<\n      RenameProperties<\n        MustHaveSuggestedParams<AssetTransferTxn>,\n        {\n          assetRevocationTarget: 'revocationTarget';\n          reKeyTo: 'rekeyTo';\n        }\n      >,\n      | 'from'\n      | 'to'\n      | 'closeRemainderTo'\n      | 'revocationTarget'\n      | 'amount'\n      | 'note'\n      | 'assetIndex'\n      | 'suggestedParams'\n      | 'rekeyTo'\n    >\n  >\n) {\n  return makeAssetTransferTxnWithSuggestedParams(\n    o.from,\n    o.to,\n    o.closeRemainderTo,\n    o.revocationTarget,\n    o.amount,\n    o.note,\n    o.assetIndex,\n    o.suggestedParams,\n    o.rekeyTo\n  );\n}\n\n/**\n * Make a transaction that will create an application.\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param onComplete - algosdk.OnApplicationComplete, what application should do once the program is done being run\n * @param approvalProgram - Uint8Array, the compiled TEAL that approves a transaction\n * @param clearProgram - Uint8Array, the compiled TEAL that runs when clearing state\n * @param numLocalInts - restricts number of ints in per-user local state\n * @param numLocalByteSlices - restricts number of byte slices in per-user local state\n * @param numGlobalInts - restricts number of ints in global state\n * @param numGlobalByteSlices - restricts number of byte slices in global state\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\n * @param note - Arbitrary data for sender to store\n * @param lease - Lease a transaction\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\n * @param extraPages - integer extra pages of memory to rent on creation of application\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\n */\nexport function makeApplicationCreateTxn(\n  from: AppCreateTxn['from'],\n  suggestedParams: MustHaveSuggestedParams<AppCreateTxn>['suggestedParams'],\n  onComplete: AppCreateTxn['appOnComplete'],\n  approvalProgram: AppCreateTxn['appApprovalProgram'],\n  clearProgram: AppCreateTxn['appClearProgram'],\n  numLocalInts: AppCreateTxn['appLocalInts'],\n  numLocalByteSlices: AppCreateTxn['appLocalByteSlices'],\n  numGlobalInts: AppCreateTxn['appGlobalInts'],\n  numGlobalByteSlices: AppCreateTxn['appGlobalByteSlices'],\n  appArgs?: AppCreateTxn['appArgs'],\n  accounts?: AppCreateTxn['appAccounts'],\n  foreignApps?: AppCreateTxn['appForeignApps'],\n  foreignAssets?: AppCreateTxn['appForeignAssets'],\n  note?: AppCreateTxn['note'],\n  lease?: AppCreateTxn['lease'],\n  rekeyTo?: AppCreateTxn['reKeyTo'],\n  extraPages?: AppCreateTxn['extraPages'],\n  boxes?: AppCreateTxn['boxes']\n) {\n  const o: AppCreateTxn = {\n    type: TransactionType.appl,\n    from,\n    suggestedParams,\n    appIndex: 0,\n    appOnComplete: onComplete,\n    appLocalInts: numLocalInts,\n    appLocalByteSlices: numLocalByteSlices,\n    appGlobalInts: numGlobalInts,\n    appGlobalByteSlices: numGlobalByteSlices,\n    appApprovalProgram: approvalProgram,\n    appClearProgram: clearProgram,\n    appArgs,\n    appAccounts: accounts,\n    appForeignApps: foreignApps,\n    appForeignAssets: foreignAssets,\n    boxes,\n    note,\n    lease,\n    reKeyTo: rekeyTo,\n    extraPages,\n  };\n  return new txnBuilder.Transaction(o);\n}\n\n// helper for above makeApplicationCreateTxn, instead accepting an arguments object\nexport function makeApplicationCreateTxnFromObject(\n  o: Expand<\n    Pick<\n      RenameProperties<\n        MustHaveSuggestedParams<AppCreateTxn>,\n        {\n          appOnComplete: 'onComplete';\n          appApprovalProgram: 'approvalProgram';\n          appClearProgram: 'clearProgram';\n          appLocalInts: 'numLocalInts';\n          appLocalByteSlices: 'numLocalByteSlices';\n          appGlobalInts: 'numGlobalInts';\n          appGlobalByteSlices: 'numGlobalByteSlices';\n          appAccounts: 'accounts';\n          appForeignApps: 'foreignApps';\n          appForeignAssets: 'foreignAssets';\n          reKeyTo: 'rekeyTo';\n        }\n      >,\n      | 'from'\n      | 'suggestedParams'\n      | 'onComplete'\n      | 'approvalProgram'\n      | 'clearProgram'\n      | 'numLocalInts'\n      | 'numLocalByteSlices'\n      | 'numGlobalInts'\n      | 'numGlobalByteSlices'\n      | 'appArgs'\n      | 'accounts'\n      | 'foreignApps'\n      | 'foreignAssets'\n      | 'boxes'\n      | 'note'\n      | 'lease'\n      | 'rekeyTo'\n      | 'extraPages'\n    >\n  >\n) {\n  return makeApplicationCreateTxn(\n    o.from,\n    o.suggestedParams,\n    o.onComplete,\n    o.approvalProgram,\n    o.clearProgram,\n    o.numLocalInts,\n    o.numLocalByteSlices,\n    o.numGlobalInts,\n    o.numGlobalByteSlices,\n    o.appArgs,\n    o.accounts,\n    o.foreignApps,\n    o.foreignAssets,\n    o.note,\n    o.lease,\n    o.rekeyTo,\n    o.extraPages,\n    o.boxes\n  );\n}\n\n/**\n * Make a transaction that changes an application's approval and clear programs\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to be updated\n * @param approvalProgram - Uint8Array, the compiled TEAL that approves a transaction\n * @param clearProgram - Uint8Array, the compiled TEAL that runs when clearing state\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\n * @param note - Arbitrary data for sender to store\n * @param lease - Lease a transaction\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\n */\nexport function makeApplicationUpdateTxn(\n  from: AppUpdateTxn['from'],\n  suggestedParams: MustHaveSuggestedParams<AppUpdateTxn>['suggestedParams'],\n  appIndex: AppUpdateTxn['appIndex'],\n  approvalProgram: AppUpdateTxn['appApprovalProgram'],\n  clearProgram: AppUpdateTxn['appClearProgram'],\n  appArgs?: AppUpdateTxn['appArgs'],\n  accounts?: AppUpdateTxn['appAccounts'],\n  foreignApps?: AppUpdateTxn['appForeignApps'],\n  foreignAssets?: AppUpdateTxn['appForeignAssets'],\n  note?: AppUpdateTxn['note'],\n  lease?: AppUpdateTxn['lease'],\n  rekeyTo?: AppUpdateTxn['reKeyTo'],\n  boxes?: AppUpdateTxn['boxes']\n) {\n  const o: AppUpdateTxn = {\n    type: TransactionType.appl,\n    from,\n    suggestedParams,\n    appIndex,\n    appApprovalProgram: approvalProgram,\n    appOnComplete: OnApplicationComplete.UpdateApplicationOC,\n    appClearProgram: clearProgram,\n    appArgs,\n    appAccounts: accounts,\n    appForeignApps: foreignApps,\n    appForeignAssets: foreignAssets,\n    boxes,\n    note,\n    lease,\n    reKeyTo: rekeyTo,\n  };\n  return new txnBuilder.Transaction(o);\n}\n\n// helper for above makeApplicationUpdateTxn, instead accepting an arguments object\nexport function makeApplicationUpdateTxnFromObject(\n  o: Expand<\n    Pick<\n      RenameProperties<\n        MustHaveSuggestedParams<AppUpdateTxn>,\n        {\n          appApprovalProgram: 'approvalProgram';\n          appClearProgram: 'clearProgram';\n          appAccounts: 'accounts';\n          appForeignApps: 'foreignApps';\n          appForeignAssets: 'foreignAssets';\n          reKeyTo: 'rekeyTo';\n        }\n      >,\n      | 'from'\n      | 'suggestedParams'\n      | 'appIndex'\n      | 'approvalProgram'\n      | 'clearProgram'\n      | 'appArgs'\n      | 'accounts'\n      | 'foreignApps'\n      | 'foreignAssets'\n      | 'boxes'\n      | 'note'\n      | 'lease'\n      | 'rekeyTo'\n    >\n  >\n) {\n  return makeApplicationUpdateTxn(\n    o.from,\n    o.suggestedParams,\n    o.appIndex,\n    o.approvalProgram,\n    o.clearProgram,\n    o.appArgs,\n    o.accounts,\n    o.foreignApps,\n    o.foreignAssets,\n    o.note,\n    o.lease,\n    o.rekeyTo,\n    o.boxes\n  );\n}\n\n/**\n * Make a transaction that deletes an application\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to be deleted\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\n * @param note - Arbitrary data for sender to store\n * @param lease - Lease a transaction\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\n */\nexport function makeApplicationDeleteTxn(\n  from: AppDeleteTxn['from'],\n  suggestedParams: MustHaveSuggestedParams<AppDeleteTxn>['suggestedParams'],\n  appIndex: AppDeleteTxn['appIndex'],\n  appArgs?: AppDeleteTxn['appArgs'],\n  accounts?: AppDeleteTxn['appAccounts'],\n  foreignApps?: AppDeleteTxn['appForeignApps'],\n  foreignAssets?: AppDeleteTxn['appForeignAssets'],\n  note?: AppDeleteTxn['note'],\n  lease?: AppDeleteTxn['lease'],\n  rekeyTo?: AppDeleteTxn['reKeyTo'],\n  boxes?: AppDeleteTxn['boxes']\n) {\n  const o: AppDeleteTxn = {\n    type: TransactionType.appl,\n    from,\n    suggestedParams,\n    appIndex,\n    appOnComplete: OnApplicationComplete.DeleteApplicationOC,\n    appArgs,\n    appAccounts: accounts,\n    appForeignApps: foreignApps,\n    appForeignAssets: foreignAssets,\n    boxes,\n    note,\n    lease,\n    reKeyTo: rekeyTo,\n  };\n  return new txnBuilder.Transaction(o);\n}\n\n// helper for above makeApplicationDeleteTxn, instead accepting an arguments object\nexport function makeApplicationDeleteTxnFromObject(\n  o: Expand<\n    Pick<\n      RenameProperties<\n        MustHaveSuggestedParams<AppDeleteTxn>,\n        {\n          appAccounts: 'accounts';\n          appForeignApps: 'foreignApps';\n          appForeignAssets: 'foreignAssets';\n          reKeyTo: 'rekeyTo';\n        }\n      >,\n      | 'from'\n      | 'suggestedParams'\n      | 'appIndex'\n      | 'appArgs'\n      | 'accounts'\n      | 'foreignApps'\n      | 'foreignAssets'\n      | 'boxes'\n      | 'note'\n      | 'lease'\n      | 'rekeyTo'\n    >\n  >\n) {\n  return makeApplicationDeleteTxn(\n    o.from,\n    o.suggestedParams,\n    o.appIndex,\n    o.appArgs,\n    o.accounts,\n    o.foreignApps,\n    o.foreignAssets,\n    o.note,\n    o.lease,\n    o.rekeyTo,\n    o.boxes\n  );\n}\n\n/**\n * Make a transaction that opts in to use an application\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to join\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\n * @param note - Arbitrary data for sender to store\n * @param lease - Lease a transaction\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\n */\nexport function makeApplicationOptInTxn(\n  from: AppOptInTxn['from'],\n  suggestedParams: MustHaveSuggestedParams<AppOptInTxn>['suggestedParams'],\n  appIndex: AppOptInTxn['appIndex'],\n  appArgs?: AppOptInTxn['appArgs'],\n  accounts?: AppOptInTxn['appAccounts'],\n  foreignApps?: AppOptInTxn['appForeignApps'],\n  foreignAssets?: AppOptInTxn['appForeignAssets'],\n  note?: AppOptInTxn['note'],\n  lease?: AppOptInTxn['lease'],\n  rekeyTo?: AppOptInTxn['reKeyTo'],\n  boxes?: AppOptInTxn['boxes']\n) {\n  const o: AppOptInTxn = {\n    type: TransactionType.appl,\n    from,\n    suggestedParams,\n    appIndex,\n    appOnComplete: OnApplicationComplete.OptInOC,\n    appArgs,\n    appAccounts: accounts,\n    appForeignApps: foreignApps,\n    appForeignAssets: foreignAssets,\n    boxes,\n    note,\n    lease,\n    reKeyTo: rekeyTo,\n  };\n  return new txnBuilder.Transaction(o);\n}\n\n// helper for above makeApplicationOptInTxn, instead accepting an argument object\nexport function makeApplicationOptInTxnFromObject(\n  o: Expand<\n    Pick<\n      RenameProperties<\n        MustHaveSuggestedParams<AppOptInTxn>,\n        {\n          appAccounts: 'accounts';\n          appForeignApps: 'foreignApps';\n          appForeignAssets: 'foreignAssets';\n          reKeyTo: 'rekeyTo';\n        }\n      >,\n      | 'from'\n      | 'suggestedParams'\n      | 'appIndex'\n      | 'appArgs'\n      | 'accounts'\n      | 'foreignApps'\n      | 'foreignAssets'\n      | 'boxes'\n      | 'note'\n      | 'lease'\n      | 'rekeyTo'\n    >\n  >\n) {\n  return makeApplicationOptInTxn(\n    o.from,\n    o.suggestedParams,\n    o.appIndex,\n    o.appArgs,\n    o.accounts,\n    o.foreignApps,\n    o.foreignAssets,\n    o.note,\n    o.lease,\n    o.rekeyTo,\n    o.boxes\n  );\n}\n\n/**\n * Make a transaction that closes out a user's state in an application\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to use\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\n * @param note - Arbitrary data for sender to store\n * @param lease - Lease a transaction\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\n */\nexport function makeApplicationCloseOutTxn(\n  from: AppCloseOutTxn['from'],\n  suggestedParams: MustHaveSuggestedParams<AppCloseOutTxn>['suggestedParams'],\n  appIndex: AppCloseOutTxn['appIndex'],\n  appArgs?: AppCloseOutTxn['appArgs'],\n  accounts?: AppCloseOutTxn['appAccounts'],\n  foreignApps?: AppCloseOutTxn['appForeignApps'],\n  foreignAssets?: AppCloseOutTxn['appForeignAssets'],\n  note?: AppCloseOutTxn['note'],\n  lease?: AppCloseOutTxn['lease'],\n  rekeyTo?: AppCloseOutTxn['reKeyTo'],\n  boxes?: AppCloseOutTxn['boxes']\n) {\n  const o: AppCloseOutTxn = {\n    type: TransactionType.appl,\n    from,\n    suggestedParams,\n    appIndex,\n    appOnComplete: OnApplicationComplete.CloseOutOC,\n    appArgs,\n    appAccounts: accounts,\n    appForeignApps: foreignApps,\n    appForeignAssets: foreignAssets,\n    boxes,\n    note,\n    lease,\n    reKeyTo: rekeyTo,\n  };\n  return new txnBuilder.Transaction(o);\n}\n\n// helper for above makeApplicationCloseOutTxn, instead accepting an argument object\nexport function makeApplicationCloseOutTxnFromObject(\n  o: Expand<\n    Pick<\n      RenameProperties<\n        MustHaveSuggestedParams<AppOptInTxn>,\n        {\n          appAccounts: 'accounts';\n          appForeignApps: 'foreignApps';\n          appForeignAssets: 'foreignAssets';\n          reKeyTo: 'rekeyTo';\n        }\n      >,\n      | 'from'\n      | 'suggestedParams'\n      | 'appIndex'\n      | 'appArgs'\n      | 'accounts'\n      | 'foreignApps'\n      | 'foreignAssets'\n      | 'boxes'\n      | 'note'\n      | 'lease'\n      | 'rekeyTo'\n    >\n  >\n) {\n  return makeApplicationCloseOutTxn(\n    o.from,\n    o.suggestedParams,\n    o.appIndex,\n    o.appArgs,\n    o.accounts,\n    o.foreignApps,\n    o.foreignAssets,\n    o.note,\n    o.lease,\n    o.rekeyTo,\n    o.boxes\n  );\n}\n\n/**\n * Make a transaction that clears a user's state in an application\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to use\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\n * @param note - Arbitrary data for sender to store\n * @param lease - Lease a transaction\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\n */\nexport function makeApplicationClearStateTxn(\n  from: AppClearStateTxn['from'],\n  suggestedParams: MustHaveSuggestedParams<AppClearStateTxn>['suggestedParams'],\n  appIndex: AppClearStateTxn['appIndex'],\n  appArgs?: AppClearStateTxn['appArgs'],\n  accounts?: AppClearStateTxn['appAccounts'],\n  foreignApps?: AppClearStateTxn['appForeignApps'],\n  foreignAssets?: AppClearStateTxn['appForeignAssets'],\n  note?: AppClearStateTxn['note'],\n  lease?: AppClearStateTxn['lease'],\n  rekeyTo?: AppClearStateTxn['reKeyTo'],\n  boxes?: AppClearStateTxn['boxes']\n) {\n  const o: AppClearStateTxn = {\n    type: TransactionType.appl,\n    from,\n    suggestedParams,\n    appIndex,\n    appOnComplete: OnApplicationComplete.ClearStateOC,\n    appArgs,\n    appAccounts: accounts,\n    appForeignApps: foreignApps,\n    appForeignAssets: foreignAssets,\n    boxes,\n    note,\n    lease,\n    reKeyTo: rekeyTo,\n  };\n  return new txnBuilder.Transaction(o);\n}\n\n// helper for above makeApplicationClearStateTxn, instead accepting an argument object\nexport function makeApplicationClearStateTxnFromObject(\n  o: Expand<\n    Pick<\n      RenameProperties<\n        MustHaveSuggestedParams<AppOptInTxn>,\n        {\n          appAccounts: 'accounts';\n          appForeignApps: 'foreignApps';\n          appForeignAssets: 'foreignAssets';\n          reKeyTo: 'rekeyTo';\n        }\n      >,\n      | 'from'\n      | 'suggestedParams'\n      | 'appIndex'\n      | 'appArgs'\n      | 'accounts'\n      | 'foreignApps'\n      | 'foreignAssets'\n      | 'boxes'\n      | 'note'\n      | 'lease'\n      | 'rekeyTo'\n    >\n  >\n) {\n  return makeApplicationClearStateTxn(\n    o.from,\n    o.suggestedParams,\n    o.appIndex,\n    o.appArgs,\n    o.accounts,\n    o.foreignApps,\n    o.foreignAssets,\n    o.note,\n    o.lease,\n    o.rekeyTo,\n    o.boxes\n  );\n}\n\n/**\n * Make a transaction that just calls an application, doing nothing on completion\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to use\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\n * @param note - Arbitrary data for sender to store\n * @param lease - Lease a transaction\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\n */\nexport function makeApplicationNoOpTxn(\n  from: AppNoOpTxn['from'],\n  suggestedParams: MustHaveSuggestedParams<AppNoOpTxn>['suggestedParams'],\n  appIndex: AppNoOpTxn['appIndex'],\n  appArgs?: AppNoOpTxn['appArgs'],\n  accounts?: AppNoOpTxn['appAccounts'],\n  foreignApps?: AppNoOpTxn['appForeignApps'],\n  foreignAssets?: AppNoOpTxn['appForeignAssets'],\n  note?: AppNoOpTxn['note'],\n  lease?: AppNoOpTxn['lease'],\n  rekeyTo?: AppNoOpTxn['reKeyTo'],\n  boxes?: AppNoOpTxn['boxes']\n) {\n  const o: AppNoOpTxn = {\n    type: TransactionType.appl,\n    from,\n    suggestedParams,\n    appIndex,\n    appOnComplete: OnApplicationComplete.NoOpOC,\n    appArgs,\n    appAccounts: accounts,\n    appForeignApps: foreignApps,\n    appForeignAssets: foreignAssets,\n    boxes,\n    note,\n    lease,\n    reKeyTo: rekeyTo,\n  };\n  return new txnBuilder.Transaction(o);\n}\n\n// helper for above makeApplicationNoOpTxn, instead accepting an argument object\nexport function makeApplicationNoOpTxnFromObject(\n  o: Expand<\n    Pick<\n      RenameProperties<\n        MustHaveSuggestedParams<AppOptInTxn>,\n        {\n          appAccounts: 'accounts';\n          appForeignApps: 'foreignApps';\n          appForeignAssets: 'foreignAssets';\n          reKeyTo: 'rekeyTo';\n        }\n      >,\n      | 'from'\n      | 'suggestedParams'\n      | 'appIndex'\n      | 'appArgs'\n      | 'accounts'\n      | 'foreignApps'\n      | 'foreignAssets'\n      | 'boxes'\n      | 'note'\n      | 'lease'\n      | 'rekeyTo'\n    >\n  >\n) {\n  return makeApplicationNoOpTxn(\n    o.from,\n    o.suggestedParams,\n    o.appIndex,\n    o.appArgs,\n    o.accounts,\n    o.foreignApps,\n    o.foreignAssets,\n    o.note,\n    o.lease,\n    o.rekeyTo,\n    o.boxes\n  );\n}\n\nexport { OnApplicationComplete } from './types/transactions/base';\n\n/**\n * Generic function for creating any application call transaction.\n */\nexport function makeApplicationCallTxnFromObject(\n  options: Expand<\n    Pick<\n      RenameProperties<\n        MustHaveSuggestedParams<AppCreateTxn>,\n        {\n          appOnComplete: 'onComplete';\n          appAccounts: 'accounts';\n          appForeignApps: 'foreignApps';\n          appForeignAssets: 'foreignAssets';\n          reKeyTo: 'rekeyTo';\n        }\n      >,\n      | 'from'\n      | 'suggestedParams'\n      | 'appIndex'\n      | 'onComplete'\n      | 'appArgs'\n      | 'accounts'\n      | 'foreignApps'\n      | 'foreignAssets'\n      | 'boxes'\n      | 'note'\n      | 'lease'\n      | 'rekeyTo'\n      | 'extraPages'\n    > &\n      Partial<\n        Pick<\n          RenameProperties<\n            MustHaveSuggestedParams<AppCreateTxn>,\n            {\n              appApprovalProgram: 'approvalProgram';\n              appClearProgram: 'clearProgram';\n              appLocalInts: 'numLocalInts';\n              appLocalByteSlices: 'numLocalByteSlices';\n              appGlobalInts: 'numGlobalInts';\n              appGlobalByteSlices: 'numGlobalByteSlices';\n            }\n          >,\n          | 'approvalProgram'\n          | 'clearProgram'\n          | 'numLocalInts'\n          | 'numLocalByteSlices'\n          | 'numGlobalInts'\n          | 'numGlobalByteSlices'\n        >\n      >\n  >\n) {\n  const o: AppCreateTxn = {\n    type: TransactionType.appl,\n    from: options.from,\n    suggestedParams: options.suggestedParams,\n    appIndex: options.appIndex,\n    appOnComplete: options.onComplete,\n    appLocalInts: options.numLocalInts,\n    appLocalByteSlices: options.numLocalByteSlices,\n    appGlobalInts: options.numGlobalInts,\n    appGlobalByteSlices: options.numGlobalByteSlices,\n    appApprovalProgram: options.approvalProgram,\n    appClearProgram: options.clearProgram,\n    appArgs: options.appArgs,\n    appAccounts: options.accounts,\n    appForeignApps: options.foreignApps,\n    appForeignAssets: options.foreignAssets,\n    boxes: options.boxes,\n    note: options.note,\n    lease: options.lease,\n    reKeyTo: options.rekeyTo,\n    extraPages: options.extraPages,\n  };\n  return new txnBuilder.Transaction(o);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}