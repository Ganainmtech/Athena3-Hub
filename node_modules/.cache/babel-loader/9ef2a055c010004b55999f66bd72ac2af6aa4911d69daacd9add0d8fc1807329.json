{"ast":null,"code":"import JSONRequest from '../jsonrequest';\nimport { BoxesResponse } from './models/types';\n/**\n * Given an application ID, return all the box names associated with the app.\n *\n * #### Example\n * ```typescript\n * const index = 60553466;\n * const boxesResponse = await algodClient.getApplicationBoxes(index).max(3).do();\n * const boxNames = boxesResponse.boxes.map(box => box.name);\n * ```\n *\n * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2applicationsapplication-idboxes)\n * @param index - The application ID to look up.\n * @category GET\n */\nexport default class GetApplicationBoxes extends JSONRequest {\n  constructor(c, intDecoding, index) {\n    super(c, intDecoding);\n    this.index = index;\n    this.index = index;\n    this.query.max = 0;\n  }\n  /**\n   * @returns `/v2/applications/${index}/boxes`\n   */\n  path() {\n    return `/v2/applications/${this.index}/boxes`;\n  }\n  /**\n   * Limit results for pagination.\n   *\n   * #### Example\n   * ```typescript\n   * const maxResults = 20;\n   * const boxesResult = await algodClient\n   *        .GetApplicationBoxes(1234)\n   *        .limit(maxResults)\n   *        .do();\n   * ```\n   *\n   * @param limit - maximum number of results to return.\n   * @category query\n   */\n  max(max) {\n    this.query.max = max;\n    return this;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  prepare(body) {\n    return BoxesResponse.from_obj_for_encoding(body);\n  }\n}","map":{"version":3,"names":["JSONRequest","BoxesResponse","GetApplicationBoxes","constructor","c","intDecoding","index","query","max","path","prepare","body","from_obj_for_encoding"],"sources":["/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/node_modules/algosdk/src/client/v2/algod/getApplicationBoxes.ts"],"sourcesContent":["import JSONRequest from '../jsonrequest';\nimport HTTPClient from '../../client';\nimport IntDecoding from '../../../types/intDecoding';\nimport { BoxesResponse } from './models/types';\n\n/**\n * Given an application ID, return all the box names associated with the app.\n *\n * #### Example\n * ```typescript\n * const index = 60553466;\n * const boxesResponse = await algodClient.getApplicationBoxes(index).max(3).do();\n * const boxNames = boxesResponse.boxes.map(box => box.name);\n * ```\n *\n * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2applicationsapplication-idboxes)\n * @param index - The application ID to look up.\n * @category GET\n */\nexport default class GetApplicationBoxes extends JSONRequest<\n  BoxesResponse,\n  Record<string, any>\n> {\n  constructor(c: HTTPClient, intDecoding: IntDecoding, private index: number) {\n    super(c, intDecoding);\n    this.index = index;\n    this.query.max = 0;\n  }\n\n  /**\n   * @returns `/v2/applications/${index}/boxes`\n   */\n  path() {\n    return `/v2/applications/${this.index}/boxes`;\n  }\n\n  /**\n   * Limit results for pagination.\n   *\n   * #### Example\n   * ```typescript\n   * const maxResults = 20;\n   * const boxesResult = await algodClient\n   *        .GetApplicationBoxes(1234)\n   *        .limit(maxResults)\n   *        .do();\n   * ```\n   *\n   * @param limit - maximum number of results to return.\n   * @category query\n   */\n  max(max: number) {\n    this.query.max = max;\n    return this;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  prepare(body: Record<string, any>): BoxesResponse {\n    return BoxesResponse.from_obj_for_encoding(body);\n  }\n}\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,gBAAgB;AAGxC,SAASC,aAAa,QAAQ,gBAAgB;AAE9C;;;;;;;;;;;;;;AAcA,eAAc,MAAOC,mBAAoB,SAAQF,WAGhD;EACCG,YAAYC,CAAa,EAAEC,WAAwB,EAAUC,KAAa;IACxE,KAAK,CAACF,CAAC,EAAEC,WAAW,CAAC;IADsC,KAAAC,KAAK,GAALA,KAAK;IAEhE,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,KAAK,CAACC,GAAG,GAAG,CAAC;EACpB;EAEA;;;EAGAC,IAAIA,CAAA;IACF,OAAO,oBAAoB,IAAI,CAACH,KAAK,QAAQ;EAC/C;EAEA;;;;;;;;;;;;;;;EAeAE,GAAGA,CAACA,GAAW;IACb,IAAI,CAACD,KAAK,CAACC,GAAG,GAAGA,GAAG;IACpB,OAAO,IAAI;EACb;EAEA;EACAE,OAAOA,CAACC,IAAyB;IAC/B,OAAOV,aAAa,CAACW,qBAAqB,CAACD,IAAI,CAAC;EAClD"},"metadata":{},"sourceType":"module","externalDependencies":[]}