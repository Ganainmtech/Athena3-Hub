{"ast":null,"code":"\"use client\";\n\nimport _slicedToArray from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nimport { render } from \"rc-util/es/React/render\";\nimport ConfigProvider, { globalConfig, warnContext } from '../config-provider';\nimport PurePanel from './PurePanel';\nimport useNotification, { useInternalNotification } from './useNotification';\nvar notification = null;\nvar act = function act(callback) {\n  return callback();\n};\nvar taskQueue = [];\nvar defaultGlobalConfig = {};\nfunction getGlobalContext() {\n  var _defaultGlobalConfig = defaultGlobalConfig,\n    globalPrefixCls = _defaultGlobalConfig.prefixCls,\n    globalGetContainer = _defaultGlobalConfig.getContainer,\n    rtl = _defaultGlobalConfig.rtl,\n    maxCount = _defaultGlobalConfig.maxCount,\n    top = _defaultGlobalConfig.top,\n    bottom = _defaultGlobalConfig.bottom;\n  var mergedPrefixCls = globalPrefixCls !== null && globalPrefixCls !== void 0 ? globalPrefixCls : globalConfig().getPrefixCls('notification');\n  var mergedContainer = (globalGetContainer === null || globalGetContainer === void 0 ? void 0 : globalGetContainer()) || document.body;\n  return {\n    prefixCls: mergedPrefixCls,\n    getContainer: function getContainer() {\n      return mergedContainer;\n    },\n    rtl: rtl,\n    maxCount: maxCount,\n    top: top,\n    bottom: bottom\n  };\n}\nvar GlobalHolder = /*#__PURE__*/React.forwardRef(function (_, ref) {\n  var _React$useState = React.useState(getGlobalContext),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    notificationConfig = _React$useState2[0],\n    setNotificationConfig = _React$useState2[1];\n  var _useInternalNotificat = useInternalNotification(notificationConfig),\n    _useInternalNotificat2 = _slicedToArray(_useInternalNotificat, 2),\n    api = _useInternalNotificat2[0],\n    holder = _useInternalNotificat2[1];\n  var global = globalConfig();\n  var rootPrefixCls = global.getRootPrefixCls();\n  var rootIconPrefixCls = global.getIconPrefixCls();\n  var theme = global.getTheme();\n  var sync = function sync() {\n    setNotificationConfig(getGlobalContext);\n  };\n  React.useEffect(sync, []);\n  React.useImperativeHandle(ref, function () {\n    var instance = Object.assign({}, api);\n    Object.keys(instance).forEach(function (method) {\n      instance[method] = function () {\n        sync();\n        return api[method].apply(api, arguments);\n      };\n    });\n    return {\n      instance: instance,\n      sync: sync\n    };\n  });\n  return /*#__PURE__*/React.createElement(ConfigProvider, {\n    prefixCls: rootPrefixCls,\n    iconPrefixCls: rootIconPrefixCls,\n    theme: theme\n  }, holder);\n});\nfunction flushNotice() {\n  if (!notification) {\n    var holderFragment = document.createDocumentFragment();\n    var newNotification = {\n      fragment: holderFragment\n    };\n    notification = newNotification;\n    // Delay render to avoid sync issue\n    act(function () {\n      render( /*#__PURE__*/React.createElement(GlobalHolder, {\n        ref: function ref(node) {\n          var _ref = node || {},\n            instance = _ref.instance,\n            sync = _ref.sync;\n          Promise.resolve().then(function () {\n            if (!newNotification.instance && instance) {\n              newNotification.instance = instance;\n              newNotification.sync = sync;\n              flushNotice();\n            }\n          });\n        }\n      }), holderFragment);\n    });\n    return;\n  }\n  // Notification not ready\n  if (!notification.instance) {\n    return;\n  }\n  // >>> Execute task\n  taskQueue.forEach(function (task) {\n    // eslint-disable-next-line default-case\n    switch (task.type) {\n      case 'open':\n        {\n          act(function () {\n            notification.instance.open(Object.assign(Object.assign({}, defaultGlobalConfig), task.config));\n          });\n          break;\n        }\n      case 'destroy':\n        act(function () {\n          notification === null || notification === void 0 ? void 0 : notification.instance.destroy(task.key);\n        });\n        break;\n    }\n  });\n  // Clean up\n  taskQueue = [];\n}\n// ==============================================================================\n// ==                                  Export                                  ==\n// ==============================================================================\nfunction setNotificationGlobalConfig(config) {\n  defaultGlobalConfig = Object.assign(Object.assign({}, defaultGlobalConfig), config);\n  // Trigger sync for it\n  act(function () {\n    var _a;\n    (_a = notification === null || notification === void 0 ? void 0 : notification.sync) === null || _a === void 0 ? void 0 : _a.call(notification);\n  });\n}\nfunction open(config) {\n  // Warning if exist theme\n  if (process.env.NODE_ENV !== 'production') {\n    warnContext('notification');\n  }\n  taskQueue.push({\n    type: 'open',\n    config: config\n  });\n  flushNotice();\n}\nfunction destroy(key) {\n  taskQueue.push({\n    type: 'destroy',\n    key: key\n  });\n  flushNotice();\n}\nvar methods = ['success', 'info', 'warning', 'error'];\nvar baseStaticMethods = {\n  open: open,\n  destroy: destroy,\n  config: setNotificationGlobalConfig,\n  useNotification: useNotification,\n  _InternalPanelDoNotUseOrYouWillBeFired: PurePanel\n};\nvar staticMethods = baseStaticMethods;\nmethods.forEach(function (type) {\n  staticMethods[type] = function (config) {\n    return open(Object.assign(Object.assign({}, config), {\n      type: type\n    }));\n  };\n});\n// ==============================================================================\n// ==                                   Test                                   ==\n// ==============================================================================\nvar noop = function noop() {};\n/** @internal Only Work in test env */\n// eslint-disable-next-line import/no-mutable-exports\nexport var actWrapper = noop;\nif (process.env.NODE_ENV === 'test') {\n  actWrapper = function actWrapper(wrapper) {\n    act = wrapper;\n  };\n}\nexport default staticMethods;","map":{"version":3,"names":["_slicedToArray","React","render","ConfigProvider","globalConfig","warnContext","PurePanel","useNotification","useInternalNotification","notification","act","callback","taskQueue","defaultGlobalConfig","getGlobalContext","_defaultGlobalConfig","globalPrefixCls","prefixCls","globalGetContainer","getContainer","rtl","maxCount","top","bottom","mergedPrefixCls","getPrefixCls","mergedContainer","document","body","GlobalHolder","forwardRef","_","ref","_React$useState","useState","_React$useState2","notificationConfig","setNotificationConfig","_useInternalNotificat","_useInternalNotificat2","api","holder","global","rootPrefixCls","getRootPrefixCls","rootIconPrefixCls","getIconPrefixCls","theme","getTheme","sync","useEffect","useImperativeHandle","instance","Object","assign","keys","forEach","method","apply","arguments","createElement","iconPrefixCls","flushNotice","holderFragment","createDocumentFragment","newNotification","fragment","node","_ref","Promise","resolve","then","task","type","open","config","destroy","key","setNotificationGlobalConfig","_a","call","process","env","NODE_ENV","push","methods","baseStaticMethods","_InternalPanelDoNotUseOrYouWillBeFired","staticMethods","noop","actWrapper","wrapper"],"sources":["/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/antd/es/notification/index.js"],"sourcesContent":["\"use client\";\n\nimport * as React from 'react';\nimport { render } from \"rc-util/es/React/render\";\nimport ConfigProvider, { globalConfig, warnContext } from '../config-provider';\nimport PurePanel from './PurePanel';\nimport useNotification, { useInternalNotification } from './useNotification';\nlet notification = null;\nlet act = callback => callback();\nlet taskQueue = [];\nlet defaultGlobalConfig = {};\nfunction getGlobalContext() {\n  const {\n    prefixCls: globalPrefixCls,\n    getContainer: globalGetContainer,\n    rtl,\n    maxCount,\n    top,\n    bottom\n  } = defaultGlobalConfig;\n  const mergedPrefixCls = globalPrefixCls !== null && globalPrefixCls !== void 0 ? globalPrefixCls : globalConfig().getPrefixCls('notification');\n  const mergedContainer = (globalGetContainer === null || globalGetContainer === void 0 ? void 0 : globalGetContainer()) || document.body;\n  return {\n    prefixCls: mergedPrefixCls,\n    getContainer: () => mergedContainer,\n    rtl,\n    maxCount,\n    top,\n    bottom\n  };\n}\nconst GlobalHolder = /*#__PURE__*/React.forwardRef((_, ref) => {\n  const [notificationConfig, setNotificationConfig] = React.useState(getGlobalContext);\n  const [api, holder] = useInternalNotification(notificationConfig);\n  const global = globalConfig();\n  const rootPrefixCls = global.getRootPrefixCls();\n  const rootIconPrefixCls = global.getIconPrefixCls();\n  const theme = global.getTheme();\n  const sync = () => {\n    setNotificationConfig(getGlobalContext);\n  };\n  React.useEffect(sync, []);\n  React.useImperativeHandle(ref, () => {\n    const instance = Object.assign({}, api);\n    Object.keys(instance).forEach(method => {\n      instance[method] = function () {\n        sync();\n        return api[method].apply(api, arguments);\n      };\n    });\n    return {\n      instance,\n      sync\n    };\n  });\n  return /*#__PURE__*/React.createElement(ConfigProvider, {\n    prefixCls: rootPrefixCls,\n    iconPrefixCls: rootIconPrefixCls,\n    theme: theme\n  }, holder);\n});\nfunction flushNotice() {\n  if (!notification) {\n    const holderFragment = document.createDocumentFragment();\n    const newNotification = {\n      fragment: holderFragment\n    };\n    notification = newNotification;\n    // Delay render to avoid sync issue\n    act(() => {\n      render( /*#__PURE__*/React.createElement(GlobalHolder, {\n        ref: node => {\n          const {\n            instance,\n            sync\n          } = node || {};\n          Promise.resolve().then(() => {\n            if (!newNotification.instance && instance) {\n              newNotification.instance = instance;\n              newNotification.sync = sync;\n              flushNotice();\n            }\n          });\n        }\n      }), holderFragment);\n    });\n    return;\n  }\n  // Notification not ready\n  if (!notification.instance) {\n    return;\n  }\n  // >>> Execute task\n  taskQueue.forEach(task => {\n    // eslint-disable-next-line default-case\n    switch (task.type) {\n      case 'open':\n        {\n          act(() => {\n            notification.instance.open(Object.assign(Object.assign({}, defaultGlobalConfig), task.config));\n          });\n          break;\n        }\n      case 'destroy':\n        act(() => {\n          notification === null || notification === void 0 ? void 0 : notification.instance.destroy(task.key);\n        });\n        break;\n    }\n  });\n  // Clean up\n  taskQueue = [];\n}\n// ==============================================================================\n// ==                                  Export                                  ==\n// ==============================================================================\nfunction setNotificationGlobalConfig(config) {\n  defaultGlobalConfig = Object.assign(Object.assign({}, defaultGlobalConfig), config);\n  // Trigger sync for it\n  act(() => {\n    var _a;\n    (_a = notification === null || notification === void 0 ? void 0 : notification.sync) === null || _a === void 0 ? void 0 : _a.call(notification);\n  });\n}\nfunction open(config) {\n  // Warning if exist theme\n  if (process.env.NODE_ENV !== 'production') {\n    warnContext('notification');\n  }\n  taskQueue.push({\n    type: 'open',\n    config\n  });\n  flushNotice();\n}\nfunction destroy(key) {\n  taskQueue.push({\n    type: 'destroy',\n    key\n  });\n  flushNotice();\n}\nconst methods = ['success', 'info', 'warning', 'error'];\nconst baseStaticMethods = {\n  open,\n  destroy,\n  config: setNotificationGlobalConfig,\n  useNotification,\n  _InternalPanelDoNotUseOrYouWillBeFired: PurePanel\n};\nconst staticMethods = baseStaticMethods;\nmethods.forEach(type => {\n  staticMethods[type] = config => open(Object.assign(Object.assign({}, config), {\n    type\n  }));\n});\n// ==============================================================================\n// ==                                   Test                                   ==\n// ==============================================================================\nconst noop = () => {};\n/** @internal Only Work in test env */\n// eslint-disable-next-line import/no-mutable-exports\nexport let actWrapper = noop;\nif (process.env.NODE_ENV === 'test') {\n  actWrapper = wrapper => {\n    act = wrapper;\n  };\n}\nexport default staticMethods;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}