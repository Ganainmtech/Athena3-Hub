{"ast":null,"code":"import _classCallCheck from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport JSONRequest from '../jsonrequest';\nimport { base64StringFunnel } from './lookupAccountTransactions';\n/**\n * Returns information about indexed transactions.\n *\n * #### Example\n * ```typescript\n * const txns = await indexerClient.searchForTransactions().do();\n * ```\n *\n * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2transactions)\n * @category GET\n */\nvar SearchForTransactions = /*#__PURE__*/function (_JSONRequest) {\n  _inherits(SearchForTransactions, _JSONRequest);\n  var _super = _createSuper(SearchForTransactions);\n  function SearchForTransactions() {\n    _classCallCheck(this, SearchForTransactions);\n    return _super.apply(this, arguments);\n  }\n  _createClass(SearchForTransactions, [{\n    key: \"path\",\n    value:\n    /**\n     * @returns `/v2/transactions`\n     */\n    // eslint-disable-next-line class-methods-use-this\n    function path() {\n      return '/v2/transactions';\n    }\n    /**\n     * Specifies a prefix which must be contained in the note field.\n     *\n     * #### Example\n     * ```typescript\n     * const notePrefixBase64Encoded = \"Y3JlYXRl\";\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .notePrefix(notePrefixBase64Encoded)\n     *        .do();\n     * ```\n     *\n     * @param prefix - base64 string or uint8array\n     * @category query\n     */\n  }, {\n    key: \"notePrefix\",\n    value: function notePrefix(prefix) {\n      this.query['note-prefix'] = base64StringFunnel(prefix);\n      return this;\n    }\n    /**\n     * Type of transaction to filter with.\n     *\n     * #### Example\n     * ```typescript\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .txType(\"keyreg\")\n     *        .do();\n     * ```\n     *\n     * @param type - one of `pay`, `keyreg`, `acfg`, `axfer`, `afrz`, `appl`, `stpf`\n     * @category query\n     */\n  }, {\n    key: \"txType\",\n    value: function txType(type) {\n      this.query['tx-type'] = type;\n      return this;\n    }\n    /**\n     * Type of signature to filter with.\n     * - sig: Standard\n     * - msig: MultiSig\n     * - lsig: LogicSig\n     *\n     * #### Example\n     * ```typescript\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .sigType(\"sig\")\n     *        .do();\n     * ```\n     *\n     * @param type - one of `sig`, `msig`, `lsig`\n     * @category query\n     */\n  }, {\n    key: \"sigType\",\n    value: function sigType(type) {\n      this.query['sig-type'] = type;\n      return this;\n    }\n    /**\n     * Lookup the specific transaction by ID.\n     *\n     * #### Example\n     * ```typescript\n     * const txId = \"MEUOC4RQJB23CQZRFRKYEI6WBO73VTTPST5A7B3S5OKBUY6LFUDA\";\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .txid(txId)\n     *        .do();\n     * ```\n     * @remarks Alternatively, use `indexerClient.lookupTransactionByID(txnId).do()`\n     * @param txid\n     * @category query\n     */\n  }, {\n    key: \"txid\",\n    value: function txid(_txid) {\n      this.query.txid = _txid;\n      return this;\n    }\n    /**\n     * Include results for the specified round.\n     *\n     * #### Example\n     * ```typescript\n     * const targetBlock = 18309917;\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .round(targetBlock)\n     *        .do();\n     * ```\n     * @remarks Alternatively, use `indexerClient.lookupBlock(targetBlock).do()`\n     * @param round\n     * @category query\n     */\n  }, {\n    key: \"round\",\n    value: function round(_round) {\n      this.query.round = _round;\n      return this;\n    }\n    /**\n     * Include results at or after the specified min-round.\n     *\n     * #### Example\n     * ```typescript\n     * const minRound = 18309917;\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .minRound(minRound)\n     *        .do();\n     * ```\n     *\n     * @param round\n     * @category query\n     */\n  }, {\n    key: \"minRound\",\n    value: function minRound(round) {\n      this.query['min-round'] = round;\n      return this;\n    }\n    /**\n     * Include results at or before the specified max-round.\n     *\n     * #### Example\n     * ```typescript\n     * const maxRound = 18309917;\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .maxRound(maxRound)\n     *        .do();\n     * ```\n     *\n     * @param round\n     * @category query\n     */\n  }, {\n    key: \"maxRound\",\n    value: function maxRound(round) {\n      this.query['max-round'] = round;\n      return this;\n    }\n    /**\n     * Asset ID to filter with.\n     *\n     * #### Example\n     * ```typescript\n     * const assetID = 163650;\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .assetID(assetID)\n     *        .do();\n     * ```\n     * @remarks Alternatively, use `indexerClient.lookupAssetTransactions(assetId).do()`\n     * @param id\n     * @category query\n     */\n  }, {\n    key: \"assetID\",\n    value: function assetID(id) {\n      this.query['asset-id'] = id;\n      return this;\n    }\n    /**\n     * Maximum number of results to return.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 25;\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .limit(maxResults)\n     *        .do();\n     * ```\n     *\n     * @param limit\n     * @category query\n     */\n  }, {\n    key: \"limit\",\n    value: function limit(_limit) {\n      this.query.limit = _limit;\n      return this;\n    }\n    /**\n     * Include results before the given time.\n     *\n     * #### Example\n     * ```typescript\n     * const beforeTime = \"2022-02-02T20:20:22.02Z\";\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .beforeTime(beforeTime)\n     *        .do();\n     * ```\n     *\n     * @param before - rfc3339 string\n     * @category query\n     */\n  }, {\n    key: \"beforeTime\",\n    value: function beforeTime(before) {\n      this.query['before-time'] = before;\n      return this;\n    }\n    /**\n     * Include results after the given time.\n     *\n     * #### Example\n     * ```typescript\n     * const afterTime = \"2022-10-21T00:00:11.55Z\";\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .afterTime(afterTime)\n     *        .do();\n     * ```\n     *\n     * @param after - rfc3339 string\n     * @category query\n     */\n  }, {\n    key: \"afterTime\",\n    value: function afterTime(after) {\n      this.query['after-time'] = after;\n      return this;\n    }\n    /**\n     * Combined with address, defines what address to filter on, as string.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const role = \"freeze-target\";\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .address(address)\n     *        .addressRole(role)\n     *        .do();\n     * ```\n     *\n     * @param role - one of `sender`, `receiver`, `freeze-target`\n     * @category query\n     */\n  }, {\n    key: \"addressRole\",\n    value: function addressRole(role) {\n      this.query['address-role'] = role;\n      return this;\n    }\n    /**\n     * Only include transactions with this address in one of the transaction fields.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .address(address)\n     *        .do();\n     * ```\n     * @remarks Alternatively, use `indexerClient.lookupAccountTransactions(address).do()`\n     * @param address\n     * @category query\n     */\n  }, {\n    key: \"address\",\n    value: function address(_address) {\n      this.query.address = _address;\n      return this;\n    }\n    /**\n     * Whether or not to consider the `close-to` field as a receiver when filtering transactions, as bool. Set to `true` to ignore `close-to`.\n     *\n     * #### Example\n     * ```typescript\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .excludeCloseTo(true)\n     *        .do();\n     * ```\n     *\n     * @param exclude\n     * @category query\n     */\n  }, {\n    key: \"excludeCloseTo\",\n    value: function excludeCloseTo(exclude) {\n      this.query['exclude-close-to'] = exclude;\n      return this;\n    }\n    /**\n     * The next page of results.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 25;\n     *\n     * const txnsPage1 = await indexerClient\n     *        .searchForTransactions()\n     *        .limit(maxResults)\n     *        .do();\n     *\n     * const txnsPage2 = await indexerClient\n     *        .searchForTransactions()\n     *        .limit(maxResults)\n     *        .nextToken(txnsPage1[\"next-token\"])\n     *        .do();\n     * ```\n     *\n     * @param nextToken - provided by the previous results\n     * @category query\n     */\n  }, {\n    key: \"nextToken\",\n    value: function nextToken(_nextToken) {\n      this.query.next = _nextToken;\n      return this;\n    }\n    /**\n     * Whether or not to include rekeying transactions.\n     *\n     * #### Example\n     * ```typescript\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .rekeyTo(false)\n     *        .do();\n     * ```\n     *\n     * @param rekeyTo\n     * @category query\n     */\n  }, {\n    key: \"rekeyTo\",\n    value: function rekeyTo(_rekeyTo) {\n      this.query['rekey-to'] = _rekeyTo;\n      return this;\n    }\n    /**\n     * Filter for this application.\n     *\n     * #### Example\n     * ```typescript\n     * const appId = 60553466;\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .applicationID(appId)\n     *        .do();\n     * ```\n     *\n     * @param applicationID\n     * @category query\n     */\n  }, {\n    key: \"applicationID\",\n    value: function applicationID(_applicationID) {\n      this.query['application-id'] = _applicationID;\n      return this;\n    }\n    /**\n     * Filtered results should have an amount greater than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units.\n     *\n     * #### Example 1\n     * ```typescript\n     * const minBalance = 300000;\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .currencyGreaterThan(minBalance - 1)\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const assetID = 163650;\n     * const minBalance = 300000;\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .assetID(assetID)\n     *        .currencyGreaterThan(minBalance - 1)\n     *        .do();\n     * ```\n     *\n     * @param greater\n     * @category query\n     */\n  }, {\n    key: \"currencyGreaterThan\",\n    value: function currencyGreaterThan(greater) {\n      // We convert the following to a string for now to correctly include zero values in request parameters.\n      this.query['currency-greater-than'] = greater.toString();\n      return this;\n    }\n    /**\n     * Filtered results should have an amount less than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units.\n     *\n     * #### Example 1\n     * ```typescript\n     * const maxBalance = 500000;\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .currencyLessThan(maxBalance + 1)\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const assetID = 163650;\n     * const maxBalance = 500000;\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .assetID(assetID)\n     *        .currencyLessThan(maxBalance + 1)\n     *        .do();\n     * ```\n     *\n     * @param lesser\n     * @category query\n     */\n  }, {\n    key: \"currencyLessThan\",\n    value: function currencyLessThan(lesser) {\n      this.query['currency-less-than'] = lesser;\n      return this;\n    }\n  }]);\n  return SearchForTransactions;\n}(JSONRequest);\nexport { SearchForTransactions as default };","map":{"version":3,"names":["JSONRequest","base64StringFunnel","SearchForTransactions","_JSONRequest","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","path","notePrefix","prefix","query","txType","type","sigType","txid","round","minRound","maxRound","assetID","id","limit","beforeTime","before","afterTime","after","addressRole","role","address","excludeCloseTo","exclude","nextToken","next","rekeyTo","applicationID","currencyGreaterThan","greater","toString","currencyLessThan","lesser","default"],"sources":["/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/algosdk/src/client/v2/indexer/searchForTransactions.ts"],"sourcesContent":["import JSONRequest from '../jsonrequest';\nimport { base64StringFunnel } from './lookupAccountTransactions';\n\n/**\n * Returns information about indexed transactions.\n *\n * #### Example\n * ```typescript\n * const txns = await indexerClient.searchForTransactions().do();\n * ```\n *\n * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2transactions)\n * @category GET\n */\nexport default class SearchForTransactions extends JSONRequest {\n  /**\n   * @returns `/v2/transactions`\n   */\n  // eslint-disable-next-line class-methods-use-this\n  path() {\n    return '/v2/transactions';\n  }\n\n  /**\n   * Specifies a prefix which must be contained in the note field.\n   *\n   * #### Example\n   * ```typescript\n   * const notePrefixBase64Encoded = \"Y3JlYXRl\";\n   * const txns = await indexerClient\n   *        .searchForTransactions()\n   *        .notePrefix(notePrefixBase64Encoded)\n   *        .do();\n   * ```\n   *\n   * @param prefix - base64 string or uint8array\n   * @category query\n   */\n  notePrefix(prefix: Uint8Array | string) {\n    this.query['note-prefix'] = base64StringFunnel(prefix);\n    return this;\n  }\n\n  /**\n   * Type of transaction to filter with.\n   *\n   * #### Example\n   * ```typescript\n   * const txns = await indexerClient\n   *        .searchForTransactions()\n   *        .txType(\"keyreg\")\n   *        .do();\n   * ```\n   *\n   * @param type - one of `pay`, `keyreg`, `acfg`, `axfer`, `afrz`, `appl`, `stpf`\n   * @category query\n   */\n  txType(type: string) {\n    this.query['tx-type'] = type;\n    return this;\n  }\n\n  /**\n   * Type of signature to filter with.\n   * - sig: Standard\n   * - msig: MultiSig\n   * - lsig: LogicSig\n   *\n   * #### Example\n   * ```typescript\n   * const txns = await indexerClient\n   *        .searchForTransactions()\n   *        .sigType(\"sig\")\n   *        .do();\n   * ```\n   *\n   * @param type - one of `sig`, `msig`, `lsig`\n   * @category query\n   */\n  sigType(type: string) {\n    this.query['sig-type'] = type;\n    return this;\n  }\n\n  /**\n   * Lookup the specific transaction by ID.\n   *\n   * #### Example\n   * ```typescript\n   * const txId = \"MEUOC4RQJB23CQZRFRKYEI6WBO73VTTPST5A7B3S5OKBUY6LFUDA\";\n   * const txns = await indexerClient\n   *        .searchForTransactions()\n   *        .txid(txId)\n   *        .do();\n   * ```\n   * @remarks Alternatively, use `indexerClient.lookupTransactionByID(txnId).do()`\n   * @param txid\n   * @category query\n   */\n  txid(txid: string) {\n    this.query.txid = txid;\n    return this;\n  }\n\n  /**\n   * Include results for the specified round.\n   *\n   * #### Example\n   * ```typescript\n   * const targetBlock = 18309917;\n   * const txns = await indexerClient\n   *        .searchForTransactions()\n   *        .round(targetBlock)\n   *        .do();\n   * ```\n   * @remarks Alternatively, use `indexerClient.lookupBlock(targetBlock).do()`\n   * @param round\n   * @category query\n   */\n  round(round: number) {\n    this.query.round = round;\n    return this;\n  }\n\n  /**\n   * Include results at or after the specified min-round.\n   *\n   * #### Example\n   * ```typescript\n   * const minRound = 18309917;\n   * const txns = await indexerClient\n   *        .searchForTransactions()\n   *        .minRound(minRound)\n   *        .do();\n   * ```\n   *\n   * @param round\n   * @category query\n   */\n  minRound(round: number) {\n    this.query['min-round'] = round;\n    return this;\n  }\n\n  /**\n   * Include results at or before the specified max-round.\n   *\n   * #### Example\n   * ```typescript\n   * const maxRound = 18309917;\n   * const txns = await indexerClient\n   *        .searchForTransactions()\n   *        .maxRound(maxRound)\n   *        .do();\n   * ```\n   *\n   * @param round\n   * @category query\n   */\n  maxRound(round: number) {\n    this.query['max-round'] = round;\n    return this;\n  }\n\n  /**\n   * Asset ID to filter with.\n   *\n   * #### Example\n   * ```typescript\n   * const assetID = 163650;\n   * const txns = await indexerClient\n   *        .searchForTransactions()\n   *        .assetID(assetID)\n   *        .do();\n   * ```\n   * @remarks Alternatively, use `indexerClient.lookupAssetTransactions(assetId).do()`\n   * @param id\n   * @category query\n   */\n  assetID(id: number) {\n    this.query['asset-id'] = id;\n    return this;\n  }\n\n  /**\n   * Maximum number of results to return.\n   *\n   * #### Example\n   * ```typescript\n   * const maxResults = 25;\n   * const txns = await indexerClient\n   *        .searchForTransactions()\n   *        .limit(maxResults)\n   *        .do();\n   * ```\n   *\n   * @param limit\n   * @category query\n   */\n  limit(limit: number) {\n    this.query.limit = limit;\n    return this;\n  }\n\n  /**\n   * Include results before the given time.\n   *\n   * #### Example\n   * ```typescript\n   * const beforeTime = \"2022-02-02T20:20:22.02Z\";\n   * const txns = await indexerClient\n   *        .searchForTransactions()\n   *        .beforeTime(beforeTime)\n   *        .do();\n   * ```\n   *\n   * @param before - rfc3339 string\n   * @category query\n   */\n  beforeTime(before: string) {\n    this.query['before-time'] = before;\n    return this;\n  }\n\n  /**\n   * Include results after the given time.\n   *\n   * #### Example\n   * ```typescript\n   * const afterTime = \"2022-10-21T00:00:11.55Z\";\n   * const txns = await indexerClient\n   *        .searchForTransactions()\n   *        .afterTime(afterTime)\n   *        .do();\n   * ```\n   *\n   * @param after - rfc3339 string\n   * @category query\n   */\n  afterTime(after: string) {\n    this.query['after-time'] = after;\n    return this;\n  }\n\n  /**\n   * Combined with address, defines what address to filter on, as string.\n   *\n   * #### Example\n   * ```typescript\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n   * const role = \"freeze-target\";\n   * const txns = await indexerClient\n   *        .searchForTransactions()\n   *        .address(address)\n   *        .addressRole(role)\n   *        .do();\n   * ```\n   *\n   * @param role - one of `sender`, `receiver`, `freeze-target`\n   * @category query\n   */\n  addressRole(role: string) {\n    this.query['address-role'] = role;\n    return this;\n  }\n\n  /**\n   * Only include transactions with this address in one of the transaction fields.\n   *\n   * #### Example\n   * ```typescript\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n   * const txns = await indexerClient\n   *        .searchForTransactions()\n   *        .address(address)\n   *        .do();\n   * ```\n   * @remarks Alternatively, use `indexerClient.lookupAccountTransactions(address).do()`\n   * @param address\n   * @category query\n   */\n  address(address: string) {\n    this.query.address = address;\n    return this;\n  }\n\n  /**\n   * Whether or not to consider the `close-to` field as a receiver when filtering transactions, as bool. Set to `true` to ignore `close-to`.\n   *\n   * #### Example\n   * ```typescript\n   * const txns = await indexerClient\n   *        .searchForTransactions()\n   *        .excludeCloseTo(true)\n   *        .do();\n   * ```\n   *\n   * @param exclude\n   * @category query\n   */\n  excludeCloseTo(exclude: boolean) {\n    this.query['exclude-close-to'] = exclude;\n    return this;\n  }\n\n  /**\n   * The next page of results.\n   *\n   * #### Example\n   * ```typescript\n   * const maxResults = 25;\n   *\n   * const txnsPage1 = await indexerClient\n   *        .searchForTransactions()\n   *        .limit(maxResults)\n   *        .do();\n   *\n   * const txnsPage2 = await indexerClient\n   *        .searchForTransactions()\n   *        .limit(maxResults)\n   *        .nextToken(txnsPage1[\"next-token\"])\n   *        .do();\n   * ```\n   *\n   * @param nextToken - provided by the previous results\n   * @category query\n   */\n  nextToken(nextToken: string) {\n    this.query.next = nextToken;\n    return this;\n  }\n\n  /**\n   * Whether or not to include rekeying transactions.\n   *\n   * #### Example\n   * ```typescript\n   * const txns = await indexerClient\n   *        .searchForTransactions()\n   *        .rekeyTo(false)\n   *        .do();\n   * ```\n   *\n   * @param rekeyTo\n   * @category query\n   */\n  rekeyTo(rekeyTo: boolean) {\n    this.query['rekey-to'] = rekeyTo;\n    return this;\n  }\n\n  /**\n   * Filter for this application.\n   *\n   * #### Example\n   * ```typescript\n   * const appId = 60553466;\n   * const txns = await indexerClient\n   *        .searchForTransactions()\n   *        .applicationID(appId)\n   *        .do();\n   * ```\n   *\n   * @param applicationID\n   * @category query\n   */\n  applicationID(applicationID: number) {\n    this.query['application-id'] = applicationID;\n    return this;\n  }\n\n  /**\n   * Filtered results should have an amount greater than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units.\n   *\n   * #### Example 1\n   * ```typescript\n   * const minBalance = 300000;\n   * const txns = await indexerClient\n   *        .searchForTransactions()\n   *        .currencyGreaterThan(minBalance - 1)\n   *        .do();\n   * ```\n   *\n   * #### Example 2\n   * ```typescript\n   * const assetID = 163650;\n   * const minBalance = 300000;\n   * const txns = await indexerClient\n   *        .searchForTransactions()\n   *        .assetID(assetID)\n   *        .currencyGreaterThan(minBalance - 1)\n   *        .do();\n   * ```\n   *\n   * @param greater\n   * @category query\n   */\n  currencyGreaterThan(greater: number) {\n    // We convert the following to a string for now to correctly include zero values in request parameters.\n    this.query['currency-greater-than'] = greater.toString();\n    return this;\n  }\n\n  /**\n   * Filtered results should have an amount less than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units.\n   *\n   * #### Example 1\n   * ```typescript\n   * const maxBalance = 500000;\n   * const txns = await indexerClient\n   *        .searchForTransactions()\n   *        .currencyLessThan(maxBalance + 1)\n   *        .do();\n   * ```\n   *\n   * #### Example 2\n   * ```typescript\n   * const assetID = 163650;\n   * const maxBalance = 500000;\n   * const txns = await indexerClient\n   *        .searchForTransactions()\n   *        .assetID(assetID)\n   *        .currencyLessThan(maxBalance + 1)\n   *        .do();\n   * ```\n   *\n   * @param lesser\n   * @category query\n   */\n  currencyLessThan(lesser: number) {\n    this.query['currency-less-than'] = lesser;\n    return this;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}