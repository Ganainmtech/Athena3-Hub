{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toHaveTextContent = toHaveTextContent;\nvar _utils = require(\"./utils\");\nfunction toHaveTextContent(node, checkWith, options = {\n  normalizeWhitespace: true\n}) {\n  (0, _utils.checkNode)(node, toHaveTextContent, this);\n  const textContent = options.normalizeWhitespace ? (0, _utils.normalize)(node.textContent) : node.textContent.replace(/\\u00a0/g, ' '); // Replace &nbsp; with normal spaces\n\n  const checkingWithEmptyString = textContent !== '' && checkWith === '';\n  return {\n    pass: !checkingWithEmptyString && (0, _utils.matches)(textContent, checkWith),\n    message: () => {\n      const to = this.isNot ? 'not to' : 'to';\n      return (0, _utils.getMessage)(this, this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toHaveTextContent`, 'element', ''), checkingWithEmptyString ? `Checking with empty string will always match, use .toBeEmptyDOMElement() instead` : `Expected element ${to} have text content`, checkWith, 'Received', textContent);\n    }\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","toHaveTextContent","_utils","require","node","checkWith","options","normalizeWhitespace","checkNode","textContent","normalize","replace","checkingWithEmptyString","pass","matches","message","to","isNot","getMessage","utils","matcherHint"],"sources":["/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@testing-library/jest-dom/dist/to-have-text-content.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toHaveTextContent = toHaveTextContent;\nvar _utils = require(\"./utils\");\nfunction toHaveTextContent(node, checkWith, options = {\n  normalizeWhitespace: true\n}) {\n  (0, _utils.checkNode)(node, toHaveTextContent, this);\n  const textContent = options.normalizeWhitespace ? (0, _utils.normalize)(node.textContent) : node.textContent.replace(/\\u00a0/g, ' '); // Replace &nbsp; with normal spaces\n\n  const checkingWithEmptyString = textContent !== '' && checkWith === '';\n  return {\n    pass: !checkingWithEmptyString && (0, _utils.matches)(textContent, checkWith),\n    message: () => {\n      const to = this.isNot ? 'not to' : 'to';\n      return (0, _utils.getMessage)(this, this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toHaveTextContent`, 'element', ''), checkingWithEmptyString ? `Checking with empty string will always match, use .toBeEmptyDOMElement() instead` : `Expected element ${to} have text content`, checkWith, 'Received', textContent);\n    }\n  };\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,iBAAiB,GAAGA,iBAAiB;AAC7C,IAAIC,MAAM,GAAGC,OAAO,CAAC,SAAS,CAAC;AAC/B,SAASF,iBAAiBA,CAACG,IAAI,EAAEC,SAAS,EAAEC,OAAO,GAAG;EACpDC,mBAAmB,EAAE;AACvB,CAAC,EAAE;EACD,CAAC,CAAC,EAAEL,MAAM,CAACM,SAAS,EAAEJ,IAAI,EAAEH,iBAAiB,EAAE,IAAI,CAAC;EACpD,MAAMQ,WAAW,GAAGH,OAAO,CAACC,mBAAmB,GAAG,CAAC,CAAC,EAAEL,MAAM,CAACQ,SAAS,EAAEN,IAAI,CAACK,WAAW,CAAC,GAAGL,IAAI,CAACK,WAAW,CAACE,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC,CAAC;;EAEtI,MAAMC,uBAAuB,GAAGH,WAAW,KAAK,EAAE,IAAIJ,SAAS,KAAK,EAAE;EACtE,OAAO;IACLQ,IAAI,EAAE,CAACD,uBAAuB,IAAI,CAAC,CAAC,EAAEV,MAAM,CAACY,OAAO,EAAEL,WAAW,EAAEJ,SAAS,CAAC;IAC7EU,OAAO,EAAEA,CAAA,KAAM;MACb,MAAMC,EAAE,GAAG,IAAI,CAACC,KAAK,GAAG,QAAQ,GAAG,IAAI;MACvC,OAAO,CAAC,CAAC,EAAEf,MAAM,CAACgB,UAAU,EAAE,IAAI,EAAE,IAAI,CAACC,KAAK,CAACC,WAAW,CAAE,GAAE,IAAI,CAACH,KAAK,GAAG,MAAM,GAAG,EAAG,oBAAmB,EAAE,SAAS,EAAE,EAAE,CAAC,EAAEL,uBAAuB,GAAI,kFAAiF,GAAI,oBAAmBI,EAAG,oBAAmB,EAAEX,SAAS,EAAE,UAAU,EAAEI,WAAW,CAAC;IAC5T;EACF,CAAC;AACH"},"metadata":{},"sourceType":"script","externalDependencies":[]}