{"ast":null,"code":"import { Buffer } from 'buffer';\nimport JSONRequest from '../jsonrequest';\nimport { Box } from './models/types';\nexport default class LookupApplicationBoxByIDandName extends JSONRequest {\n  /**\n   * Returns information about indexed application boxes.\n   *\n   * #### Example\n   * ```typescript\n   * const boxName = Buffer.from(\"foo\");\n   * const boxResponse = await indexerClient\n   *        .LookupApplicationBoxByIDandName(1234, boxName)\n   *        .do();\n   * const boxValue = boxResponse.value;\n   * ```\n   *\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idbox)\n   * @oaram index - application index.\n   * @category GET\n   */\n  constructor(c, intDecoding, index, boxName) {\n    super(c, intDecoding);\n    this.index = index;\n    this.index = index;\n    // Encode query in base64 format and append the encoding prefix.\n    const encodedName = Buffer.from(boxName).toString('base64');\n    this.query.name = encodeURI(`b64:${encodedName}`);\n  }\n  /**\n   * @returns `/v2/applications/${index}/box`\n   */\n  path() {\n    return `/v2/applications/${this.index}/box`;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  prepare(body) {\n    return Box.from_obj_for_encoding(body);\n  }\n}","map":{"version":3,"names":["Buffer","JSONRequest","Box","LookupApplicationBoxByIDandName","constructor","c","intDecoding","index","boxName","encodedName","from","toString","query","name","encodeURI","path","prepare","body","from_obj_for_encoding"],"sources":["/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/algosdk/src/client/v2/indexer/lookupApplicationBoxByIDandName.ts"],"sourcesContent":["import { Buffer } from 'buffer';\nimport JSONRequest from '../jsonrequest';\nimport HTTPClient from '../../client';\nimport IntDecoding from '../../../types/intDecoding';\nimport { Box } from './models/types';\n\nexport default class LookupApplicationBoxByIDandName extends JSONRequest<\n  Box,\n  Record<string, any>\n> {\n  /**\n   * Returns information about indexed application boxes.\n   *\n   * #### Example\n   * ```typescript\n   * const boxName = Buffer.from(\"foo\");\n   * const boxResponse = await indexerClient\n   *        .LookupApplicationBoxByIDandName(1234, boxName)\n   *        .do();\n   * const boxValue = boxResponse.value;\n   * ```\n   *\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idbox)\n   * @oaram index - application index.\n   * @category GET\n   */\n  constructor(\n    c: HTTPClient,\n    intDecoding: IntDecoding,\n    private index: number,\n    boxName: Uint8Array\n  ) {\n    super(c, intDecoding);\n    this.index = index;\n    // Encode query in base64 format and append the encoding prefix.\n    const encodedName = Buffer.from(boxName).toString('base64');\n    this.query.name = encodeURI(`b64:${encodedName}`);\n  }\n\n  /**\n   * @returns `/v2/applications/${index}/box`\n   */\n  path() {\n    return `/v2/applications/${this.index}/box`;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  prepare(body: Record<string, any>): Box {\n    return Box.from_obj_for_encoding(body);\n  }\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,QAAQ;AAC/B,OAAOC,WAAW,MAAM,gBAAgB;AAGxC,SAASC,GAAG,QAAQ,gBAAgB;AAEpC,eAAc,MAAOC,+BAAgC,SAAQF,WAG5D;EACC;;;;;;;;;;;;;;;;EAgBAG,YACEC,CAAa,EACbC,WAAwB,EAChBC,KAAa,EACrBC,OAAmB;IAEnB,KAAK,CAACH,CAAC,EAAEC,WAAW,CAAC;IAHb,KAAAC,KAAK,GAALA,KAAK;IAIb,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB;IACA,MAAME,WAAW,GAAGT,MAAM,CAACU,IAAI,CAACF,OAAO,CAAC,CAACG,QAAQ,CAAC,QAAQ,CAAC;IAC3D,IAAI,CAACC,KAAK,CAACC,IAAI,GAAGC,SAAS,CAAC,OAAOL,WAAW,EAAE,CAAC;EACnD;EAEA;;;EAGAM,IAAIA,CAAA;IACF,OAAO,oBAAoB,IAAI,CAACR,KAAK,MAAM;EAC7C;EAEA;EACAS,OAAOA,CAACC,IAAyB;IAC/B,OAAOf,GAAG,CAACgB,qBAAqB,CAACD,IAAI,CAAC;EACxC"},"metadata":{},"sourceType":"module","externalDependencies":[]}