{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Buffer } from 'buffer';\nimport * as txnBuilder from './transaction';\nimport * as nacl from './nacl/naclWrappers';\nimport * as encoding from './encoding/encoding';\nimport * as address from './encoding/address';\nimport * as utils from './utils/utils';\nvar ALGORAND_MAX_TX_GROUP_SIZE = 16;\n/**\n * Aux class for group id calculation of a group of transactions\n */\nexport var TxGroup = /*#__PURE__*/function () {\n  function TxGroup(hashes) {\n    _classCallCheck(this, TxGroup);\n    this.name = 'Transaction group';\n    this.tag = Buffer.from('TG');\n    if (hashes.length > ALGORAND_MAX_TX_GROUP_SIZE) {\n      var errorMsg = \"\".concat(hashes.length.toString(), \" transactions grouped together but max group size is \").concat(ALGORAND_MAX_TX_GROUP_SIZE.toString());\n      throw Error(errorMsg);\n    }\n    this.txGroupHashes = hashes;\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(TxGroup, [{\n    key: \"get_obj_for_encoding\",\n    value: function get_obj_for_encoding() {\n      var txgroup = {\n        txlist: this.txGroupHashes\n      };\n      return txgroup;\n    }\n    // eslint-disable-next-line camelcase\n  }, {\n    key: \"toByte\",\n    value: function toByte() {\n      return encoding.encode(this.get_obj_for_encoding());\n    }\n  }], [{\n    key: \"from_obj_for_encoding\",\n    value: function from_obj_for_encoding(txgroupForEnc) {\n      var txn = Object.create(this.prototype);\n      txn.name = 'Transaction group';\n      txn.tag = Buffer.from('TG');\n      txn.txGroupHashes = [];\n      var _iterator = _createForOfIteratorHelper(txgroupForEnc.txlist),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var hash = _step.value;\n          txn.txGroupHashes.push(Buffer.from(hash));\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return txn;\n    }\n  }]);\n  return TxGroup;\n}();\n/**\n * computeGroupID returns group ID for a group of transactions\n * @param txns - array of transactions (every element is a dict or Transaction)\n * @returns Buffer\n */\nexport function computeGroupID(txns) {\n  var hashes = [];\n  var _iterator2 = _createForOfIteratorHelper(txns),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var txn = _step2.value;\n      var tx = txnBuilder.instantiateTxnIfNeeded(txn);\n      hashes.push(tx.rawTxID());\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  var txgroup = new TxGroup(hashes);\n  var bytes = txgroup.toByte();\n  var toBeHashed = Buffer.from(utils.concatArrays(txgroup.tag, bytes));\n  var gid = nacl.genericHash(toBeHashed);\n  return Buffer.from(gid);\n}\n/**\n * assignGroupID assigns group id to a given list of unsigned transactions\n * @param txns - array of transactions (every element is a dict or Transaction)\n * @param from - optional sender address specifying which transaction return\n * @returns possible list of matching transactions\n */\nexport function assignGroupID(txns, from) {\n  var gid = computeGroupID(txns);\n  var result = [];\n  var _iterator3 = _createForOfIteratorHelper(txns),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var txn = _step3.value;\n      var tx = txnBuilder.instantiateTxnIfNeeded(txn);\n      if (!from || address.encodeAddress(tx.from.publicKey) === from) {\n        tx.group = gid;\n        result.push(tx);\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n  return result;\n}\nexport default TxGroup;","map":{"version":3,"names":["Buffer","txnBuilder","nacl","encoding","address","utils","ALGORAND_MAX_TX_GROUP_SIZE","TxGroup","hashes","_classCallCheck","name","tag","from","length","errorMsg","concat","toString","Error","txGroupHashes","_createClass","key","value","get_obj_for_encoding","txgroup","txlist","toByte","encode","from_obj_for_encoding","txgroupForEnc","txn","Object","create","prototype","_iterator","_createForOfIteratorHelper","_step","s","n","done","hash","push","err","e","f","computeGroupID","txns","_iterator2","_step2","tx","instantiateTxnIfNeeded","rawTxID","bytes","toBeHashed","concatArrays","gid","genericHash","assignGroupID","result","_iterator3","_step3","encodeAddress","publicKey","group"],"sources":["/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/algosdk/src/group.ts"],"sourcesContent":["import { Buffer } from 'buffer';\nimport * as txnBuilder from './transaction';\nimport * as nacl from './nacl/naclWrappers';\nimport * as encoding from './encoding/encoding';\nimport * as address from './encoding/address';\nimport * as utils from './utils/utils';\n\nconst ALGORAND_MAX_TX_GROUP_SIZE = 16;\n\ninterface EncodedTxGroup {\n  txlist: Buffer[];\n}\n\n/**\n * Aux class for group id calculation of a group of transactions\n */\nexport class TxGroup {\n  name = 'Transaction group';\n  tag = Buffer.from('TG');\n  txGroupHashes: Buffer[];\n\n  constructor(hashes: Buffer[]) {\n    if (hashes.length > ALGORAND_MAX_TX_GROUP_SIZE) {\n      const errorMsg = `${hashes.length.toString()} transactions grouped together but max group size is ${ALGORAND_MAX_TX_GROUP_SIZE.toString()}`;\n      throw Error(errorMsg);\n    }\n\n    this.txGroupHashes = hashes;\n  }\n\n  // eslint-disable-next-line camelcase\n  get_obj_for_encoding() {\n    const txgroup: EncodedTxGroup = {\n      txlist: this.txGroupHashes,\n    };\n    return txgroup;\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(txgroupForEnc: EncodedTxGroup) {\n    const txn = Object.create(this.prototype);\n    txn.name = 'Transaction group';\n    txn.tag = Buffer.from('TG');\n    txn.txGroupHashes = [];\n    for (const hash of txgroupForEnc.txlist) {\n      txn.txGroupHashes.push(Buffer.from(hash));\n    }\n    return txn;\n  }\n\n  toByte() {\n    return encoding.encode(this.get_obj_for_encoding());\n  }\n}\n\n/**\n * computeGroupID returns group ID for a group of transactions\n * @param txns - array of transactions (every element is a dict or Transaction)\n * @returns Buffer\n */\nexport function computeGroupID(txns: txnBuilder.TransactionLike[]) {\n  const hashes = [];\n  for (const txn of txns) {\n    const tx = txnBuilder.instantiateTxnIfNeeded(txn);\n    hashes.push(tx.rawTxID());\n  }\n\n  const txgroup = new TxGroup(hashes);\n\n  const bytes = txgroup.toByte();\n  const toBeHashed = Buffer.from(utils.concatArrays(txgroup.tag, bytes));\n  const gid = nacl.genericHash(toBeHashed);\n  return Buffer.from(gid);\n}\n\n/**\n * assignGroupID assigns group id to a given list of unsigned transactions\n * @param txns - array of transactions (every element is a dict or Transaction)\n * @param from - optional sender address specifying which transaction return\n * @returns possible list of matching transactions\n */\nexport function assignGroupID(\n  txns: txnBuilder.TransactionLike[],\n  from?: string\n) {\n  const gid = computeGroupID(txns);\n  const result: txnBuilder.Transaction[] = [];\n  for (const txn of txns) {\n    const tx = txnBuilder.instantiateTxnIfNeeded(txn);\n    if (!from || address.encodeAddress(tx.from.publicKey) === from) {\n      tx.group = gid;\n      result.push(tx);\n    }\n  }\n  return result;\n}\n\nexport default TxGroup;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}