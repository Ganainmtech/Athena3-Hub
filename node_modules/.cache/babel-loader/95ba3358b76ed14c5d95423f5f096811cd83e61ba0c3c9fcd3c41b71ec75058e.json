{"ast":null,"code":"import _classCallCheck from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport HTTPClient from '../client';\nimport IntDecoding from '../../types/intDecoding';\n/**\n * Convert a token string to a token header\n * @param token - The token string\n * @param headerIdentifier - An identifier for the token header\n */\nfunction convertTokenStringToTokenHeader() {\n  var token = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var headerIdentifier = arguments.length > 1 ? arguments[1] : undefined;\n  var tokenHeader = {};\n  if (token === '') {\n    return tokenHeader;\n  }\n  tokenHeader[headerIdentifier] = token;\n  return tokenHeader;\n}\nfunction isBaseHTTPClient(tbc) {\n  return typeof tbc.get === 'function';\n}\n/**\n * Abstract service client to encapsulate shared AlgodClient and IndexerClient logic\n */\nvar ServiceClient = /*#__PURE__*/function () {\n  function ServiceClient(tokenHeaderIdentifier, tokenHeaderOrStrOrBaseClient, baseServer, port) {\n    var defaultHeaders = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    _classCallCheck(this, ServiceClient);\n    if (isBaseHTTPClient(tokenHeaderOrStrOrBaseClient)) {\n      // we are using a base client\n      this.c = new HTTPClient(tokenHeaderOrStrOrBaseClient);\n    } else {\n      // Accept token header as string or object\n      // - workaround to allow backwards compatibility for multiple headers\n      var tokenHeader;\n      if (typeof tokenHeaderOrStrOrBaseClient === 'string') {\n        tokenHeader = convertTokenStringToTokenHeader(tokenHeaderOrStrOrBaseClient, tokenHeaderIdentifier);\n      } else {\n        tokenHeader = tokenHeaderOrStrOrBaseClient;\n      }\n      this.c = new HTTPClient(tokenHeader, baseServer, port, defaultHeaders);\n    }\n    this.intDecoding = IntDecoding.DEFAULT;\n  }\n  /**\n   * Set the default int decoding method for all JSON requests this client creates.\n   * @param method - \\{\"default\" | \"safe\" | \"mixed\" | \"bigint\"\\} method The method to use when parsing the\n   *   response for request. Must be one of \"default\", \"safe\", \"mixed\", or \"bigint\". See\n   *   JSONRequest.setIntDecoding for more details about what each method does.\n   */\n  _createClass(ServiceClient, [{\n    key: \"setIntEncoding\",\n    value: function setIntEncoding(method) {\n      this.intDecoding = method;\n    }\n    /**\n     * Get the default int decoding method for all JSON requests this client creates.\n     */\n  }, {\n    key: \"getIntEncoding\",\n    value: function getIntEncoding() {\n      return this.intDecoding;\n    }\n  }]);\n  return ServiceClient;\n}();\nexport { ServiceClient as default };","map":{"version":3,"names":["HTTPClient","IntDecoding","convertTokenStringToTokenHeader","token","arguments","length","undefined","headerIdentifier","tokenHeader","isBaseHTTPClient","tbc","get","ServiceClient","tokenHeaderIdentifier","tokenHeaderOrStrOrBaseClient","baseServer","port","defaultHeaders","_classCallCheck","c","intDecoding","DEFAULT","_createClass","key","value","setIntEncoding","method","getIntEncoding","default"],"sources":["/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/algosdk/src/client/v2/serviceClient.ts"],"sourcesContent":["import HTTPClient from '../client';\nimport IntDecoding from '../../types/intDecoding';\nimport { BaseHTTPClient } from '../baseHTTPClient';\nimport { TokenHeader } from '../urlTokenBaseHTTPClient';\n\nexport type TokenHeaderIdentifier =\n  | 'X-Indexer-API-Token'\n  | 'X-KMD-API-Token'\n  | 'X-Algo-API-Token'\n  | string;\n\n/**\n * Convert a token string to a token header\n * @param token - The token string\n * @param headerIdentifier - An identifier for the token header\n */\nfunction convertTokenStringToTokenHeader(\n  token: string = '',\n  headerIdentifier: TokenHeaderIdentifier\n): TokenHeader {\n  const tokenHeader = {};\n  if (token === '') {\n    return tokenHeader;\n  }\n  tokenHeader[headerIdentifier] = token;\n  return tokenHeader as TokenHeader;\n}\n\nfunction isBaseHTTPClient(\n  tbc: string | TokenHeader | BaseHTTPClient\n): tbc is BaseHTTPClient {\n  return typeof (tbc as BaseHTTPClient).get === 'function';\n}\n\n/**\n * Abstract service client to encapsulate shared AlgodClient and IndexerClient logic\n */\nexport default abstract class ServiceClient {\n  /** @ignore */\n  c: HTTPClient;\n  /** @ignore */\n  intDecoding: IntDecoding;\n\n  constructor(\n    tokenHeaderIdentifier: TokenHeaderIdentifier,\n    tokenHeaderOrStrOrBaseClient: string | TokenHeader | BaseHTTPClient,\n    baseServer: string,\n    port?: string | number,\n    defaultHeaders: Record<string, any> = {}\n  ) {\n    if (isBaseHTTPClient(tokenHeaderOrStrOrBaseClient)) {\n      // we are using a base client\n      this.c = new HTTPClient(tokenHeaderOrStrOrBaseClient);\n    } else {\n      // Accept token header as string or object\n      // - workaround to allow backwards compatibility for multiple headers\n      let tokenHeader: TokenHeader;\n      if (typeof tokenHeaderOrStrOrBaseClient === 'string') {\n        tokenHeader = convertTokenStringToTokenHeader(\n          tokenHeaderOrStrOrBaseClient,\n          tokenHeaderIdentifier\n        );\n      } else {\n        tokenHeader = tokenHeaderOrStrOrBaseClient;\n      }\n\n      this.c = new HTTPClient(tokenHeader, baseServer, port, defaultHeaders);\n    }\n\n    this.intDecoding = IntDecoding.DEFAULT;\n  }\n\n  /**\n   * Set the default int decoding method for all JSON requests this client creates.\n   * @param method - \\{\"default\" | \"safe\" | \"mixed\" | \"bigint\"\\} method The method to use when parsing the\n   *   response for request. Must be one of \"default\", \"safe\", \"mixed\", or \"bigint\". See\n   *   JSONRequest.setIntDecoding for more details about what each method does.\n   */\n  setIntEncoding(method: IntDecoding) {\n    this.intDecoding = method;\n  }\n\n  /**\n   * Get the default int decoding method for all JSON requests this client creates.\n   */\n  getIntEncoding() {\n    return this.intDecoding;\n  }\n}\n"],"mappings":";;AAAA,OAAOA,UAAU,MAAM,WAAW;AAClC,OAAOC,WAAW,MAAM,yBAAyB;AAUjD;;;;;AAKA,SAASC,+BAA+BA,CAAA,EAEC;EAAA,IADvCC,KAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAgB,EAAE;EAAA,IAClBG,gBAAuC,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAEvC,IAAME,WAAW,GAAG,EAAE;EACtB,IAAIL,KAAK,KAAK,EAAE,EAAE;IAChB,OAAOK,WAAW;;EAEpBA,WAAW,CAACD,gBAAgB,CAAC,GAAGJ,KAAK;EACrC,OAAOK,WAA0B;AACnC;AAEA,SAASC,gBAAgBA,CACvBC,GAA0C;EAE1C,OAAO,OAAQA,GAAsB,CAACC,GAAG,KAAK,UAAU;AAC1D;AAEA;;;AAAA,IAG8BC,aAAa;EAMzC,SAAAA,cACEC,qBAA4C,EAC5CC,4BAAmE,EACnEC,UAAkB,EAClBC,IAAsB,EACkB;IAAA,IAAxCC,cAAA,GAAAb,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAsC,EAAE;IAAAc,eAAA,OAAAN,aAAA;IAExC,IAAIH,gBAAgB,CAACK,4BAA4B,CAAC,EAAE;MAClD;MACA,IAAI,CAACK,CAAC,GAAG,IAAInB,UAAU,CAACc,4BAA4B,CAAC;KACtD,MAAM;MACL;MACA;MACA,IAAIN,WAAwB;MAC5B,IAAI,OAAOM,4BAA4B,KAAK,QAAQ,EAAE;QACpDN,WAAW,GAAGN,+BAA+B,CAC3CY,4BAA4B,EAC5BD,qBAAqB,CACtB;OACF,MAAM;QACLL,WAAW,GAAGM,4BAA4B;;MAG5C,IAAI,CAACK,CAAC,GAAG,IAAInB,UAAU,CAACQ,WAAW,EAAEO,UAAU,EAAEC,IAAI,EAAEC,cAAc,CAAC;;IAGxE,IAAI,CAACG,WAAW,GAAGnB,WAAW,CAACoB,OAAO;EACxC;EAEA;;;;;;EAAAC,YAAA,CAAAV,aAAA;IAAAW,GAAA;IAAAC,KAAA,EAMA,SAAAC,eAAeC,MAAmB;MAChC,IAAI,CAACN,WAAW,GAAGM,MAAM;IAC3B;IAEA;;;EAAA;IAAAH,GAAA;IAAAC,KAAA,EAGA,SAAAG,eAAA,EAAc;MACZ,OAAO,IAAI,CAACP,WAAW;IACzB;EAAC;EAAA,OAAAR,aAAA;AAAA;AAAA,SAlD2BA,aAAa,IAAAgB,OAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}