{"ast":null,"code":"import _classCallCheck from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Buffer } from 'buffer';\nimport * as address from './encoding/address';\nimport * as encoding from './encoding/encoding';\nimport * as nacl from './nacl/naclWrappers';\nimport * as utils from './utils/utils';\n/**\n * Bid enables construction of Algorand Auctions Bids\n * */\nvar Bid = /*#__PURE__*/function () {\n  function Bid(_ref) {\n    var bidderKey = _ref.bidderKey,\n      bidAmount = _ref.bidAmount,\n      bidID = _ref.bidID,\n      auctionKey = _ref.auctionKey,\n      auctionID = _ref.auctionID,\n      maxPrice = _ref.maxPrice;\n    _classCallCheck(this, Bid);\n    this.name = 'Bid';\n    this.tag = Buffer.from([97, 66]); // \"aB\"\n    var decodedBidderKey = address.decodeAddress(bidderKey);\n    var decodedAuctionKey = address.decodeAddress(auctionKey);\n    if (!Number.isSafeInteger(bidAmount) || bidAmount < 0) throw Error('Bid amount must be positive and 2^53-1');\n    if (!Number.isSafeInteger(bidID) || bidID < 0) throw Error('BidID must be positive and 2^53-1');\n    if (!Number.isSafeInteger(auctionID) || auctionID < 0) throw Error('auctionID must be positive');\n    Object.assign(this, {\n      bidderKey: decodedBidderKey,\n      bidAmount: bidAmount,\n      bidID: bidID,\n      auctionKey: decodedAuctionKey,\n      auctionID: auctionID,\n      maxPrice: maxPrice\n    });\n  }\n  // eslint-disable-next-line camelcase\n  _createClass(Bid, [{\n    key: \"get_obj_for_encoding\",\n    value: function get_obj_for_encoding() {\n      return {\n        bidder: Buffer.from(this.bidderKey.publicKey),\n        cur: this.bidAmount,\n        price: this.maxPrice,\n        id: this.bidID,\n        auc: Buffer.from(this.auctionKey.publicKey),\n        aid: this.auctionID\n      };\n    }\n  }, {\n    key: \"signBid\",\n    value: function signBid(sk) {\n      var encodedMsg = encoding.encode(this.get_obj_for_encoding());\n      var toBeSigned = Buffer.from(utils.concatArrays(this.tag, encodedMsg));\n      var sig = nacl.sign(toBeSigned, sk);\n      // construct signed message\n      var sBid = {\n        sig: Buffer.from(sig),\n        bid: this.get_obj_for_encoding()\n      };\n      var note = {\n        t: 'b',\n        b: sBid\n      };\n      return new Uint8Array(encoding.encode(note));\n    }\n  }]);\n  return Bid;\n}();\nexport { Bid as default };","map":{"version":3,"names":["Buffer","address","encoding","nacl","utils","Bid","_ref","bidderKey","bidAmount","bidID","auctionKey","auctionID","maxPrice","_classCallCheck","name","tag","from","decodedBidderKey","decodeAddress","decodedAuctionKey","Number","isSafeInteger","Error","Object","assign","_createClass","key","value","get_obj_for_encoding","bidder","publicKey","cur","price","id","auc","aid","signBid","sk","encodedMsg","encode","toBeSigned","concatArrays","sig","sign","sBid","bid","note","t","b","Uint8Array","default"],"sources":["/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/algosdk/src/bid.ts"],"sourcesContent":["import { Buffer } from 'buffer';\nimport * as address from './encoding/address';\nimport * as encoding from './encoding/encoding';\nimport * as nacl from './nacl/naclWrappers';\nimport * as utils from './utils/utils';\nimport { Address } from './types/address';\n\ninterface BidStorageStructure {\n  bidderKey: Address;\n  bidAmount: number;\n  bidID: number;\n  auctionKey: Address;\n  auctionID: number;\n  maxPrice: number;\n}\n\nexport type BidOptions = Omit<\n  BidStorageStructure,\n  'bidderKey' | 'auctionKey'\n> & {\n  bidderKey: string;\n  auctionKey: string;\n};\n\n/**\n * Bid enables construction of Algorand Auctions Bids\n * */\nexport default class Bid implements BidStorageStructure {\n  name = 'Bid';\n  tag = Buffer.from([97, 66]); // \"aB\"\n\n  bidderKey: Address;\n  bidAmount: number;\n  bidID: number;\n  auctionKey: Address;\n  auctionID: number;\n  maxPrice: number;\n\n  constructor({\n    bidderKey,\n    bidAmount,\n    bidID,\n    auctionKey,\n    auctionID,\n    maxPrice,\n  }: BidOptions) {\n    const decodedBidderKey = address.decodeAddress(bidderKey);\n    const decodedAuctionKey = address.decodeAddress(auctionKey);\n\n    if (!Number.isSafeInteger(bidAmount) || bidAmount < 0)\n      throw Error('Bid amount must be positive and 2^53-1');\n    if (!Number.isSafeInteger(bidID) || bidID < 0)\n      throw Error('BidID must be positive and 2^53-1');\n    if (!Number.isSafeInteger(auctionID) || auctionID < 0)\n      throw Error('auctionID must be positive');\n\n    Object.assign(this, {\n      bidderKey: decodedBidderKey,\n      bidAmount,\n      bidID,\n      auctionKey: decodedAuctionKey,\n      auctionID,\n      maxPrice,\n    });\n  }\n\n  // eslint-disable-next-line camelcase\n  get_obj_for_encoding() {\n    return {\n      bidder: Buffer.from(this.bidderKey.publicKey),\n      cur: this.bidAmount,\n      price: this.maxPrice,\n      id: this.bidID,\n      auc: Buffer.from(this.auctionKey.publicKey),\n      aid: this.auctionID,\n    };\n  }\n\n  signBid(sk: Uint8Array) {\n    const encodedMsg = encoding.encode(this.get_obj_for_encoding());\n    const toBeSigned = Buffer.from(utils.concatArrays(this.tag, encodedMsg));\n    const sig = nacl.sign(toBeSigned, sk);\n\n    // construct signed message\n    const sBid = {\n      sig: Buffer.from(sig),\n      bid: this.get_obj_for_encoding(),\n    };\n\n    const note = {\n      t: 'b',\n      b: sBid,\n    };\n    return new Uint8Array(encoding.encode(note));\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}