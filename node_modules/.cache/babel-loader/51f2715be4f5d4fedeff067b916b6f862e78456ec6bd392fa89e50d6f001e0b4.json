{"ast":null,"code":"import JSONRequest from '../jsonrequest';\nexport default class GetBlockHash extends JSONRequest {\n  constructor(c, intDecoding, roundNumber) {\n    super(c, intDecoding);\n    if (!Number.isInteger(roundNumber)) throw Error('roundNumber should be an integer');\n    this.round = roundNumber;\n  }\n  path() {\n    return `/v2/blocks/${this.round}/hash`;\n  }\n}","map":{"version":3,"names":["JSONRequest","GetBlockHash","constructor","c","intDecoding","roundNumber","Number","isInteger","Error","round","path"],"sources":["/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/algosdk/src/client/v2/algod/getBlockHash.ts"],"sourcesContent":["import JSONRequest from '../jsonrequest';\nimport HTTPClient from '../../client';\nimport IntDecoding from '../../../types/intDecoding';\n\nexport default class GetBlockHash extends JSONRequest {\n  round: number;\n\n  constructor(c: HTTPClient, intDecoding: IntDecoding, roundNumber: number) {\n    super(c, intDecoding);\n    if (!Number.isInteger(roundNumber))\n      throw Error('roundNumber should be an integer');\n    this.round = roundNumber;\n  }\n\n  path() {\n    return `/v2/blocks/${this.round}/hash`;\n  }\n}\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,gBAAgB;AAIxC,eAAc,MAAOC,YAAa,SAAQD,WAAW;EAGnDE,YAAYC,CAAa,EAAEC,WAAwB,EAAEC,WAAmB;IACtE,KAAK,CAACF,CAAC,EAAEC,WAAW,CAAC;IACrB,IAAI,CAACE,MAAM,CAACC,SAAS,CAACF,WAAW,CAAC,EAChC,MAAMG,KAAK,CAAC,kCAAkC,CAAC;IACjD,IAAI,CAACC,KAAK,GAAGJ,WAAW;EAC1B;EAEAK,IAAIA,CAAA;IACF,OAAO,cAAc,IAAI,CAACD,KAAK,OAAO;EACxC"},"metadata":{},"sourceType":"module","externalDependencies":[]}