{"ast":null,"code":"/**\n * Enum for application transaction types.\n *\n * The full list is available at https://developer.algorand.org/docs/reference/transactions/\n */\nexport var TransactionType;\n(function (TransactionType) {\n  /**\n   * Payment transaction\n   */\n  TransactionType[\"pay\"] = \"pay\";\n  /**\n   * Key registration transaction\n   */\n  TransactionType[\"keyreg\"] = \"keyreg\";\n  /**\n   * Asset configuration transaction\n   */\n  TransactionType[\"acfg\"] = \"acfg\";\n  /**\n   * Asset transfer transaction\n   */\n  TransactionType[\"axfer\"] = \"axfer\";\n  /**\n   * Asset freeze transaction\n   */\n  TransactionType[\"afrz\"] = \"afrz\";\n  /**\n   * Application transaction\n   */\n  TransactionType[\"appl\"] = \"appl\";\n  /**\n   * State proof transaction\n   */\n  TransactionType[\"stpf\"] = \"stpf\";\n})(TransactionType || (TransactionType = {}));\nexport function isTransactionType(s) {\n  return s === TransactionType.pay || s === TransactionType.keyreg || s === TransactionType.acfg || s === TransactionType.axfer || s === TransactionType.afrz || s === TransactionType.appl || s === TransactionType.stpf;\n}\n/**\n * Enums for application transactions on-transaction-complete behavior\n */\nexport var OnApplicationComplete;\n(function (OnApplicationComplete) {\n  /**\n   * NoOpOC indicates that an application transaction will simply call its\n   * ApprovalProgram\n   */\n  OnApplicationComplete[OnApplicationComplete[\"NoOpOC\"] = 0] = \"NoOpOC\";\n  /**\n   * OptInOC indicates that an application transaction will allocate some\n   * LocalState for the application in the sender's account\n   */\n  OnApplicationComplete[OnApplicationComplete[\"OptInOC\"] = 1] = \"OptInOC\";\n  /**\n   * CloseOutOC indicates that an application transaction will deallocate\n   * some LocalState for the application from the user's account\n   */\n  OnApplicationComplete[OnApplicationComplete[\"CloseOutOC\"] = 2] = \"CloseOutOC\";\n  /**\n   * ClearStateOC is similar to CloseOutOC, but may never fail. This\n   * allows users to reclaim their minimum balance from an application\n   * they no longer wish to opt in to.\n   */\n  OnApplicationComplete[OnApplicationComplete[\"ClearStateOC\"] = 3] = \"ClearStateOC\";\n  /**\n   * UpdateApplicationOC indicates that an application transaction will\n   * update the ApprovalProgram and ClearStateProgram for the application\n   */\n  OnApplicationComplete[OnApplicationComplete[\"UpdateApplicationOC\"] = 4] = \"UpdateApplicationOC\";\n  /**\n   * DeleteApplicationOC indicates that an application transaction will\n   * delete the AppParams for the application from the creator's balance\n   * record\n   */\n  OnApplicationComplete[OnApplicationComplete[\"DeleteApplicationOC\"] = 5] = \"DeleteApplicationOC\";\n})(OnApplicationComplete || (OnApplicationComplete = {}));","map":{"version":3,"names":["TransactionType","isTransactionType","s","pay","keyreg","acfg","axfer","afrz","appl","stpf","OnApplicationComplete"],"sources":["/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/node_modules/algosdk/src/types/transactions/base.ts"],"sourcesContent":["/**\n * Enum for application transaction types.\n *\n * The full list is available at https://developer.algorand.org/docs/reference/transactions/\n */\nexport enum TransactionType {\n  /**\n   * Payment transaction\n   */\n  pay = 'pay',\n\n  /**\n   * Key registration transaction\n   */\n  keyreg = 'keyreg',\n\n  /**\n   * Asset configuration transaction\n   */\n  acfg = 'acfg',\n\n  /**\n   * Asset transfer transaction\n   */\n  axfer = 'axfer',\n\n  /**\n   * Asset freeze transaction\n   */\n  afrz = 'afrz',\n\n  /**\n   * Application transaction\n   */\n  appl = 'appl',\n  /**\n   * State proof transaction\n   */\n  stpf = 'stpf',\n}\n\nexport function isTransactionType(s: string): s is TransactionType {\n  return (\n    s === TransactionType.pay ||\n    s === TransactionType.keyreg ||\n    s === TransactionType.acfg ||\n    s === TransactionType.axfer ||\n    s === TransactionType.afrz ||\n    s === TransactionType.appl ||\n    s === TransactionType.stpf\n  );\n}\n\n/**\n * Enums for application transactions on-transaction-complete behavior\n */\nexport enum OnApplicationComplete {\n  /**\n   * NoOpOC indicates that an application transaction will simply call its\n   * ApprovalProgram\n   */\n  NoOpOC,\n\n  /**\n   * OptInOC indicates that an application transaction will allocate some\n   * LocalState for the application in the sender's account\n   */\n  OptInOC,\n\n  /**\n   * CloseOutOC indicates that an application transaction will deallocate\n   * some LocalState for the application from the user's account\n   */\n  CloseOutOC,\n\n  /**\n   * ClearStateOC is similar to CloseOutOC, but may never fail. This\n   * allows users to reclaim their minimum balance from an application\n   * they no longer wish to opt in to.\n   */\n  ClearStateOC,\n\n  /**\n   * UpdateApplicationOC indicates that an application transaction will\n   * update the ApprovalProgram and ClearStateProgram for the application\n   */\n  UpdateApplicationOC,\n\n  /**\n   * DeleteApplicationOC indicates that an application transaction will\n   * delete the AppParams for the application from the creator's balance\n   * record\n   */\n  DeleteApplicationOC,\n}\n\n/**\n * A dict holding common-to-all-txns arguments\n */\nexport interface SuggestedParams {\n  /**\n   * Set this to true to specify fee as microalgos-per-txn\n   *   If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum\n   */\n  flatFee?: boolean;\n\n  /**\n   * Integer fee per byte, in microAlgos. For a flat fee, set flatFee to true\n   */\n  fee: number;\n\n  /**\n   * First protocol round on which this txn is valid\n   */\n  firstRound: number;\n\n  /**\n   * Last protocol round on which this txn is valid\n   */\n  lastRound: number;\n\n  /**\n   * Specifies genesis ID of network in use\n   */\n  genesisID: string;\n\n  /**\n   * Specifies hash genesis block of network in use\n   */\n  genesisHash: string;\n}\n\nexport type SuggestedParamsWithMinFee = SuggestedParams & {\n  /**\n   * Minimum fee (not per byte) required for the transaction to be confirmed\n   */\n  minFee: number;\n};\n\n/**\n * A grouping of the app ID and name of the box in an Uint8Array\n */\nexport interface BoxReference {\n  /**\n   * A unique application index\n   */\n  appIndex: number;\n\n  /**\n   * Name of box to reference\n   */\n  name: Uint8Array;\n}\n\n/**\n * A full list of all available transaction parameters\n *\n * The full documentation is available at:\n * https://developer.algorand.org/docs/reference/transactions/#common-fields-header-and-type\n */\nexport interface TransactionParams {\n  /**\n   * String representation of Algorand address of sender\n   */\n  from: string;\n\n  /**\n   * String representation of Algorand address of recipient\n   */\n  to: string;\n\n  /**\n   * Integer fee per byte, in microAlgos. For a flat fee, set flatFee to true\n   */\n  fee: number;\n\n  /**\n   * Integer amount to send\n   */\n  amount: number | bigint;\n\n  /**\n   * Integer first protocol round on which this txn is valid\n   */\n  firstRound: number;\n\n  /**\n   * Integer last protocol round on which this txn is valid\n   */\n  lastRound: number;\n\n  /**\n   * Arbitrary data for sender to store\n   */\n  note?: Uint8Array;\n\n  /**\n   * Specifies genesis ID of network in use\n   */\n  genesisID: string;\n\n  /**\n   * Specifies hash genesis block of network in use\n   */\n  genesisHash: string;\n\n  /**\n   * Lease a transaction. The sender cannot send another txn with that same lease until the last round of original txn has passed\n   */\n  lease?: Uint8Array;\n\n  /**\n   * Close out remaining account balance to this account\n   */\n  closeRemainderTo?: string;\n\n  /**\n   * Voting key bytes. For key deregistration, leave undefined\n   */\n  voteKey: Uint8Array | string;\n\n  /**\n   *Selection key bytes. For key deregistration, leave undefined\n   */\n  selectionKey: Uint8Array | string;\n\n  /**\n   * State proof key bytes. For key deregistration, leave undefined\n   */\n  stateProofKey: Uint8Array | string;\n\n  /**\n   * First round on which voteKey is valid\n   */\n  voteFirst: number;\n\n  /**\n   * Last round on which voteKey is valid\n   */\n  voteLast: number;\n\n  /**\n   * The dilution fo the 2-level participation key\n   */\n  voteKeyDilution: number;\n\n  /**\n   * Asset index uniquely specifying the asset\n   */\n  assetIndex: number;\n\n  /**\n   * Total supply of the asset\n   */\n  assetTotal: number | bigint;\n\n  /**\n   * Integer number of decimals for asset unit calcuation\n   */\n  assetDecimals: number;\n\n  /**\n   * Whether asset accounts should default to being frozen\n   */\n  assetDefaultFrozen: boolean;\n\n  /**\n   * String representation of Algorand address in charge of reserve, freeze, clawback, destruction, etc.\n   */\n  assetManager?: string;\n\n  /**\n   * String representation of Algorand address representing asset reserve\n   */\n  assetReserve?: string;\n\n  /**\n   * String representation of Algorand address with power to freeze/unfreeze asset holdings\n   */\n  assetFreeze?: string;\n\n  /**\n   * String representation of Algorand address with power to revoke asset holdings\n   */\n  assetClawback?: string;\n\n  /**\n   * Unit name for this asset\n   */\n  assetUnitName?: string;\n  /**\n   * Name for this asset\n   */\n  assetName?: string;\n\n  /**\n   * URL relating to this asset\n   */\n  assetURL?: string;\n\n  /**\n   * Uint8Array or UTF-8 string representation of a hash commitment with respect to the asset. Must be exactly 32 bytes long.\n   */\n  assetMetadataHash?: Uint8Array | string;\n\n  /**\n   * String representation of Algorand address being frozen or unfrozen\n   */\n  freezeAccount: string;\n\n  /**\n   * true if freezeTarget should be frozen, false if freezeTarget should be allowed to transact\n   */\n  freezeState: boolean;\n\n  /**\n   * String representation of Algorand address – if provided, and if \"from\" is\n   * the asset's revocation manager, then deduct from \"revocationTarget\" rather than \"from\"\n   */\n  assetRevocationTarget?: string;\n\n  /**\n   * A unique application index\n   */\n  appIndex: number;\n\n  /**\n   * What application should do once the program has been run\n   */\n  appOnComplete: OnApplicationComplete;\n\n  /**\n   * Restricts number of ints in per-user local state\n   */\n  appLocalInts: number;\n\n  /**\n   * Restricts number of byte slices in per-user local state\n   */\n  appLocalByteSlices: number;\n\n  /**\n   * Restricts number of ints in global state\n   */\n  appGlobalInts: number;\n\n  /**\n   * Restricts number of byte slices in global state\n   */\n  appGlobalByteSlices: number;\n\n  /**\n   * The compiled TEAL that approves a transaction\n   */\n  appApprovalProgram: Uint8Array;\n\n  /**\n   * The compiled TEAL program that runs when clearing state\n   */\n  appClearProgram: Uint8Array;\n\n  /**\n   * Array of Uint8Array, any additional arguments to the application\n   */\n  appArgs?: Uint8Array[];\n\n  /**\n   * Array of Address strings, any additional accounts to supply to the application\n   */\n  appAccounts?: string[];\n\n  /**\n   * Array of int, any other apps used by the application, identified by index\n   */\n  appForeignApps?: number[];\n\n  /**\n   * Array of int, any assets used by the application, identified by index\n   */\n  appForeignAssets?: number[];\n\n  /**\n   * Transaction type\n   */\n  type?: TransactionType;\n\n  /**\n   * Set this to true to specify fee as microalgos-per-txn.\n   *\n   * If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum\n   */\n  flatFee?: boolean;\n\n  /**\n   * A dict holding common-to-all-txns arguments\n   */\n  suggestedParams: SuggestedParams;\n\n  /**\n   * String representation of the Algorand address that will be used to authorize all future transactions\n   */\n  reKeyTo?: string;\n\n  /**\n   * Set this value to true to mark this account as nonparticipating.\n   *\n   * All new Algorand accounts are participating by default. This means they earn rewards.\n   */\n  nonParticipation?: boolean;\n\n  /**\n   * Int representing extra pages of memory to rent during an application create transaction.\n   */\n  extraPages?: number;\n\n  /**\n   * A grouping of the app ID and name of the box in an Uint8Array\n   */\n  boxes?: BoxReference[];\n\n  /*\n   * Uint64 identifying a particular configuration of state proofs.\n   */\n  stateProofType?: number | bigint;\n\n  /**\n   * Byte array containing the state proof.\n   */\n  stateProof?: Uint8Array;\n\n  /**\n   * Byte array containing the state proof message.\n   */\n  stateProofMessage?: Uint8Array;\n}\n"],"mappings":"AAAA;;;;;AAKA,WAAYA,eAkCX;AAlCD,WAAYA,eAAe;EACzB;;;EAGAA,eAAA,eAAW;EAEX;;;EAGAA,eAAA,qBAAiB;EAEjB;;;EAGAA,eAAA,iBAAa;EAEb;;;EAGAA,eAAA,mBAAe;EAEf;;;EAGAA,eAAA,iBAAa;EAEb;;;EAGAA,eAAA,iBAAa;EACb;;;EAGAA,eAAA,iBAAa;AACf,CAAC,EAlCWA,eAAe,KAAfA,eAAe;AAoC3B,OAAM,SAAUC,iBAAiBA,CAACC,CAAS;EACzC,OACEA,CAAC,KAAKF,eAAe,CAACG,GAAG,IACzBD,CAAC,KAAKF,eAAe,CAACI,MAAM,IAC5BF,CAAC,KAAKF,eAAe,CAACK,IAAI,IAC1BH,CAAC,KAAKF,eAAe,CAACM,KAAK,IAC3BJ,CAAC,KAAKF,eAAe,CAACO,IAAI,IAC1BL,CAAC,KAAKF,eAAe,CAACQ,IAAI,IAC1BN,CAAC,KAAKF,eAAe,CAACS,IAAI;AAE9B;AAEA;;;AAGA,WAAYC,qBAsCX;AAtCD,WAAYA,qBAAqB;EAC/B;;;;EAIAA,qBAAA,CAAAA,qBAAA,0BAAM;EAEN;;;;EAIAA,qBAAA,CAAAA,qBAAA,4BAAO;EAEP;;;;EAIAA,qBAAA,CAAAA,qBAAA,kCAAU;EAEV;;;;;EAKAA,qBAAA,CAAAA,qBAAA,sCAAY;EAEZ;;;;EAIAA,qBAAA,CAAAA,qBAAA,oDAAmB;EAEnB;;;;;EAKAA,qBAAA,CAAAA,qBAAA,oDAAmB;AACrB,CAAC,EAtCWA,qBAAqB,KAArBA,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}