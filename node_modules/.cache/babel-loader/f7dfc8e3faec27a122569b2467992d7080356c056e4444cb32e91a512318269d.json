{"ast":null,"code":"import { Buffer } from 'buffer';\nimport * as address from './encoding/address';\nimport * as encoding from './encoding/encoding';\nimport * as nacl from './nacl/naclWrappers';\nimport * as utils from './utils/utils';\n/**\n * Bid enables construction of Algorand Auctions Bids\n * */\nexport default class Bid {\n  constructor({\n    bidderKey,\n    bidAmount,\n    bidID,\n    auctionKey,\n    auctionID,\n    maxPrice\n  }) {\n    this.name = 'Bid';\n    this.tag = Buffer.from([97, 66]); // \"aB\"\n    const decodedBidderKey = address.decodeAddress(bidderKey);\n    const decodedAuctionKey = address.decodeAddress(auctionKey);\n    if (!Number.isSafeInteger(bidAmount) || bidAmount < 0) throw Error('Bid amount must be positive and 2^53-1');\n    if (!Number.isSafeInteger(bidID) || bidID < 0) throw Error('BidID must be positive and 2^53-1');\n    if (!Number.isSafeInteger(auctionID) || auctionID < 0) throw Error('auctionID must be positive');\n    Object.assign(this, {\n      bidderKey: decodedBidderKey,\n      bidAmount,\n      bidID,\n      auctionKey: decodedAuctionKey,\n      auctionID,\n      maxPrice\n    });\n  }\n  // eslint-disable-next-line camelcase\n  get_obj_for_encoding() {\n    return {\n      bidder: Buffer.from(this.bidderKey.publicKey),\n      cur: this.bidAmount,\n      price: this.maxPrice,\n      id: this.bidID,\n      auc: Buffer.from(this.auctionKey.publicKey),\n      aid: this.auctionID\n    };\n  }\n  signBid(sk) {\n    const encodedMsg = encoding.encode(this.get_obj_for_encoding());\n    const toBeSigned = Buffer.from(utils.concatArrays(this.tag, encodedMsg));\n    const sig = nacl.sign(toBeSigned, sk);\n    // construct signed message\n    const sBid = {\n      sig: Buffer.from(sig),\n      bid: this.get_obj_for_encoding()\n    };\n    const note = {\n      t: 'b',\n      b: sBid\n    };\n    return new Uint8Array(encoding.encode(note));\n  }\n}","map":{"version":3,"names":["Buffer","address","encoding","nacl","utils","Bid","constructor","bidderKey","bidAmount","bidID","auctionKey","auctionID","maxPrice","name","tag","from","decodedBidderKey","decodeAddress","decodedAuctionKey","Number","isSafeInteger","Error","Object","assign","get_obj_for_encoding","bidder","publicKey","cur","price","id","auc","aid","signBid","sk","encodedMsg","encode","toBeSigned","concatArrays","sig","sign","sBid","bid","note","t","b","Uint8Array"],"sources":["/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/algosdk/src/bid.ts"],"sourcesContent":["import { Buffer } from 'buffer';\nimport * as address from './encoding/address';\nimport * as encoding from './encoding/encoding';\nimport * as nacl from './nacl/naclWrappers';\nimport * as utils from './utils/utils';\nimport { Address } from './types/address';\n\ninterface BidStorageStructure {\n  bidderKey: Address;\n  bidAmount: number;\n  bidID: number;\n  auctionKey: Address;\n  auctionID: number;\n  maxPrice: number;\n}\n\nexport type BidOptions = Omit<\n  BidStorageStructure,\n  'bidderKey' | 'auctionKey'\n> & {\n  bidderKey: string;\n  auctionKey: string;\n};\n\n/**\n * Bid enables construction of Algorand Auctions Bids\n * */\nexport default class Bid implements BidStorageStructure {\n  name = 'Bid';\n  tag = Buffer.from([97, 66]); // \"aB\"\n\n  bidderKey: Address;\n  bidAmount: number;\n  bidID: number;\n  auctionKey: Address;\n  auctionID: number;\n  maxPrice: number;\n\n  constructor({\n    bidderKey,\n    bidAmount,\n    bidID,\n    auctionKey,\n    auctionID,\n    maxPrice,\n  }: BidOptions) {\n    const decodedBidderKey = address.decodeAddress(bidderKey);\n    const decodedAuctionKey = address.decodeAddress(auctionKey);\n\n    if (!Number.isSafeInteger(bidAmount) || bidAmount < 0)\n      throw Error('Bid amount must be positive and 2^53-1');\n    if (!Number.isSafeInteger(bidID) || bidID < 0)\n      throw Error('BidID must be positive and 2^53-1');\n    if (!Number.isSafeInteger(auctionID) || auctionID < 0)\n      throw Error('auctionID must be positive');\n\n    Object.assign(this, {\n      bidderKey: decodedBidderKey,\n      bidAmount,\n      bidID,\n      auctionKey: decodedAuctionKey,\n      auctionID,\n      maxPrice,\n    });\n  }\n\n  // eslint-disable-next-line camelcase\n  get_obj_for_encoding() {\n    return {\n      bidder: Buffer.from(this.bidderKey.publicKey),\n      cur: this.bidAmount,\n      price: this.maxPrice,\n      id: this.bidID,\n      auc: Buffer.from(this.auctionKey.publicKey),\n      aid: this.auctionID,\n    };\n  }\n\n  signBid(sk: Uint8Array) {\n    const encodedMsg = encoding.encode(this.get_obj_for_encoding());\n    const toBeSigned = Buffer.from(utils.concatArrays(this.tag, encodedMsg));\n    const sig = nacl.sign(toBeSigned, sk);\n\n    // construct signed message\n    const sBid = {\n      sig: Buffer.from(sig),\n      bid: this.get_obj_for_encoding(),\n    };\n\n    const note = {\n      t: 'b',\n      b: sBid,\n    };\n    return new Uint8Array(encoding.encode(note));\n  }\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,QAAQ;AAC/B,OAAO,KAAKC,OAAO,MAAM,oBAAoB;AAC7C,OAAO,KAAKC,QAAQ,MAAM,qBAAqB;AAC/C,OAAO,KAAKC,IAAI,MAAM,qBAAqB;AAC3C,OAAO,KAAKC,KAAK,MAAM,eAAe;AAoBtC;;;AAGA,eAAc,MAAOC,GAAG;EAWtBC,YAAY;IACVC,SAAS;IACTC,SAAS;IACTC,KAAK;IACLC,UAAU;IACVC,SAAS;IACTC;EAAQ,CACG;IAjBb,KAAAC,IAAI,GAAG,KAAK;IACZ,KAAAC,GAAG,GAAGd,MAAM,CAACe,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IAiB3B,MAAMC,gBAAgB,GAAGf,OAAO,CAACgB,aAAa,CAACV,SAAS,CAAC;IACzD,MAAMW,iBAAiB,GAAGjB,OAAO,CAACgB,aAAa,CAACP,UAAU,CAAC;IAE3D,IAAI,CAACS,MAAM,CAACC,aAAa,CAACZ,SAAS,CAAC,IAAIA,SAAS,GAAG,CAAC,EACnD,MAAMa,KAAK,CAAC,wCAAwC,CAAC;IACvD,IAAI,CAACF,MAAM,CAACC,aAAa,CAACX,KAAK,CAAC,IAAIA,KAAK,GAAG,CAAC,EAC3C,MAAMY,KAAK,CAAC,mCAAmC,CAAC;IAClD,IAAI,CAACF,MAAM,CAACC,aAAa,CAACT,SAAS,CAAC,IAAIA,SAAS,GAAG,CAAC,EACnD,MAAMU,KAAK,CAAC,4BAA4B,CAAC;IAE3CC,MAAM,CAACC,MAAM,CAAC,IAAI,EAAE;MAClBhB,SAAS,EAAES,gBAAgB;MAC3BR,SAAS;MACTC,KAAK;MACLC,UAAU,EAAEQ,iBAAiB;MAC7BP,SAAS;MACTC;KACD,CAAC;EACJ;EAEA;EACAY,oBAAoBA,CAAA;IAClB,OAAO;MACLC,MAAM,EAAEzB,MAAM,CAACe,IAAI,CAAC,IAAI,CAACR,SAAS,CAACmB,SAAS,CAAC;MAC7CC,GAAG,EAAE,IAAI,CAACnB,SAAS;MACnBoB,KAAK,EAAE,IAAI,CAAChB,QAAQ;MACpBiB,EAAE,EAAE,IAAI,CAACpB,KAAK;MACdqB,GAAG,EAAE9B,MAAM,CAACe,IAAI,CAAC,IAAI,CAACL,UAAU,CAACgB,SAAS,CAAC;MAC3CK,GAAG,EAAE,IAAI,CAACpB;KACX;EACH;EAEAqB,OAAOA,CAACC,EAAc;IACpB,MAAMC,UAAU,GAAGhC,QAAQ,CAACiC,MAAM,CAAC,IAAI,CAACX,oBAAoB,EAAE,CAAC;IAC/D,MAAMY,UAAU,GAAGpC,MAAM,CAACe,IAAI,CAACX,KAAK,CAACiC,YAAY,CAAC,IAAI,CAACvB,GAAG,EAAEoB,UAAU,CAAC,CAAC;IACxE,MAAMI,GAAG,GAAGnC,IAAI,CAACoC,IAAI,CAACH,UAAU,EAAEH,EAAE,CAAC;IAErC;IACA,MAAMO,IAAI,GAAG;MACXF,GAAG,EAAEtC,MAAM,CAACe,IAAI,CAACuB,GAAG,CAAC;MACrBG,GAAG,EAAE,IAAI,CAACjB,oBAAoB;KAC/B;IAED,MAAMkB,IAAI,GAAG;MACXC,CAAC,EAAE,GAAG;MACNC,CAAC,EAAEJ;KACJ;IACD,OAAO,IAAIK,UAAU,CAAC3C,QAAQ,CAACiC,MAAM,CAACO,IAAI,CAAC,CAAC;EAC9C"},"metadata":{},"sourceType":"module","externalDependencies":[]}