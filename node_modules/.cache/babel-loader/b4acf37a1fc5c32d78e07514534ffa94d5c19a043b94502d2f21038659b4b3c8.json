{"ast":null,"code":"import _slicedToArray from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _createForOfIteratorHelper from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __spreadValues = function __spreadValues(a, b) {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) {\n    var _iterator = _createForOfIteratorHelper(__getOwnPropSymbols(b)),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var prop = _step.value;\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return a;\n};\nvar __objRest = function __objRest(source, exclude) {\n  var target = {};\n  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols) {\n    var _iterator2 = _createForOfIteratorHelper(__getOwnPropSymbols(source)),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var prop = _step2.value;\n        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n  return target;\n};\n\n// src/index.tsx\nimport React, { useRef, useEffect, useState } from \"react\";\n\n// src/third-party/qrcodegen/index.ts\n/**\n * @license QR Code generator library (TypeScript)\n * Copyright (c) Project Nayuki.\n * SPDX-License-Identifier: MIT\n */\nvar qrcodegen;\n(function (qrcodegen2) {\n  var _QrCode = /*#__PURE__*/function () {\n    function _QrCode(version, errorCorrectionLevel, dataCodewords, msk) {\n      _classCallCheck(this, _QrCode);\n      this.version = version;\n      this.errorCorrectionLevel = errorCorrectionLevel;\n      this.modules = [];\n      this.isFunction = [];\n      if (version < _QrCode.MIN_VERSION || version > _QrCode.MAX_VERSION) throw new RangeError(\"Version value out of range\");\n      if (msk < -1 || msk > 7) throw new RangeError(\"Mask value out of range\");\n      this.size = version * 4 + 17;\n      var row = [];\n      for (var i = 0; i < this.size; i++) row.push(false);\n      for (var _i = 0; _i < this.size; _i++) {\n        this.modules.push(row.slice());\n        this.isFunction.push(row.slice());\n      }\n      this.drawFunctionPatterns();\n      var allCodewords = this.addEccAndInterleave(dataCodewords);\n      this.drawCodewords(allCodewords);\n      if (msk == -1) {\n        var minPenalty = 1e9;\n        for (var _i2 = 0; _i2 < 8; _i2++) {\n          this.applyMask(_i2);\n          this.drawFormatBits(_i2);\n          var penalty = this.getPenaltyScore();\n          if (penalty < minPenalty) {\n            msk = _i2;\n            minPenalty = penalty;\n          }\n          this.applyMask(_i2);\n        }\n      }\n      assert(0 <= msk && msk <= 7);\n      this.mask = msk;\n      this.applyMask(msk);\n      this.drawFormatBits(msk);\n      this.isFunction = [];\n    }\n    _createClass(_QrCode, [{\n      key: \"getModule\",\n      value: function getModule(x, y) {\n        return 0 <= x && x < this.size && 0 <= y && y < this.size && this.modules[y][x];\n      }\n    }, {\n      key: \"getModules\",\n      value: function getModules() {\n        return this.modules;\n      }\n    }, {\n      key: \"drawFunctionPatterns\",\n      value: function drawFunctionPatterns() {\n        for (var i = 0; i < this.size; i++) {\n          this.setFunctionModule(6, i, i % 2 == 0);\n          this.setFunctionModule(i, 6, i % 2 == 0);\n        }\n        this.drawFinderPattern(3, 3);\n        this.drawFinderPattern(this.size - 4, 3);\n        this.drawFinderPattern(3, this.size - 4);\n        var alignPatPos = this.getAlignmentPatternPositions();\n        var numAlign = alignPatPos.length;\n        for (var _i3 = 0; _i3 < numAlign; _i3++) {\n          for (var j = 0; j < numAlign; j++) {\n            if (!(_i3 == 0 && j == 0 || _i3 == 0 && j == numAlign - 1 || _i3 == numAlign - 1 && j == 0)) this.drawAlignmentPattern(alignPatPos[_i3], alignPatPos[j]);\n          }\n        }\n        this.drawFormatBits(0);\n        this.drawVersion();\n      }\n    }, {\n      key: \"drawFormatBits\",\n      value: function drawFormatBits(mask) {\n        var data = this.errorCorrectionLevel.formatBits << 3 | mask;\n        var rem = data;\n        for (var i = 0; i < 10; i++) rem = rem << 1 ^ (rem >>> 9) * 1335;\n        var bits = (data << 10 | rem) ^ 21522;\n        assert(bits >>> 15 == 0);\n        for (var _i4 = 0; _i4 <= 5; _i4++) this.setFunctionModule(8, _i4, getBit(bits, _i4));\n        this.setFunctionModule(8, 7, getBit(bits, 6));\n        this.setFunctionModule(8, 8, getBit(bits, 7));\n        this.setFunctionModule(7, 8, getBit(bits, 8));\n        for (var _i5 = 9; _i5 < 15; _i5++) this.setFunctionModule(14 - _i5, 8, getBit(bits, _i5));\n        for (var _i6 = 0; _i6 < 8; _i6++) this.setFunctionModule(this.size - 1 - _i6, 8, getBit(bits, _i6));\n        for (var _i7 = 8; _i7 < 15; _i7++) this.setFunctionModule(8, this.size - 15 + _i7, getBit(bits, _i7));\n        this.setFunctionModule(8, this.size - 8, true);\n      }\n    }, {\n      key: \"drawVersion\",\n      value: function drawVersion() {\n        if (this.version < 7) return;\n        var rem = this.version;\n        for (var i = 0; i < 12; i++) rem = rem << 1 ^ (rem >>> 11) * 7973;\n        var bits = this.version << 12 | rem;\n        assert(bits >>> 18 == 0);\n        for (var _i8 = 0; _i8 < 18; _i8++) {\n          var color = getBit(bits, _i8);\n          var a = this.size - 11 + _i8 % 3;\n          var b = Math.floor(_i8 / 3);\n          this.setFunctionModule(a, b, color);\n          this.setFunctionModule(b, a, color);\n        }\n      }\n    }, {\n      key: \"drawFinderPattern\",\n      value: function drawFinderPattern(x, y) {\n        for (var dy = -4; dy <= 4; dy++) {\n          for (var dx = -4; dx <= 4; dx++) {\n            var dist = Math.max(Math.abs(dx), Math.abs(dy));\n            var xx = x + dx;\n            var yy = y + dy;\n            if (0 <= xx && xx < this.size && 0 <= yy && yy < this.size) this.setFunctionModule(xx, yy, dist != 2 && dist != 4);\n          }\n        }\n      }\n    }, {\n      key: \"drawAlignmentPattern\",\n      value: function drawAlignmentPattern(x, y) {\n        for (var dy = -2; dy <= 2; dy++) {\n          for (var dx = -2; dx <= 2; dx++) this.setFunctionModule(x + dx, y + dy, Math.max(Math.abs(dx), Math.abs(dy)) != 1);\n        }\n      }\n    }, {\n      key: \"setFunctionModule\",\n      value: function setFunctionModule(x, y, isDark) {\n        this.modules[y][x] = isDark;\n        this.isFunction[y][x] = true;\n      }\n    }, {\n      key: \"addEccAndInterleave\",\n      value: function addEccAndInterleave(data) {\n        var ver = this.version;\n        var ecl = this.errorCorrectionLevel;\n        if (data.length != _QrCode.getNumDataCodewords(ver, ecl)) throw new RangeError(\"Invalid argument\");\n        var numBlocks = _QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n        var blockEccLen = _QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver];\n        var rawCodewords = Math.floor(_QrCode.getNumRawDataModules(ver) / 8);\n        var numShortBlocks = numBlocks - rawCodewords % numBlocks;\n        var shortBlockLen = Math.floor(rawCodewords / numBlocks);\n        var blocks = [];\n        var rsDiv = _QrCode.reedSolomonComputeDivisor(blockEccLen);\n        for (var i = 0, k = 0; i < numBlocks; i++) {\n          var dat = data.slice(k, k + shortBlockLen - blockEccLen + (i < numShortBlocks ? 0 : 1));\n          k += dat.length;\n          var ecc = _QrCode.reedSolomonComputeRemainder(dat, rsDiv);\n          if (i < numShortBlocks) dat.push(0);\n          blocks.push(dat.concat(ecc));\n        }\n        var result = [];\n        var _loop = function _loop(_i9) {\n          blocks.forEach(function (block, j) {\n            if (_i9 != shortBlockLen - blockEccLen || j >= numShortBlocks) result.push(block[_i9]);\n          });\n        };\n        for (var _i9 = 0; _i9 < blocks[0].length; _i9++) {\n          _loop(_i9);\n        }\n        assert(result.length == rawCodewords);\n        return result;\n      }\n    }, {\n      key: \"drawCodewords\",\n      value: function drawCodewords(data) {\n        if (data.length != Math.floor(_QrCode.getNumRawDataModules(this.version) / 8)) throw new RangeError(\"Invalid argument\");\n        var i = 0;\n        for (var right = this.size - 1; right >= 1; right -= 2) {\n          if (right == 6) right = 5;\n          for (var vert = 0; vert < this.size; vert++) {\n            for (var j = 0; j < 2; j++) {\n              var x = right - j;\n              var upward = (right + 1 & 2) == 0;\n              var y = upward ? this.size - 1 - vert : vert;\n              if (!this.isFunction[y][x] && i < data.length * 8) {\n                this.modules[y][x] = getBit(data[i >>> 3], 7 - (i & 7));\n                i++;\n              }\n            }\n          }\n        }\n        assert(i == data.length * 8);\n      }\n    }, {\n      key: \"applyMask\",\n      value: function applyMask(mask) {\n        if (mask < 0 || mask > 7) throw new RangeError(\"Mask value out of range\");\n        for (var y = 0; y < this.size; y++) {\n          for (var x = 0; x < this.size; x++) {\n            var invert = void 0;\n            switch (mask) {\n              case 0:\n                invert = (x + y) % 2 == 0;\n                break;\n              case 1:\n                invert = y % 2 == 0;\n                break;\n              case 2:\n                invert = x % 3 == 0;\n                break;\n              case 3:\n                invert = (x + y) % 3 == 0;\n                break;\n              case 4:\n                invert = (Math.floor(x / 3) + Math.floor(y / 2)) % 2 == 0;\n                break;\n              case 5:\n                invert = x * y % 2 + x * y % 3 == 0;\n                break;\n              case 6:\n                invert = (x * y % 2 + x * y % 3) % 2 == 0;\n                break;\n              case 7:\n                invert = ((x + y) % 2 + x * y % 3) % 2 == 0;\n                break;\n              default:\n                throw new Error(\"Unreachable\");\n            }\n            if (!this.isFunction[y][x] && invert) this.modules[y][x] = !this.modules[y][x];\n          }\n        }\n      }\n    }, {\n      key: \"getPenaltyScore\",\n      value: function getPenaltyScore() {\n        var result = 0;\n        for (var y = 0; y < this.size; y++) {\n          var runColor = false;\n          var runX = 0;\n          var runHistory = [0, 0, 0, 0, 0, 0, 0];\n          for (var x = 0; x < this.size; x++) {\n            if (this.modules[y][x] == runColor) {\n              runX++;\n              if (runX == 5) result += _QrCode.PENALTY_N1;else if (runX > 5) result++;\n            } else {\n              this.finderPenaltyAddHistory(runX, runHistory);\n              if (!runColor) result += this.finderPenaltyCountPatterns(runHistory) * _QrCode.PENALTY_N3;\n              runColor = this.modules[y][x];\n              runX = 1;\n            }\n          }\n          result += this.finderPenaltyTerminateAndCount(runColor, runX, runHistory) * _QrCode.PENALTY_N3;\n        }\n        for (var _x = 0; _x < this.size; _x++) {\n          var _runColor = false;\n          var runY = 0;\n          var _runHistory = [0, 0, 0, 0, 0, 0, 0];\n          for (var _y = 0; _y < this.size; _y++) {\n            if (this.modules[_y][_x] == _runColor) {\n              runY++;\n              if (runY == 5) result += _QrCode.PENALTY_N1;else if (runY > 5) result++;\n            } else {\n              this.finderPenaltyAddHistory(runY, _runHistory);\n              if (!_runColor) result += this.finderPenaltyCountPatterns(_runHistory) * _QrCode.PENALTY_N3;\n              _runColor = this.modules[_y][_x];\n              runY = 1;\n            }\n          }\n          result += this.finderPenaltyTerminateAndCount(_runColor, runY, _runHistory) * _QrCode.PENALTY_N3;\n        }\n        for (var _y2 = 0; _y2 < this.size - 1; _y2++) {\n          for (var _x2 = 0; _x2 < this.size - 1; _x2++) {\n            var color = this.modules[_y2][_x2];\n            if (color == this.modules[_y2][_x2 + 1] && color == this.modules[_y2 + 1][_x2] && color == this.modules[_y2 + 1][_x2 + 1]) result += _QrCode.PENALTY_N2;\n          }\n        }\n        var dark = 0;\n        var _iterator3 = _createForOfIteratorHelper(this.modules),\n          _step3;\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var row = _step3.value;\n            dark = row.reduce(function (sum, color) {\n              return sum + (color ? 1 : 0);\n            }, dark);\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n        var total = this.size * this.size;\n        var k = Math.ceil(Math.abs(dark * 20 - total * 10) / total) - 1;\n        assert(0 <= k && k <= 9);\n        result += k * _QrCode.PENALTY_N4;\n        assert(0 <= result && result <= 2568888);\n        return result;\n      }\n    }, {\n      key: \"getAlignmentPatternPositions\",\n      value: function getAlignmentPatternPositions() {\n        if (this.version == 1) return [];else {\n          var numAlign = Math.floor(this.version / 7) + 2;\n          var step = this.version == 32 ? 26 : Math.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2;\n          var result = [6];\n          for (var pos = this.size - 7; result.length < numAlign; pos -= step) result.splice(1, 0, pos);\n          return result;\n        }\n      }\n    }, {\n      key: \"finderPenaltyCountPatterns\",\n      value: function finderPenaltyCountPatterns(runHistory) {\n        var n = runHistory[1];\n        assert(n <= this.size * 3);\n        var core = n > 0 && runHistory[2] == n && runHistory[3] == n * 3 && runHistory[4] == n && runHistory[5] == n;\n        return (core && runHistory[0] >= n * 4 && runHistory[6] >= n ? 1 : 0) + (core && runHistory[6] >= n * 4 && runHistory[0] >= n ? 1 : 0);\n      }\n    }, {\n      key: \"finderPenaltyTerminateAndCount\",\n      value: function finderPenaltyTerminateAndCount(currentRunColor, currentRunLength, runHistory) {\n        if (currentRunColor) {\n          this.finderPenaltyAddHistory(currentRunLength, runHistory);\n          currentRunLength = 0;\n        }\n        currentRunLength += this.size;\n        this.finderPenaltyAddHistory(currentRunLength, runHistory);\n        return this.finderPenaltyCountPatterns(runHistory);\n      }\n    }, {\n      key: \"finderPenaltyAddHistory\",\n      value: function finderPenaltyAddHistory(currentRunLength, runHistory) {\n        if (runHistory[0] == 0) currentRunLength += this.size;\n        runHistory.pop();\n        runHistory.unshift(currentRunLength);\n      }\n    }], [{\n      key: \"encodeText\",\n      value: function encodeText(text, ecl) {\n        var segs = qrcodegen2.QrSegment.makeSegments(text);\n        return _QrCode.encodeSegments(segs, ecl);\n      }\n    }, {\n      key: \"encodeBinary\",\n      value: function encodeBinary(data, ecl) {\n        var seg = qrcodegen2.QrSegment.makeBytes(data);\n        return _QrCode.encodeSegments([seg], ecl);\n      }\n    }, {\n      key: \"encodeSegments\",\n      value: function encodeSegments(segs, ecl) {\n        var minVersion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n        var maxVersion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 40;\n        var mask = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : -1;\n        var boostEcl = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n        if (!(_QrCode.MIN_VERSION <= minVersion && minVersion <= maxVersion && maxVersion <= _QrCode.MAX_VERSION) || mask < -1 || mask > 7) throw new RangeError(\"Invalid value\");\n        var version;\n        var dataUsedBits;\n        for (version = minVersion;; version++) {\n          var dataCapacityBits2 = _QrCode.getNumDataCodewords(version, ecl) * 8;\n          var usedBits = QrSegment.getTotalBits(segs, version);\n          if (usedBits <= dataCapacityBits2) {\n            dataUsedBits = usedBits;\n            break;\n          }\n          if (version >= maxVersion) throw new RangeError(\"Data too long\");\n        }\n        for (var _i10 = 0, _arr = [_QrCode.Ecc.MEDIUM, _QrCode.Ecc.QUARTILE, _QrCode.Ecc.HIGH]; _i10 < _arr.length; _i10++) {\n          var newEcl = _arr[_i10];\n          if (boostEcl && dataUsedBits <= _QrCode.getNumDataCodewords(version, newEcl) * 8) ecl = newEcl;\n        }\n        var bb = [];\n        var _iterator4 = _createForOfIteratorHelper(segs),\n          _step4;\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var seg = _step4.value;\n            appendBits(seg.mode.modeBits, 4, bb);\n            appendBits(seg.numChars, seg.mode.numCharCountBits(version), bb);\n            var _iterator5 = _createForOfIteratorHelper(seg.getData()),\n              _step5;\n            try {\n              for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                var b = _step5.value;\n                bb.push(b);\n              }\n            } catch (err) {\n              _iterator5.e(err);\n            } finally {\n              _iterator5.f();\n            }\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n        assert(bb.length == dataUsedBits);\n        var dataCapacityBits = _QrCode.getNumDataCodewords(version, ecl) * 8;\n        assert(bb.length <= dataCapacityBits);\n        appendBits(0, Math.min(4, dataCapacityBits - bb.length), bb);\n        appendBits(0, (8 - bb.length % 8) % 8, bb);\n        assert(bb.length % 8 == 0);\n        for (var padByte = 236; bb.length < dataCapacityBits; padByte ^= 236 ^ 17) appendBits(padByte, 8, bb);\n        var dataCodewords = [];\n        while (dataCodewords.length * 8 < bb.length) dataCodewords.push(0);\n        bb.forEach(function (b, i) {\n          return dataCodewords[i >>> 3] |= b << 7 - (i & 7);\n        });\n        return new _QrCode(version, ecl, dataCodewords, mask);\n      }\n    }, {\n      key: \"getNumRawDataModules\",\n      value: function getNumRawDataModules(ver) {\n        if (ver < _QrCode.MIN_VERSION || ver > _QrCode.MAX_VERSION) throw new RangeError(\"Version number out of range\");\n        var result = (16 * ver + 128) * ver + 64;\n        if (ver >= 2) {\n          var numAlign = Math.floor(ver / 7) + 2;\n          result -= (25 * numAlign - 10) * numAlign - 55;\n          if (ver >= 7) result -= 36;\n        }\n        assert(208 <= result && result <= 29648);\n        return result;\n      }\n    }, {\n      key: \"getNumDataCodewords\",\n      value: function getNumDataCodewords(ver, ecl) {\n        return Math.floor(_QrCode.getNumRawDataModules(ver) / 8) - _QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver] * _QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n      }\n    }, {\n      key: \"reedSolomonComputeDivisor\",\n      value: function reedSolomonComputeDivisor(degree) {\n        if (degree < 1 || degree > 255) throw new RangeError(\"Degree out of range\");\n        var result = [];\n        for (var i = 0; i < degree - 1; i++) result.push(0);\n        result.push(1);\n        var root = 1;\n        for (var _i11 = 0; _i11 < degree; _i11++) {\n          for (var j = 0; j < result.length; j++) {\n            result[j] = _QrCode.reedSolomonMultiply(result[j], root);\n            if (j + 1 < result.length) result[j] ^= result[j + 1];\n          }\n          root = _QrCode.reedSolomonMultiply(root, 2);\n        }\n        return result;\n      }\n    }, {\n      key: \"reedSolomonComputeRemainder\",\n      value: function reedSolomonComputeRemainder(data, divisor) {\n        var result = divisor.map(function (_) {\n          return 0;\n        });\n        var _iterator6 = _createForOfIteratorHelper(data),\n          _step6;\n        try {\n          var _loop2 = function _loop2() {\n            var b = _step6.value;\n            var factor = b ^ result.shift();\n            result.push(0);\n            divisor.forEach(function (coef, i) {\n              return result[i] ^= _QrCode.reedSolomonMultiply(coef, factor);\n            });\n          };\n          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n            _loop2();\n          }\n        } catch (err) {\n          _iterator6.e(err);\n        } finally {\n          _iterator6.f();\n        }\n        return result;\n      }\n    }, {\n      key: \"reedSolomonMultiply\",\n      value: function reedSolomonMultiply(x, y) {\n        if (x >>> 8 != 0 || y >>> 8 != 0) throw new RangeError(\"Byte out of range\");\n        var z = 0;\n        for (var i = 7; i >= 0; i--) {\n          z = z << 1 ^ (z >>> 7) * 285;\n          z ^= (y >>> i & 1) * x;\n        }\n        assert(z >>> 8 == 0);\n        return z;\n      }\n    }]);\n    return _QrCode;\n  }();\n  var QrCode = _QrCode;\n  QrCode.MIN_VERSION = 1;\n  QrCode.MAX_VERSION = 40;\n  QrCode.PENALTY_N1 = 3;\n  QrCode.PENALTY_N2 = 3;\n  QrCode.PENALTY_N3 = 40;\n  QrCode.PENALTY_N4 = 10;\n  QrCode.ECC_CODEWORDS_PER_BLOCK = [[-1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30], [-1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28], [-1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30], [-1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]];\n  QrCode.NUM_ERROR_CORRECTION_BLOCKS = [[-1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25], [-1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49], [-1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68], [-1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81]];\n  qrcodegen2.QrCode = QrCode;\n  function appendBits(val, len, bb) {\n    if (len < 0 || len > 31 || val >>> len != 0) throw new RangeError(\"Value out of range\");\n    for (var i = len - 1; i >= 0; i--) bb.push(val >>> i & 1);\n  }\n  function getBit(x, i) {\n    return (x >>> i & 1) != 0;\n  }\n  function assert(cond) {\n    if (!cond) throw new Error(\"Assertion error\");\n  }\n  var _QrSegment = /*#__PURE__*/function () {\n    function _QrSegment(mode, numChars, bitData) {\n      _classCallCheck(this, _QrSegment);\n      this.mode = mode;\n      this.numChars = numChars;\n      this.bitData = bitData;\n      if (numChars < 0) throw new RangeError(\"Invalid argument\");\n      this.bitData = bitData.slice();\n    }\n    _createClass(_QrSegment, [{\n      key: \"getData\",\n      value: function getData() {\n        return this.bitData.slice();\n      }\n    }], [{\n      key: \"makeBytes\",\n      value: function makeBytes(data) {\n        var bb = [];\n        var _iterator7 = _createForOfIteratorHelper(data),\n          _step7;\n        try {\n          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n            var b = _step7.value;\n            appendBits(b, 8, bb);\n          }\n        } catch (err) {\n          _iterator7.e(err);\n        } finally {\n          _iterator7.f();\n        }\n        return new _QrSegment(_QrSegment.Mode.BYTE, data.length, bb);\n      }\n    }, {\n      key: \"makeNumeric\",\n      value: function makeNumeric(digits) {\n        if (!_QrSegment.isNumeric(digits)) throw new RangeError(\"String contains non-numeric characters\");\n        var bb = [];\n        for (var i = 0; i < digits.length;) {\n          var n = Math.min(digits.length - i, 3);\n          appendBits(parseInt(digits.substr(i, n), 10), n * 3 + 1, bb);\n          i += n;\n        }\n        return new _QrSegment(_QrSegment.Mode.NUMERIC, digits.length, bb);\n      }\n    }, {\n      key: \"makeAlphanumeric\",\n      value: function makeAlphanumeric(text) {\n        if (!_QrSegment.isAlphanumeric(text)) throw new RangeError(\"String contains unencodable characters in alphanumeric mode\");\n        var bb = [];\n        var i;\n        for (i = 0; i + 2 <= text.length; i += 2) {\n          var temp = _QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)) * 45;\n          temp += _QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i + 1));\n          appendBits(temp, 11, bb);\n        }\n        if (i < text.length) appendBits(_QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)), 6, bb);\n        return new _QrSegment(_QrSegment.Mode.ALPHANUMERIC, text.length, bb);\n      }\n    }, {\n      key: \"makeSegments\",\n      value: function makeSegments(text) {\n        if (text == \"\") return [];else if (_QrSegment.isNumeric(text)) return [_QrSegment.makeNumeric(text)];else if (_QrSegment.isAlphanumeric(text)) return [_QrSegment.makeAlphanumeric(text)];else return [_QrSegment.makeBytes(_QrSegment.toUtf8ByteArray(text))];\n      }\n    }, {\n      key: \"makeEci\",\n      value: function makeEci(assignVal) {\n        var bb = [];\n        if (assignVal < 0) throw new RangeError(\"ECI assignment value out of range\");else if (assignVal < 1 << 7) appendBits(assignVal, 8, bb);else if (assignVal < 1 << 14) {\n          appendBits(2, 2, bb);\n          appendBits(assignVal, 14, bb);\n        } else if (assignVal < 1e6) {\n          appendBits(6, 3, bb);\n          appendBits(assignVal, 21, bb);\n        } else throw new RangeError(\"ECI assignment value out of range\");\n        return new _QrSegment(_QrSegment.Mode.ECI, 0, bb);\n      }\n    }, {\n      key: \"isNumeric\",\n      value: function isNumeric(text) {\n        return _QrSegment.NUMERIC_REGEX.test(text);\n      }\n    }, {\n      key: \"isAlphanumeric\",\n      value: function isAlphanumeric(text) {\n        return _QrSegment.ALPHANUMERIC_REGEX.test(text);\n      }\n    }, {\n      key: \"getTotalBits\",\n      value: function getTotalBits(segs, version) {\n        var result = 0;\n        var _iterator8 = _createForOfIteratorHelper(segs),\n          _step8;\n        try {\n          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n            var seg = _step8.value;\n            var ccbits = seg.mode.numCharCountBits(version);\n            if (seg.numChars >= 1 << ccbits) return Infinity;\n            result += 4 + ccbits + seg.bitData.length;\n          }\n        } catch (err) {\n          _iterator8.e(err);\n        } finally {\n          _iterator8.f();\n        }\n        return result;\n      }\n    }, {\n      key: \"toUtf8ByteArray\",\n      value: function toUtf8ByteArray(str) {\n        str = encodeURI(str);\n        var result = [];\n        for (var i = 0; i < str.length; i++) {\n          if (str.charAt(i) != \"%\") result.push(str.charCodeAt(i));else {\n            result.push(parseInt(str.substr(i + 1, 2), 16));\n            i += 2;\n          }\n        }\n        return result;\n      }\n    }]);\n    return _QrSegment;\n  }();\n  var QrSegment = _QrSegment;\n  QrSegment.NUMERIC_REGEX = /^[0-9]*$/;\n  QrSegment.ALPHANUMERIC_REGEX = /^[A-Z0-9 $%*+.\\/:-]*$/;\n  QrSegment.ALPHANUMERIC_CHARSET = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:\";\n  qrcodegen2.QrSegment = QrSegment;\n})(qrcodegen || (qrcodegen = {}));\n(function (qrcodegen2) {\n  var QrCode;\n  (function (QrCode2) {\n    var _Ecc = /*#__PURE__*/_createClass(function _Ecc(ordinal, formatBits) {\n      _classCallCheck(this, _Ecc);\n      this.ordinal = ordinal;\n      this.formatBits = formatBits;\n    });\n    var Ecc = _Ecc;\n    Ecc.LOW = new _Ecc(0, 1);\n    Ecc.MEDIUM = new _Ecc(1, 0);\n    Ecc.QUARTILE = new _Ecc(2, 3);\n    Ecc.HIGH = new _Ecc(3, 2);\n    QrCode2.Ecc = Ecc;\n  })(QrCode = qrcodegen2.QrCode || (qrcodegen2.QrCode = {}));\n})(qrcodegen || (qrcodegen = {}));\n(function (qrcodegen2) {\n  var QrSegment;\n  (function (QrSegment2) {\n    var _Mode = /*#__PURE__*/function () {\n      function _Mode(modeBits, numBitsCharCount) {\n        _classCallCheck(this, _Mode);\n        this.modeBits = modeBits;\n        this.numBitsCharCount = numBitsCharCount;\n      }\n      _createClass(_Mode, [{\n        key: \"numCharCountBits\",\n        value: function numCharCountBits(ver) {\n          return this.numBitsCharCount[Math.floor((ver + 7) / 17)];\n        }\n      }]);\n      return _Mode;\n    }();\n    var Mode = _Mode;\n    Mode.NUMERIC = new _Mode(1, [10, 12, 14]);\n    Mode.ALPHANUMERIC = new _Mode(2, [9, 11, 13]);\n    Mode.BYTE = new _Mode(4, [8, 16, 16]);\n    Mode.KANJI = new _Mode(8, [8, 10, 12]);\n    Mode.ECI = new _Mode(7, [0, 0, 0]);\n    QrSegment2.Mode = Mode;\n  })(QrSegment = qrcodegen2.QrSegment || (qrcodegen2.QrSegment = {}));\n})(qrcodegen || (qrcodegen = {}));\nvar qrcodegen_default = qrcodegen;\n\n// src/index.tsx\n/**\n * @license qrcode.react\n * Copyright (c) Paul O'Shannessy\n * SPDX-License-Identifier: ISC\n */\nvar ERROR_LEVEL_MAP = {\n  L: qrcodegen_default.QrCode.Ecc.LOW,\n  M: qrcodegen_default.QrCode.Ecc.MEDIUM,\n  Q: qrcodegen_default.QrCode.Ecc.QUARTILE,\n  H: qrcodegen_default.QrCode.Ecc.HIGH\n};\nvar DEFAULT_SIZE = 128;\nvar DEFAULT_LEVEL = \"L\";\nvar DEFAULT_BGCOLOR = \"#FFFFFF\";\nvar DEFAULT_FGCOLOR = \"#000000\";\nvar DEFAULT_INCLUDEMARGIN = false;\nvar MARGIN_SIZE = 4;\nvar DEFAULT_IMG_SCALE = 0.1;\nfunction generatePath(modules) {\n  var margin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var ops = [];\n  modules.forEach(function (row, y) {\n    var start = null;\n    row.forEach(function (cell, x) {\n      if (!cell && start !== null) {\n        ops.push(\"M\".concat(start + margin, \" \").concat(y + margin, \"h\").concat(x - start, \"v1H\").concat(start + margin, \"z\"));\n        start = null;\n        return;\n      }\n      if (x === row.length - 1) {\n        if (!cell) {\n          return;\n        }\n        if (start === null) {\n          ops.push(\"M\".concat(x + margin, \",\").concat(y + margin, \" h1v1H\").concat(x + margin, \"z\"));\n        } else {\n          ops.push(\"M\".concat(start + margin, \",\").concat(y + margin, \" h\").concat(x + 1 - start, \"v1H\").concat(start + margin, \"z\"));\n        }\n        return;\n      }\n      if (cell && start === null) {\n        start = x;\n      }\n    });\n  });\n  return ops.join(\"\");\n}\nfunction excavateModules(modules, excavation) {\n  return modules.slice().map(function (row, y) {\n    if (y < excavation.y || y >= excavation.y + excavation.h) {\n      return row;\n    }\n    return row.map(function (cell, x) {\n      if (x < excavation.x || x >= excavation.x + excavation.w) {\n        return cell;\n      }\n      return false;\n    });\n  });\n}\nfunction getImageSettings(cells, size, includeMargin, imageSettings) {\n  if (imageSettings == null) {\n    return null;\n  }\n  var margin = includeMargin ? MARGIN_SIZE : 0;\n  var numCells = cells.length + margin * 2;\n  var defaultSize = Math.floor(size * DEFAULT_IMG_SCALE);\n  var scale = numCells / size;\n  var w = (imageSettings.width || defaultSize) * scale;\n  var h = (imageSettings.height || defaultSize) * scale;\n  var x = imageSettings.x == null ? cells.length / 2 - w / 2 : imageSettings.x * scale;\n  var y = imageSettings.y == null ? cells.length / 2 - h / 2 : imageSettings.y * scale;\n  var excavation = null;\n  if (imageSettings.excavate) {\n    var floorX = Math.floor(x);\n    var floorY = Math.floor(y);\n    var ceilW = Math.ceil(w + x - floorX);\n    var ceilH = Math.ceil(h + y - floorY);\n    excavation = {\n      x: floorX,\n      y: floorY,\n      w: ceilW,\n      h: ceilH\n    };\n  }\n  return {\n    x: x,\n    y: y,\n    h: h,\n    w: w,\n    excavation: excavation\n  };\n}\nvar SUPPORTS_PATH2D = function () {\n  try {\n    new Path2D().addPath(new Path2D());\n  } catch (e) {\n    return false;\n  }\n  return true;\n}();\nfunction QRCodeCanvas(props) {\n  var _a = props,\n    value = _a.value,\n    _a$size = _a.size,\n    size = _a$size === void 0 ? DEFAULT_SIZE : _a$size,\n    _a$level = _a.level,\n    level = _a$level === void 0 ? DEFAULT_LEVEL : _a$level,\n    _a$bgColor = _a.bgColor,\n    bgColor = _a$bgColor === void 0 ? DEFAULT_BGCOLOR : _a$bgColor,\n    _a$fgColor = _a.fgColor,\n    fgColor = _a$fgColor === void 0 ? DEFAULT_FGCOLOR : _a$fgColor,\n    _a$includeMargin = _a.includeMargin,\n    includeMargin = _a$includeMargin === void 0 ? DEFAULT_INCLUDEMARGIN : _a$includeMargin,\n    style = _a.style,\n    imageSettings = _a.imageSettings,\n    otherProps = __objRest(_a, [\"value\", \"size\", \"level\", \"bgColor\", \"fgColor\", \"includeMargin\", \"style\", \"imageSettings\"]);\n  var imgSrc = imageSettings == null ? void 0 : imageSettings.src;\n  var _canvas = useRef(null);\n  var _image = useRef(null);\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isImgLoaded = _useState2[0],\n    setIsImageLoaded = _useState2[1];\n  useEffect(function () {\n    if (_canvas.current != null) {\n      var canvas = _canvas.current;\n      var ctx = canvas.getContext(\"2d\");\n      if (!ctx) {\n        return;\n      }\n      var cells = qrcodegen_default.QrCode.encodeText(value, ERROR_LEVEL_MAP[level]).getModules();\n      var margin = includeMargin ? MARGIN_SIZE : 0;\n      var numCells = cells.length + margin * 2;\n      var calculatedImageSettings = getImageSettings(cells, size, includeMargin, imageSettings);\n      var image = _image.current;\n      var haveImageToRender = calculatedImageSettings != null && image !== null && image.complete && image.naturalHeight !== 0 && image.naturalWidth !== 0;\n      if (haveImageToRender) {\n        if (calculatedImageSettings.excavation != null) {\n          cells = excavateModules(cells, calculatedImageSettings.excavation);\n        }\n      }\n      var pixelRatio = window.devicePixelRatio || 1;\n      canvas.height = canvas.width = size * pixelRatio;\n      var scale = size / numCells * pixelRatio;\n      ctx.scale(scale, scale);\n      ctx.fillStyle = bgColor;\n      ctx.fillRect(0, 0, numCells, numCells);\n      ctx.fillStyle = fgColor;\n      if (SUPPORTS_PATH2D) {\n        ctx.fill(new Path2D(generatePath(cells, margin)));\n      } else {\n        cells.forEach(function (row, rdx) {\n          row.forEach(function (cell, cdx) {\n            if (cell) {\n              ctx.fillRect(cdx + margin, rdx + margin, 1, 1);\n            }\n          });\n        });\n      }\n      if (haveImageToRender) {\n        ctx.drawImage(image, calculatedImageSettings.x + margin, calculatedImageSettings.y + margin, calculatedImageSettings.w, calculatedImageSettings.h);\n      }\n    }\n  });\n  useEffect(function () {\n    setIsImageLoaded(false);\n  }, [imgSrc]);\n  var canvasStyle = __spreadValues({\n    height: size,\n    width: size\n  }, style);\n  var img = null;\n  if (imgSrc != null) {\n    img = /* @__PURE__ */React.createElement(\"img\", {\n      src: imgSrc,\n      key: imgSrc,\n      style: {\n        display: \"none\"\n      },\n      onLoad: function onLoad() {\n        setIsImageLoaded(true);\n      },\n      ref: _image\n    });\n  }\n  return /* @__PURE__ */React.createElement(React.Fragment, null, /* @__PURE__ */React.createElement(\"canvas\", __spreadValues({\n    style: canvasStyle,\n    height: size,\n    width: size,\n    ref: _canvas\n  }, otherProps)), img);\n}\nfunction QRCodeSVG(props) {\n  var _a = props,\n    value = _a.value,\n    _a$size2 = _a.size,\n    size = _a$size2 === void 0 ? DEFAULT_SIZE : _a$size2,\n    _a$level2 = _a.level,\n    level = _a$level2 === void 0 ? DEFAULT_LEVEL : _a$level2,\n    _a$bgColor2 = _a.bgColor,\n    bgColor = _a$bgColor2 === void 0 ? DEFAULT_BGCOLOR : _a$bgColor2,\n    _a$fgColor2 = _a.fgColor,\n    fgColor = _a$fgColor2 === void 0 ? DEFAULT_FGCOLOR : _a$fgColor2,\n    _a$includeMargin2 = _a.includeMargin,\n    includeMargin = _a$includeMargin2 === void 0 ? DEFAULT_INCLUDEMARGIN : _a$includeMargin2,\n    imageSettings = _a.imageSettings,\n    otherProps = __objRest(_a, [\"value\", \"size\", \"level\", \"bgColor\", \"fgColor\", \"includeMargin\", \"imageSettings\"]);\n  var cells = qrcodegen_default.QrCode.encodeText(value, ERROR_LEVEL_MAP[level]).getModules();\n  var margin = includeMargin ? MARGIN_SIZE : 0;\n  var numCells = cells.length + margin * 2;\n  var calculatedImageSettings = getImageSettings(cells, size, includeMargin, imageSettings);\n  var image = null;\n  if (imageSettings != null && calculatedImageSettings != null) {\n    if (calculatedImageSettings.excavation != null) {\n      cells = excavateModules(cells, calculatedImageSettings.excavation);\n    }\n    image = /* @__PURE__ */React.createElement(\"image\", {\n      xlinkHref: imageSettings.src,\n      height: calculatedImageSettings.h,\n      width: calculatedImageSettings.w,\n      x: calculatedImageSettings.x + margin,\n      y: calculatedImageSettings.y + margin,\n      preserveAspectRatio: \"none\"\n    });\n  }\n  var fgPath = generatePath(cells, margin);\n  return /* @__PURE__ */React.createElement(\"svg\", __spreadValues({\n    height: size,\n    width: size,\n    viewBox: \"0 0 \".concat(numCells, \" \").concat(numCells)\n  }, otherProps), /* @__PURE__ */React.createElement(\"path\", {\n    fill: bgColor,\n    d: \"M0,0 h\".concat(numCells, \"v\").concat(numCells, \"H0z\"),\n    shapeRendering: \"crispEdges\"\n  }), /* @__PURE__ */React.createElement(\"path\", {\n    fill: fgColor,\n    d: fgPath,\n    shapeRendering: \"crispEdges\"\n  }), image);\n}\nvar QRCode = function QRCode(props) {\n  var _a = props,\n    renderAs = _a.renderAs,\n    otherProps = __objRest(_a, [\"renderAs\"]);\n  if (renderAs === \"svg\") {\n    return /* @__PURE__ */React.createElement(QRCodeSVG, __spreadValues({}, otherProps));\n  }\n  return /* @__PURE__ */React.createElement(QRCodeCanvas, __spreadValues({}, otherProps));\n};\nexport { QRCodeCanvas, QRCodeSVG, QRCode as default };","map":{"version":3,"names":["__defProp","Object","defineProperty","__getOwnPropSymbols","getOwnPropertySymbols","__hasOwnProp","prototype","hasOwnProperty","__propIsEnum","propertyIsEnumerable","__defNormalProp","obj","key","value","enumerable","configurable","writable","__spreadValues","a","b","prop","call","_iterator","_createForOfIteratorHelper","_step","s","n","done","err","e","f","__objRest","source","exclude","target","indexOf","_iterator2","_step2","React","useRef","useEffect","useState","qrcodegen","qrcodegen2","_QrCode","version","errorCorrectionLevel","dataCodewords","msk","_classCallCheck","modules","isFunction","MIN_VERSION","MAX_VERSION","RangeError","size","row","i","push","slice","drawFunctionPatterns","allCodewords","addEccAndInterleave","drawCodewords","minPenalty","applyMask","drawFormatBits","penalty","getPenaltyScore","assert","mask","_createClass","getModule","x","y","getModules","setFunctionModule","drawFinderPattern","alignPatPos","getAlignmentPatternPositions","numAlign","length","j","drawAlignmentPattern","drawVersion","data","formatBits","rem","bits","getBit","color","Math","floor","dy","dx","dist","max","abs","xx","yy","isDark","ver","ecl","getNumDataCodewords","numBlocks","NUM_ERROR_CORRECTION_BLOCKS","ordinal","blockEccLen","ECC_CODEWORDS_PER_BLOCK","rawCodewords","getNumRawDataModules","numShortBlocks","shortBlockLen","blocks","rsDiv","reedSolomonComputeDivisor","k","dat","ecc","reedSolomonComputeRemainder","concat","result","_loop","_i9","forEach","block","right","vert","upward","invert","Error","runColor","runX","runHistory","PENALTY_N1","finderPenaltyAddHistory","finderPenaltyCountPatterns","PENALTY_N3","finderPenaltyTerminateAndCount","runY","PENALTY_N2","dark","_iterator3","_step3","reduce","sum","total","ceil","PENALTY_N4","step","pos","splice","core","currentRunColor","currentRunLength","pop","unshift","encodeText","text","segs","QrSegment","makeSegments","encodeSegments","encodeBinary","seg","makeBytes","minVersion","arguments","undefined","maxVersion","boostEcl","dataUsedBits","dataCapacityBits2","usedBits","getTotalBits","_i10","_arr","Ecc","MEDIUM","QUARTILE","HIGH","newEcl","bb","_iterator4","_step4","appendBits","mode","modeBits","numChars","numCharCountBits","_iterator5","getData","_step5","dataCapacityBits","min","padByte","degree","root","reedSolomonMultiply","divisor","map","_","_iterator6","_step6","_loop2","factor","shift","coef","z","QrCode","val","len","cond","_QrSegment","bitData","_iterator7","_step7","Mode","BYTE","makeNumeric","digits","isNumeric","parseInt","substr","NUMERIC","makeAlphanumeric","isAlphanumeric","temp","ALPHANUMERIC_CHARSET","charAt","ALPHANUMERIC","toUtf8ByteArray","makeEci","assignVal","ECI","NUMERIC_REGEX","test","ALPHANUMERIC_REGEX","_iterator8","_step8","ccbits","Infinity","str","encodeURI","charCodeAt","QrCode2","_Ecc","LOW","QrSegment2","_Mode","numBitsCharCount","KANJI","qrcodegen_default","ERROR_LEVEL_MAP","L","M","Q","H","DEFAULT_SIZE","DEFAULT_LEVEL","DEFAULT_BGCOLOR","DEFAULT_FGCOLOR","DEFAULT_INCLUDEMARGIN","MARGIN_SIZE","DEFAULT_IMG_SCALE","generatePath","margin","ops","start","cell","join","excavateModules","excavation","h","w","getImageSettings","cells","includeMargin","imageSettings","numCells","defaultSize","scale","width","height","excavate","floorX","floorY","ceilW","ceilH","SUPPORTS_PATH2D","Path2D","addPath","QRCodeCanvas","props","_a","_a$size","_a$level","level","_a$bgColor","bgColor","_a$fgColor","fgColor","_a$includeMargin","style","otherProps","imgSrc","src","_canvas","_image","_useState","_useState2","_slicedToArray","isImgLoaded","setIsImageLoaded","current","canvas","ctx","getContext","calculatedImageSettings","image","haveImageToRender","complete","naturalHeight","naturalWidth","pixelRatio","window","devicePixelRatio","fillStyle","fillRect","fill","rdx","cdx","drawImage","canvasStyle","img","createElement","display","onLoad","ref","Fragment","QRCodeSVG","_a$size2","_a$level2","_a$bgColor2","_a$fgColor2","_a$includeMargin2","xlinkHref","preserveAspectRatio","fgPath","viewBox","d","shapeRendering","QRCode","renderAs","default"],"sources":["/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/qrcode.react/lib/esm/index.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\n\n// src/index.tsx\nimport React, { useRef, useEffect, useState } from \"react\";\n\n// src/third-party/qrcodegen/index.ts\n/**\n * @license QR Code generator library (TypeScript)\n * Copyright (c) Project Nayuki.\n * SPDX-License-Identifier: MIT\n */\nvar qrcodegen;\n((qrcodegen2) => {\n  const _QrCode = class {\n    constructor(version, errorCorrectionLevel, dataCodewords, msk) {\n      this.version = version;\n      this.errorCorrectionLevel = errorCorrectionLevel;\n      this.modules = [];\n      this.isFunction = [];\n      if (version < _QrCode.MIN_VERSION || version > _QrCode.MAX_VERSION)\n        throw new RangeError(\"Version value out of range\");\n      if (msk < -1 || msk > 7)\n        throw new RangeError(\"Mask value out of range\");\n      this.size = version * 4 + 17;\n      let row = [];\n      for (let i = 0; i < this.size; i++)\n        row.push(false);\n      for (let i = 0; i < this.size; i++) {\n        this.modules.push(row.slice());\n        this.isFunction.push(row.slice());\n      }\n      this.drawFunctionPatterns();\n      const allCodewords = this.addEccAndInterleave(dataCodewords);\n      this.drawCodewords(allCodewords);\n      if (msk == -1) {\n        let minPenalty = 1e9;\n        for (let i = 0; i < 8; i++) {\n          this.applyMask(i);\n          this.drawFormatBits(i);\n          const penalty = this.getPenaltyScore();\n          if (penalty < minPenalty) {\n            msk = i;\n            minPenalty = penalty;\n          }\n          this.applyMask(i);\n        }\n      }\n      assert(0 <= msk && msk <= 7);\n      this.mask = msk;\n      this.applyMask(msk);\n      this.drawFormatBits(msk);\n      this.isFunction = [];\n    }\n    static encodeText(text, ecl) {\n      const segs = qrcodegen2.QrSegment.makeSegments(text);\n      return _QrCode.encodeSegments(segs, ecl);\n    }\n    static encodeBinary(data, ecl) {\n      const seg = qrcodegen2.QrSegment.makeBytes(data);\n      return _QrCode.encodeSegments([seg], ecl);\n    }\n    static encodeSegments(segs, ecl, minVersion = 1, maxVersion = 40, mask = -1, boostEcl = true) {\n      if (!(_QrCode.MIN_VERSION <= minVersion && minVersion <= maxVersion && maxVersion <= _QrCode.MAX_VERSION) || mask < -1 || mask > 7)\n        throw new RangeError(\"Invalid value\");\n      let version;\n      let dataUsedBits;\n      for (version = minVersion; ; version++) {\n        const dataCapacityBits2 = _QrCode.getNumDataCodewords(version, ecl) * 8;\n        const usedBits = QrSegment.getTotalBits(segs, version);\n        if (usedBits <= dataCapacityBits2) {\n          dataUsedBits = usedBits;\n          break;\n        }\n        if (version >= maxVersion)\n          throw new RangeError(\"Data too long\");\n      }\n      for (const newEcl of [_QrCode.Ecc.MEDIUM, _QrCode.Ecc.QUARTILE, _QrCode.Ecc.HIGH]) {\n        if (boostEcl && dataUsedBits <= _QrCode.getNumDataCodewords(version, newEcl) * 8)\n          ecl = newEcl;\n      }\n      let bb = [];\n      for (const seg of segs) {\n        appendBits(seg.mode.modeBits, 4, bb);\n        appendBits(seg.numChars, seg.mode.numCharCountBits(version), bb);\n        for (const b of seg.getData())\n          bb.push(b);\n      }\n      assert(bb.length == dataUsedBits);\n      const dataCapacityBits = _QrCode.getNumDataCodewords(version, ecl) * 8;\n      assert(bb.length <= dataCapacityBits);\n      appendBits(0, Math.min(4, dataCapacityBits - bb.length), bb);\n      appendBits(0, (8 - bb.length % 8) % 8, bb);\n      assert(bb.length % 8 == 0);\n      for (let padByte = 236; bb.length < dataCapacityBits; padByte ^= 236 ^ 17)\n        appendBits(padByte, 8, bb);\n      let dataCodewords = [];\n      while (dataCodewords.length * 8 < bb.length)\n        dataCodewords.push(0);\n      bb.forEach((b, i) => dataCodewords[i >>> 3] |= b << 7 - (i & 7));\n      return new _QrCode(version, ecl, dataCodewords, mask);\n    }\n    getModule(x, y) {\n      return 0 <= x && x < this.size && 0 <= y && y < this.size && this.modules[y][x];\n    }\n    getModules() {\n      return this.modules;\n    }\n    drawFunctionPatterns() {\n      for (let i = 0; i < this.size; i++) {\n        this.setFunctionModule(6, i, i % 2 == 0);\n        this.setFunctionModule(i, 6, i % 2 == 0);\n      }\n      this.drawFinderPattern(3, 3);\n      this.drawFinderPattern(this.size - 4, 3);\n      this.drawFinderPattern(3, this.size - 4);\n      const alignPatPos = this.getAlignmentPatternPositions();\n      const numAlign = alignPatPos.length;\n      for (let i = 0; i < numAlign; i++) {\n        for (let j = 0; j < numAlign; j++) {\n          if (!(i == 0 && j == 0 || i == 0 && j == numAlign - 1 || i == numAlign - 1 && j == 0))\n            this.drawAlignmentPattern(alignPatPos[i], alignPatPos[j]);\n        }\n      }\n      this.drawFormatBits(0);\n      this.drawVersion();\n    }\n    drawFormatBits(mask) {\n      const data = this.errorCorrectionLevel.formatBits << 3 | mask;\n      let rem = data;\n      for (let i = 0; i < 10; i++)\n        rem = rem << 1 ^ (rem >>> 9) * 1335;\n      const bits = (data << 10 | rem) ^ 21522;\n      assert(bits >>> 15 == 0);\n      for (let i = 0; i <= 5; i++)\n        this.setFunctionModule(8, i, getBit(bits, i));\n      this.setFunctionModule(8, 7, getBit(bits, 6));\n      this.setFunctionModule(8, 8, getBit(bits, 7));\n      this.setFunctionModule(7, 8, getBit(bits, 8));\n      for (let i = 9; i < 15; i++)\n        this.setFunctionModule(14 - i, 8, getBit(bits, i));\n      for (let i = 0; i < 8; i++)\n        this.setFunctionModule(this.size - 1 - i, 8, getBit(bits, i));\n      for (let i = 8; i < 15; i++)\n        this.setFunctionModule(8, this.size - 15 + i, getBit(bits, i));\n      this.setFunctionModule(8, this.size - 8, true);\n    }\n    drawVersion() {\n      if (this.version < 7)\n        return;\n      let rem = this.version;\n      for (let i = 0; i < 12; i++)\n        rem = rem << 1 ^ (rem >>> 11) * 7973;\n      const bits = this.version << 12 | rem;\n      assert(bits >>> 18 == 0);\n      for (let i = 0; i < 18; i++) {\n        const color = getBit(bits, i);\n        const a = this.size - 11 + i % 3;\n        const b = Math.floor(i / 3);\n        this.setFunctionModule(a, b, color);\n        this.setFunctionModule(b, a, color);\n      }\n    }\n    drawFinderPattern(x, y) {\n      for (let dy = -4; dy <= 4; dy++) {\n        for (let dx = -4; dx <= 4; dx++) {\n          const dist = Math.max(Math.abs(dx), Math.abs(dy));\n          const xx = x + dx;\n          const yy = y + dy;\n          if (0 <= xx && xx < this.size && 0 <= yy && yy < this.size)\n            this.setFunctionModule(xx, yy, dist != 2 && dist != 4);\n        }\n      }\n    }\n    drawAlignmentPattern(x, y) {\n      for (let dy = -2; dy <= 2; dy++) {\n        for (let dx = -2; dx <= 2; dx++)\n          this.setFunctionModule(x + dx, y + dy, Math.max(Math.abs(dx), Math.abs(dy)) != 1);\n      }\n    }\n    setFunctionModule(x, y, isDark) {\n      this.modules[y][x] = isDark;\n      this.isFunction[y][x] = true;\n    }\n    addEccAndInterleave(data) {\n      const ver = this.version;\n      const ecl = this.errorCorrectionLevel;\n      if (data.length != _QrCode.getNumDataCodewords(ver, ecl))\n        throw new RangeError(\"Invalid argument\");\n      const numBlocks = _QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n      const blockEccLen = _QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver];\n      const rawCodewords = Math.floor(_QrCode.getNumRawDataModules(ver) / 8);\n      const numShortBlocks = numBlocks - rawCodewords % numBlocks;\n      const shortBlockLen = Math.floor(rawCodewords / numBlocks);\n      let blocks = [];\n      const rsDiv = _QrCode.reedSolomonComputeDivisor(blockEccLen);\n      for (let i = 0, k = 0; i < numBlocks; i++) {\n        let dat = data.slice(k, k + shortBlockLen - blockEccLen + (i < numShortBlocks ? 0 : 1));\n        k += dat.length;\n        const ecc = _QrCode.reedSolomonComputeRemainder(dat, rsDiv);\n        if (i < numShortBlocks)\n          dat.push(0);\n        blocks.push(dat.concat(ecc));\n      }\n      let result = [];\n      for (let i = 0; i < blocks[0].length; i++) {\n        blocks.forEach((block, j) => {\n          if (i != shortBlockLen - blockEccLen || j >= numShortBlocks)\n            result.push(block[i]);\n        });\n      }\n      assert(result.length == rawCodewords);\n      return result;\n    }\n    drawCodewords(data) {\n      if (data.length != Math.floor(_QrCode.getNumRawDataModules(this.version) / 8))\n        throw new RangeError(\"Invalid argument\");\n      let i = 0;\n      for (let right = this.size - 1; right >= 1; right -= 2) {\n        if (right == 6)\n          right = 5;\n        for (let vert = 0; vert < this.size; vert++) {\n          for (let j = 0; j < 2; j++) {\n            const x = right - j;\n            const upward = (right + 1 & 2) == 0;\n            const y = upward ? this.size - 1 - vert : vert;\n            if (!this.isFunction[y][x] && i < data.length * 8) {\n              this.modules[y][x] = getBit(data[i >>> 3], 7 - (i & 7));\n              i++;\n            }\n          }\n        }\n      }\n      assert(i == data.length * 8);\n    }\n    applyMask(mask) {\n      if (mask < 0 || mask > 7)\n        throw new RangeError(\"Mask value out of range\");\n      for (let y = 0; y < this.size; y++) {\n        for (let x = 0; x < this.size; x++) {\n          let invert;\n          switch (mask) {\n            case 0:\n              invert = (x + y) % 2 == 0;\n              break;\n            case 1:\n              invert = y % 2 == 0;\n              break;\n            case 2:\n              invert = x % 3 == 0;\n              break;\n            case 3:\n              invert = (x + y) % 3 == 0;\n              break;\n            case 4:\n              invert = (Math.floor(x / 3) + Math.floor(y / 2)) % 2 == 0;\n              break;\n            case 5:\n              invert = x * y % 2 + x * y % 3 == 0;\n              break;\n            case 6:\n              invert = (x * y % 2 + x * y % 3) % 2 == 0;\n              break;\n            case 7:\n              invert = ((x + y) % 2 + x * y % 3) % 2 == 0;\n              break;\n            default:\n              throw new Error(\"Unreachable\");\n          }\n          if (!this.isFunction[y][x] && invert)\n            this.modules[y][x] = !this.modules[y][x];\n        }\n      }\n    }\n    getPenaltyScore() {\n      let result = 0;\n      for (let y = 0; y < this.size; y++) {\n        let runColor = false;\n        let runX = 0;\n        let runHistory = [0, 0, 0, 0, 0, 0, 0];\n        for (let x = 0; x < this.size; x++) {\n          if (this.modules[y][x] == runColor) {\n            runX++;\n            if (runX == 5)\n              result += _QrCode.PENALTY_N1;\n            else if (runX > 5)\n              result++;\n          } else {\n            this.finderPenaltyAddHistory(runX, runHistory);\n            if (!runColor)\n              result += this.finderPenaltyCountPatterns(runHistory) * _QrCode.PENALTY_N3;\n            runColor = this.modules[y][x];\n            runX = 1;\n          }\n        }\n        result += this.finderPenaltyTerminateAndCount(runColor, runX, runHistory) * _QrCode.PENALTY_N3;\n      }\n      for (let x = 0; x < this.size; x++) {\n        let runColor = false;\n        let runY = 0;\n        let runHistory = [0, 0, 0, 0, 0, 0, 0];\n        for (let y = 0; y < this.size; y++) {\n          if (this.modules[y][x] == runColor) {\n            runY++;\n            if (runY == 5)\n              result += _QrCode.PENALTY_N1;\n            else if (runY > 5)\n              result++;\n          } else {\n            this.finderPenaltyAddHistory(runY, runHistory);\n            if (!runColor)\n              result += this.finderPenaltyCountPatterns(runHistory) * _QrCode.PENALTY_N3;\n            runColor = this.modules[y][x];\n            runY = 1;\n          }\n        }\n        result += this.finderPenaltyTerminateAndCount(runColor, runY, runHistory) * _QrCode.PENALTY_N3;\n      }\n      for (let y = 0; y < this.size - 1; y++) {\n        for (let x = 0; x < this.size - 1; x++) {\n          const color = this.modules[y][x];\n          if (color == this.modules[y][x + 1] && color == this.modules[y + 1][x] && color == this.modules[y + 1][x + 1])\n            result += _QrCode.PENALTY_N2;\n        }\n      }\n      let dark = 0;\n      for (const row of this.modules)\n        dark = row.reduce((sum, color) => sum + (color ? 1 : 0), dark);\n      const total = this.size * this.size;\n      const k = Math.ceil(Math.abs(dark * 20 - total * 10) / total) - 1;\n      assert(0 <= k && k <= 9);\n      result += k * _QrCode.PENALTY_N4;\n      assert(0 <= result && result <= 2568888);\n      return result;\n    }\n    getAlignmentPatternPositions() {\n      if (this.version == 1)\n        return [];\n      else {\n        const numAlign = Math.floor(this.version / 7) + 2;\n        const step = this.version == 32 ? 26 : Math.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2;\n        let result = [6];\n        for (let pos = this.size - 7; result.length < numAlign; pos -= step)\n          result.splice(1, 0, pos);\n        return result;\n      }\n    }\n    static getNumRawDataModules(ver) {\n      if (ver < _QrCode.MIN_VERSION || ver > _QrCode.MAX_VERSION)\n        throw new RangeError(\"Version number out of range\");\n      let result = (16 * ver + 128) * ver + 64;\n      if (ver >= 2) {\n        const numAlign = Math.floor(ver / 7) + 2;\n        result -= (25 * numAlign - 10) * numAlign - 55;\n        if (ver >= 7)\n          result -= 36;\n      }\n      assert(208 <= result && result <= 29648);\n      return result;\n    }\n    static getNumDataCodewords(ver, ecl) {\n      return Math.floor(_QrCode.getNumRawDataModules(ver) / 8) - _QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver] * _QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n    }\n    static reedSolomonComputeDivisor(degree) {\n      if (degree < 1 || degree > 255)\n        throw new RangeError(\"Degree out of range\");\n      let result = [];\n      for (let i = 0; i < degree - 1; i++)\n        result.push(0);\n      result.push(1);\n      let root = 1;\n      for (let i = 0; i < degree; i++) {\n        for (let j = 0; j < result.length; j++) {\n          result[j] = _QrCode.reedSolomonMultiply(result[j], root);\n          if (j + 1 < result.length)\n            result[j] ^= result[j + 1];\n        }\n        root = _QrCode.reedSolomonMultiply(root, 2);\n      }\n      return result;\n    }\n    static reedSolomonComputeRemainder(data, divisor) {\n      let result = divisor.map((_) => 0);\n      for (const b of data) {\n        const factor = b ^ result.shift();\n        result.push(0);\n        divisor.forEach((coef, i) => result[i] ^= _QrCode.reedSolomonMultiply(coef, factor));\n      }\n      return result;\n    }\n    static reedSolomonMultiply(x, y) {\n      if (x >>> 8 != 0 || y >>> 8 != 0)\n        throw new RangeError(\"Byte out of range\");\n      let z = 0;\n      for (let i = 7; i >= 0; i--) {\n        z = z << 1 ^ (z >>> 7) * 285;\n        z ^= (y >>> i & 1) * x;\n      }\n      assert(z >>> 8 == 0);\n      return z;\n    }\n    finderPenaltyCountPatterns(runHistory) {\n      const n = runHistory[1];\n      assert(n <= this.size * 3);\n      const core = n > 0 && runHistory[2] == n && runHistory[3] == n * 3 && runHistory[4] == n && runHistory[5] == n;\n      return (core && runHistory[0] >= n * 4 && runHistory[6] >= n ? 1 : 0) + (core && runHistory[6] >= n * 4 && runHistory[0] >= n ? 1 : 0);\n    }\n    finderPenaltyTerminateAndCount(currentRunColor, currentRunLength, runHistory) {\n      if (currentRunColor) {\n        this.finderPenaltyAddHistory(currentRunLength, runHistory);\n        currentRunLength = 0;\n      }\n      currentRunLength += this.size;\n      this.finderPenaltyAddHistory(currentRunLength, runHistory);\n      return this.finderPenaltyCountPatterns(runHistory);\n    }\n    finderPenaltyAddHistory(currentRunLength, runHistory) {\n      if (runHistory[0] == 0)\n        currentRunLength += this.size;\n      runHistory.pop();\n      runHistory.unshift(currentRunLength);\n    }\n  };\n  let QrCode = _QrCode;\n  QrCode.MIN_VERSION = 1;\n  QrCode.MAX_VERSION = 40;\n  QrCode.PENALTY_N1 = 3;\n  QrCode.PENALTY_N2 = 3;\n  QrCode.PENALTY_N3 = 40;\n  QrCode.PENALTY_N4 = 10;\n  QrCode.ECC_CODEWORDS_PER_BLOCK = [\n    [-1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n    [-1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28],\n    [-1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n    [-1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]\n  ];\n  QrCode.NUM_ERROR_CORRECTION_BLOCKS = [\n    [-1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25],\n    [-1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49],\n    [-1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68],\n    [-1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81]\n  ];\n  qrcodegen2.QrCode = QrCode;\n  function appendBits(val, len, bb) {\n    if (len < 0 || len > 31 || val >>> len != 0)\n      throw new RangeError(\"Value out of range\");\n    for (let i = len - 1; i >= 0; i--)\n      bb.push(val >>> i & 1);\n  }\n  function getBit(x, i) {\n    return (x >>> i & 1) != 0;\n  }\n  function assert(cond) {\n    if (!cond)\n      throw new Error(\"Assertion error\");\n  }\n  const _QrSegment = class {\n    constructor(mode, numChars, bitData) {\n      this.mode = mode;\n      this.numChars = numChars;\n      this.bitData = bitData;\n      if (numChars < 0)\n        throw new RangeError(\"Invalid argument\");\n      this.bitData = bitData.slice();\n    }\n    static makeBytes(data) {\n      let bb = [];\n      for (const b of data)\n        appendBits(b, 8, bb);\n      return new _QrSegment(_QrSegment.Mode.BYTE, data.length, bb);\n    }\n    static makeNumeric(digits) {\n      if (!_QrSegment.isNumeric(digits))\n        throw new RangeError(\"String contains non-numeric characters\");\n      let bb = [];\n      for (let i = 0; i < digits.length; ) {\n        const n = Math.min(digits.length - i, 3);\n        appendBits(parseInt(digits.substr(i, n), 10), n * 3 + 1, bb);\n        i += n;\n      }\n      return new _QrSegment(_QrSegment.Mode.NUMERIC, digits.length, bb);\n    }\n    static makeAlphanumeric(text) {\n      if (!_QrSegment.isAlphanumeric(text))\n        throw new RangeError(\"String contains unencodable characters in alphanumeric mode\");\n      let bb = [];\n      let i;\n      for (i = 0; i + 2 <= text.length; i += 2) {\n        let temp = _QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)) * 45;\n        temp += _QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i + 1));\n        appendBits(temp, 11, bb);\n      }\n      if (i < text.length)\n        appendBits(_QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)), 6, bb);\n      return new _QrSegment(_QrSegment.Mode.ALPHANUMERIC, text.length, bb);\n    }\n    static makeSegments(text) {\n      if (text == \"\")\n        return [];\n      else if (_QrSegment.isNumeric(text))\n        return [_QrSegment.makeNumeric(text)];\n      else if (_QrSegment.isAlphanumeric(text))\n        return [_QrSegment.makeAlphanumeric(text)];\n      else\n        return [_QrSegment.makeBytes(_QrSegment.toUtf8ByteArray(text))];\n    }\n    static makeEci(assignVal) {\n      let bb = [];\n      if (assignVal < 0)\n        throw new RangeError(\"ECI assignment value out of range\");\n      else if (assignVal < 1 << 7)\n        appendBits(assignVal, 8, bb);\n      else if (assignVal < 1 << 14) {\n        appendBits(2, 2, bb);\n        appendBits(assignVal, 14, bb);\n      } else if (assignVal < 1e6) {\n        appendBits(6, 3, bb);\n        appendBits(assignVal, 21, bb);\n      } else\n        throw new RangeError(\"ECI assignment value out of range\");\n      return new _QrSegment(_QrSegment.Mode.ECI, 0, bb);\n    }\n    static isNumeric(text) {\n      return _QrSegment.NUMERIC_REGEX.test(text);\n    }\n    static isAlphanumeric(text) {\n      return _QrSegment.ALPHANUMERIC_REGEX.test(text);\n    }\n    getData() {\n      return this.bitData.slice();\n    }\n    static getTotalBits(segs, version) {\n      let result = 0;\n      for (const seg of segs) {\n        const ccbits = seg.mode.numCharCountBits(version);\n        if (seg.numChars >= 1 << ccbits)\n          return Infinity;\n        result += 4 + ccbits + seg.bitData.length;\n      }\n      return result;\n    }\n    static toUtf8ByteArray(str) {\n      str = encodeURI(str);\n      let result = [];\n      for (let i = 0; i < str.length; i++) {\n        if (str.charAt(i) != \"%\")\n          result.push(str.charCodeAt(i));\n        else {\n          result.push(parseInt(str.substr(i + 1, 2), 16));\n          i += 2;\n        }\n      }\n      return result;\n    }\n  };\n  let QrSegment = _QrSegment;\n  QrSegment.NUMERIC_REGEX = /^[0-9]*$/;\n  QrSegment.ALPHANUMERIC_REGEX = /^[A-Z0-9 $%*+.\\/:-]*$/;\n  QrSegment.ALPHANUMERIC_CHARSET = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:\";\n  qrcodegen2.QrSegment = QrSegment;\n})(qrcodegen || (qrcodegen = {}));\n((qrcodegen2) => {\n  let QrCode;\n  ((QrCode2) => {\n    const _Ecc = class {\n      constructor(ordinal, formatBits) {\n        this.ordinal = ordinal;\n        this.formatBits = formatBits;\n      }\n    };\n    let Ecc = _Ecc;\n    Ecc.LOW = new _Ecc(0, 1);\n    Ecc.MEDIUM = new _Ecc(1, 0);\n    Ecc.QUARTILE = new _Ecc(2, 3);\n    Ecc.HIGH = new _Ecc(3, 2);\n    QrCode2.Ecc = Ecc;\n  })(QrCode = qrcodegen2.QrCode || (qrcodegen2.QrCode = {}));\n})(qrcodegen || (qrcodegen = {}));\n((qrcodegen2) => {\n  let QrSegment;\n  ((QrSegment2) => {\n    const _Mode = class {\n      constructor(modeBits, numBitsCharCount) {\n        this.modeBits = modeBits;\n        this.numBitsCharCount = numBitsCharCount;\n      }\n      numCharCountBits(ver) {\n        return this.numBitsCharCount[Math.floor((ver + 7) / 17)];\n      }\n    };\n    let Mode = _Mode;\n    Mode.NUMERIC = new _Mode(1, [10, 12, 14]);\n    Mode.ALPHANUMERIC = new _Mode(2, [9, 11, 13]);\n    Mode.BYTE = new _Mode(4, [8, 16, 16]);\n    Mode.KANJI = new _Mode(8, [8, 10, 12]);\n    Mode.ECI = new _Mode(7, [0, 0, 0]);\n    QrSegment2.Mode = Mode;\n  })(QrSegment = qrcodegen2.QrSegment || (qrcodegen2.QrSegment = {}));\n})(qrcodegen || (qrcodegen = {}));\nvar qrcodegen_default = qrcodegen;\n\n// src/index.tsx\n/**\n * @license qrcode.react\n * Copyright (c) Paul O'Shannessy\n * SPDX-License-Identifier: ISC\n */\nvar ERROR_LEVEL_MAP = {\n  L: qrcodegen_default.QrCode.Ecc.LOW,\n  M: qrcodegen_default.QrCode.Ecc.MEDIUM,\n  Q: qrcodegen_default.QrCode.Ecc.QUARTILE,\n  H: qrcodegen_default.QrCode.Ecc.HIGH\n};\nvar DEFAULT_SIZE = 128;\nvar DEFAULT_LEVEL = \"L\";\nvar DEFAULT_BGCOLOR = \"#FFFFFF\";\nvar DEFAULT_FGCOLOR = \"#000000\";\nvar DEFAULT_INCLUDEMARGIN = false;\nvar MARGIN_SIZE = 4;\nvar DEFAULT_IMG_SCALE = 0.1;\nfunction generatePath(modules, margin = 0) {\n  const ops = [];\n  modules.forEach(function(row, y) {\n    let start = null;\n    row.forEach(function(cell, x) {\n      if (!cell && start !== null) {\n        ops.push(`M${start + margin} ${y + margin}h${x - start}v1H${start + margin}z`);\n        start = null;\n        return;\n      }\n      if (x === row.length - 1) {\n        if (!cell) {\n          return;\n        }\n        if (start === null) {\n          ops.push(`M${x + margin},${y + margin} h1v1H${x + margin}z`);\n        } else {\n          ops.push(`M${start + margin},${y + margin} h${x + 1 - start}v1H${start + margin}z`);\n        }\n        return;\n      }\n      if (cell && start === null) {\n        start = x;\n      }\n    });\n  });\n  return ops.join(\"\");\n}\nfunction excavateModules(modules, excavation) {\n  return modules.slice().map((row, y) => {\n    if (y < excavation.y || y >= excavation.y + excavation.h) {\n      return row;\n    }\n    return row.map((cell, x) => {\n      if (x < excavation.x || x >= excavation.x + excavation.w) {\n        return cell;\n      }\n      return false;\n    });\n  });\n}\nfunction getImageSettings(cells, size, includeMargin, imageSettings) {\n  if (imageSettings == null) {\n    return null;\n  }\n  const margin = includeMargin ? MARGIN_SIZE : 0;\n  const numCells = cells.length + margin * 2;\n  const defaultSize = Math.floor(size * DEFAULT_IMG_SCALE);\n  const scale = numCells / size;\n  const w = (imageSettings.width || defaultSize) * scale;\n  const h = (imageSettings.height || defaultSize) * scale;\n  const x = imageSettings.x == null ? cells.length / 2 - w / 2 : imageSettings.x * scale;\n  const y = imageSettings.y == null ? cells.length / 2 - h / 2 : imageSettings.y * scale;\n  let excavation = null;\n  if (imageSettings.excavate) {\n    let floorX = Math.floor(x);\n    let floorY = Math.floor(y);\n    let ceilW = Math.ceil(w + x - floorX);\n    let ceilH = Math.ceil(h + y - floorY);\n    excavation = { x: floorX, y: floorY, w: ceilW, h: ceilH };\n  }\n  return { x, y, h, w, excavation };\n}\nvar SUPPORTS_PATH2D = function() {\n  try {\n    new Path2D().addPath(new Path2D());\n  } catch (e) {\n    return false;\n  }\n  return true;\n}();\nfunction QRCodeCanvas(props) {\n  const _a = props, {\n    value,\n    size = DEFAULT_SIZE,\n    level = DEFAULT_LEVEL,\n    bgColor = DEFAULT_BGCOLOR,\n    fgColor = DEFAULT_FGCOLOR,\n    includeMargin = DEFAULT_INCLUDEMARGIN,\n    style,\n    imageSettings\n  } = _a, otherProps = __objRest(_a, [\n    \"value\",\n    \"size\",\n    \"level\",\n    \"bgColor\",\n    \"fgColor\",\n    \"includeMargin\",\n    \"style\",\n    \"imageSettings\"\n  ]);\n  const imgSrc = imageSettings == null ? void 0 : imageSettings.src;\n  const _canvas = useRef(null);\n  const _image = useRef(null);\n  const [isImgLoaded, setIsImageLoaded] = useState(false);\n  useEffect(() => {\n    if (_canvas.current != null) {\n      const canvas = _canvas.current;\n      const ctx = canvas.getContext(\"2d\");\n      if (!ctx) {\n        return;\n      }\n      let cells = qrcodegen_default.QrCode.encodeText(value, ERROR_LEVEL_MAP[level]).getModules();\n      const margin = includeMargin ? MARGIN_SIZE : 0;\n      const numCells = cells.length + margin * 2;\n      const calculatedImageSettings = getImageSettings(cells, size, includeMargin, imageSettings);\n      const image = _image.current;\n      const haveImageToRender = calculatedImageSettings != null && image !== null && image.complete && image.naturalHeight !== 0 && image.naturalWidth !== 0;\n      if (haveImageToRender) {\n        if (calculatedImageSettings.excavation != null) {\n          cells = excavateModules(cells, calculatedImageSettings.excavation);\n        }\n      }\n      const pixelRatio = window.devicePixelRatio || 1;\n      canvas.height = canvas.width = size * pixelRatio;\n      const scale = size / numCells * pixelRatio;\n      ctx.scale(scale, scale);\n      ctx.fillStyle = bgColor;\n      ctx.fillRect(0, 0, numCells, numCells);\n      ctx.fillStyle = fgColor;\n      if (SUPPORTS_PATH2D) {\n        ctx.fill(new Path2D(generatePath(cells, margin)));\n      } else {\n        cells.forEach(function(row, rdx) {\n          row.forEach(function(cell, cdx) {\n            if (cell) {\n              ctx.fillRect(cdx + margin, rdx + margin, 1, 1);\n            }\n          });\n        });\n      }\n      if (haveImageToRender) {\n        ctx.drawImage(image, calculatedImageSettings.x + margin, calculatedImageSettings.y + margin, calculatedImageSettings.w, calculatedImageSettings.h);\n      }\n    }\n  });\n  useEffect(() => {\n    setIsImageLoaded(false);\n  }, [imgSrc]);\n  const canvasStyle = __spreadValues({ height: size, width: size }, style);\n  let img = null;\n  if (imgSrc != null) {\n    img = /* @__PURE__ */ React.createElement(\"img\", {\n      src: imgSrc,\n      key: imgSrc,\n      style: { display: \"none\" },\n      onLoad: () => {\n        setIsImageLoaded(true);\n      },\n      ref: _image\n    });\n  }\n  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(\"canvas\", __spreadValues({\n    style: canvasStyle,\n    height: size,\n    width: size,\n    ref: _canvas\n  }, otherProps)), img);\n}\nfunction QRCodeSVG(props) {\n  const _a = props, {\n    value,\n    size = DEFAULT_SIZE,\n    level = DEFAULT_LEVEL,\n    bgColor = DEFAULT_BGCOLOR,\n    fgColor = DEFAULT_FGCOLOR,\n    includeMargin = DEFAULT_INCLUDEMARGIN,\n    imageSettings\n  } = _a, otherProps = __objRest(_a, [\n    \"value\",\n    \"size\",\n    \"level\",\n    \"bgColor\",\n    \"fgColor\",\n    \"includeMargin\",\n    \"imageSettings\"\n  ]);\n  let cells = qrcodegen_default.QrCode.encodeText(value, ERROR_LEVEL_MAP[level]).getModules();\n  const margin = includeMargin ? MARGIN_SIZE : 0;\n  const numCells = cells.length + margin * 2;\n  const calculatedImageSettings = getImageSettings(cells, size, includeMargin, imageSettings);\n  let image = null;\n  if (imageSettings != null && calculatedImageSettings != null) {\n    if (calculatedImageSettings.excavation != null) {\n      cells = excavateModules(cells, calculatedImageSettings.excavation);\n    }\n    image = /* @__PURE__ */ React.createElement(\"image\", {\n      xlinkHref: imageSettings.src,\n      height: calculatedImageSettings.h,\n      width: calculatedImageSettings.w,\n      x: calculatedImageSettings.x + margin,\n      y: calculatedImageSettings.y + margin,\n      preserveAspectRatio: \"none\"\n    });\n  }\n  const fgPath = generatePath(cells, margin);\n  return /* @__PURE__ */ React.createElement(\"svg\", __spreadValues({\n    height: size,\n    width: size,\n    viewBox: `0 0 ${numCells} ${numCells}`\n  }, otherProps), /* @__PURE__ */ React.createElement(\"path\", {\n    fill: bgColor,\n    d: `M0,0 h${numCells}v${numCells}H0z`,\n    shapeRendering: \"crispEdges\"\n  }), /* @__PURE__ */ React.createElement(\"path\", {\n    fill: fgColor,\n    d: fgPath,\n    shapeRendering: \"crispEdges\"\n  }), image);\n}\nvar QRCode = (props) => {\n  const _a = props, { renderAs } = _a, otherProps = __objRest(_a, [\"renderAs\"]);\n  if (renderAs === \"svg\") {\n    return /* @__PURE__ */ React.createElement(QRCodeSVG, __spreadValues({}, otherProps));\n  }\n  return /* @__PURE__ */ React.createElement(QRCodeCanvas, __spreadValues({}, otherProps));\n};\nexport {\n  QRCodeCanvas,\n  QRCodeSVG,\n  QRCode as default\n};\n"],"mappings":"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AAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EACnK,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EACpK,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EACpK,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}