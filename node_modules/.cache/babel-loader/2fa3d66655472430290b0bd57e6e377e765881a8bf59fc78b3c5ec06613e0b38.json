{"ast":null,"code":"\"use client\";\n\nimport _defineProperty from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _toArray from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/toArray.js\";\nimport _slicedToArray from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react';\nimport { useCallback, useMemo } from 'react';\nimport DownOutlined from \"@ant-design/icons/es/icons/DownOutlined\";\nimport classNames from 'classnames';\nimport { INTERNAL_COL_DEFINE } from 'rc-table';\nimport { arrAdd, arrDel } from \"rc-tree/es/util\";\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nimport { convertDataToEntities } from \"rc-tree/es/utils/treeUtil\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport useMultipleSelect from '../../_util/hooks/useMultipleSelect';\nimport { devUseWarning } from '../../_util/warning';\nimport Checkbox from '../../checkbox';\nimport Dropdown from '../../dropdown';\nimport Radio from '../../radio';\n// TODO: warning if use ajax!!!\nexport var SELECTION_COLUMN = {};\nexport var SELECTION_ALL = 'SELECT_ALL';\nexport var SELECTION_INVERT = 'SELECT_INVERT';\nexport var SELECTION_NONE = 'SELECT_NONE';\nvar EMPTY_LIST = [];\nvar flattenData = function flattenData(childrenColumnName, data) {\n  var list = [];\n  (data || []).forEach(function (record) {\n    list.push(record);\n    if (record && typeof record === 'object' && childrenColumnName in record) {\n      list = [].concat(_toConsumableArray(list), _toConsumableArray(flattenData(childrenColumnName, record[childrenColumnName])));\n    }\n  });\n  return list;\n};\nvar useSelection = function useSelection(config, rowSelection) {\n  var _ref6 = rowSelection || {},\n    preserveSelectedRowKeys = _ref6.preserveSelectedRowKeys,\n    selectedRowKeys = _ref6.selectedRowKeys,\n    defaultSelectedRowKeys = _ref6.defaultSelectedRowKeys,\n    getCheckboxProps = _ref6.getCheckboxProps,\n    onSelectionChange = _ref6.onChange,\n    onSelect = _ref6.onSelect,\n    onSelectAll = _ref6.onSelectAll,\n    onSelectInvert = _ref6.onSelectInvert,\n    onSelectNone = _ref6.onSelectNone,\n    onSelectMultiple = _ref6.onSelectMultiple,\n    selectionColWidth = _ref6.columnWidth,\n    selectionType = _ref6.type,\n    selections = _ref6.selections,\n    fixed = _ref6.fixed,\n    customizeRenderCell = _ref6.renderCell,\n    hideSelectAll = _ref6.hideSelectAll,\n    _ref6$checkStrictly = _ref6.checkStrictly,\n    checkStrictly = _ref6$checkStrictly === void 0 ? true : _ref6$checkStrictly;\n  var prefixCls = config.prefixCls,\n    data = config.data,\n    pageData = config.pageData,\n    getRecordByKey = config.getRecordByKey,\n    getRowKey = config.getRowKey,\n    expandType = config.expandType,\n    childrenColumnName = config.childrenColumnName,\n    tableLocale = config.locale,\n    getPopupContainer = config.getPopupContainer;\n  var warning = devUseWarning('Table');\n  // ========================= MultipleSelect =========================\n  var _useMultipleSelect = useMultipleSelect(function (item) {\n      return item;\n    }),\n    _useMultipleSelect2 = _slicedToArray(_useMultipleSelect, 2),\n    multipleSelect = _useMultipleSelect2[0],\n    updatePrevSelectedIndex = _useMultipleSelect2[1];\n  // ========================= Keys =========================\n  var _useMergedState = useMergedState(selectedRowKeys || defaultSelectedRowKeys || EMPTY_LIST, {\n      value: selectedRowKeys\n    }),\n    _useMergedState2 = _slicedToArray(_useMergedState, 2),\n    mergedSelectedKeys = _useMergedState2[0],\n    setMergedSelectedKeys = _useMergedState2[1];\n  // ======================== Caches ========================\n  var preserveRecordsRef = React.useRef(new Map());\n  var updatePreserveRecordsCache = useCallback(function (keys) {\n    if (preserveSelectedRowKeys) {\n      var newCache = new Map();\n      // Keep key if mark as preserveSelectedRowKeys\n      keys.forEach(function (key) {\n        var record = getRecordByKey(key);\n        if (!record && preserveRecordsRef.current.has(key)) {\n          record = preserveRecordsRef.current.get(key);\n        }\n        newCache.set(key, record);\n      });\n      // Refresh to new cache\n      preserveRecordsRef.current = newCache;\n    }\n  }, [getRecordByKey, preserveSelectedRowKeys]);\n  // Update cache with selectedKeys\n  React.useEffect(function () {\n    updatePreserveRecordsCache(mergedSelectedKeys);\n  }, [mergedSelectedKeys]);\n  var _useMemo = useMemo(function () {\n      if (checkStrictly) {\n        return {\n          keyEntities: null\n        };\n      }\n      var convertData = data;\n      if (preserveSelectedRowKeys) {\n        var keysSet = new Set(data.map(function (record, index) {\n          return getRowKey(record, index);\n        }));\n        // remove preserveRecords that duplicate data\n        var preserveRecords = Array.from(preserveRecordsRef.current).reduce(function (total, _ref) {\n          var _ref7 = _slicedToArray(_ref, 2),\n            key = _ref7[0],\n            value = _ref7[1];\n          return keysSet.has(key) ? total : total.concat(value);\n        }, []);\n        convertData = [].concat(_toConsumableArray(convertData), _toConsumableArray(preserveRecords));\n      }\n      return convertDataToEntities(convertData, {\n        externalGetKey: getRowKey,\n        childrenPropName: childrenColumnName\n      });\n    }, [data, getRowKey, checkStrictly, childrenColumnName, preserveSelectedRowKeys]),\n    keyEntities = _useMemo.keyEntities;\n  // Get flatten data\n  var flattedData = useMemo(function () {\n    return flattenData(childrenColumnName, pageData);\n  }, [childrenColumnName, pageData]);\n  // Get all checkbox props\n  var checkboxPropsMap = useMemo(function () {\n    var map = new Map();\n    flattedData.forEach(function (record, index) {\n      var key = getRowKey(record, index);\n      var checkboxProps = (getCheckboxProps ? getCheckboxProps(record) : null) || {};\n      map.set(key, checkboxProps);\n      process.env.NODE_ENV !== \"production\" ? warning(!('checked' in checkboxProps || 'defaultChecked' in checkboxProps), 'usage', 'Do not set `checked` or `defaultChecked` in `getCheckboxProps`. Please use `selectedRowKeys` instead.') : void 0;\n    });\n    return map;\n  }, [flattedData, getRowKey, getCheckboxProps]);\n  var isCheckboxDisabled = useCallback(function (r) {\n    var _a;\n    return !!((_a = checkboxPropsMap.get(getRowKey(r))) === null || _a === void 0 ? void 0 : _a.disabled);\n  }, [checkboxPropsMap, getRowKey]);\n  var _useMemo2 = useMemo(function () {\n      if (checkStrictly) {\n        return [mergedSelectedKeys || [], []];\n      }\n      var _conductCheck = conductCheck(mergedSelectedKeys, true, keyEntities, isCheckboxDisabled),\n        checkedKeys = _conductCheck.checkedKeys,\n        halfCheckedKeys = _conductCheck.halfCheckedKeys;\n      return [checkedKeys || [], halfCheckedKeys];\n    }, [mergedSelectedKeys, checkStrictly, keyEntities, isCheckboxDisabled]),\n    _useMemo3 = _slicedToArray(_useMemo2, 2),\n    derivedSelectedKeys = _useMemo3[0],\n    derivedHalfSelectedKeys = _useMemo3[1];\n  var derivedSelectedKeySet = useMemo(function () {\n    var keys = selectionType === 'radio' ? derivedSelectedKeys.slice(0, 1) : derivedSelectedKeys;\n    return new Set(keys);\n  }, [derivedSelectedKeys, selectionType]);\n  var derivedHalfSelectedKeySet = useMemo(function () {\n    return selectionType === 'radio' ? new Set() : new Set(derivedHalfSelectedKeys);\n  }, [derivedHalfSelectedKeys, selectionType]);\n  // Reset if rowSelection reset\n  React.useEffect(function () {\n    if (!rowSelection) {\n      setMergedSelectedKeys(EMPTY_LIST);\n    }\n  }, [!!rowSelection]);\n  var setSelectedKeys = useCallback(function (keys, method) {\n    var availableKeys;\n    var records;\n    updatePreserveRecordsCache(keys);\n    if (preserveSelectedRowKeys) {\n      availableKeys = keys;\n      records = keys.map(function (key) {\n        return preserveRecordsRef.current.get(key);\n      });\n    } else {\n      // Filter key which not exist in the `dataSource`\n      availableKeys = [];\n      records = [];\n      keys.forEach(function (key) {\n        var record = getRecordByKey(key);\n        if (record !== undefined) {\n          availableKeys.push(key);\n          records.push(record);\n        }\n      });\n    }\n    setMergedSelectedKeys(availableKeys);\n    onSelectionChange === null || onSelectionChange === void 0 ? void 0 : onSelectionChange(availableKeys, records, {\n      type: method\n    });\n  }, [setMergedSelectedKeys, getRecordByKey, onSelectionChange, preserveSelectedRowKeys]);\n  // ====================== Selections ======================\n  // Trigger single `onSelect` event\n  var triggerSingleSelection = useCallback(function (key, selected, keys, event) {\n    if (onSelect) {\n      var rows = keys.map(function (k) {\n        return getRecordByKey(k);\n      });\n      onSelect(getRecordByKey(key), selected, rows, event);\n    }\n    setSelectedKeys(keys, 'single');\n  }, [onSelect, getRecordByKey, setSelectedKeys]);\n  var mergedSelections = useMemo(function () {\n    if (!selections || hideSelectAll) {\n      return null;\n    }\n    var selectionList = selections === true ? [SELECTION_ALL, SELECTION_INVERT, SELECTION_NONE] : selections;\n    return selectionList.map(function (selection) {\n      if (selection === SELECTION_ALL) {\n        return {\n          key: 'all',\n          text: tableLocale.selectionAll,\n          onSelect: function onSelect() {\n            setSelectedKeys(data.map(function (record, index) {\n              return getRowKey(record, index);\n            }).filter(function (key) {\n              var checkProps = checkboxPropsMap.get(key);\n              return !(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled) || derivedSelectedKeySet.has(key);\n            }), 'all');\n          }\n        };\n      }\n      if (selection === SELECTION_INVERT) {\n        return {\n          key: 'invert',\n          text: tableLocale.selectInvert,\n          onSelect: function onSelect() {\n            var keySet = new Set(derivedSelectedKeySet);\n            pageData.forEach(function (record, index) {\n              var key = getRowKey(record, index);\n              var checkProps = checkboxPropsMap.get(key);\n              if (!(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled)) {\n                if (keySet.has(key)) {\n                  keySet.delete(key);\n                } else {\n                  keySet.add(key);\n                }\n              }\n            });\n            var keys = Array.from(keySet);\n            if (onSelectInvert) {\n              warning.deprecated(false, 'onSelectInvert', 'onChange');\n              onSelectInvert(keys);\n            }\n            setSelectedKeys(keys, 'invert');\n          }\n        };\n      }\n      if (selection === SELECTION_NONE) {\n        return {\n          key: 'none',\n          text: tableLocale.selectNone,\n          onSelect: function onSelect() {\n            onSelectNone === null || onSelectNone === void 0 ? void 0 : onSelectNone();\n            setSelectedKeys(Array.from(derivedSelectedKeySet).filter(function (key) {\n              var checkProps = checkboxPropsMap.get(key);\n              return checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled;\n            }), 'none');\n          }\n        };\n      }\n      return selection;\n    }).map(function (selection) {\n      return Object.assign(Object.assign({}, selection), {\n        onSelect: function onSelect() {\n          var _a2;\n          var _a;\n          for (var _len = arguments.length, rest = new Array(_len), _key = 0; _key < _len; _key++) {\n            rest[_key] = arguments[_key];\n          }\n          (_a = selection.onSelect) === null || _a === void 0 ? void 0 : (_a2 = _a).call.apply(_a2, [selection].concat(rest));\n          updatePrevSelectedIndex(null);\n        }\n      });\n    });\n  }, [selections, derivedSelectedKeySet, pageData, getRowKey, onSelectInvert, setSelectedKeys]);\n  // ======================= Columns ========================\n  var transformColumns = useCallback(function (columns) {\n    var _a;\n    // >>>>>>>>>>> Skip if not exists `rowSelection`\n    if (!rowSelection) {\n      process.env.NODE_ENV !== \"production\" ? warning(!columns.includes(SELECTION_COLUMN), 'usage', '`rowSelection` is not config but `SELECTION_COLUMN` exists in the `columns`.') : void 0;\n      return columns.filter(function (col) {\n        return col !== SELECTION_COLUMN;\n      });\n    }\n    // >>>>>>>>>>> Support selection\n    var cloneColumns = _toConsumableArray(columns);\n    var keySet = new Set(derivedSelectedKeySet);\n    // Record key only need check with enabled\n    var recordKeys = flattedData.map(getRowKey).filter(function (key) {\n      return !checkboxPropsMap.get(key).disabled;\n    });\n    var checkedCurrentAll = recordKeys.every(function (key) {\n      return keySet.has(key);\n    });\n    var checkedCurrentSome = recordKeys.some(function (key) {\n      return keySet.has(key);\n    });\n    var onSelectAllChange = function onSelectAllChange() {\n      var changeKeys = [];\n      if (checkedCurrentAll) {\n        recordKeys.forEach(function (key) {\n          keySet.delete(key);\n          changeKeys.push(key);\n        });\n      } else {\n        recordKeys.forEach(function (key) {\n          if (!keySet.has(key)) {\n            keySet.add(key);\n            changeKeys.push(key);\n          }\n        });\n      }\n      var keys = Array.from(keySet);\n      onSelectAll === null || onSelectAll === void 0 ? void 0 : onSelectAll(!checkedCurrentAll, keys.map(function (k) {\n        return getRecordByKey(k);\n      }), changeKeys.map(function (k) {\n        return getRecordByKey(k);\n      }));\n      setSelectedKeys(keys, 'all');\n      updatePrevSelectedIndex(null);\n    };\n    // ===================== Render =====================\n    // Title Cell\n    var title;\n    var columnTitleCheckbox;\n    if (selectionType !== 'radio') {\n      var customizeSelections;\n      if (mergedSelections) {\n        var menu = {\n          getPopupContainer: getPopupContainer,\n          items: mergedSelections.map(function (selection, index) {\n            var key = selection.key,\n              text = selection.text,\n              onSelectionClick = selection.onSelect;\n            return {\n              key: key !== null && key !== void 0 ? key : index,\n              onClick: function onClick() {\n                onSelectionClick === null || onSelectionClick === void 0 ? void 0 : onSelectionClick(recordKeys);\n              },\n              label: text\n            };\n          })\n        };\n        customizeSelections = /*#__PURE__*/React.createElement(\"div\", {\n          className: \"\".concat(prefixCls, \"-selection-extra\")\n        }, /*#__PURE__*/React.createElement(Dropdown, {\n          menu: menu,\n          getPopupContainer: getPopupContainer\n        }, /*#__PURE__*/React.createElement(\"span\", null, /*#__PURE__*/React.createElement(DownOutlined, null))));\n      }\n      var allDisabledData = flattedData.map(function (record, index) {\n        var key = getRowKey(record, index);\n        var checkboxProps = checkboxPropsMap.get(key) || {};\n        return Object.assign({\n          checked: keySet.has(key)\n        }, checkboxProps);\n      }).filter(function (_ref2) {\n        var disabled = _ref2.disabled;\n        return disabled;\n      });\n      var allDisabled = !!allDisabledData.length && allDisabledData.length === flattedData.length;\n      var allDisabledAndChecked = allDisabled && allDisabledData.every(function (_ref3) {\n        var checked = _ref3.checked;\n        return checked;\n      });\n      var allDisabledSomeChecked = allDisabled && allDisabledData.some(function (_ref4) {\n        var checked = _ref4.checked;\n        return checked;\n      });\n      columnTitleCheckbox = /*#__PURE__*/React.createElement(Checkbox, {\n        checked: !allDisabled ? !!flattedData.length && checkedCurrentAll : allDisabledAndChecked,\n        indeterminate: !allDisabled ? !checkedCurrentAll && checkedCurrentSome : !allDisabledAndChecked && allDisabledSomeChecked,\n        onChange: onSelectAllChange,\n        disabled: flattedData.length === 0 || allDisabled,\n        \"aria-label\": customizeSelections ? 'Custom selection' : 'Select all',\n        skipGroup: true\n      });\n      title = !hideSelectAll && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\".concat(prefixCls, \"-selection\")\n      }, columnTitleCheckbox, customizeSelections);\n    }\n    // Body Cell\n    var renderCell;\n    if (selectionType === 'radio') {\n      renderCell = function renderCell(_, record, index) {\n        var key = getRowKey(record, index);\n        var checked = keySet.has(key);\n        return {\n          node: /*#__PURE__*/React.createElement(Radio, Object.assign({}, checkboxPropsMap.get(key), {\n            checked: checked,\n            onClick: function onClick(e) {\n              return e.stopPropagation();\n            },\n            onChange: function onChange(event) {\n              if (!keySet.has(key)) {\n                triggerSingleSelection(key, true, [key], event.nativeEvent);\n              }\n            }\n          })),\n          checked: checked\n        };\n      };\n    } else {\n      renderCell = function renderCell(_, record, index) {\n        var _a;\n        var key = getRowKey(record, index);\n        var checked = keySet.has(key);\n        var indeterminate = derivedHalfSelectedKeySet.has(key);\n        var checkboxProps = checkboxPropsMap.get(key);\n        var mergedIndeterminate;\n        if (expandType === 'nest') {\n          mergedIndeterminate = indeterminate;\n          process.env.NODE_ENV !== \"production\" ? warning(typeof (checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== 'boolean', 'usage', 'set `indeterminate` using `rowSelection.getCheckboxProps` is not allowed with tree structured dataSource.') : void 0;\n        } else {\n          mergedIndeterminate = (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== null && _a !== void 0 ? _a : indeterminate;\n        }\n        // Record checked\n        return {\n          node: /*#__PURE__*/React.createElement(Checkbox, Object.assign({}, checkboxProps, {\n            indeterminate: mergedIndeterminate,\n            checked: checked,\n            skipGroup: true,\n            onClick: function onClick(e) {\n              return e.stopPropagation();\n            },\n            onChange: function onChange(_ref5) {\n              var nativeEvent = _ref5.nativeEvent;\n              var shiftKey = nativeEvent.shiftKey;\n              var currentSelectedIndex = recordKeys.findIndex(function (item) {\n                return item === key;\n              });\n              var isMultiple = derivedSelectedKeys.some(function (item) {\n                return recordKeys.includes(item);\n              });\n              if (shiftKey && checkStrictly && isMultiple) {\n                var changedKeys = multipleSelect(currentSelectedIndex, recordKeys, keySet);\n                var keys = Array.from(keySet);\n                onSelectMultiple === null || onSelectMultiple === void 0 ? void 0 : onSelectMultiple(!checked, keys.map(function (recordKey) {\n                  return getRecordByKey(recordKey);\n                }), changedKeys.map(function (recordKey) {\n                  return getRecordByKey(recordKey);\n                }));\n                setSelectedKeys(keys, 'multiple');\n              } else {\n                // Single record selected\n                var originCheckedKeys = derivedSelectedKeys;\n                if (checkStrictly) {\n                  var checkedKeys = checked ? arrDel(originCheckedKeys, key) : arrAdd(originCheckedKeys, key);\n                  triggerSingleSelection(key, !checked, checkedKeys, nativeEvent);\n                } else {\n                  // Always fill first\n                  var result = conductCheck([].concat(_toConsumableArray(originCheckedKeys), [key]), true, keyEntities, isCheckboxDisabled);\n                  var _checkedKeys = result.checkedKeys,\n                    halfCheckedKeys = result.halfCheckedKeys;\n                  var nextCheckedKeys = _checkedKeys;\n                  // If remove, we do it again to correction\n                  if (checked) {\n                    var tempKeySet = new Set(_checkedKeys);\n                    tempKeySet.delete(key);\n                    nextCheckedKeys = conductCheck(Array.from(tempKeySet), {\n                      checked: false,\n                      halfCheckedKeys: halfCheckedKeys\n                    }, keyEntities, isCheckboxDisabled).checkedKeys;\n                  }\n                  triggerSingleSelection(key, !checked, nextCheckedKeys, nativeEvent);\n                }\n              }\n              if (checked) {\n                updatePrevSelectedIndex(null);\n              } else {\n                updatePrevSelectedIndex(currentSelectedIndex);\n              }\n            }\n          })),\n          checked: checked\n        };\n      };\n    }\n    var renderSelectionCell = function renderSelectionCell(_, record, index) {\n      var _renderCell = renderCell(_, record, index),\n        node = _renderCell.node,\n        checked = _renderCell.checked;\n      if (customizeRenderCell) {\n        return customizeRenderCell(checked, record, index, node);\n      }\n      return node;\n    };\n    // Insert selection column if not exist\n    if (!cloneColumns.includes(SELECTION_COLUMN)) {\n      // Always after expand icon\n      if (cloneColumns.findIndex(function (col) {\n        var _a;\n        return ((_a = col[INTERNAL_COL_DEFINE]) === null || _a === void 0 ? void 0 : _a.columnType) === 'EXPAND_COLUMN';\n      }) === 0) {\n        var _cloneColumns = cloneColumns,\n          _cloneColumns2 = _toArray(_cloneColumns),\n          expandColumn = _cloneColumns2[0],\n          restColumns = _cloneColumns2.slice(1);\n        cloneColumns = [expandColumn, SELECTION_COLUMN].concat(_toConsumableArray(restColumns));\n      } else {\n        // Normal insert at first column\n        cloneColumns = [SELECTION_COLUMN].concat(_toConsumableArray(cloneColumns));\n      }\n    }\n    // Deduplicate selection column\n    var selectionColumnIndex = cloneColumns.indexOf(SELECTION_COLUMN);\n    process.env.NODE_ENV !== \"production\" ? warning(cloneColumns.filter(function (col) {\n      return col === SELECTION_COLUMN;\n    }).length <= 1, 'usage', 'Multiple `SELECTION_COLUMN` exist in `columns`.') : void 0;\n    cloneColumns = cloneColumns.filter(function (column, index) {\n      return column !== SELECTION_COLUMN || index === selectionColumnIndex;\n    });\n    // Fixed column logic\n    var prevCol = cloneColumns[selectionColumnIndex - 1];\n    var nextCol = cloneColumns[selectionColumnIndex + 1];\n    var mergedFixed = fixed;\n    if (mergedFixed === undefined) {\n      if ((nextCol === null || nextCol === void 0 ? void 0 : nextCol.fixed) !== undefined) {\n        mergedFixed = nextCol.fixed;\n      } else if ((prevCol === null || prevCol === void 0 ? void 0 : prevCol.fixed) !== undefined) {\n        mergedFixed = prevCol.fixed;\n      }\n    }\n    if (mergedFixed && prevCol && ((_a = prevCol[INTERNAL_COL_DEFINE]) === null || _a === void 0 ? void 0 : _a.columnType) === 'EXPAND_COLUMN' && prevCol.fixed === undefined) {\n      prevCol.fixed = mergedFixed;\n    }\n    var columnCls = classNames(\"\".concat(prefixCls, \"-selection-col\"), _defineProperty({}, \"\".concat(prefixCls, \"-selection-col-with-dropdown\"), selections && selectionType === 'checkbox'));\n    var renderColumnTitle = function renderColumnTitle() {\n      if (!(rowSelection === null || rowSelection === void 0 ? void 0 : rowSelection.columnTitle)) {\n        return title;\n      }\n      if (typeof rowSelection.columnTitle === 'function') {\n        return rowSelection.columnTitle(columnTitleCheckbox);\n      }\n      return rowSelection.columnTitle;\n    };\n    // Replace with real selection column\n    var selectionColumn = _defineProperty({\n      fixed: mergedFixed,\n      width: selectionColWidth,\n      className: \"\".concat(prefixCls, \"-selection-column\"),\n      title: renderColumnTitle(),\n      render: renderSelectionCell,\n      onCell: rowSelection.onCell\n    }, INTERNAL_COL_DEFINE, {\n      className: columnCls\n    });\n    return cloneColumns.map(function (col) {\n      return col === SELECTION_COLUMN ? selectionColumn : col;\n    });\n  }, [getRowKey, flattedData, rowSelection, derivedSelectedKeys, derivedSelectedKeySet, derivedHalfSelectedKeySet, selectionColWidth, mergedSelections, expandType, checkboxPropsMap, onSelectMultiple, triggerSingleSelection, isCheckboxDisabled]);\n  return [transformColumns, derivedSelectedKeySet];\n};\nexport default useSelection;","map":{"version":3,"names":["_defineProperty","_toArray","_slicedToArray","_toConsumableArray","React","useCallback","useMemo","DownOutlined","classNames","INTERNAL_COL_DEFINE","arrAdd","arrDel","conductCheck","convertDataToEntities","useMergedState","useMultipleSelect","devUseWarning","Checkbox","Dropdown","Radio","SELECTION_COLUMN","SELECTION_ALL","SELECTION_INVERT","SELECTION_NONE","EMPTY_LIST","flattenData","childrenColumnName","data","list","forEach","record","push","concat","useSelection","config","rowSelection","_ref6","preserveSelectedRowKeys","selectedRowKeys","defaultSelectedRowKeys","getCheckboxProps","onSelectionChange","onChange","onSelect","onSelectAll","onSelectInvert","onSelectNone","onSelectMultiple","selectionColWidth","columnWidth","selectionType","type","selections","fixed","customizeRenderCell","renderCell","hideSelectAll","_ref6$checkStrictly","checkStrictly","prefixCls","pageData","getRecordByKey","getRowKey","expandType","tableLocale","locale","getPopupContainer","warning","_useMultipleSelect","item","_useMultipleSelect2","multipleSelect","updatePrevSelectedIndex","_useMergedState","value","_useMergedState2","mergedSelectedKeys","setMergedSelectedKeys","preserveRecordsRef","useRef","Map","updatePreserveRecordsCache","keys","newCache","key","current","has","get","set","useEffect","_useMemo","keyEntities","convertData","keysSet","Set","map","index","preserveRecords","Array","from","reduce","total","_ref","_ref7","externalGetKey","childrenPropName","flattedData","checkboxPropsMap","checkboxProps","process","env","NODE_ENV","isCheckboxDisabled","r","_a","disabled","_useMemo2","_conductCheck","checkedKeys","halfCheckedKeys","_useMemo3","derivedSelectedKeys","derivedHalfSelectedKeys","derivedSelectedKeySet","slice","derivedHalfSelectedKeySet","setSelectedKeys","method","availableKeys","records","undefined","triggerSingleSelection","selected","event","rows","k","mergedSelections","selectionList","selection","text","selectionAll","filter","checkProps","selectInvert","keySet","delete","add","deprecated","selectNone","Object","assign","_a2","_len","arguments","length","rest","_key","call","apply","transformColumns","columns","includes","col","cloneColumns","recordKeys","checkedCurrentAll","every","checkedCurrentSome","some","onSelectAllChange","changeKeys","title","columnTitleCheckbox","customizeSelections","menu","items","onSelectionClick","onClick","label","createElement","className","allDisabledData","checked","_ref2","allDisabled","allDisabledAndChecked","_ref3","allDisabledSomeChecked","_ref4","indeterminate","skipGroup","_","node","e","stopPropagation","nativeEvent","mergedIndeterminate","_ref5","shiftKey","currentSelectedIndex","findIndex","isMultiple","changedKeys","recordKey","originCheckedKeys","result","nextCheckedKeys","tempKeySet","renderSelectionCell","_renderCell","columnType","_cloneColumns","_cloneColumns2","expandColumn","restColumns","selectionColumnIndex","indexOf","column","prevCol","nextCol","mergedFixed","columnCls","renderColumnTitle","columnTitle","selectionColumn","width","render","onCell"],"sources":["/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/antd/es/table/hooks/useSelection.js"],"sourcesContent":["\"use client\";\n\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react';\nimport { useCallback, useMemo } from 'react';\nimport DownOutlined from \"@ant-design/icons/es/icons/DownOutlined\";\nimport classNames from 'classnames';\nimport { INTERNAL_COL_DEFINE } from 'rc-table';\nimport { arrAdd, arrDel } from \"rc-tree/es/util\";\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nimport { convertDataToEntities } from \"rc-tree/es/utils/treeUtil\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport useMultipleSelect from '../../_util/hooks/useMultipleSelect';\nimport { devUseWarning } from '../../_util/warning';\nimport Checkbox from '../../checkbox';\nimport Dropdown from '../../dropdown';\nimport Radio from '../../radio';\n// TODO: warning if use ajax!!!\nexport const SELECTION_COLUMN = {};\nexport const SELECTION_ALL = 'SELECT_ALL';\nexport const SELECTION_INVERT = 'SELECT_INVERT';\nexport const SELECTION_NONE = 'SELECT_NONE';\nconst EMPTY_LIST = [];\nconst flattenData = (childrenColumnName, data) => {\n  let list = [];\n  (data || []).forEach(record => {\n    list.push(record);\n    if (record && typeof record === 'object' && childrenColumnName in record) {\n      list = [].concat(_toConsumableArray(list), _toConsumableArray(flattenData(childrenColumnName, record[childrenColumnName])));\n    }\n  });\n  return list;\n};\nconst useSelection = (config, rowSelection) => {\n  const {\n    preserveSelectedRowKeys,\n    selectedRowKeys,\n    defaultSelectedRowKeys,\n    getCheckboxProps,\n    onChange: onSelectionChange,\n    onSelect,\n    onSelectAll,\n    onSelectInvert,\n    onSelectNone,\n    onSelectMultiple,\n    columnWidth: selectionColWidth,\n    type: selectionType,\n    selections,\n    fixed,\n    renderCell: customizeRenderCell,\n    hideSelectAll,\n    checkStrictly = true\n  } = rowSelection || {};\n  const {\n    prefixCls,\n    data,\n    pageData,\n    getRecordByKey,\n    getRowKey,\n    expandType,\n    childrenColumnName,\n    locale: tableLocale,\n    getPopupContainer\n  } = config;\n  const warning = devUseWarning('Table');\n  // ========================= MultipleSelect =========================\n  const [multipleSelect, updatePrevSelectedIndex] = useMultipleSelect(item => item);\n  // ========================= Keys =========================\n  const [mergedSelectedKeys, setMergedSelectedKeys] = useMergedState(selectedRowKeys || defaultSelectedRowKeys || EMPTY_LIST, {\n    value: selectedRowKeys\n  });\n  // ======================== Caches ========================\n  const preserveRecordsRef = React.useRef(new Map());\n  const updatePreserveRecordsCache = useCallback(keys => {\n    if (preserveSelectedRowKeys) {\n      const newCache = new Map();\n      // Keep key if mark as preserveSelectedRowKeys\n      keys.forEach(key => {\n        let record = getRecordByKey(key);\n        if (!record && preserveRecordsRef.current.has(key)) {\n          record = preserveRecordsRef.current.get(key);\n        }\n        newCache.set(key, record);\n      });\n      // Refresh to new cache\n      preserveRecordsRef.current = newCache;\n    }\n  }, [getRecordByKey, preserveSelectedRowKeys]);\n  // Update cache with selectedKeys\n  React.useEffect(() => {\n    updatePreserveRecordsCache(mergedSelectedKeys);\n  }, [mergedSelectedKeys]);\n  const {\n    keyEntities\n  } = useMemo(() => {\n    if (checkStrictly) {\n      return {\n        keyEntities: null\n      };\n    }\n    let convertData = data;\n    if (preserveSelectedRowKeys) {\n      const keysSet = new Set(data.map((record, index) => getRowKey(record, index)));\n      // remove preserveRecords that duplicate data\n      const preserveRecords = Array.from(preserveRecordsRef.current).reduce((total, _ref) => {\n        let [key, value] = _ref;\n        return keysSet.has(key) ? total : total.concat(value);\n      }, []);\n      convertData = [].concat(_toConsumableArray(convertData), _toConsumableArray(preserveRecords));\n    }\n    return convertDataToEntities(convertData, {\n      externalGetKey: getRowKey,\n      childrenPropName: childrenColumnName\n    });\n  }, [data, getRowKey, checkStrictly, childrenColumnName, preserveSelectedRowKeys]);\n  // Get flatten data\n  const flattedData = useMemo(() => flattenData(childrenColumnName, pageData), [childrenColumnName, pageData]);\n  // Get all checkbox props\n  const checkboxPropsMap = useMemo(() => {\n    const map = new Map();\n    flattedData.forEach((record, index) => {\n      const key = getRowKey(record, index);\n      const checkboxProps = (getCheckboxProps ? getCheckboxProps(record) : null) || {};\n      map.set(key, checkboxProps);\n      process.env.NODE_ENV !== \"production\" ? warning(!('checked' in checkboxProps || 'defaultChecked' in checkboxProps), 'usage', 'Do not set `checked` or `defaultChecked` in `getCheckboxProps`. Please use `selectedRowKeys` instead.') : void 0;\n    });\n    return map;\n  }, [flattedData, getRowKey, getCheckboxProps]);\n  const isCheckboxDisabled = useCallback(r => {\n    var _a;\n    return !!((_a = checkboxPropsMap.get(getRowKey(r))) === null || _a === void 0 ? void 0 : _a.disabled);\n  }, [checkboxPropsMap, getRowKey]);\n  const [derivedSelectedKeys, derivedHalfSelectedKeys] = useMemo(() => {\n    if (checkStrictly) {\n      return [mergedSelectedKeys || [], []];\n    }\n    const {\n      checkedKeys,\n      halfCheckedKeys\n    } = conductCheck(mergedSelectedKeys, true, keyEntities, isCheckboxDisabled);\n    return [checkedKeys || [], halfCheckedKeys];\n  }, [mergedSelectedKeys, checkStrictly, keyEntities, isCheckboxDisabled]);\n  const derivedSelectedKeySet = useMemo(() => {\n    const keys = selectionType === 'radio' ? derivedSelectedKeys.slice(0, 1) : derivedSelectedKeys;\n    return new Set(keys);\n  }, [derivedSelectedKeys, selectionType]);\n  const derivedHalfSelectedKeySet = useMemo(() => selectionType === 'radio' ? new Set() : new Set(derivedHalfSelectedKeys), [derivedHalfSelectedKeys, selectionType]);\n  // Reset if rowSelection reset\n  React.useEffect(() => {\n    if (!rowSelection) {\n      setMergedSelectedKeys(EMPTY_LIST);\n    }\n  }, [!!rowSelection]);\n  const setSelectedKeys = useCallback((keys, method) => {\n    let availableKeys;\n    let records;\n    updatePreserveRecordsCache(keys);\n    if (preserveSelectedRowKeys) {\n      availableKeys = keys;\n      records = keys.map(key => preserveRecordsRef.current.get(key));\n    } else {\n      // Filter key which not exist in the `dataSource`\n      availableKeys = [];\n      records = [];\n      keys.forEach(key => {\n        const record = getRecordByKey(key);\n        if (record !== undefined) {\n          availableKeys.push(key);\n          records.push(record);\n        }\n      });\n    }\n    setMergedSelectedKeys(availableKeys);\n    onSelectionChange === null || onSelectionChange === void 0 ? void 0 : onSelectionChange(availableKeys, records, {\n      type: method\n    });\n  }, [setMergedSelectedKeys, getRecordByKey, onSelectionChange, preserveSelectedRowKeys]);\n  // ====================== Selections ======================\n  // Trigger single `onSelect` event\n  const triggerSingleSelection = useCallback((key, selected, keys, event) => {\n    if (onSelect) {\n      const rows = keys.map(k => getRecordByKey(k));\n      onSelect(getRecordByKey(key), selected, rows, event);\n    }\n    setSelectedKeys(keys, 'single');\n  }, [onSelect, getRecordByKey, setSelectedKeys]);\n  const mergedSelections = useMemo(() => {\n    if (!selections || hideSelectAll) {\n      return null;\n    }\n    const selectionList = selections === true ? [SELECTION_ALL, SELECTION_INVERT, SELECTION_NONE] : selections;\n    return selectionList.map(selection => {\n      if (selection === SELECTION_ALL) {\n        return {\n          key: 'all',\n          text: tableLocale.selectionAll,\n          onSelect() {\n            setSelectedKeys(data.map((record, index) => getRowKey(record, index)).filter(key => {\n              const checkProps = checkboxPropsMap.get(key);\n              return !(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled) || derivedSelectedKeySet.has(key);\n            }), 'all');\n          }\n        };\n      }\n      if (selection === SELECTION_INVERT) {\n        return {\n          key: 'invert',\n          text: tableLocale.selectInvert,\n          onSelect() {\n            const keySet = new Set(derivedSelectedKeySet);\n            pageData.forEach((record, index) => {\n              const key = getRowKey(record, index);\n              const checkProps = checkboxPropsMap.get(key);\n              if (!(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled)) {\n                if (keySet.has(key)) {\n                  keySet.delete(key);\n                } else {\n                  keySet.add(key);\n                }\n              }\n            });\n            const keys = Array.from(keySet);\n            if (onSelectInvert) {\n              warning.deprecated(false, 'onSelectInvert', 'onChange');\n              onSelectInvert(keys);\n            }\n            setSelectedKeys(keys, 'invert');\n          }\n        };\n      }\n      if (selection === SELECTION_NONE) {\n        return {\n          key: 'none',\n          text: tableLocale.selectNone,\n          onSelect() {\n            onSelectNone === null || onSelectNone === void 0 ? void 0 : onSelectNone();\n            setSelectedKeys(Array.from(derivedSelectedKeySet).filter(key => {\n              const checkProps = checkboxPropsMap.get(key);\n              return checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled;\n            }), 'none');\n          }\n        };\n      }\n      return selection;\n    }).map(selection => Object.assign(Object.assign({}, selection), {\n      onSelect: function () {\n        var _a2;\n        var _a;\n        for (var _len = arguments.length, rest = new Array(_len), _key = 0; _key < _len; _key++) {\n          rest[_key] = arguments[_key];\n        }\n        (_a = selection.onSelect) === null || _a === void 0 ? void 0 : (_a2 = _a).call.apply(_a2, [selection].concat(rest));\n        updatePrevSelectedIndex(null);\n      }\n    }));\n  }, [selections, derivedSelectedKeySet, pageData, getRowKey, onSelectInvert, setSelectedKeys]);\n  // ======================= Columns ========================\n  const transformColumns = useCallback(columns => {\n    var _a;\n    // >>>>>>>>>>> Skip if not exists `rowSelection`\n    if (!rowSelection) {\n      process.env.NODE_ENV !== \"production\" ? warning(!columns.includes(SELECTION_COLUMN), 'usage', '`rowSelection` is not config but `SELECTION_COLUMN` exists in the `columns`.') : void 0;\n      return columns.filter(col => col !== SELECTION_COLUMN);\n    }\n    // >>>>>>>>>>> Support selection\n    let cloneColumns = _toConsumableArray(columns);\n    const keySet = new Set(derivedSelectedKeySet);\n    // Record key only need check with enabled\n    const recordKeys = flattedData.map(getRowKey).filter(key => !checkboxPropsMap.get(key).disabled);\n    const checkedCurrentAll = recordKeys.every(key => keySet.has(key));\n    const checkedCurrentSome = recordKeys.some(key => keySet.has(key));\n    const onSelectAllChange = () => {\n      const changeKeys = [];\n      if (checkedCurrentAll) {\n        recordKeys.forEach(key => {\n          keySet.delete(key);\n          changeKeys.push(key);\n        });\n      } else {\n        recordKeys.forEach(key => {\n          if (!keySet.has(key)) {\n            keySet.add(key);\n            changeKeys.push(key);\n          }\n        });\n      }\n      const keys = Array.from(keySet);\n      onSelectAll === null || onSelectAll === void 0 ? void 0 : onSelectAll(!checkedCurrentAll, keys.map(k => getRecordByKey(k)), changeKeys.map(k => getRecordByKey(k)));\n      setSelectedKeys(keys, 'all');\n      updatePrevSelectedIndex(null);\n    };\n    // ===================== Render =====================\n    // Title Cell\n    let title;\n    let columnTitleCheckbox;\n    if (selectionType !== 'radio') {\n      let customizeSelections;\n      if (mergedSelections) {\n        const menu = {\n          getPopupContainer,\n          items: mergedSelections.map((selection, index) => {\n            const {\n              key,\n              text,\n              onSelect: onSelectionClick\n            } = selection;\n            return {\n              key: key !== null && key !== void 0 ? key : index,\n              onClick: () => {\n                onSelectionClick === null || onSelectionClick === void 0 ? void 0 : onSelectionClick(recordKeys);\n              },\n              label: text\n            };\n          })\n        };\n        customizeSelections = /*#__PURE__*/React.createElement(\"div\", {\n          className: `${prefixCls}-selection-extra`\n        }, /*#__PURE__*/React.createElement(Dropdown, {\n          menu: menu,\n          getPopupContainer: getPopupContainer\n        }, /*#__PURE__*/React.createElement(\"span\", null, /*#__PURE__*/React.createElement(DownOutlined, null))));\n      }\n      const allDisabledData = flattedData.map((record, index) => {\n        const key = getRowKey(record, index);\n        const checkboxProps = checkboxPropsMap.get(key) || {};\n        return Object.assign({\n          checked: keySet.has(key)\n        }, checkboxProps);\n      }).filter(_ref2 => {\n        let {\n          disabled\n        } = _ref2;\n        return disabled;\n      });\n      const allDisabled = !!allDisabledData.length && allDisabledData.length === flattedData.length;\n      const allDisabledAndChecked = allDisabled && allDisabledData.every(_ref3 => {\n        let {\n          checked\n        } = _ref3;\n        return checked;\n      });\n      const allDisabledSomeChecked = allDisabled && allDisabledData.some(_ref4 => {\n        let {\n          checked\n        } = _ref4;\n        return checked;\n      });\n      columnTitleCheckbox = /*#__PURE__*/React.createElement(Checkbox, {\n        checked: !allDisabled ? !!flattedData.length && checkedCurrentAll : allDisabledAndChecked,\n        indeterminate: !allDisabled ? !checkedCurrentAll && checkedCurrentSome : !allDisabledAndChecked && allDisabledSomeChecked,\n        onChange: onSelectAllChange,\n        disabled: flattedData.length === 0 || allDisabled,\n        \"aria-label\": customizeSelections ? 'Custom selection' : 'Select all',\n        skipGroup: true\n      });\n      title = !hideSelectAll && /*#__PURE__*/React.createElement(\"div\", {\n        className: `${prefixCls}-selection`\n      }, columnTitleCheckbox, customizeSelections);\n    }\n    // Body Cell\n    let renderCell;\n    if (selectionType === 'radio') {\n      renderCell = (_, record, index) => {\n        const key = getRowKey(record, index);\n        const checked = keySet.has(key);\n        return {\n          node: /*#__PURE__*/React.createElement(Radio, Object.assign({}, checkboxPropsMap.get(key), {\n            checked: checked,\n            onClick: e => e.stopPropagation(),\n            onChange: event => {\n              if (!keySet.has(key)) {\n                triggerSingleSelection(key, true, [key], event.nativeEvent);\n              }\n            }\n          })),\n          checked\n        };\n      };\n    } else {\n      renderCell = (_, record, index) => {\n        var _a;\n        const key = getRowKey(record, index);\n        const checked = keySet.has(key);\n        const indeterminate = derivedHalfSelectedKeySet.has(key);\n        const checkboxProps = checkboxPropsMap.get(key);\n        let mergedIndeterminate;\n        if (expandType === 'nest') {\n          mergedIndeterminate = indeterminate;\n          process.env.NODE_ENV !== \"production\" ? warning(typeof (checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== 'boolean', 'usage', 'set `indeterminate` using `rowSelection.getCheckboxProps` is not allowed with tree structured dataSource.') : void 0;\n        } else {\n          mergedIndeterminate = (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== null && _a !== void 0 ? _a : indeterminate;\n        }\n        // Record checked\n        return {\n          node: /*#__PURE__*/React.createElement(Checkbox, Object.assign({}, checkboxProps, {\n            indeterminate: mergedIndeterminate,\n            checked: checked,\n            skipGroup: true,\n            onClick: e => e.stopPropagation(),\n            onChange: _ref5 => {\n              let {\n                nativeEvent\n              } = _ref5;\n              const {\n                shiftKey\n              } = nativeEvent;\n              const currentSelectedIndex = recordKeys.findIndex(item => item === key);\n              const isMultiple = derivedSelectedKeys.some(item => recordKeys.includes(item));\n              if (shiftKey && checkStrictly && isMultiple) {\n                const changedKeys = multipleSelect(currentSelectedIndex, recordKeys, keySet);\n                const keys = Array.from(keySet);\n                onSelectMultiple === null || onSelectMultiple === void 0 ? void 0 : onSelectMultiple(!checked, keys.map(recordKey => getRecordByKey(recordKey)), changedKeys.map(recordKey => getRecordByKey(recordKey)));\n                setSelectedKeys(keys, 'multiple');\n              } else {\n                // Single record selected\n                const originCheckedKeys = derivedSelectedKeys;\n                if (checkStrictly) {\n                  const checkedKeys = checked ? arrDel(originCheckedKeys, key) : arrAdd(originCheckedKeys, key);\n                  triggerSingleSelection(key, !checked, checkedKeys, nativeEvent);\n                } else {\n                  // Always fill first\n                  const result = conductCheck([].concat(_toConsumableArray(originCheckedKeys), [key]), true, keyEntities, isCheckboxDisabled);\n                  const {\n                    checkedKeys,\n                    halfCheckedKeys\n                  } = result;\n                  let nextCheckedKeys = checkedKeys;\n                  // If remove, we do it again to correction\n                  if (checked) {\n                    const tempKeySet = new Set(checkedKeys);\n                    tempKeySet.delete(key);\n                    nextCheckedKeys = conductCheck(Array.from(tempKeySet), {\n                      checked: false,\n                      halfCheckedKeys\n                    }, keyEntities, isCheckboxDisabled).checkedKeys;\n                  }\n                  triggerSingleSelection(key, !checked, nextCheckedKeys, nativeEvent);\n                }\n              }\n              if (checked) {\n                updatePrevSelectedIndex(null);\n              } else {\n                updatePrevSelectedIndex(currentSelectedIndex);\n              }\n            }\n          })),\n          checked\n        };\n      };\n    }\n    const renderSelectionCell = (_, record, index) => {\n      const {\n        node,\n        checked\n      } = renderCell(_, record, index);\n      if (customizeRenderCell) {\n        return customizeRenderCell(checked, record, index, node);\n      }\n      return node;\n    };\n    // Insert selection column if not exist\n    if (!cloneColumns.includes(SELECTION_COLUMN)) {\n      // Always after expand icon\n      if (cloneColumns.findIndex(col => {\n        var _a;\n        return ((_a = col[INTERNAL_COL_DEFINE]) === null || _a === void 0 ? void 0 : _a.columnType) === 'EXPAND_COLUMN';\n      }) === 0) {\n        const [expandColumn, ...restColumns] = cloneColumns;\n        cloneColumns = [expandColumn, SELECTION_COLUMN].concat(_toConsumableArray(restColumns));\n      } else {\n        // Normal insert at first column\n        cloneColumns = [SELECTION_COLUMN].concat(_toConsumableArray(cloneColumns));\n      }\n    }\n    // Deduplicate selection column\n    const selectionColumnIndex = cloneColumns.indexOf(SELECTION_COLUMN);\n    process.env.NODE_ENV !== \"production\" ? warning(cloneColumns.filter(col => col === SELECTION_COLUMN).length <= 1, 'usage', 'Multiple `SELECTION_COLUMN` exist in `columns`.') : void 0;\n    cloneColumns = cloneColumns.filter((column, index) => column !== SELECTION_COLUMN || index === selectionColumnIndex);\n    // Fixed column logic\n    const prevCol = cloneColumns[selectionColumnIndex - 1];\n    const nextCol = cloneColumns[selectionColumnIndex + 1];\n    let mergedFixed = fixed;\n    if (mergedFixed === undefined) {\n      if ((nextCol === null || nextCol === void 0 ? void 0 : nextCol.fixed) !== undefined) {\n        mergedFixed = nextCol.fixed;\n      } else if ((prevCol === null || prevCol === void 0 ? void 0 : prevCol.fixed) !== undefined) {\n        mergedFixed = prevCol.fixed;\n      }\n    }\n    if (mergedFixed && prevCol && ((_a = prevCol[INTERNAL_COL_DEFINE]) === null || _a === void 0 ? void 0 : _a.columnType) === 'EXPAND_COLUMN' && prevCol.fixed === undefined) {\n      prevCol.fixed = mergedFixed;\n    }\n    const columnCls = classNames(`${prefixCls}-selection-col`, {\n      [`${prefixCls}-selection-col-with-dropdown`]: selections && selectionType === 'checkbox'\n    });\n    const renderColumnTitle = () => {\n      if (!(rowSelection === null || rowSelection === void 0 ? void 0 : rowSelection.columnTitle)) {\n        return title;\n      }\n      if (typeof rowSelection.columnTitle === 'function') {\n        return rowSelection.columnTitle(columnTitleCheckbox);\n      }\n      return rowSelection.columnTitle;\n    };\n    // Replace with real selection column\n    const selectionColumn = {\n      fixed: mergedFixed,\n      width: selectionColWidth,\n      className: `${prefixCls}-selection-column`,\n      title: renderColumnTitle(),\n      render: renderSelectionCell,\n      onCell: rowSelection.onCell,\n      [INTERNAL_COL_DEFINE]: {\n        className: columnCls\n      }\n    };\n    return cloneColumns.map(col => col === SELECTION_COLUMN ? selectionColumn : col);\n  }, [getRowKey, flattedData, rowSelection, derivedSelectedKeys, derivedSelectedKeySet, derivedHalfSelectedKeySet, selectionColWidth, mergedSelections, expandType, checkboxPropsMap, onSelectMultiple, triggerSingleSelection, isCheckboxDisabled]);\n  return [transformColumns, derivedSelectedKeySet];\n};\nexport default useSelection;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}