{"ast":null,"code":"const conversions = require('./conversions');\nconst route = require('./route');\nconst convert = {};\nconst models = Object.keys(conversions);\nfunction wrapRaw(fn) {\n  const wrappedFn = function (...args) {\n    const arg0 = args[0];\n    if (arg0 === undefined || arg0 === null) {\n      return arg0;\n    }\n    if (arg0.length > 1) {\n      args = arg0;\n    }\n    return fn(args);\n  };\n\n  // Preserve .conversion property if there is one\n  if ('conversion' in fn) {\n    wrappedFn.conversion = fn.conversion;\n  }\n  return wrappedFn;\n}\nfunction wrapRounded(fn) {\n  const wrappedFn = function (...args) {\n    const arg0 = args[0];\n    if (arg0 === undefined || arg0 === null) {\n      return arg0;\n    }\n    if (arg0.length > 1) {\n      args = arg0;\n    }\n    const result = fn(args);\n\n    // We're assuming the result is an array here.\n    // see notice in conversions.js; don't use box types\n    // in conversion functions.\n    if (typeof result === 'object') {\n      for (let len = result.length, i = 0; i < len; i++) {\n        result[i] = Math.round(result[i]);\n      }\n    }\n    return result;\n  };\n\n  // Preserve .conversion property if there is one\n  if ('conversion' in fn) {\n    wrappedFn.conversion = fn.conversion;\n  }\n  return wrappedFn;\n}\nmodels.forEach(fromModel => {\n  convert[fromModel] = {};\n  Object.defineProperty(convert[fromModel], 'channels', {\n    value: conversions[fromModel].channels\n  });\n  Object.defineProperty(convert[fromModel], 'labels', {\n    value: conversions[fromModel].labels\n  });\n  const routes = route(fromModel);\n  const routeModels = Object.keys(routes);\n  routeModels.forEach(toModel => {\n    const fn = routes[toModel];\n    convert[fromModel][toModel] = wrapRounded(fn);\n    convert[fromModel][toModel].raw = wrapRaw(fn);\n  });\n});\nmodule.exports = convert;","map":{"version":3,"names":["conversions","require","route","convert","models","Object","keys","wrapRaw","fn","wrappedFn","args","arg0","undefined","length","conversion","wrapRounded","result","len","i","Math","round","forEach","fromModel","defineProperty","value","channels","labels","routes","routeModels","toModel","raw","module","exports"],"sources":["/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@testing-library/jest-dom/node_modules/color-convert/index.js"],"sourcesContent":["const conversions = require('./conversions');\nconst route = require('./route');\n\nconst convert = {};\n\nconst models = Object.keys(conversions);\n\nfunction wrapRaw(fn) {\n\tconst wrappedFn = function (...args) {\n\t\tconst arg0 = args[0];\n\t\tif (arg0 === undefined || arg0 === null) {\n\t\t\treturn arg0;\n\t\t}\n\n\t\tif (arg0.length > 1) {\n\t\t\targs = arg0;\n\t\t}\n\n\t\treturn fn(args);\n\t};\n\n\t// Preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nfunction wrapRounded(fn) {\n\tconst wrappedFn = function (...args) {\n\t\tconst arg0 = args[0];\n\n\t\tif (arg0 === undefined || arg0 === null) {\n\t\t\treturn arg0;\n\t\t}\n\n\t\tif (arg0.length > 1) {\n\t\t\targs = arg0;\n\t\t}\n\n\t\tconst result = fn(args);\n\n\t\t// We're assuming the result is an array here.\n\t\t// see notice in conversions.js; don't use box types\n\t\t// in conversion functions.\n\t\tif (typeof result === 'object') {\n\t\t\tfor (let len = result.length, i = 0; i < len; i++) {\n\t\t\t\tresult[i] = Math.round(result[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t};\n\n\t// Preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nmodels.forEach(fromModel => {\n\tconvert[fromModel] = {};\n\n\tObject.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});\n\tObject.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});\n\n\tconst routes = route(fromModel);\n\tconst routeModels = Object.keys(routes);\n\n\trouteModels.forEach(toModel => {\n\t\tconst fn = routes[toModel];\n\n\t\tconvert[fromModel][toModel] = wrapRounded(fn);\n\t\tconvert[fromModel][toModel].raw = wrapRaw(fn);\n\t});\n});\n\nmodule.exports = convert;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}