{"ast":null,"code":"import _regeneratorRuntime from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport IntDecoding from '../../types/intDecoding';\n/**\n * Base abstract class for JSON requests.\n *\n * Data: The type returned from the `do()` method\n *\n * Body: The structure of the response's body\n */\nvar JSONRequest = /*#__PURE__*/function () {\n  /**\n   * @param client - HTTPClient object.\n   * @param intDecoding - The method to use\n   *   for decoding integers from this request's response. See the setIntDecoding method for more\n   *   details.\n   */\n  function JSONRequest(client, intDecoding) {\n    _classCallCheck(this, JSONRequest);\n    this.c = client;\n    this.query = {};\n    this.intDecoding = intDecoding || IntDecoding.DEFAULT;\n  }\n  /**\n   * Prepare a JSON response before returning it.\n   *\n   * Use this method to change and restructure response\n   * data as needed after receiving it from the `do()` method.\n   * @param body - Response body received\n   * @category JSONRequest\n   */\n  // eslint-disable-next-line class-methods-use-this\n  _createClass(JSONRequest, [{\n    key: \"prepare\",\n    value: function prepare(body) {\n      return body;\n    }\n    /**\n     * Execute the request.\n     * @param headers - Additional headers to send in the request. Optional.\n     * @returns A promise which resolves to the parsed response data.\n     * @category JSONRequest\n     */\n  }, {\n    key: \"do\",\n    value: function () {\n      var _do2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var headers,\n          jsonOptions,\n          res,\n          _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              headers = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n              jsonOptions = {};\n              if (this.intDecoding !== 'default') {\n                jsonOptions.intDecoding = this.intDecoding;\n              }\n              _context.next = 5;\n              return this.c.get(this.path(), this.query, headers, jsonOptions);\n            case 5:\n              res = _context.sent;\n              return _context.abrupt(\"return\", this.prepare(res.body));\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function _do() {\n        return _do2.apply(this, arguments);\n      }\n      return _do;\n    }()\n    /**\n     * Execute the request, but do not process the response data in any way.\n     * @param headers - Additional headers to send in the request. Optional.\n     * @returns A promise which resolves to the raw response data, exactly as returned by the server.\n     * @category JSONRequest\n     */\n  }, {\n    key: \"doRaw\",\n    value: function () {\n      var _doRaw = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var headers,\n          res,\n          _args2 = arguments;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              headers = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};\n              _context2.next = 3;\n              return this.c.get(this.path(), this.query, headers, {}, false);\n            case 3:\n              res = _context2.sent;\n              return _context2.abrupt(\"return\", res.body);\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function doRaw() {\n        return _doRaw.apply(this, arguments);\n      }\n      return doRaw;\n    }()\n    /**\n     * Configure how integers in this request's JSON response will be decoded.\n     *\n     * The options are:\n     * * \"default\": Integers will be decoded according to JSON.parse, meaning they will all be\n     *   Numbers and any values greater than Number.MAX_SAFE_INTEGER will lose precision.\n     * * \"safe\": All integers will be decoded as Numbers, but if any values are greater than\n     *   Number.MAX_SAFE_INTEGER an error will be thrown.\n     * * \"mixed\": Integers will be decoded as Numbers if they are less than or equal to\n     *   Number.MAX_SAFE_INTEGER, otherwise they will be decoded as BigInts.\n     * * \"bigint\": All integers will be decoded as BigInts.\n     *\n     * @param method - The method to use when parsing the\n     *   response for this request. Must be one of \"default\", \"safe\", \"mixed\", or \"bigint\".\n     * @category JSONRequest\n     */\n  }, {\n    key: \"setIntDecoding\",\n    value: function setIntDecoding(method) {\n      if (method !== 'default' && method !== 'safe' && method !== 'mixed' && method !== 'bigint') throw new Error(\"Invalid method for int decoding: \".concat(method));\n      this.intDecoding = method;\n      return this;\n    }\n  }]);\n  return JSONRequest;\n}();\nexport { JSONRequest as default };","map":{"version":3,"names":["IntDecoding","JSONRequest","client","intDecoding","_classCallCheck","c","query","DEFAULT","_createClass","key","value","prepare","body","_do2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","headers","jsonOptions","res","_args","arguments","wrap","_callee$","_context","prev","next","length","undefined","get","path","sent","abrupt","stop","_do","apply","_doRaw","_callee2","_args2","_callee2$","_context2","doRaw","setIntDecoding","method","Error","concat","default"],"sources":["/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/algosdk/src/client/v2/jsonrequest.ts"],"sourcesContent":["import HTTPClient from '../client';\nimport IntDecoding from '../../types/intDecoding';\n\n/**\n * Base abstract class for JSON requests.\n *\n * Data: The type returned from the `do()` method\n *\n * Body: The structure of the response's body\n */\nexport default abstract class JSONRequest<\n  Data = Record<string, any>,\n  Body = Data | Uint8Array\n> {\n  c: HTTPClient;\n  query: Record<string, any>;\n  intDecoding: IntDecoding;\n\n  /**\n   * @param client - HTTPClient object.\n   * @param intDecoding - The method to use\n   *   for decoding integers from this request's response. See the setIntDecoding method for more\n   *   details.\n   */\n  constructor(client: HTTPClient, intDecoding?: IntDecoding) {\n    this.c = client;\n    this.query = {};\n    this.intDecoding = intDecoding || IntDecoding.DEFAULT;\n  }\n\n  /**\n   * @returns The path of this request.\n   * @category JSONRequest\n   */\n  abstract path(): string;\n\n  /**\n   * Prepare a JSON response before returning it.\n   *\n   * Use this method to change and restructure response\n   * data as needed after receiving it from the `do()` method.\n   * @param body - Response body received\n   * @category JSONRequest\n   */\n  // eslint-disable-next-line class-methods-use-this\n  prepare(body: Body): Data {\n    return (body as unknown) as Data;\n  }\n\n  /**\n   * Execute the request.\n   * @param headers - Additional headers to send in the request. Optional.\n   * @returns A promise which resolves to the parsed response data.\n   * @category JSONRequest\n   */\n  async do(headers: Record<string, any> = {}): Promise<Data> {\n    const jsonOptions: Record<string, any> = {};\n    if (this.intDecoding !== 'default') {\n      jsonOptions.intDecoding = this.intDecoding;\n    }\n    const res = await this.c.get(this.path(), this.query, headers, jsonOptions);\n    return this.prepare(res.body);\n  }\n\n  /**\n   * Execute the request, but do not process the response data in any way.\n   * @param headers - Additional headers to send in the request. Optional.\n   * @returns A promise which resolves to the raw response data, exactly as returned by the server.\n   * @category JSONRequest\n   */\n  async doRaw(headers: Record<string, any> = {}): Promise<Uint8Array> {\n    const res = await this.c.get(this.path(), this.query, headers, {}, false);\n    return res.body;\n  }\n\n  /**\n   * Configure how integers in this request's JSON response will be decoded.\n   *\n   * The options are:\n   * * \"default\": Integers will be decoded according to JSON.parse, meaning they will all be\n   *   Numbers and any values greater than Number.MAX_SAFE_INTEGER will lose precision.\n   * * \"safe\": All integers will be decoded as Numbers, but if any values are greater than\n   *   Number.MAX_SAFE_INTEGER an error will be thrown.\n   * * \"mixed\": Integers will be decoded as Numbers if they are less than or equal to\n   *   Number.MAX_SAFE_INTEGER, otherwise they will be decoded as BigInts.\n   * * \"bigint\": All integers will be decoded as BigInts.\n   *\n   * @param method - The method to use when parsing the\n   *   response for this request. Must be one of \"default\", \"safe\", \"mixed\", or \"bigint\".\n   * @category JSONRequest\n   */\n  setIntDecoding(method: IntDecoding) {\n    if (\n      method !== 'default' &&\n      method !== 'safe' &&\n      method !== 'mixed' &&\n      method !== 'bigint'\n    )\n      throw new Error(`Invalid method for int decoding: ${method}`);\n    this.intDecoding = method;\n    return this;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}