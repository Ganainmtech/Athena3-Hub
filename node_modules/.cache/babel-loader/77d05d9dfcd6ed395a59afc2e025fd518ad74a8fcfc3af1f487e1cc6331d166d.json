{"ast":null,"code":"import _regeneratorRuntime from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**\n * Wait until a transaction has been confirmed or rejected by the network, or\n * until 'waitRounds' number of rounds have passed.\n * @param client - An Algodv2 client\n * @param txid - The ID of the transaction to wait for.\n * @param waitRounds - The maximum number of rounds to wait for.\n * @returns A promise that, upon success, will resolve to the output of the\n *   `pendingTransactionInformation` call for the confirmed transaction.\n */\nexport function waitForConfirmation(_x, _x2, _x3) {\n  return _waitForConfirmation.apply(this, arguments);\n}\nfunction _waitForConfirmation() {\n  _waitForConfirmation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(client, txid, waitRounds) {\n    var status, startRound, currentRound, poolError, pendingInfo;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return client.status().do();\n        case 2:\n          status = _context.sent;\n          if (!(typeof status === 'undefined')) {\n            _context.next = 5;\n            break;\n          }\n          throw new Error('Unable to get node status');\n        case 5:\n          startRound = status['last-round'] + 1;\n          currentRound = startRound;\n          /* eslint-disable no-await-in-loop */\n        case 7:\n          if (!(currentRound < startRound + waitRounds)) {\n            _context.next = 29;\n            break;\n          }\n          poolError = false;\n          _context.prev = 9;\n          _context.next = 12;\n          return client.pendingTransactionInformation(txid).do();\n        case 12:\n          pendingInfo = _context.sent;\n          if (!pendingInfo['confirmed-round']) {\n            _context.next = 15;\n            break;\n          }\n          return _context.abrupt(\"return\", pendingInfo);\n        case 15:\n          if (!pendingInfo['pool-error']) {\n            _context.next = 18;\n            break;\n          }\n          // If there was a pool error, then the transaction has been rejected\n          poolError = true;\n          throw new Error(\"Transaction Rejected: \".concat(pendingInfo['pool-error']));\n        case 18:\n          _context.next = 24;\n          break;\n        case 20:\n          _context.prev = 20;\n          _context.t0 = _context[\"catch\"](9);\n          if (!poolError) {\n            _context.next = 24;\n            break;\n          }\n          throw _context.t0;\n        case 24:\n          _context.next = 26;\n          return client.statusAfterBlock(currentRound).do();\n        case 26:\n          currentRound += 1;\n          _context.next = 7;\n          break;\n        case 29:\n          throw new Error(\"Transaction not confirmed after \".concat(waitRounds, \" rounds\"));\n        case 30:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[9, 20]]);\n  }));\n  return _waitForConfirmation.apply(this, arguments);\n}","map":{"version":3,"names":["waitForConfirmation","_x","_x2","_x3","_waitForConfirmation","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","client","txid","waitRounds","status","startRound","currentRound","poolError","pendingInfo","wrap","_callee$","_context","prev","next","do","sent","Error","pendingTransactionInformation","abrupt","concat","t0","statusAfterBlock","stop"],"sources":["/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/algosdk/src/wait.ts"],"sourcesContent":["import Algodv2 from './client/v2/algod/algod';\n\n/**\n * Wait until a transaction has been confirmed or rejected by the network, or\n * until 'waitRounds' number of rounds have passed.\n * @param client - An Algodv2 client\n * @param txid - The ID of the transaction to wait for.\n * @param waitRounds - The maximum number of rounds to wait for.\n * @returns A promise that, upon success, will resolve to the output of the\n *   `pendingTransactionInformation` call for the confirmed transaction.\n */\nexport async function waitForConfirmation(\n  client: Algodv2,\n  txid: string,\n  waitRounds: number\n): Promise<Record<string, any>> {\n  // Wait until the transaction is confirmed or rejected, or until 'waitRounds'\n  // number of rounds have passed.\n\n  const status = await client.status().do();\n  if (typeof status === 'undefined') {\n    throw new Error('Unable to get node status');\n  }\n  const startRound = status['last-round'] + 1;\n  let currentRound = startRound;\n\n  /* eslint-disable no-await-in-loop */\n  while (currentRound < startRound + waitRounds) {\n    let poolError = false;\n    try {\n      const pendingInfo = await client.pendingTransactionInformation(txid).do();\n\n      if (pendingInfo['confirmed-round']) {\n        // Got the completed Transaction\n        return pendingInfo;\n      }\n\n      if (pendingInfo['pool-error']) {\n        // If there was a pool error, then the transaction has been rejected\n        poolError = true;\n        throw new Error(`Transaction Rejected: ${pendingInfo['pool-error']}`);\n      }\n    } catch (err) {\n      // Ignore errors from PendingTransactionInformation, since it may return 404 if the algod\n      // instance is behind a load balancer and the request goes to a different algod than the\n      // one we submitted the transaction to\n      if (poolError) {\n        // Rethrow error only if it's because the transaction was rejected\n        throw err;\n      }\n    }\n\n    await client.statusAfterBlock(currentRound).do();\n    currentRound += 1;\n  }\n  /* eslint-enable no-await-in-loop */\n  throw new Error(`Transaction not confirmed after ${waitRounds} rounds`);\n}\n"],"mappings":";;AAEA;;;;;;;;;AASA,gBAAsBA,mBAAmBA,CAAAC,EAAA,EAAAC,GAAA,EAAAC,GAAA;EAAA,OAAAC,oBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AA8CxC,SAAAF,qBAAA;EAAAA,oBAAA,GAAAG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CA9CM,SAAAC,QACLC,MAAe,EACfC,IAAY,EACZC,UAAkB;IAAA,IAAAC,MAAA,EAAAC,UAAA,EAAAC,YAAA,EAAAC,SAAA,EAAAC,WAAA;IAAA,OAAAV,mBAAA,GAAAW,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAAAF,QAAA,CAAAE,IAAA;UAAA,OAKGZ,MAAM,CAACG,MAAM,EAAE,CAACU,EAAE,EAAE;QAAA;UAAnCV,MAAM,GAAAO,QAAA,CAAAI,IAAA;UAAA,MACR,OAAOX,MAAM,KAAK,WAAW;YAAAO,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAA,MACzB,IAAIG,KAAK,CAAC,2BAA2B,CAAC;QAAA;UAExCX,UAAU,GAAGD,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC;UACvCE,YAAY,GAAGD,UAAU;UAE7B;QAAA;UAAA,MACOC,YAAY,GAAGD,UAAU,GAAGF,UAAU;YAAAQ,QAAA,CAAAE,IAAA;YAAA;UAAA;UACvCN,SAAS,GAAG,KAAK;UAAAI,QAAA,CAAAC,IAAA;UAAAD,QAAA,CAAAE,IAAA;UAAA,OAEOZ,MAAM,CAACgB,6BAA6B,CAACf,IAAI,CAAC,CAACY,EAAE,EAAE;QAAA;UAAnEN,WAAW,GAAAG,QAAA,CAAAI,IAAA;UAAA,KAEbP,WAAW,CAAC,iBAAiB,CAAC;YAAAG,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAA,OAAAF,QAAA,CAAAO,MAAA,WAEzBV,WAAW;QAAA;UAAA,KAGhBA,WAAW,CAAC,YAAY,CAAC;YAAAG,QAAA,CAAAE,IAAA;YAAA;UAAA;UAC3B;UACAN,SAAS,GAAG,IAAI;UAAC,MACX,IAAIS,KAAK,0BAAAG,MAAA,CAA0BX,WAAW,CAAC,YAAY,CAAC,CAAE,CAAC;QAAA;UAAAG,QAAA,CAAAE,IAAA;UAAA;QAAA;UAAAF,QAAA,CAAAC,IAAA;UAAAD,QAAA,CAAAS,EAAA,GAAAT,QAAA;UAAA,KAMnEJ,SAAS;YAAAI,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAA,MAAAF,QAAA,CAAAS,EAAA;QAAA;UAAAT,QAAA,CAAAE,IAAA;UAAA,OAMTZ,MAAM,CAACoB,gBAAgB,CAACf,YAAY,CAAC,CAACQ,EAAE,EAAE;QAAA;UAChDR,YAAY,IAAI,CAAC;UAACK,QAAA,CAAAE,IAAA;UAAA;QAAA;UAAA,MAGd,IAAIG,KAAK,oCAAAG,MAAA,CAAoChB,UAAU,YAAS,CAAC;QAAA;QAAA;UAAA,OAAAQ,QAAA,CAAAW,IAAA;MAAA;IAAA,GAAAtB,OAAA;EAAA,CACxE;EAAA,OAAAN,oBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}