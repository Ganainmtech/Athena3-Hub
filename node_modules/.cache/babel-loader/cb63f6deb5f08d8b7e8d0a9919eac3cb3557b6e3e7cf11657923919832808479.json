{"ast":null,"code":"import IntDecoding from '../../types/intDecoding';\n/**\n * Base abstract class for JSON requests.\n *\n * Data: The type returned from the `do()` method\n *\n * Body: The structure of the response's body\n */\nexport default class JSONRequest {\n  /**\n   * @param client - HTTPClient object.\n   * @param intDecoding - The method to use\n   *   for decoding integers from this request's response. See the setIntDecoding method for more\n   *   details.\n   */\n  constructor(client, intDecoding) {\n    this.c = client;\n    this.query = {};\n    this.intDecoding = intDecoding || IntDecoding.DEFAULT;\n  }\n  /**\n   * Prepare a JSON response before returning it.\n   *\n   * Use this method to change and restructure response\n   * data as needed after receiving it from the `do()` method.\n   * @param body - Response body received\n   * @category JSONRequest\n   */\n  // eslint-disable-next-line class-methods-use-this\n  prepare(body) {\n    return body;\n  }\n  /**\n   * Execute the request.\n   * @param headers - Additional headers to send in the request. Optional.\n   * @returns A promise which resolves to the parsed response data.\n   * @category JSONRequest\n   */\n  async do(headers = {}) {\n    const jsonOptions = {};\n    if (this.intDecoding !== 'default') {\n      jsonOptions.intDecoding = this.intDecoding;\n    }\n    const res = await this.c.get(this.path(), this.query, headers, jsonOptions);\n    return this.prepare(res.body);\n  }\n  /**\n   * Execute the request, but do not process the response data in any way.\n   * @param headers - Additional headers to send in the request. Optional.\n   * @returns A promise which resolves to the raw response data, exactly as returned by the server.\n   * @category JSONRequest\n   */\n  async doRaw(headers = {}) {\n    const res = await this.c.get(this.path(), this.query, headers, {}, false);\n    return res.body;\n  }\n  /**\n   * Configure how integers in this request's JSON response will be decoded.\n   *\n   * The options are:\n   * * \"default\": Integers will be decoded according to JSON.parse, meaning they will all be\n   *   Numbers and any values greater than Number.MAX_SAFE_INTEGER will lose precision.\n   * * \"safe\": All integers will be decoded as Numbers, but if any values are greater than\n   *   Number.MAX_SAFE_INTEGER an error will be thrown.\n   * * \"mixed\": Integers will be decoded as Numbers if they are less than or equal to\n   *   Number.MAX_SAFE_INTEGER, otherwise they will be decoded as BigInts.\n   * * \"bigint\": All integers will be decoded as BigInts.\n   *\n   * @param method - The method to use when parsing the\n   *   response for this request. Must be one of \"default\", \"safe\", \"mixed\", or \"bigint\".\n   * @category JSONRequest\n   */\n  setIntDecoding(method) {\n    if (method !== 'default' && method !== 'safe' && method !== 'mixed' && method !== 'bigint') throw new Error(`Invalid method for int decoding: ${method}`);\n    this.intDecoding = method;\n    return this;\n  }\n}","map":{"version":3,"names":["IntDecoding","JSONRequest","constructor","client","intDecoding","c","query","DEFAULT","prepare","body","do","headers","jsonOptions","res","get","path","doRaw","setIntDecoding","method","Error"],"sources":["/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/node_modules/algosdk/src/client/v2/jsonrequest.ts"],"sourcesContent":["import HTTPClient from '../client';\nimport IntDecoding from '../../types/intDecoding';\n\n/**\n * Base abstract class for JSON requests.\n *\n * Data: The type returned from the `do()` method\n *\n * Body: The structure of the response's body\n */\nexport default abstract class JSONRequest<\n  Data = Record<string, any>,\n  Body = Data | Uint8Array\n> {\n  c: HTTPClient;\n  query: Record<string, any>;\n  intDecoding: IntDecoding;\n\n  /**\n   * @param client - HTTPClient object.\n   * @param intDecoding - The method to use\n   *   for decoding integers from this request's response. See the setIntDecoding method for more\n   *   details.\n   */\n  constructor(client: HTTPClient, intDecoding?: IntDecoding) {\n    this.c = client;\n    this.query = {};\n    this.intDecoding = intDecoding || IntDecoding.DEFAULT;\n  }\n\n  /**\n   * @returns The path of this request.\n   * @category JSONRequest\n   */\n  abstract path(): string;\n\n  /**\n   * Prepare a JSON response before returning it.\n   *\n   * Use this method to change and restructure response\n   * data as needed after receiving it from the `do()` method.\n   * @param body - Response body received\n   * @category JSONRequest\n   */\n  // eslint-disable-next-line class-methods-use-this\n  prepare(body: Body): Data {\n    return (body as unknown) as Data;\n  }\n\n  /**\n   * Execute the request.\n   * @param headers - Additional headers to send in the request. Optional.\n   * @returns A promise which resolves to the parsed response data.\n   * @category JSONRequest\n   */\n  async do(headers: Record<string, any> = {}): Promise<Data> {\n    const jsonOptions: Record<string, any> = {};\n    if (this.intDecoding !== 'default') {\n      jsonOptions.intDecoding = this.intDecoding;\n    }\n    const res = await this.c.get(this.path(), this.query, headers, jsonOptions);\n    return this.prepare(res.body);\n  }\n\n  /**\n   * Execute the request, but do not process the response data in any way.\n   * @param headers - Additional headers to send in the request. Optional.\n   * @returns A promise which resolves to the raw response data, exactly as returned by the server.\n   * @category JSONRequest\n   */\n  async doRaw(headers: Record<string, any> = {}): Promise<Uint8Array> {\n    const res = await this.c.get(this.path(), this.query, headers, {}, false);\n    return res.body;\n  }\n\n  /**\n   * Configure how integers in this request's JSON response will be decoded.\n   *\n   * The options are:\n   * * \"default\": Integers will be decoded according to JSON.parse, meaning they will all be\n   *   Numbers and any values greater than Number.MAX_SAFE_INTEGER will lose precision.\n   * * \"safe\": All integers will be decoded as Numbers, but if any values are greater than\n   *   Number.MAX_SAFE_INTEGER an error will be thrown.\n   * * \"mixed\": Integers will be decoded as Numbers if they are less than or equal to\n   *   Number.MAX_SAFE_INTEGER, otherwise they will be decoded as BigInts.\n   * * \"bigint\": All integers will be decoded as BigInts.\n   *\n   * @param method - The method to use when parsing the\n   *   response for this request. Must be one of \"default\", \"safe\", \"mixed\", or \"bigint\".\n   * @category JSONRequest\n   */\n  setIntDecoding(method: IntDecoding) {\n    if (\n      method !== 'default' &&\n      method !== 'safe' &&\n      method !== 'mixed' &&\n      method !== 'bigint'\n    )\n      throw new Error(`Invalid method for int decoding: ${method}`);\n    this.intDecoding = method;\n    return this;\n  }\n}\n"],"mappings":"AACA,OAAOA,WAAW,MAAM,yBAAyB;AAEjD;;;;;;;AAOA,eAAc,MAAgBC,WAAW;EAQvC;;;;;;EAMAC,YAAYC,MAAkB,EAAEC,WAAyB;IACvD,IAAI,CAACC,CAAC,GAAGF,MAAM;IACf,IAAI,CAACG,KAAK,GAAG,EAAE;IACf,IAAI,CAACF,WAAW,GAAGA,WAAW,IAAIJ,WAAW,CAACO,OAAO;EACvD;EAQA;;;;;;;;EAQA;EACAC,OAAOA,CAACC,IAAU;IAChB,OAAQA,IAAwB;EAClC;EAEA;;;;;;EAMA,MAAMC,EAAEA,CAACC,OAAA,GAA+B,EAAE;IACxC,MAAMC,WAAW,GAAwB,EAAE;IAC3C,IAAI,IAAI,CAACR,WAAW,KAAK,SAAS,EAAE;MAClCQ,WAAW,CAACR,WAAW,GAAG,IAAI,CAACA,WAAW;;IAE5C,MAAMS,GAAG,GAAG,MAAM,IAAI,CAACR,CAAC,CAACS,GAAG,CAAC,IAAI,CAACC,IAAI,EAAE,EAAE,IAAI,CAACT,KAAK,EAAEK,OAAO,EAAEC,WAAW,CAAC;IAC3E,OAAO,IAAI,CAACJ,OAAO,CAACK,GAAG,CAACJ,IAAI,CAAC;EAC/B;EAEA;;;;;;EAMA,MAAMO,KAAKA,CAACL,OAAA,GAA+B,EAAE;IAC3C,MAAME,GAAG,GAAG,MAAM,IAAI,CAACR,CAAC,CAACS,GAAG,CAAC,IAAI,CAACC,IAAI,EAAE,EAAE,IAAI,CAACT,KAAK,EAAEK,OAAO,EAAE,EAAE,EAAE,KAAK,CAAC;IACzE,OAAOE,GAAG,CAACJ,IAAI;EACjB;EAEA;;;;;;;;;;;;;;;;EAgBAQ,cAAcA,CAACC,MAAmB;IAChC,IACEA,MAAM,KAAK,SAAS,IACpBA,MAAM,KAAK,MAAM,IACjBA,MAAM,KAAK,OAAO,IAClBA,MAAM,KAAK,QAAQ,EAEnB,MAAM,IAAIC,KAAK,CAAC,oCAAoCD,MAAM,EAAE,CAAC;IAC/D,IAAI,CAACd,WAAW,GAAGc,MAAM;IACzB,OAAO,IAAI;EACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}