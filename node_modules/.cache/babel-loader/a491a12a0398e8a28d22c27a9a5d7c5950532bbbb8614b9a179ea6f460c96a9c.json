{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { encodeUnsignedSimulateTransaction } from './transaction';\nimport { signLogicSigTransactionObject } from './logicsig';\nimport { signMultisigTransaction, mergeMultisigTransactions } from './multisig';\n/**\n * Create a TransactionSigner that can sign transactions for the provided basic Account.\n */\nexport function makeBasicAccountTransactionSigner(account) {\n  return function (txnGroup, indexesToSign) {\n    var signed = [];\n    var _iterator = _createForOfIteratorHelper(indexesToSign),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var index = _step.value;\n        signed.push(txnGroup[index].signTxn(account.sk));\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    return Promise.resolve(signed);\n  };\n}\n/**\n * Create a TransactionSigner that can sign transactions for the provided LogicSigAccount.\n */\nexport function makeLogicSigAccountTransactionSigner(account) {\n  return function (txnGroup, indexesToSign) {\n    var signed = [];\n    var _iterator2 = _createForOfIteratorHelper(indexesToSign),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var index = _step2.value;\n        var _signLogicSigTransact = signLogicSigTransactionObject(txnGroup[index], account),\n          blob = _signLogicSigTransact.blob;\n        signed.push(blob);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n    return Promise.resolve(signed);\n  };\n}\n/**\n * Create a TransactionSigner that can sign transactions for the provided Multisig account.\n * @param msig - The Multisig account metadata\n * @param sks - An array of private keys belonging to the msig which should sign the transactions.\n */\nexport function makeMultiSigAccountTransactionSigner(msig, sks) {\n  return function (txnGroup, indexesToSign) {\n    var signed = [];\n    var _iterator3 = _createForOfIteratorHelper(indexesToSign),\n      _step3;\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var index = _step3.value;\n        var txn = txnGroup[index];\n        var partialSigs = [];\n        var _iterator4 = _createForOfIteratorHelper(sks),\n          _step4;\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var sk = _step4.value;\n            var _signMultisigTransact = signMultisigTransaction(txn, msig, sk),\n              blob = _signMultisigTransact.blob;\n            partialSigs.push(blob);\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n        if (partialSigs.length > 1) {\n          signed.push(mergeMultisigTransactions(partialSigs));\n        } else {\n          signed.push(partialSigs[0]);\n        }\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n    return Promise.resolve(signed);\n  };\n}\n/**\n * Create a makeEmptyTransactionSigner that does not specify any signer or\n * signing capabilities. This should only be used to simulate transactions.\n */\nexport function makeEmptyTransactionSigner() {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  return function (txnGroup, indexesToSign) {\n    var unsigned = [];\n    var _iterator5 = _createForOfIteratorHelper(indexesToSign),\n      _step5;\n    try {\n      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n        var index = _step5.value;\n        unsigned.push(encodeUnsignedSimulateTransaction(txnGroup[index]));\n      }\n    } catch (err) {\n      _iterator5.e(err);\n    } finally {\n      _iterator5.f();\n    }\n    return Promise.resolve(unsigned);\n  };\n}\n/**\n * Check if a value conforms to the TransactionWithSigner structure.\n * @param value - The value to check.\n * @returns True if an only if the value has the structure of a TransactionWithSigner.\n */\nexport function isTransactionWithSigner(value) {\n  return typeof value === 'object' && Object.keys(value).length === 2 && typeof value.txn === 'object' && typeof value.signer === 'function';\n}","map":{"version":3,"names":["encodeUnsignedSimulateTransaction","signLogicSigTransactionObject","signMultisigTransaction","mergeMultisigTransactions","makeBasicAccountTransactionSigner","account","txnGroup","indexesToSign","signed","_iterator","_createForOfIteratorHelper","_step","s","n","done","index","value","push","signTxn","sk","err","e","f","Promise","resolve","makeLogicSigAccountTransactionSigner","_iterator2","_step2","_signLogicSigTransact","blob","makeMultiSigAccountTransactionSigner","msig","sks","_iterator3","_step3","txn","partialSigs","_iterator4","_step4","_signMultisigTransact","length","makeEmptyTransactionSigner","unsigned","_iterator5","_step5","isTransactionWithSigner","Object","keys","signer"],"sources":["/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/algosdk/src/signer.ts"],"sourcesContent":["import { encodeUnsignedSimulateTransaction, Transaction } from './transaction';\nimport Account from './types/account';\nimport { LogicSigAccount, signLogicSigTransactionObject } from './logicsig';\nimport { MultisigMetadata } from './types/multisig';\nimport { signMultisigTransaction, mergeMultisigTransactions } from './multisig';\n\n/**\n * This type represents a function which can sign transactions from an atomic transaction group.\n * @param txnGroup - The atomic group containing transactions to be signed\n * @param indexesToSign - An array of indexes in the atomic transaction group that should be signed\n * @returns A promise which resolves an array of encoded signed transactions. The length of the\n *   array will be the same as the length of indexesToSign, and each index i in the array\n *   corresponds to the signed transaction from txnGroup[indexesToSign[i]]\n */\nexport type TransactionSigner = (\n  txnGroup: Transaction[],\n  indexesToSign: number[]\n) => Promise<Uint8Array[]>;\n\n/**\n * Create a TransactionSigner that can sign transactions for the provided basic Account.\n */\nexport function makeBasicAccountTransactionSigner(\n  account: Account\n): TransactionSigner {\n  return (txnGroup: Transaction[], indexesToSign: number[]) => {\n    const signed: Uint8Array[] = [];\n\n    for (const index of indexesToSign) {\n      signed.push(txnGroup[index].signTxn(account.sk));\n    }\n\n    return Promise.resolve(signed);\n  };\n}\n\n/**\n * Create a TransactionSigner that can sign transactions for the provided LogicSigAccount.\n */\nexport function makeLogicSigAccountTransactionSigner(\n  account: LogicSigAccount\n): TransactionSigner {\n  return (txnGroup: Transaction[], indexesToSign: number[]) => {\n    const signed: Uint8Array[] = [];\n\n    for (const index of indexesToSign) {\n      const { blob } = signLogicSigTransactionObject(txnGroup[index], account);\n      signed.push(blob);\n    }\n\n    return Promise.resolve(signed);\n  };\n}\n\n/**\n * Create a TransactionSigner that can sign transactions for the provided Multisig account.\n * @param msig - The Multisig account metadata\n * @param sks - An array of private keys belonging to the msig which should sign the transactions.\n */\nexport function makeMultiSigAccountTransactionSigner(\n  msig: MultisigMetadata,\n  sks: Uint8Array[]\n): TransactionSigner {\n  return (txnGroup: Transaction[], indexesToSign: number[]) => {\n    const signed: Uint8Array[] = [];\n\n    for (const index of indexesToSign) {\n      const txn = txnGroup[index];\n      const partialSigs: Uint8Array[] = [];\n\n      for (const sk of sks) {\n        const { blob } = signMultisigTransaction(txn, msig, sk);\n        partialSigs.push(blob);\n      }\n\n      if (partialSigs.length > 1) {\n        signed.push(mergeMultisigTransactions(partialSigs));\n      } else {\n        signed.push(partialSigs[0]);\n      }\n    }\n\n    return Promise.resolve(signed);\n  };\n}\n\n/**\n * Create a makeEmptyTransactionSigner that does not specify any signer or\n * signing capabilities. This should only be used to simulate transactions.\n */\nexport function makeEmptyTransactionSigner(): TransactionSigner {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  return (txnGroup: Transaction[], indexesToSign: number[]) => {\n    const unsigned: Uint8Array[] = [];\n\n    for (const index of indexesToSign) {\n      unsigned.push(encodeUnsignedSimulateTransaction(txnGroup[index]));\n    }\n\n    return Promise.resolve(unsigned);\n  };\n}\n\n/** Represents an unsigned transactions and a signer that can authorize that transaction. */\nexport interface TransactionWithSigner {\n  /** An unsigned transaction */\n  txn: Transaction;\n  /** A transaction signer that can authorize txn */\n  signer: TransactionSigner;\n}\n\n/**\n * Check if a value conforms to the TransactionWithSigner structure.\n * @param value - The value to check.\n * @returns True if an only if the value has the structure of a TransactionWithSigner.\n */\nexport function isTransactionWithSigner(\n  value: any\n): value is TransactionWithSigner {\n  return (\n    typeof value === 'object' &&\n    Object.keys(value).length === 2 &&\n    typeof value.txn === 'object' &&\n    typeof value.signer === 'function'\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}