{"ast":null,"code":"import _regeneratorRuntime from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectSpread from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Buffer } from 'buffer';\nimport * as utils from '../utils/utils';\nimport { URLTokenBaseHTTPClient } from './urlTokenBaseHTTPClient';\n/**\n * Remove falsy values or values with a length of 0 from an object.\n */\nfunction removeFalsyOrEmpty(obj) {\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      // eslint-disable-next-line no-param-reassign\n      if (!obj[key] || obj[key].length === 0) delete obj[key];\n    }\n  }\n  return obj;\n}\n/**\n * Create a new object with lower-case keys\n * See https://codereview.stackexchange.com/a/162418\n * Used to ensure all headers are lower-case and to work more easily with them\n */\nfunction tolowerCaseKeys(o) {\n  /* eslint-disable no-param-reassign,no-return-assign,no-sequences */\n  return Object.keys(o).reduce(function (c, k) {\n    return c[k.toLowerCase()] = o[k], c;\n  }, {});\n  /* eslint-enable no-param-reassign,no-return-assign,no-sequences */\n}\n/**\n * getAcceptFormat returns the correct Accept header depending on the\n * requested format.\n */\nfunction getAcceptFormat(query) {\n  if (query !== undefined && Object.prototype.hasOwnProperty.call(query, 'format')) {\n    switch (query.format) {\n      case 'msgpack':\n        return 'application/msgpack';\n      case 'json':\n      default:\n        return 'application/json';\n    }\n  } else return 'application/json';\n}\n/**\n * HTTPClient is a wrapper around a BaseHTTPClient\n * It takes care of setting the proper \"Accept\" header and of\n * decoding the JSON outputs.\n */\nvar HTTPClient = /*#__PURE__*/function () {\n  function HTTPClient(bcOrTokenHeader, baseServer, port) {\n    var defaultHeaders = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    _classCallCheck(this, HTTPClient);\n    if (baseServer !== undefined) {\n      this.bc = new URLTokenBaseHTTPClient(bcOrTokenHeader, baseServer, port, defaultHeaders);\n    } else {\n      this.bc = bcOrTokenHeader;\n    }\n  }\n  /**\n   * Parse JSON using either the built-in JSON.parse or utils.parseJSON\n   * depending on whether jsonOptions are provided or not\n   *\n   * @param text - JSON data\n   * @param status - Status of the response (used in case parseJSON fails)\n   * @param jsonOptions - Options object to use to decode JSON responses. See\n   *   utils.parseJSON for the options available.\n   */\n  _createClass(HTTPClient, [{\n    key: \"get\",\n    value:\n    /**\n     * Send a GET request.\n     * @param relativePath - The path of the request.\n     * @param query - An object containing the query parameters of the request.\n     * @param requestHeaders - An object containing additional request headers to use.\n     * @param jsonOptions - Options object to use to decode JSON responses. See\n     *   utils.parseJSON for the options available.\n     * @param parseBody - An optional boolean indicating whether the response body should be parsed\n     *   or not.\n     * @returns Response object.\n     */\n    function () {\n      var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(relativePath, query) {\n        var requestHeaders,\n          jsonOptions,\n          parseBody,\n          format,\n          fullHeaders,\n          res,\n          _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              requestHeaders = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n              jsonOptions = _args.length > 3 && _args[3] !== undefined ? _args[3] : {};\n              parseBody = _args.length > 4 && _args[4] !== undefined ? _args[4] : true;\n              format = getAcceptFormat(query);\n              fullHeaders = _objectSpread(_objectSpread({}, requestHeaders), {}, {\n                accept: format\n              });\n              _context.prev = 5;\n              _context.next = 8;\n              return this.bc.get(relativePath, removeFalsyOrEmpty(query), fullHeaders);\n            case 8:\n              res = _context.sent;\n              return _context.abrupt(\"return\", HTTPClient.prepareResponse(res, format, parseBody, jsonOptions));\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](5);\n              throw HTTPClient.prepareResponseError(_context.t0);\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[5, 12]]);\n      }));\n      function get(_x, _x2) {\n        return _get.apply(this, arguments);\n      }\n      return get;\n    }()\n    /**\n     * Send a POST request.\n     * If no content-type present, adds the header \"content-type: application/json\"\n     * and data is serialized in JSON (if not empty)\n     */\n  }, {\n    key: \"post\",\n    value: function () {\n      var _post = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(relativePath, data) {\n        var requestHeaders,\n          query,\n          parseBody,\n          fullHeaders,\n          res,\n          _args2 = arguments;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              requestHeaders = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {};\n              query = _args2.length > 3 ? _args2[3] : undefined;\n              parseBody = _args2.length > 4 && _args2[4] !== undefined ? _args2[4] : true;\n              fullHeaders = _objectSpread({\n                'content-type': 'application/json'\n              }, tolowerCaseKeys(requestHeaders));\n              _context2.prev = 4;\n              _context2.next = 7;\n              return this.bc.post(relativePath, HTTPClient.serializeData(data, fullHeaders), query, fullHeaders);\n            case 7:\n              res = _context2.sent;\n              return _context2.abrupt(\"return\", HTTPClient.prepareResponse(res, 'application/json', parseBody));\n            case 11:\n              _context2.prev = 11;\n              _context2.t0 = _context2[\"catch\"](4);\n              throw HTTPClient.prepareResponseError(_context2.t0);\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this, [[4, 11]]);\n      }));\n      function post(_x3, _x4) {\n        return _post.apply(this, arguments);\n      }\n      return post;\n    }()\n    /**\n     * Send a DELETE request.\n     * If no content-type present, adds the header \"content-type: application/json\"\n     * and data is serialized in JSON (if not empty)\n     */\n  }, {\n    key: \"delete\",\n    value: function () {\n      var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(relativePath, data) {\n        var requestHeaders,\n          parseBody,\n          fullHeaders,\n          res,\n          _args3 = arguments;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              requestHeaders = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : {};\n              parseBody = _args3.length > 3 && _args3[3] !== undefined ? _args3[3] : true;\n              fullHeaders = _objectSpread({\n                'content-type': 'application/json'\n              }, tolowerCaseKeys(requestHeaders));\n              _context3.next = 5;\n              return this.bc.delete(relativePath, HTTPClient.serializeData(data, fullHeaders), undefined, fullHeaders);\n            case 5:\n              res = _context3.sent;\n              return _context3.abrupt(\"return\", HTTPClient.prepareResponse(res, 'application/json', parseBody));\n            case 7:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function _delete(_x5, _x6) {\n        return _delete2.apply(this, arguments);\n      }\n      return _delete;\n    }()\n  }], [{\n    key: \"parseJSON\",\n    value: function parseJSON(text, status) {\n      var jsonOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      try {\n        if (Object.keys(jsonOptions).length === 0) {\n          return text && JSON.parse(text);\n        }\n        return text && utils.parseJSON(text, jsonOptions);\n      } catch (err_) {\n        var err = err_;\n        // return the raw response if the response parsing fails\n        err.rawResponse = text || null;\n        // return the http status code if the response parsing fails\n        err.statusCode = status;\n        throw err;\n      }\n    }\n    /**\n     * Serialize the data according to the requestHeaders\n     * Assumes that requestHeaders contain a key \"content-type\"\n     * If the content-type is \"application/json\", data is JSON serialized\n     * Otherwise, data needs to be either an UTF-8 string that is converted to an Uint8Array\n     * or an Uint8Array\n     * @private\n     */\n  }, {\n    key: \"serializeData\",\n    value: function serializeData(data, requestHeaders) {\n      if (!data) {\n        return new Uint8Array(0); // empty Uint8Array\n      }\n\n      if (requestHeaders['content-type'] === 'application/json') {\n        return new Uint8Array(Buffer.from(JSON.stringify(data)));\n      }\n      if (typeof data === 'string') {\n        return new Uint8Array(Buffer.from(data));\n      }\n      if (data instanceof Uint8Array) {\n        return data;\n      }\n      throw new Error('provided data is neither a string nor a Uint8Array and content-type is not application/json');\n    }\n    /**\n     * Convert a BaseHTTPClientResponse into a full HTTPClientResponse\n     * Parse the body in\n     * Modifies in place res and return the result\n     */\n  }, {\n    key: \"prepareResponse\",\n    value: function prepareResponse(res, format, parseBody) {\n      var jsonOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      var body = res.body;\n      var text;\n      if (format !== 'application/msgpack') {\n        text = body && Buffer.from(body).toString() || '';\n      }\n      if (parseBody && format === 'application/json') {\n        body = HTTPClient.parseJSON(text, res.status, jsonOptions);\n      }\n      return _objectSpread(_objectSpread({}, res), {}, {\n        body: body,\n        text: text,\n        ok: Math.trunc(res.status / 100) === 2\n      });\n    }\n    /**\n     * Prepare an error with a response\n     * (the type of errors BaseHTTPClient are supposed to throw)\n     * by adding the status and preparing the internal response\n     * @private\n     */\n  }, {\n    key: \"prepareResponseError\",\n    value: function prepareResponseError(err) {\n      if (err.response) {\n        // eslint-disable-next-line no-param-reassign\n        err.response = HTTPClient.prepareResponse(err.response, 'application/json', true);\n        // eslint-disable-next-line no-param-reassign\n        err.status = err.response.status;\n      }\n      return err;\n    }\n  }]);\n  return HTTPClient;\n}();\nexport { HTTPClient as default };","map":{"version":3,"names":["Buffer","utils","URLTokenBaseHTTPClient","removeFalsyOrEmpty","obj","key","Object","prototype","hasOwnProperty","call","length","tolowerCaseKeys","o","keys","reduce","c","k","toLowerCase","getAcceptFormat","query","undefined","format","HTTPClient","bcOrTokenHeader","baseServer","port","defaultHeaders","arguments","_classCallCheck","bc","_createClass","value","_get","_asyncToGenerator","_regeneratorRuntime","mark","_callee","relativePath","requestHeaders","jsonOptions","parseBody","fullHeaders","res","_args","wrap","_callee$","_context","prev","next","_objectSpread","accept","get","sent","abrupt","prepareResponse","t0","prepareResponseError","stop","_x","_x2","apply","_post","_callee2","data","_args2","_callee2$","_context2","post","serializeData","_x3","_x4","_delete2","_callee3","_args3","_callee3$","_context3","delete","_delete","_x5","_x6","parseJSON","text","status","JSON","parse","err_","err","rawResponse","statusCode","Uint8Array","from","stringify","Error","body","toString","ok","Math","trunc","response","default"],"sources":["/Users/wanjinwoo/Desktop/Study/web3/Algorand/Athena3-Hub/Athena3-Hub-athena-frontend/node_modules/algosdk/src/client/client.ts"],"sourcesContent":["import { Buffer } from 'buffer';\nimport * as utils from '../utils/utils';\nimport {\n  BaseHTTPClient,\n  BaseHTTPClientResponse,\n  Query,\n} from './baseHTTPClient';\nimport { TokenHeader, URLTokenBaseHTTPClient } from './urlTokenBaseHTTPClient';\n\ninterface ErrorWithAdditionalInfo extends Error {\n  rawResponse: string | null;\n  statusCode: number;\n}\n\nexport interface HTTPClientResponse {\n  body: Uint8Array | any; // when content-type=JSON, body is a JSON object, otherwise it's a Uint8Array\n  text?: string;\n  headers: Record<string, string>;\n  status: number;\n  ok: boolean;\n}\n\n/**\n * Remove falsy values or values with a length of 0 from an object.\n */\nfunction removeFalsyOrEmpty(obj: Record<string, any>) {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      // eslint-disable-next-line no-param-reassign\n      if (!obj[key] || obj[key].length === 0) delete obj[key];\n    }\n  }\n  return obj;\n}\n\n/**\n * Create a new object with lower-case keys\n * See https://codereview.stackexchange.com/a/162418\n * Used to ensure all headers are lower-case and to work more easily with them\n */\nfunction tolowerCaseKeys(o: object): object {\n  /* eslint-disable no-param-reassign,no-return-assign,no-sequences */\n  return Object.keys(o).reduce((c, k) => ((c[k.toLowerCase()] = o[k]), c), {});\n  /* eslint-enable no-param-reassign,no-return-assign,no-sequences */\n}\n\n/**\n * getAcceptFormat returns the correct Accept header depending on the\n * requested format.\n */\nfunction getAcceptFormat(\n  query?: Query<'msgpack' | 'json'>\n): 'application/msgpack' | 'application/json' {\n  if (\n    query !== undefined &&\n    Object.prototype.hasOwnProperty.call(query, 'format')\n  ) {\n    switch (query.format) {\n      case 'msgpack':\n        return 'application/msgpack';\n      case 'json':\n      default:\n        return 'application/json';\n    }\n  } else return 'application/json';\n}\n\n/**\n * HTTPClient is a wrapper around a BaseHTTPClient\n * It takes care of setting the proper \"Accept\" header and of\n * decoding the JSON outputs.\n */\nexport default class HTTPClient {\n  private bc: BaseHTTPClient;\n\n  /**\n   * Construct an HTTPClient from a BaseHTTPClient\n   * @param bc - the BaseHTTPClient used\n   */\n  constructor(bc: BaseHTTPClient);\n  /**\n   * Construct an HTTPClient from a URL (baseServer+port) and a token\n   */\n  constructor(\n    tokenHeader: TokenHeader,\n    baseServer: string,\n    port?: string | number,\n    defaultHeaders?: Record<string, string>\n  );\n\n  constructor(\n    bcOrTokenHeader: BaseHTTPClient | TokenHeader,\n    baseServer?: string,\n    port?: string | number,\n    defaultHeaders: Record<string, string> = {}\n  ) {\n    if (baseServer !== undefined) {\n      this.bc = new URLTokenBaseHTTPClient(\n        bcOrTokenHeader as TokenHeader,\n        baseServer,\n        port,\n        defaultHeaders\n      );\n    } else {\n      this.bc = bcOrTokenHeader as BaseHTTPClient;\n    }\n  }\n\n  /**\n   * Parse JSON using either the built-in JSON.parse or utils.parseJSON\n   * depending on whether jsonOptions are provided or not\n   *\n   * @param text - JSON data\n   * @param status - Status of the response (used in case parseJSON fails)\n   * @param jsonOptions - Options object to use to decode JSON responses. See\n   *   utils.parseJSON for the options available.\n   */\n  public static parseJSON(\n    text: string,\n    status: number,\n    jsonOptions: utils.JSONOptions = {}\n  ) {\n    try {\n      if (Object.keys(jsonOptions).length === 0) {\n        return text && JSON.parse(text);\n      }\n      return text && utils.parseJSON(text, jsonOptions);\n    } catch (err_) {\n      const err: ErrorWithAdditionalInfo = err_;\n      // return the raw response if the response parsing fails\n      err.rawResponse = text || null;\n      // return the http status code if the response parsing fails\n      err.statusCode = status;\n      throw err;\n    }\n  }\n\n  /**\n   * Serialize the data according to the requestHeaders\n   * Assumes that requestHeaders contain a key \"content-type\"\n   * If the content-type is \"application/json\", data is JSON serialized\n   * Otherwise, data needs to be either an UTF-8 string that is converted to an Uint8Array\n   * or an Uint8Array\n   * @private\n   */\n  private static serializeData(\n    data: object,\n    requestHeaders: Record<string, string>\n  ): Uint8Array {\n    if (!data) {\n      return new Uint8Array(0); // empty Uint8Array\n    }\n    if (requestHeaders['content-type'] === 'application/json') {\n      return new Uint8Array(Buffer.from(JSON.stringify(data)));\n    }\n    if (typeof data === 'string') {\n      return new Uint8Array(Buffer.from(data));\n    }\n    if (data instanceof Uint8Array) {\n      return data;\n    }\n    throw new Error(\n      'provided data is neither a string nor a Uint8Array and content-type is not application/json'\n    );\n  }\n\n  /**\n   * Convert a BaseHTTPClientResponse into a full HTTPClientResponse\n   * Parse the body in\n   * Modifies in place res and return the result\n   */\n  private static prepareResponse(\n    res: BaseHTTPClientResponse,\n    format: 'application/msgpack' | 'application/json',\n    parseBody: boolean,\n    jsonOptions: utils.JSONOptions = {}\n  ): HTTPClientResponse {\n    let { body } = res;\n    let text;\n\n    if (format !== 'application/msgpack') {\n      text = (body && Buffer.from(body).toString()) || '';\n    }\n\n    if (parseBody && format === 'application/json') {\n      body = HTTPClient.parseJSON(text, res.status, jsonOptions);\n    }\n\n    return {\n      ...res,\n      body,\n      text,\n      ok: Math.trunc(res.status / 100) === 2,\n    };\n  }\n\n  /**\n   * Prepare an error with a response\n   * (the type of errors BaseHTTPClient are supposed to throw)\n   * by adding the status and preparing the internal response\n   * @private\n   */\n  private static prepareResponseError(err) {\n    if (err.response) {\n      // eslint-disable-next-line no-param-reassign\n      err.response = HTTPClient.prepareResponse(\n        err.response,\n        'application/json',\n        true\n      );\n      // eslint-disable-next-line no-param-reassign\n      err.status = err.response.status;\n    }\n    return err;\n  }\n\n  /**\n   * Send a GET request.\n   * @param relativePath - The path of the request.\n   * @param query - An object containing the query parameters of the request.\n   * @param requestHeaders - An object containing additional request headers to use.\n   * @param jsonOptions - Options object to use to decode JSON responses. See\n   *   utils.parseJSON for the options available.\n   * @param parseBody - An optional boolean indicating whether the response body should be parsed\n   *   or not.\n   * @returns Response object.\n   */\n  async get(\n    relativePath: string,\n    query?: Query<any>,\n    requestHeaders: Record<string, string> = {},\n    jsonOptions: utils.JSONOptions = {},\n    parseBody: boolean = true\n  ): Promise<HTTPClientResponse> {\n    const format = getAcceptFormat(query);\n    const fullHeaders = { ...requestHeaders, accept: format };\n\n    try {\n      const res = await this.bc.get(\n        relativePath,\n        removeFalsyOrEmpty(query),\n        fullHeaders\n      );\n\n      return HTTPClient.prepareResponse(res, format, parseBody, jsonOptions);\n    } catch (err) {\n      throw HTTPClient.prepareResponseError(err);\n    }\n  }\n\n  /**\n   * Send a POST request.\n   * If no content-type present, adds the header \"content-type: application/json\"\n   * and data is serialized in JSON (if not empty)\n   */\n  async post(\n    relativePath: string,\n    data: any,\n    requestHeaders: Record<string, string> = {},\n    query?: Query<any>,\n    parseBody: boolean = true\n  ): Promise<HTTPClientResponse> {\n    const fullHeaders = {\n      'content-type': 'application/json',\n      ...tolowerCaseKeys(requestHeaders),\n    };\n\n    try {\n      const res = await this.bc.post(\n        relativePath,\n        HTTPClient.serializeData(data, fullHeaders),\n        query,\n        fullHeaders\n      );\n\n      return HTTPClient.prepareResponse(res, 'application/json', parseBody);\n    } catch (err) {\n      throw HTTPClient.prepareResponseError(err);\n    }\n  }\n\n  /**\n   * Send a DELETE request.\n   * If no content-type present, adds the header \"content-type: application/json\"\n   * and data is serialized in JSON (if not empty)\n   */\n  async delete(\n    relativePath: string,\n    data: any,\n    requestHeaders: Record<string, string> = {},\n    parseBody: boolean = true\n  ) {\n    const fullHeaders = {\n      'content-type': 'application/json',\n      ...tolowerCaseKeys(requestHeaders),\n    };\n\n    const res = await this.bc.delete(\n      relativePath,\n      HTTPClient.serializeData(data, fullHeaders),\n      undefined,\n      fullHeaders\n    );\n\n    return HTTPClient.prepareResponse(res, 'application/json', parseBody);\n  }\n}\n"],"mappings":";;;;;AAAA,SAASA,MAAM,QAAQ,QAAQ;AAC/B,OAAO,KAAKC,KAAK,MAAM,gBAAgB;AAMvC,SAAsBC,sBAAsB,QAAQ,0BAA0B;AAe9E;;;AAGA,SAASC,kBAAkBA,CAACC,GAAwB;EAClD,KAAK,IAAMC,GAAG,IAAID,GAAG,EAAE;IACrB,IAAIE,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACL,GAAG,EAAEC,GAAG,CAAC,EAAE;MAClD;MACA,IAAI,CAACD,GAAG,CAACC,GAAG,CAAC,IAAID,GAAG,CAACC,GAAG,CAAC,CAACK,MAAM,KAAK,CAAC,EAAE,OAAON,GAAG,CAACC,GAAG,CAAC;;;EAG3D,OAAOD,GAAG;AACZ;AAEA;;;;;AAKA,SAASO,eAAeA,CAACC,CAAS;EAChC;EACA,OAAON,MAAM,CAACO,IAAI,CAACD,CAAC,CAAC,CAACE,MAAM,CAAC,UAACC,CAAC,EAAEC,CAAC;IAAA,OAAOD,CAAC,CAACC,CAAC,CAACC,WAAW,EAAE,CAAC,GAAGL,CAAC,CAACI,CAAC,CAAC,EAAGD,CAAC;EAAA,CAAC,EAAE,EAAE,CAAC;EAC5E;AACF;AAEA;;;;AAIA,SAASG,eAAeA,CACtBC,KAAiC;EAEjC,IACEA,KAAK,KAAKC,SAAS,IACnBd,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACU,KAAK,EAAE,QAAQ,CAAC,EACrD;IACA,QAAQA,KAAK,CAACE,MAAM;MAClB,KAAK,SAAS;QACZ,OAAO,qBAAqB;MAC9B,KAAK,MAAM;MACX;QACE,OAAO,kBAAkB;;GAE9B,MAAM,OAAO,kBAAkB;AAClC;AAEA;;;;;AAAA,IAKqBC,UAAU;EAkB7B,SAAAA,WACEC,eAA6C,EAC7CC,UAAmB,EACnBC,IAAsB,EACqB;IAAA,IAA3CC,cAAA,GAAAC,SAAA,CAAAjB,MAAA,QAAAiB,SAAA,QAAAP,SAAA,GAAAO,SAAA,MAAyC,EAAE;IAAAC,eAAA,OAAAN,UAAA;IAE3C,IAAIE,UAAU,KAAKJ,SAAS,EAAE;MAC5B,IAAI,CAACS,EAAE,GAAG,IAAI3B,sBAAsB,CAClCqB,eAA8B,EAC9BC,UAAU,EACVC,IAAI,EACJC,cAAc,CACf;KACF,MAAM;MACL,IAAI,CAACG,EAAE,GAAGN,eAAiC;;EAE/C;EAEA;;;;;;;;;EAAAO,YAAA,CAAAR,UAAA;IAAAjB,GAAA;IAAA0B,KAAA;IA4GA;;;;;;;;;;;IAAA;MAAA,IAAAC,IAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAWA,SAAAC,QACEC,YAAoB,EACpBlB,KAAkB;QAAA,IAAAmB,cAAA;UAAAC,WAAA;UAAAC,SAAA;UAAAnB,MAAA;UAAAoB,WAAA;UAAAC,GAAA;UAAAC,KAAA,GAAAhB,SAAA;QAAA,OAAAO,mBAAA,GAAAU,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAClBV,cAAA,GAAAK,KAAA,CAAAjC,MAAA,QAAAiC,KAAA,QAAAvB,SAAA,GAAAuB,KAAA,MAAyC,EAAE;cAC3CJ,WAAA,GAAAI,KAAA,CAAAjC,MAAA,QAAAiC,KAAA,QAAAvB,SAAA,GAAAuB,KAAA,MAAiC,EAAE;cACnCH,SAAA,GAAAG,KAAA,CAAAjC,MAAA,QAAAiC,KAAA,QAAAvB,SAAA,GAAAuB,KAAA,MAAqB,IAAI;cAEnBtB,MAAM,GAAGH,eAAe,CAACC,KAAK,CAAC;cAC/BsB,WAAW,GAAAQ,aAAA,CAAAA,aAAA,KAAQX,cAAc;gBAAEY,MAAM,EAAE7B;cAAM;cAAAyB,QAAA,CAAAC,IAAA;cAAAD,QAAA,CAAAE,IAAA;cAAA,OAGnC,IAAI,CAACnB,EAAE,CAACsB,GAAG,CAC3Bd,YAAY,EACZlC,kBAAkB,CAACgB,KAAK,CAAC,EACzBsB,WAAW,CACZ;YAAA;cAJKC,GAAG,GAAAI,QAAA,CAAAM,IAAA;cAAA,OAAAN,QAAA,CAAAO,MAAA,WAMF/B,UAAU,CAACgC,eAAe,CAACZ,GAAG,EAAErB,MAAM,EAAEmB,SAAS,EAAED,WAAW,CAAC;YAAA;cAAAO,QAAA,CAAAC,IAAA;cAAAD,QAAA,CAAAS,EAAA,GAAAT,QAAA;cAAA,MAEhExB,UAAU,CAACkC,oBAAoB,CAAAV,QAAA,CAAAS,EAAI,CAAC;YAAA;YAAA;cAAA,OAAAT,QAAA,CAAAW,IAAA;UAAA;QAAA,GAAArB,OAAA;MAAA,CAE7C;MAAA,SAAAe,IAAAO,EAAA,EAAAC,GAAA;QAAA,OAAA3B,IAAA,CAAA4B,KAAA,OAAAjC,SAAA;MAAA;MAAA,OAAAwB,GAAA;IAAA;IAED;;;;;EAAA;IAAA9C,GAAA;IAAA0B,KAAA;MAAA,IAAA8B,KAAA,GAAA5B,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAKA,SAAA2B,SACEzB,YAAoB,EACpB0B,IAAS;QAAA,IAAAzB,cAAA;UAAAnB,KAAA;UAAAqB,SAAA;UAAAC,WAAA;UAAAC,GAAA;UAAAsB,MAAA,GAAArC,SAAA;QAAA,OAAAO,mBAAA,GAAAU,IAAA,UAAAqB,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAAnB,IAAA,GAAAmB,SAAA,CAAAlB,IAAA;YAAA;cACTV,cAAA,GAAA0B,MAAA,CAAAtD,MAAA,QAAAsD,MAAA,QAAA5C,SAAA,GAAA4C,MAAA,MAAyC,EAAE;cAC3C7C,KAAkB,GAAA6C,MAAA,CAAAtD,MAAA,OAAAsD,MAAA,MAAA5C,SAAA;cAClBoB,SAAA,GAAAwB,MAAA,CAAAtD,MAAA,QAAAsD,MAAA,QAAA5C,SAAA,GAAA4C,MAAA,MAAqB,IAAI;cAEnBvB,WAAW,GAAAQ,aAAA;gBACf,cAAc,EAAE;cAAkB,GAC/BtC,eAAe,CAAC2B,cAAc,CAAC;cAAA4B,SAAA,CAAAnB,IAAA;cAAAmB,SAAA,CAAAlB,IAAA;cAAA,OAIhB,IAAI,CAACnB,EAAE,CAACsC,IAAI,CAC5B9B,YAAY,EACZf,UAAU,CAAC8C,aAAa,CAACL,IAAI,EAAEtB,WAAW,CAAC,EAC3CtB,KAAK,EACLsB,WAAW,CACZ;YAAA;cALKC,GAAG,GAAAwB,SAAA,CAAAd,IAAA;cAAA,OAAAc,SAAA,CAAAb,MAAA,WAOF/B,UAAU,CAACgC,eAAe,CAACZ,GAAG,EAAE,kBAAkB,EAAEF,SAAS,CAAC;YAAA;cAAA0B,SAAA,CAAAnB,IAAA;cAAAmB,SAAA,CAAAX,EAAA,GAAAW,SAAA;cAAA,MAE/D5C,UAAU,CAACkC,oBAAoB,CAAAU,SAAA,CAAAX,EAAI,CAAC;YAAA;YAAA;cAAA,OAAAW,SAAA,CAAAT,IAAA;UAAA;QAAA,GAAAK,QAAA;MAAA,CAE7C;MAAA,SAAAK,KAAAE,GAAA,EAAAC,GAAA;QAAA,OAAAT,KAAA,CAAAD,KAAA,OAAAjC,SAAA;MAAA;MAAA,OAAAwC,IAAA;IAAA;IAED;;;;;EAAA;IAAA9D,GAAA;IAAA0B,KAAA;MAAA,IAAAwC,QAAA,GAAAtC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAKA,SAAAqC,SACEnC,YAAoB,EACpB0B,IAAS;QAAA,IAAAzB,cAAA;UAAAE,SAAA;UAAAC,WAAA;UAAAC,GAAA;UAAA+B,MAAA,GAAA9C,SAAA;QAAA,OAAAO,mBAAA,GAAAU,IAAA,UAAA8B,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAA5B,IAAA,GAAA4B,SAAA,CAAA3B,IAAA;YAAA;cACTV,cAAA,GAAAmC,MAAA,CAAA/D,MAAA,QAAA+D,MAAA,QAAArD,SAAA,GAAAqD,MAAA,MAAyC,EAAE;cAC3CjC,SAAA,GAAAiC,MAAA,CAAA/D,MAAA,QAAA+D,MAAA,QAAArD,SAAA,GAAAqD,MAAA,MAAqB,IAAI;cAEnBhC,WAAW,GAAAQ,aAAA;gBACf,cAAc,EAAE;cAAkB,GAC/BtC,eAAe,CAAC2B,cAAc,CAAC;cAAAqC,SAAA,CAAA3B,IAAA;cAAA,OAGlB,IAAI,CAACnB,EAAE,CAAC+C,MAAM,CAC9BvC,YAAY,EACZf,UAAU,CAAC8C,aAAa,CAACL,IAAI,EAAEtB,WAAW,CAAC,EAC3CrB,SAAS,EACTqB,WAAW,CACZ;YAAA;cALKC,GAAG,GAAAiC,SAAA,CAAAvB,IAAA;cAAA,OAAAuB,SAAA,CAAAtB,MAAA,WAOF/B,UAAU,CAACgC,eAAe,CAACZ,GAAG,EAAE,kBAAkB,EAAEF,SAAS,CAAC;YAAA;YAAA;cAAA,OAAAmC,SAAA,CAAAlB,IAAA;UAAA;QAAA,GAAAe,QAAA;MAAA,CACtE;MAAA,SAAAK,QAAAC,GAAA,EAAAC,GAAA;QAAA,OAAAR,QAAA,CAAAX,KAAA,OAAAjC,SAAA;MAAA;MAAA,OAAAkD,OAAA;IAAA;EAAA;IAAAxE,GAAA;IAAA0B,KAAA,EA5LM,SAAAiD,UACLC,IAAY,EACZC,MAAc,EACqB;MAAA,IAAnC3C,WAAA,GAAAZ,SAAA,CAAAjB,MAAA,QAAAiB,SAAA,QAAAP,SAAA,GAAAO,SAAA,MAAiC,EAAE;MAEnC,IAAI;QACF,IAAIrB,MAAM,CAACO,IAAI,CAAC0B,WAAW,CAAC,CAAC7B,MAAM,KAAK,CAAC,EAAE;UACzC,OAAOuE,IAAI,IAAIE,IAAI,CAACC,KAAK,CAACH,IAAI,CAAC;;QAEjC,OAAOA,IAAI,IAAIhF,KAAK,CAAC+E,SAAS,CAACC,IAAI,EAAE1C,WAAW,CAAC;OAClD,CAAC,OAAO8C,IAAI,EAAE;QACb,IAAMC,GAAG,GAA4BD,IAAI;QACzC;QACAC,GAAG,CAACC,WAAW,GAAGN,IAAI,IAAI,IAAI;QAC9B;QACAK,GAAG,CAACE,UAAU,GAAGN,MAAM;QACvB,MAAMI,GAAG;;IAEb;IAEA;;;;;;;;EAAA;IAAAjF,GAAA;IAAA0B,KAAA,EAQQ,SAAAqC,cACNL,IAAY,EACZzB,cAAsC;MAEtC,IAAI,CAACyB,IAAI,EAAE;QACT,OAAO,IAAI0B,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;;;MAE5B,IAAInD,cAAc,CAAC,cAAc,CAAC,KAAK,kBAAkB,EAAE;QACzD,OAAO,IAAImD,UAAU,CAACzF,MAAM,CAAC0F,IAAI,CAACP,IAAI,CAACQ,SAAS,CAAC5B,IAAI,CAAC,CAAC,CAAC;;MAE1D,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;QAC5B,OAAO,IAAI0B,UAAU,CAACzF,MAAM,CAAC0F,IAAI,CAAC3B,IAAI,CAAC,CAAC;;MAE1C,IAAIA,IAAI,YAAY0B,UAAU,EAAE;QAC9B,OAAO1B,IAAI;;MAEb,MAAM,IAAI6B,KAAK,CACb,6FAA6F,CAC9F;IACH;IAEA;;;;;EAAA;IAAAvF,GAAA;IAAA0B,KAAA,EAKQ,SAAAuB,gBACNZ,GAA2B,EAC3BrB,MAAkD,EAClDmB,SAAkB,EACiB;MAAA,IAAnCD,WAAA,GAAAZ,SAAA,CAAAjB,MAAA,QAAAiB,SAAA,QAAAP,SAAA,GAAAO,SAAA,MAAiC,EAAE;MAEnC,IAAMkE,IAAI,GAAKnD,GAAG,CAAZmD,IAAI;MACV,IAAIZ,IAAI;MAER,IAAI5D,MAAM,KAAK,qBAAqB,EAAE;QACpC4D,IAAI,GAAIY,IAAI,IAAI7F,MAAM,CAAC0F,IAAI,CAACG,IAAI,CAAC,CAACC,QAAQ,EAAE,IAAK,EAAE;;MAGrD,IAAItD,SAAS,IAAInB,MAAM,KAAK,kBAAkB,EAAE;QAC9CwE,IAAI,GAAGvE,UAAU,CAAC0D,SAAS,CAACC,IAAI,EAAEvC,GAAG,CAACwC,MAAM,EAAE3C,WAAW,CAAC;;MAG5D,OAAAU,aAAA,CAAAA,aAAA,KACKP,GAAG;QACNmD,IAAI,EAAJA,IAAI;QACJZ,IAAI,EAAJA,IAAI;QACJc,EAAE,EAAEC,IAAI,CAACC,KAAK,CAACvD,GAAG,CAACwC,MAAM,GAAG,GAAG,CAAC,KAAK;MAAC;IAE1C;IAEA;;;;;;EAAA;IAAA7E,GAAA;IAAA0B,KAAA,EAMQ,SAAAyB,qBAA4B8B,GAAG;MACrC,IAAIA,GAAG,CAACY,QAAQ,EAAE;QAChB;QACAZ,GAAG,CAACY,QAAQ,GAAG5E,UAAU,CAACgC,eAAe,CACvCgC,GAAG,CAACY,QAAQ,EACZ,kBAAkB,EAClB,IAAI,CACL;QACD;QACAZ,GAAG,CAACJ,MAAM,GAAGI,GAAG,CAACY,QAAQ,CAAChB,MAAM;;MAElC,OAAOI,GAAG;IACZ;EAAC;EAAA,OAAAhE,UAAA;AAAA;AAAA,SA9IkBA,UAAU,IAAA6E,OAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}